
Aula5-Pisca-Led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000534c  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040534c  0040534c  0001534c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009bc  20400000  00405354  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000000e0  204009bc  00405d10  000209bc  2**2
                  ALLOC
  4 .stack        00002004  20400a9c  00405df0  000209bc  2**0
                  ALLOC
  5 .heap         00000200  20402aa0  00407df4  000209bc  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209bc  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209ea  2**0
                  CONTENTS, READONLY
  8 .debug_info   00012583  00000000  00000000  00020a43  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002343  00000000  00000000  00032fc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00006800  00000000  00000000  00035309  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000b18  00000000  00000000  0003bb09  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ae0  00000000  00000000  0003c621  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001df13  00000000  00000000  0003d101  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000a5de  00000000  00000000  0005b014  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0008a9da  00000000  00000000  000655f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003be4  00000000  00000000  000effcc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	a0 2a 40 20 95 16 40 00 45 17 40 00 45 17 40 00     .*@ ..@.E.@.E.@.
  400010:	45 17 40 00 45 17 40 00 45 17 40 00 00 00 00 00     E.@.E.@.E.@.....
	...
  40002c:	45 17 40 00 45 17 40 00 00 00 00 00 45 17 40 00     E.@.E.@.....E.@.
  40003c:	05 20 40 00 45 17 40 00 45 17 40 00 45 17 40 00     . @.E.@.E.@.E.@.
  40004c:	45 17 40 00 45 17 40 00 45 17 40 00 45 17 40 00     E.@.E.@.E.@.E.@.
  40005c:	45 17 40 00 45 17 40 00 00 00 00 00 85 0e 40 00     E.@.E.@.......@.
  40006c:	9d 0e 40 00 b5 0e 40 00 45 17 40 00 45 17 40 00     ..@...@.E.@.E.@.
  40007c:	45 17 40 00 cd 0e 40 00 e5 0e 40 00 45 17 40 00     E.@...@...@.E.@.
  40008c:	45 17 40 00 45 17 40 00 45 17 40 00 45 17 40 00     E.@.E.@.E.@.E.@.
  40009c:	45 17 40 00 45 17 40 00 45 17 40 00 45 17 40 00     E.@.E.@.E.@.E.@.
  4000ac:	45 17 40 00 45 17 40 00 45 17 40 00 45 17 40 00     E.@.E.@.E.@.E.@.
  4000bc:	45 17 40 00 45 17 40 00 45 17 40 00 45 17 40 00     E.@.E.@.E.@.E.@.
  4000cc:	45 17 40 00 00 00 00 00 45 17 40 00 00 00 00 00     E.@.....E.@.....
  4000dc:	45 17 40 00 45 17 40 00 45 17 40 00 45 17 40 00     E.@.E.@.E.@.E.@.
  4000ec:	45 17 40 00 45 17 40 00 45 17 40 00 45 17 40 00     E.@.E.@.E.@.E.@.
  4000fc:	45 17 40 00 45 17 40 00 45 17 40 00 45 17 40 00     E.@.E.@.E.@.E.@.
  40010c:	45 17 40 00 45 17 40 00 00 00 00 00 00 00 00 00     E.@.E.@.........
  40011c:	00 00 00 00 45 17 40 00 45 17 40 00 45 17 40 00     ....E.@.E.@.E.@.
  40012c:	45 17 40 00 45 17 40 00 00 00 00 00 45 17 40 00     E.@.E.@.....E.@.
  40013c:	45 17 40 00                                         E.@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009bc 	.word	0x204009bc
  40015c:	00000000 	.word	0x00000000
  400160:	00405354 	.word	0x00405354

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00405354 	.word	0x00405354
  4001a0:	204009c0 	.word	0x204009c0
  4001a4:	00405354 	.word	0x00405354
  4001a8:	00000000 	.word	0x00000000

004001ac <osc_enable>:
#define OSC_MAINCK_XTAL_HZ      BOARD_FREQ_MAINCK_XTAL    //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ    BOARD_FREQ_MAINCK_BYPASS  //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  4001ac:	b580      	push	{r7, lr}
  4001ae:	b082      	sub	sp, #8
  4001b0:	af00      	add	r7, sp, #0
  4001b2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4001b4:	687b      	ldr	r3, [r7, #4]
  4001b6:	2b07      	cmp	r3, #7
  4001b8:	d831      	bhi.n	40021e <osc_enable+0x72>
  4001ba:	a201      	add	r2, pc, #4	; (adr r2, 4001c0 <osc_enable+0x14>)
  4001bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4001c0:	0040021d 	.word	0x0040021d
  4001c4:	004001e1 	.word	0x004001e1
  4001c8:	004001e9 	.word	0x004001e9
  4001cc:	004001f1 	.word	0x004001f1
  4001d0:	004001f9 	.word	0x004001f9
  4001d4:	00400201 	.word	0x00400201
  4001d8:	00400209 	.word	0x00400209
  4001dc:	00400213 	.word	0x00400213
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4001e0:	2000      	movs	r0, #0
  4001e2:	4b11      	ldr	r3, [pc, #68]	; (400228 <osc_enable+0x7c>)
  4001e4:	4798      	blx	r3
		break;
  4001e6:	e01a      	b.n	40021e <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  4001e8:	2001      	movs	r0, #1
  4001ea:	4b0f      	ldr	r3, [pc, #60]	; (400228 <osc_enable+0x7c>)
  4001ec:	4798      	blx	r3
		break;
  4001ee:	e016      	b.n	40021e <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  4001f0:	2000      	movs	r0, #0
  4001f2:	4b0e      	ldr	r3, [pc, #56]	; (40022c <osc_enable+0x80>)
  4001f4:	4798      	blx	r3
		break;
  4001f6:	e012      	b.n	40021e <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  4001f8:	2010      	movs	r0, #16
  4001fa:	4b0c      	ldr	r3, [pc, #48]	; (40022c <osc_enable+0x80>)
  4001fc:	4798      	blx	r3
		break;
  4001fe:	e00e      	b.n	40021e <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  400200:	2020      	movs	r0, #32
  400202:	4b0a      	ldr	r3, [pc, #40]	; (40022c <osc_enable+0x80>)
  400204:	4798      	blx	r3
		break;
  400206:	e00a      	b.n	40021e <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400208:	213e      	movs	r1, #62	; 0x3e
  40020a:	2000      	movs	r0, #0
  40020c:	4b08      	ldr	r3, [pc, #32]	; (400230 <osc_enable+0x84>)
  40020e:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400210:	e005      	b.n	40021e <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  400212:	213e      	movs	r1, #62	; 0x3e
  400214:	2001      	movs	r0, #1
  400216:	4b06      	ldr	r3, [pc, #24]	; (400230 <osc_enable+0x84>)
  400218:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  40021a:	e000      	b.n	40021e <osc_enable+0x72>
		break;
  40021c:	bf00      	nop
	}
}
  40021e:	bf00      	nop
  400220:	3708      	adds	r7, #8
  400222:	46bd      	mov	sp, r7
  400224:	bd80      	pop	{r7, pc}
  400226:	bf00      	nop
  400228:	00401081 	.word	0x00401081
  40022c:	004010ed 	.word	0x004010ed
  400230:	0040115d 	.word	0x0040115d

00400234 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  400234:	b580      	push	{r7, lr}
  400236:	b082      	sub	sp, #8
  400238:	af00      	add	r7, sp, #0
  40023a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40023c:	687b      	ldr	r3, [r7, #4]
  40023e:	2b07      	cmp	r3, #7
  400240:	d826      	bhi.n	400290 <osc_is_ready+0x5c>
  400242:	a201      	add	r2, pc, #4	; (adr r2, 400248 <osc_is_ready+0x14>)
  400244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400248:	00400269 	.word	0x00400269
  40024c:	0040026d 	.word	0x0040026d
  400250:	0040026d 	.word	0x0040026d
  400254:	0040027f 	.word	0x0040027f
  400258:	0040027f 	.word	0x0040027f
  40025c:	0040027f 	.word	0x0040027f
  400260:	0040027f 	.word	0x0040027f
  400264:	0040027f 	.word	0x0040027f
	case OSC_SLCK_32K_RC:
		return 1;
  400268:	2301      	movs	r3, #1
  40026a:	e012      	b.n	400292 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  40026c:	4b0b      	ldr	r3, [pc, #44]	; (40029c <osc_is_ready+0x68>)
  40026e:	4798      	blx	r3
  400270:	4603      	mov	r3, r0
  400272:	2b00      	cmp	r3, #0
  400274:	bf14      	ite	ne
  400276:	2301      	movne	r3, #1
  400278:	2300      	moveq	r3, #0
  40027a:	b2db      	uxtb	r3, r3
  40027c:	e009      	b.n	400292 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40027e:	4b08      	ldr	r3, [pc, #32]	; (4002a0 <osc_is_ready+0x6c>)
  400280:	4798      	blx	r3
  400282:	4603      	mov	r3, r0
  400284:	2b00      	cmp	r3, #0
  400286:	bf14      	ite	ne
  400288:	2301      	movne	r3, #1
  40028a:	2300      	moveq	r3, #0
  40028c:	b2db      	uxtb	r3, r3
  40028e:	e000      	b.n	400292 <osc_is_ready+0x5e>
	}

	return 0;
  400290:	2300      	movs	r3, #0
}
  400292:	4618      	mov	r0, r3
  400294:	3708      	adds	r7, #8
  400296:	46bd      	mov	sp, r7
  400298:	bd80      	pop	{r7, pc}
  40029a:	bf00      	nop
  40029c:	004010b9 	.word	0x004010b9
  4002a0:	004011d5 	.word	0x004011d5

004002a4 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4002a4:	b480      	push	{r7}
  4002a6:	b083      	sub	sp, #12
  4002a8:	af00      	add	r7, sp, #0
  4002aa:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4002ac:	687b      	ldr	r3, [r7, #4]
  4002ae:	2b07      	cmp	r3, #7
  4002b0:	d825      	bhi.n	4002fe <osc_get_rate+0x5a>
  4002b2:	a201      	add	r2, pc, #4	; (adr r2, 4002b8 <osc_get_rate+0x14>)
  4002b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4002b8:	004002d9 	.word	0x004002d9
  4002bc:	004002df 	.word	0x004002df
  4002c0:	004002e5 	.word	0x004002e5
  4002c4:	004002eb 	.word	0x004002eb
  4002c8:	004002ef 	.word	0x004002ef
  4002cc:	004002f3 	.word	0x004002f3
  4002d0:	004002f7 	.word	0x004002f7
  4002d4:	004002fb 	.word	0x004002fb
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4002d8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4002dc:	e010      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4002de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4002e2:	e00d      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4002e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4002e8:	e00a      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4002ea:	4b08      	ldr	r3, [pc, #32]	; (40030c <osc_get_rate+0x68>)
  4002ec:	e008      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4002ee:	4b08      	ldr	r3, [pc, #32]	; (400310 <osc_get_rate+0x6c>)
  4002f0:	e006      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4002f2:	4b08      	ldr	r3, [pc, #32]	; (400314 <osc_get_rate+0x70>)
  4002f4:	e004      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4002f6:	4b07      	ldr	r3, [pc, #28]	; (400314 <osc_get_rate+0x70>)
  4002f8:	e002      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4002fa:	4b06      	ldr	r3, [pc, #24]	; (400314 <osc_get_rate+0x70>)
  4002fc:	e000      	b.n	400300 <osc_get_rate+0x5c>
	}

	return 0;
  4002fe:	2300      	movs	r3, #0
}
  400300:	4618      	mov	r0, r3
  400302:	370c      	adds	r7, #12
  400304:	46bd      	mov	sp, r7
  400306:	f85d 7b04 	ldr.w	r7, [sp], #4
  40030a:	4770      	bx	lr
  40030c:	003d0900 	.word	0x003d0900
  400310:	007a1200 	.word	0x007a1200
  400314:	00b71b00 	.word	0x00b71b00

00400318 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400318:	b580      	push	{r7, lr}
  40031a:	b082      	sub	sp, #8
  40031c:	af00      	add	r7, sp, #0
  40031e:	4603      	mov	r3, r0
  400320:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  400322:	bf00      	nop
  400324:	79fb      	ldrb	r3, [r7, #7]
  400326:	4618      	mov	r0, r3
  400328:	4b05      	ldr	r3, [pc, #20]	; (400340 <osc_wait_ready+0x28>)
  40032a:	4798      	blx	r3
  40032c:	4603      	mov	r3, r0
  40032e:	f083 0301 	eor.w	r3, r3, #1
  400332:	b2db      	uxtb	r3, r3
  400334:	2b00      	cmp	r3, #0
  400336:	d1f5      	bne.n	400324 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  400338:	bf00      	nop
  40033a:	3708      	adds	r7, #8
  40033c:	46bd      	mov	sp, r7
  40033e:	bd80      	pop	{r7, pc}
  400340:	00400235 	.word	0x00400235

00400344 <pll_config_init>:
 * hardware mul+1 is hidden in this implementation. Use mul as mul effective
 * value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  400344:	b580      	push	{r7, lr}
  400346:	b086      	sub	sp, #24
  400348:	af00      	add	r7, sp, #0
  40034a:	60f8      	str	r0, [r7, #12]
  40034c:	607a      	str	r2, [r7, #4]
  40034e:	603b      	str	r3, [r7, #0]
  400350:	460b      	mov	r3, r1
  400352:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
  400354:	687b      	ldr	r3, [r7, #4]
  400356:	2b00      	cmp	r3, #0
  400358:	d107      	bne.n	40036a <pll_config_init+0x26>
  40035a:	683b      	ldr	r3, [r7, #0]
  40035c:	2b00      	cmp	r3, #0
  40035e:	d104      	bne.n	40036a <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
  400360:	68fb      	ldr	r3, [r7, #12]
  400362:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
  400366:	601a      	str	r2, [r3, #0]
  400368:	e019      	b.n	40039e <pll_config_init+0x5a>
	} else { /* PLLA */
	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  40036a:	7afb      	ldrb	r3, [r7, #11]
  40036c:	4618      	mov	r0, r3
  40036e:	4b0e      	ldr	r3, [pc, #56]	; (4003a8 <pll_config_init+0x64>)
  400370:	4798      	blx	r3
  400372:	4602      	mov	r2, r0
  400374:	687b      	ldr	r3, [r7, #4]
  400376:	fbb2 f3f3 	udiv	r3, r2, r3
  40037a:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  40037c:	697b      	ldr	r3, [r7, #20]
  40037e:	683a      	ldr	r2, [r7, #0]
  400380:	fb02 f303 	mul.w	r3, r2, r3
  400384:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  400386:	683b      	ldr	r3, [r7, #0]
  400388:	3b01      	subs	r3, #1
  40038a:	041a      	lsls	r2, r3, #16
  40038c:	4b07      	ldr	r3, [pc, #28]	; (4003ac <pll_config_init+0x68>)
  40038e:	4013      	ands	r3, r2
  400390:	687a      	ldr	r2, [r7, #4]
  400392:	b2d2      	uxtb	r2, r2
  400394:	4313      	orrs	r3, r2
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  400396:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  40039a:	68fb      	ldr	r3, [r7, #12]
  40039c:	601a      	str	r2, [r3, #0]
	}
}
  40039e:	bf00      	nop
  4003a0:	3718      	adds	r7, #24
  4003a2:	46bd      	mov	sp, r7
  4003a4:	bd80      	pop	{r7, pc}
  4003a6:	bf00      	nop
  4003a8:	004002a5 	.word	0x004002a5
  4003ac:	07ff0000 	.word	0x07ff0000

004003b0 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  4003b0:	b580      	push	{r7, lr}
  4003b2:	b082      	sub	sp, #8
  4003b4:	af00      	add	r7, sp, #0
  4003b6:	6078      	str	r0, [r7, #4]
  4003b8:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003ba:	683b      	ldr	r3, [r7, #0]
  4003bc:	2b00      	cmp	r3, #0
  4003be:	d108      	bne.n	4003d2 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  4003c0:	4b09      	ldr	r3, [pc, #36]	; (4003e8 <pll_enable+0x38>)
  4003c2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4003c4:	4a09      	ldr	r2, [pc, #36]	; (4003ec <pll_enable+0x3c>)
  4003c6:	687b      	ldr	r3, [r7, #4]
  4003c8:	681b      	ldr	r3, [r3, #0]
  4003ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4003ce:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
  4003d0:	e005      	b.n	4003de <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
  4003d2:	4a06      	ldr	r2, [pc, #24]	; (4003ec <pll_enable+0x3c>)
  4003d4:	687b      	ldr	r3, [r7, #4]
  4003d6:	681b      	ldr	r3, [r3, #0]
  4003d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4003dc:	61d3      	str	r3, [r2, #28]
}
  4003de:	bf00      	nop
  4003e0:	3708      	adds	r7, #8
  4003e2:	46bd      	mov	sp, r7
  4003e4:	bd80      	pop	{r7, pc}
  4003e6:	bf00      	nop
  4003e8:	004011f1 	.word	0x004011f1
  4003ec:	400e0600 	.word	0x400e0600

004003f0 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  4003f0:	b580      	push	{r7, lr}
  4003f2:	b082      	sub	sp, #8
  4003f4:	af00      	add	r7, sp, #0
  4003f6:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003f8:	687b      	ldr	r3, [r7, #4]
  4003fa:	2b00      	cmp	r3, #0
  4003fc:	d103      	bne.n	400406 <pll_is_locked+0x16>
	return pmc_is_locked_pllack();
  4003fe:	4b05      	ldr	r3, [pc, #20]	; (400414 <pll_is_locked+0x24>)
  400400:	4798      	blx	r3
  400402:	4603      	mov	r3, r0
  400404:	e002      	b.n	40040c <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
  400406:	4b04      	ldr	r3, [pc, #16]	; (400418 <pll_is_locked+0x28>)
  400408:	4798      	blx	r3
  40040a:	4603      	mov	r3, r0
	}
}
  40040c:	4618      	mov	r0, r3
  40040e:	3708      	adds	r7, #8
  400410:	46bd      	mov	sp, r7
  400412:	bd80      	pop	{r7, pc}
  400414:	0040120d 	.word	0x0040120d
  400418:	00401229 	.word	0x00401229

0040041c <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  40041c:	b580      	push	{r7, lr}
  40041e:	b082      	sub	sp, #8
  400420:	af00      	add	r7, sp, #0
  400422:	4603      	mov	r3, r0
  400424:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  400426:	79fb      	ldrb	r3, [r7, #7]
  400428:	3b03      	subs	r3, #3
  40042a:	2b04      	cmp	r3, #4
  40042c:	d808      	bhi.n	400440 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  40042e:	79fb      	ldrb	r3, [r7, #7]
  400430:	4618      	mov	r0, r3
  400432:	4b06      	ldr	r3, [pc, #24]	; (40044c <pll_enable_source+0x30>)
  400434:	4798      	blx	r3
		osc_wait_ready(e_src);
  400436:	79fb      	ldrb	r3, [r7, #7]
  400438:	4618      	mov	r0, r3
  40043a:	4b05      	ldr	r3, [pc, #20]	; (400450 <pll_enable_source+0x34>)
  40043c:	4798      	blx	r3
		break;
  40043e:	e000      	b.n	400442 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  400440:	bf00      	nop
	}
}
  400442:	bf00      	nop
  400444:	3708      	adds	r7, #8
  400446:	46bd      	mov	sp, r7
  400448:	bd80      	pop	{r7, pc}
  40044a:	bf00      	nop
  40044c:	004001ad 	.word	0x004001ad
  400450:	00400319 	.word	0x00400319

00400454 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  400454:	b580      	push	{r7, lr}
  400456:	b082      	sub	sp, #8
  400458:	af00      	add	r7, sp, #0
  40045a:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40045c:	bf00      	nop
  40045e:	6878      	ldr	r0, [r7, #4]
  400460:	4b04      	ldr	r3, [pc, #16]	; (400474 <pll_wait_for_lock+0x20>)
  400462:	4798      	blx	r3
  400464:	4603      	mov	r3, r0
  400466:	2b00      	cmp	r3, #0
  400468:	d0f9      	beq.n	40045e <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  40046a:	2300      	movs	r3, #0
}
  40046c:	4618      	mov	r0, r3
  40046e:	3708      	adds	r7, #8
  400470:	46bd      	mov	sp, r7
  400472:	bd80      	pop	{r7, pc}
  400474:	004003f1 	.word	0x004003f1

00400478 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400478:	b580      	push	{r7, lr}
  40047a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  40047c:	2006      	movs	r0, #6
  40047e:	4b05      	ldr	r3, [pc, #20]	; (400494 <sysclk_get_main_hz+0x1c>)
  400480:	4798      	blx	r3
  400482:	4602      	mov	r2, r0
  400484:	4613      	mov	r3, r2
  400486:	009b      	lsls	r3, r3, #2
  400488:	4413      	add	r3, r2
  40048a:	009a      	lsls	r2, r3, #2
  40048c:	4413      	add	r3, r2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  40048e:	4618      	mov	r0, r3
  400490:	bd80      	pop	{r7, pc}
  400492:	bf00      	nop
  400494:	004002a5 	.word	0x004002a5

00400498 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400498:	b580      	push	{r7, lr}
  40049a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  40049c:	4b02      	ldr	r3, [pc, #8]	; (4004a8 <sysclk_get_cpu_hz+0x10>)
  40049e:	4798      	blx	r3
  4004a0:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4004a2:	4618      	mov	r0, r3
  4004a4:	bd80      	pop	{r7, pc}
  4004a6:	bf00      	nop
  4004a8:	00400479 	.word	0x00400479

004004ac <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4004ac:	b590      	push	{r4, r7, lr}
  4004ae:	b083      	sub	sp, #12
  4004b0:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4004b2:	4813      	ldr	r0, [pc, #76]	; (400500 <sysclk_init+0x54>)
  4004b4:	4b13      	ldr	r3, [pc, #76]	; (400504 <sysclk_init+0x58>)
  4004b6:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
  4004b8:	2006      	movs	r0, #6
  4004ba:	4b13      	ldr	r3, [pc, #76]	; (400508 <sysclk_init+0x5c>)
  4004bc:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  4004be:	1d38      	adds	r0, r7, #4
  4004c0:	2319      	movs	r3, #25
  4004c2:	2201      	movs	r2, #1
  4004c4:	2106      	movs	r1, #6
  4004c6:	4c11      	ldr	r4, [pc, #68]	; (40050c <sysclk_init+0x60>)
  4004c8:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  4004ca:	1d3b      	adds	r3, r7, #4
  4004cc:	2100      	movs	r1, #0
  4004ce:	4618      	mov	r0, r3
  4004d0:	4b0f      	ldr	r3, [pc, #60]	; (400510 <sysclk_init+0x64>)
  4004d2:	4798      	blx	r3
		pll_wait_for_lock(0);
  4004d4:	2000      	movs	r0, #0
  4004d6:	4b0f      	ldr	r3, [pc, #60]	; (400514 <sysclk_init+0x68>)
  4004d8:	4798      	blx	r3
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4004da:	2002      	movs	r0, #2
  4004dc:	4b0e      	ldr	r3, [pc, #56]	; (400518 <sysclk_init+0x6c>)
  4004de:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4004e0:	2000      	movs	r0, #0
  4004e2:	4b0e      	ldr	r3, [pc, #56]	; (40051c <sysclk_init+0x70>)
  4004e4:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4004e6:	4b0e      	ldr	r3, [pc, #56]	; (400520 <sysclk_init+0x74>)
  4004e8:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4004ea:	4b0e      	ldr	r3, [pc, #56]	; (400524 <sysclk_init+0x78>)
  4004ec:	4798      	blx	r3
  4004ee:	4603      	mov	r3, r0
  4004f0:	4618      	mov	r0, r3
  4004f2:	4b04      	ldr	r3, [pc, #16]	; (400504 <sysclk_init+0x58>)
  4004f4:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  4004f6:	bf00      	nop
  4004f8:	370c      	adds	r7, #12
  4004fa:	46bd      	mov	sp, r7
  4004fc:	bd90      	pop	{r4, r7, pc}
  4004fe:	bf00      	nop
  400500:	11e1a300 	.word	0x11e1a300
  400504:	004018b5 	.word	0x004018b5
  400508:	0040041d 	.word	0x0040041d
  40050c:	00400345 	.word	0x00400345
  400510:	004003b1 	.word	0x004003b1
  400514:	00400455 	.word	0x00400455
  400518:	00400f81 	.word	0x00400f81
  40051c:	00400ffd 	.word	0x00400ffd
  400520:	0040174d 	.word	0x0040174d
  400524:	00400499 	.word	0x00400499

00400528 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400528:	b580      	push	{r7, lr}
  40052a:	b086      	sub	sp, #24
  40052c:	af00      	add	r7, sp, #0
  40052e:	60f8      	str	r0, [r7, #12]
  400530:	60b9      	str	r1, [r7, #8]
  400532:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  400534:	2300      	movs	r3, #0
  400536:	617b      	str	r3, [r7, #20]

	if (file != 0) {
  400538:	68fb      	ldr	r3, [r7, #12]
  40053a:	2b00      	cmp	r3, #0
  40053c:	d012      	beq.n	400564 <_read+0x3c>
		return -1;
  40053e:	f04f 33ff 	mov.w	r3, #4294967295
  400542:	e013      	b.n	40056c <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
  400544:	4b0b      	ldr	r3, [pc, #44]	; (400574 <_read+0x4c>)
  400546:	681b      	ldr	r3, [r3, #0]
  400548:	4a0b      	ldr	r2, [pc, #44]	; (400578 <_read+0x50>)
  40054a:	6812      	ldr	r2, [r2, #0]
  40054c:	68b9      	ldr	r1, [r7, #8]
  40054e:	4610      	mov	r0, r2
  400550:	4798      	blx	r3
		ptr++;
  400552:	68bb      	ldr	r3, [r7, #8]
  400554:	3301      	adds	r3, #1
  400556:	60bb      	str	r3, [r7, #8]
		nChars++;
  400558:	697b      	ldr	r3, [r7, #20]
  40055a:	3301      	adds	r3, #1
  40055c:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
  40055e:	687b      	ldr	r3, [r7, #4]
  400560:	3b01      	subs	r3, #1
  400562:	607b      	str	r3, [r7, #4]
  400564:	687b      	ldr	r3, [r7, #4]
  400566:	2b00      	cmp	r3, #0
  400568:	dcec      	bgt.n	400544 <_read+0x1c>
	}
	return nChars;
  40056a:	697b      	ldr	r3, [r7, #20]
}
  40056c:	4618      	mov	r0, r3
  40056e:	3718      	adds	r7, #24
  400570:	46bd      	mov	sp, r7
  400572:	bd80      	pop	{r7, pc}
  400574:	20400a8c 	.word	0x20400a8c
  400578:	20400a94 	.word	0x20400a94

0040057c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  40057c:	b580      	push	{r7, lr}
  40057e:	b086      	sub	sp, #24
  400580:	af00      	add	r7, sp, #0
  400582:	60f8      	str	r0, [r7, #12]
  400584:	60b9      	str	r1, [r7, #8]
  400586:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  400588:	2300      	movs	r3, #0
  40058a:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
  40058c:	68fb      	ldr	r3, [r7, #12]
  40058e:	2b01      	cmp	r3, #1
  400590:	d01e      	beq.n	4005d0 <_write+0x54>
  400592:	68fb      	ldr	r3, [r7, #12]
  400594:	2b02      	cmp	r3, #2
  400596:	d01b      	beq.n	4005d0 <_write+0x54>
  400598:	68fb      	ldr	r3, [r7, #12]
  40059a:	2b03      	cmp	r3, #3
  40059c:	d018      	beq.n	4005d0 <_write+0x54>
		return -1;
  40059e:	f04f 33ff 	mov.w	r3, #4294967295
  4005a2:	e019      	b.n	4005d8 <_write+0x5c>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4005a4:	4b0e      	ldr	r3, [pc, #56]	; (4005e0 <_write+0x64>)
  4005a6:	681a      	ldr	r2, [r3, #0]
  4005a8:	4b0e      	ldr	r3, [pc, #56]	; (4005e4 <_write+0x68>)
  4005aa:	6818      	ldr	r0, [r3, #0]
  4005ac:	68bb      	ldr	r3, [r7, #8]
  4005ae:	1c59      	adds	r1, r3, #1
  4005b0:	60b9      	str	r1, [r7, #8]
  4005b2:	781b      	ldrb	r3, [r3, #0]
  4005b4:	4619      	mov	r1, r3
  4005b6:	4790      	blx	r2
  4005b8:	4603      	mov	r3, r0
  4005ba:	2b00      	cmp	r3, #0
  4005bc:	da02      	bge.n	4005c4 <_write+0x48>
			return -1;
  4005be:	f04f 33ff 	mov.w	r3, #4294967295
  4005c2:	e009      	b.n	4005d8 <_write+0x5c>
		}
		++nChars;
  4005c4:	697b      	ldr	r3, [r7, #20]
  4005c6:	3301      	adds	r3, #1
  4005c8:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
  4005ca:	687b      	ldr	r3, [r7, #4]
  4005cc:	3b01      	subs	r3, #1
  4005ce:	607b      	str	r3, [r7, #4]
  4005d0:	687b      	ldr	r3, [r7, #4]
  4005d2:	2b00      	cmp	r3, #0
  4005d4:	d1e6      	bne.n	4005a4 <_write+0x28>
	}
	return nChars;
  4005d6:	697b      	ldr	r3, [r7, #20]
}
  4005d8:	4618      	mov	r0, r3
  4005da:	3718      	adds	r7, #24
  4005dc:	46bd      	mov	sp, r7
  4005de:	bd80      	pop	{r7, pc}
  4005e0:	20400a90 	.word	0x20400a90
  4005e4:	20400a94 	.word	0x20400a94

004005e8 <SCB_EnableICache>:
/** \brief Enable I-Cache

    The function turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache(void)
{
  4005e8:	b480      	push	{r7}
  4005ea:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4005ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4005f0:	f3bf 8f6f 	isb	sy
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  4005f4:	4b09      	ldr	r3, [pc, #36]	; (40061c <SCB_EnableICache+0x34>)
  4005f6:	2200      	movs	r2, #0
  4005f8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  4005fc:	4a07      	ldr	r2, [pc, #28]	; (40061c <SCB_EnableICache+0x34>)
  4005fe:	4b07      	ldr	r3, [pc, #28]	; (40061c <SCB_EnableICache+0x34>)
  400600:	695b      	ldr	r3, [r3, #20]
  400602:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  400606:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb");
  400608:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40060c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
  400610:	bf00      	nop
  400612:	46bd      	mov	sp, r7
  400614:	f85d 7b04 	ldr.w	r7, [sp], #4
  400618:	4770      	bx	lr
  40061a:	bf00      	nop
  40061c:	e000ed00 	.word	0xe000ed00

00400620 <SCB_EnableDCache>:
/** \brief Enable D-Cache

    The function turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache(void)
{
  400620:	b480      	push	{r7}
  400622:	b08b      	sub	sp, #44	; 0x2c
  400624:	af00      	add	r7, sp, #0
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  400626:	4b26      	ldr	r3, [pc, #152]	; (4006c0 <SCB_EnableDCache+0xa0>)
  400628:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
  40062c:	61fb      	str	r3, [r7, #28]
    sets    = CCSIDR_SETS(ccsidr);
  40062e:	69fb      	ldr	r3, [r7, #28]
  400630:	0b5b      	lsrs	r3, r3, #13
  400632:	f3c3 030e 	ubfx	r3, r3, #0, #15
  400636:	627b      	str	r3, [r7, #36]	; 0x24
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  400638:	69fb      	ldr	r3, [r7, #28]
  40063a:	f003 0307 	and.w	r3, r3, #7
  40063e:	3304      	adds	r3, #4
  400640:	61bb      	str	r3, [r7, #24]
    ways    = CCSIDR_WAYS(ccsidr);
  400642:	69fb      	ldr	r3, [r7, #28]
  400644:	08db      	lsrs	r3, r3, #3
  400646:	f3c3 0309 	ubfx	r3, r3, #0, #10
  40064a:	617b      	str	r3, [r7, #20]
  40064c:	697b      	ldr	r3, [r7, #20]
  40064e:	60bb      	str	r3, [r7, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  400650:	68bb      	ldr	r3, [r7, #8]
  400652:	fab3 f383 	clz	r3, r3
  400656:	607b      	str	r3, [r7, #4]
   return ((uint8_t) result);    /* Add explicit type cast here */
  400658:	687b      	ldr	r3, [r7, #4]
  40065a:	b2db      	uxtb	r3, r3
    wshift  = __CLZ(ways) & 0x1f;
  40065c:	f003 031f 	and.w	r3, r3, #31
  400660:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dsb");
  400662:	f3bf 8f4f 	dsb	sy

    __DSB();

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
  400666:	697b      	ldr	r3, [r7, #20]
  400668:	623b      	str	r3, [r7, #32]
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
  40066a:	6a3a      	ldr	r2, [r7, #32]
  40066c:	693b      	ldr	r3, [r7, #16]
  40066e:	fa02 f303 	lsl.w	r3, r2, r3
  400672:	4619      	mov	r1, r3
  400674:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  400676:	69bb      	ldr	r3, [r7, #24]
  400678:	fa02 f303 	lsl.w	r3, r2, r3
  40067c:	430b      	orrs	r3, r1
  40067e:	60fb      	str	r3, [r7, #12]
              SCB->DCISW = sw;
  400680:	4a0f      	ldr	r2, [pc, #60]	; (4006c0 <SCB_EnableDCache+0xa0>)
  400682:	68fb      	ldr	r3, [r7, #12]
  400684:	f8c2 3260 	str.w	r3, [r2, #608]	; 0x260
            } while(tmpways--);
  400688:	6a3b      	ldr	r3, [r7, #32]
  40068a:	1e5a      	subs	r2, r3, #1
  40068c:	623a      	str	r2, [r7, #32]
  40068e:	2b00      	cmp	r3, #0
  400690:	d1eb      	bne.n	40066a <SCB_EnableDCache+0x4a>
        } while(sets--);
  400692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400694:	1e5a      	subs	r2, r3, #1
  400696:	627a      	str	r2, [r7, #36]	; 0x24
  400698:	2b00      	cmp	r3, #0
  40069a:	d1e4      	bne.n	400666 <SCB_EnableDCache+0x46>
  40069c:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  4006a0:	4a07      	ldr	r2, [pc, #28]	; (4006c0 <SCB_EnableDCache+0xa0>)
  4006a2:	4b07      	ldr	r3, [pc, #28]	; (4006c0 <SCB_EnableDCache+0xa0>)
  4006a4:	695b      	ldr	r3, [r3, #20]
  4006a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4006aa:	6153      	str	r3, [r2, #20]
  4006ac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4006b0:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
  4006b4:	bf00      	nop
  4006b6:	372c      	adds	r7, #44	; 0x2c
  4006b8:	46bd      	mov	sp, r7
  4006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
  4006be:	4770      	bx	lr
  4006c0:	e000ed00 	.word	0xe000ed00

004006c4 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  4006c4:	b580      	push	{r7, lr}
  4006c6:	b082      	sub	sp, #8
  4006c8:	af00      	add	r7, sp, #0
  4006ca:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  4006cc:	6878      	ldr	r0, [r7, #4]
  4006ce:	4b03      	ldr	r3, [pc, #12]	; (4006dc <sysclk_enable_peripheral_clock+0x18>)
  4006d0:	4798      	blx	r3
}
  4006d2:	bf00      	nop
  4006d4:	3708      	adds	r7, #8
  4006d6:	46bd      	mov	sp, r7
  4006d8:	bd80      	pop	{r7, pc}
  4006da:	bf00      	nop
  4006dc:	00401245 	.word	0x00401245

004006e0 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  4006e0:	b580      	push	{r7, lr}
  4006e2:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  4006e4:	200a      	movs	r0, #10
  4006e6:	4b08      	ldr	r3, [pc, #32]	; (400708 <ioport_init+0x28>)
  4006e8:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  4006ea:	200b      	movs	r0, #11
  4006ec:	4b06      	ldr	r3, [pc, #24]	; (400708 <ioport_init+0x28>)
  4006ee:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
  4006f0:	200c      	movs	r0, #12
  4006f2:	4b05      	ldr	r3, [pc, #20]	; (400708 <ioport_init+0x28>)
  4006f4:	4798      	blx	r3
#endif
#ifdef ID_PIOD
	sysclk_enable_peripheral_clock(ID_PIOD);
  4006f6:	2010      	movs	r0, #16
  4006f8:	4b03      	ldr	r3, [pc, #12]	; (400708 <ioport_init+0x28>)
  4006fa:	4798      	blx	r3
#endif
#ifdef ID_PIOE
	sysclk_enable_peripheral_clock(ID_PIOE);
  4006fc:	2011      	movs	r0, #17
  4006fe:	4b02      	ldr	r3, [pc, #8]	; (400708 <ioport_init+0x28>)
  400700:	4798      	blx	r3
	arch_ioport_init();
}
  400702:	bf00      	nop
  400704:	bd80      	pop	{r7, pc}
  400706:	bf00      	nop
  400708:	004006c5 	.word	0x004006c5

0040070c <ioport_disable_pin>:
 *        IOPORT_CREATE_PIN().
 *
 * \param pin IOPORT pin to disable
 */
static inline void ioport_disable_pin(ioport_pin_t pin)
{
  40070c:	b480      	push	{r7}
  40070e:	b089      	sub	sp, #36	; 0x24
  400710:	af00      	add	r7, sp, #0
  400712:	6078      	str	r0, [r7, #4]
  400714:	687b      	ldr	r3, [r7, #4]
  400716:	61fb      	str	r3, [r7, #28]
  400718:	69fb      	ldr	r3, [r7, #28]
  40071a:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  40071c:	69bb      	ldr	r3, [r7, #24]
  40071e:	095a      	lsrs	r2, r3, #5
  400720:	69fb      	ldr	r3, [r7, #28]
  400722:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  400724:	697b      	ldr	r3, [r7, #20]
  400726:	f003 031f 	and.w	r3, r3, #31
  40072a:	2101      	movs	r1, #1
  40072c:	fa01 f303 	lsl.w	r3, r1, r3
  400730:	613a      	str	r2, [r7, #16]
  400732:	60fb      	str	r3, [r7, #12]
  400734:	693b      	ldr	r3, [r7, #16]
  400736:	60bb      	str	r3, [r7, #8]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400738:	68ba      	ldr	r2, [r7, #8]
  40073a:	4b06      	ldr	r3, [pc, #24]	; (400754 <ioport_disable_pin+0x48>)
  40073c:	4413      	add	r3, r2
  40073e:	025b      	lsls	r3, r3, #9
  400740:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400742:	68fb      	ldr	r3, [r7, #12]
  400744:	6053      	str	r3, [r2, #4]
	arch_ioport_disable_pin(pin);
}
  400746:	bf00      	nop
  400748:	3724      	adds	r7, #36	; 0x24
  40074a:	46bd      	mov	sp, r7
  40074c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400750:	4770      	bx	lr
  400752:	bf00      	nop
  400754:	00200707 	.word	0x00200707

00400758 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  400758:	b480      	push	{r7}
  40075a:	b08d      	sub	sp, #52	; 0x34
  40075c:	af00      	add	r7, sp, #0
  40075e:	6078      	str	r0, [r7, #4]
  400760:	6039      	str	r1, [r7, #0]
  400762:	687b      	ldr	r3, [r7, #4]
  400764:	62fb      	str	r3, [r7, #44]	; 0x2c
  400766:	683b      	ldr	r3, [r7, #0]
  400768:	62bb      	str	r3, [r7, #40]	; 0x28
  40076a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40076c:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  40076e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400770:	095a      	lsrs	r2, r3, #5
  400772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400774:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  400776:	6a3b      	ldr	r3, [r7, #32]
  400778:	f003 031f 	and.w	r3, r3, #31
  40077c:	2101      	movs	r1, #1
  40077e:	fa01 f303 	lsl.w	r3, r1, r3
  400782:	61fa      	str	r2, [r7, #28]
  400784:	61bb      	str	r3, [r7, #24]
  400786:	6abb      	ldr	r3, [r7, #40]	; 0x28
  400788:	617b      	str	r3, [r7, #20]
  40078a:	69fb      	ldr	r3, [r7, #28]
  40078c:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40078e:	693a      	ldr	r2, [r7, #16]
  400790:	4b37      	ldr	r3, [pc, #220]	; (400870 <ioport_set_pin_mode+0x118>)
  400792:	4413      	add	r3, r2
  400794:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  400796:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  400798:	697b      	ldr	r3, [r7, #20]
  40079a:	f003 0308 	and.w	r3, r3, #8
  40079e:	2b00      	cmp	r3, #0
  4007a0:	d003      	beq.n	4007aa <ioport_set_pin_mode+0x52>
		base->PIO_PUER = mask;
  4007a2:	68fb      	ldr	r3, [r7, #12]
  4007a4:	69ba      	ldr	r2, [r7, #24]
  4007a6:	665a      	str	r2, [r3, #100]	; 0x64
  4007a8:	e002      	b.n	4007b0 <ioport_set_pin_mode+0x58>
	} else {
		base->PIO_PUDR = mask;
  4007aa:	68fb      	ldr	r3, [r7, #12]
  4007ac:	69ba      	ldr	r2, [r7, #24]
  4007ae:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  4007b0:	697b      	ldr	r3, [r7, #20]
  4007b2:	f003 0310 	and.w	r3, r3, #16
  4007b6:	2b00      	cmp	r3, #0
  4007b8:	d004      	beq.n	4007c4 <ioport_set_pin_mode+0x6c>
		base->PIO_PPDER = mask;
  4007ba:	68fb      	ldr	r3, [r7, #12]
  4007bc:	69ba      	ldr	r2, [r7, #24]
  4007be:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  4007c2:	e003      	b.n	4007cc <ioport_set_pin_mode+0x74>
	} else {
		base->PIO_PPDDR = mask;
  4007c4:	68fb      	ldr	r3, [r7, #12]
  4007c6:	69ba      	ldr	r2, [r7, #24]
  4007c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  4007cc:	697b      	ldr	r3, [r7, #20]
  4007ce:	f003 0320 	and.w	r3, r3, #32
  4007d2:	2b00      	cmp	r3, #0
  4007d4:	d003      	beq.n	4007de <ioport_set_pin_mode+0x86>
		base->PIO_MDER = mask;
  4007d6:	68fb      	ldr	r3, [r7, #12]
  4007d8:	69ba      	ldr	r2, [r7, #24]
  4007da:	651a      	str	r2, [r3, #80]	; 0x50
  4007dc:	e002      	b.n	4007e4 <ioport_set_pin_mode+0x8c>
	} else {
		base->PIO_MDDR = mask;
  4007de:	68fb      	ldr	r3, [r7, #12]
  4007e0:	69ba      	ldr	r2, [r7, #24]
  4007e2:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  4007e4:	697b      	ldr	r3, [r7, #20]
  4007e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  4007ea:	2b00      	cmp	r3, #0
  4007ec:	d003      	beq.n	4007f6 <ioport_set_pin_mode+0x9e>
		base->PIO_IFER = mask;
  4007ee:	68fb      	ldr	r3, [r7, #12]
  4007f0:	69ba      	ldr	r2, [r7, #24]
  4007f2:	621a      	str	r2, [r3, #32]
  4007f4:	e002      	b.n	4007fc <ioport_set_pin_mode+0xa4>
	} else {
		base->PIO_IFDR = mask;
  4007f6:	68fb      	ldr	r3, [r7, #12]
  4007f8:	69ba      	ldr	r2, [r7, #24]
  4007fa:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  4007fc:	697b      	ldr	r3, [r7, #20]
  4007fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400802:	2b00      	cmp	r3, #0
  400804:	d004      	beq.n	400810 <ioport_set_pin_mode+0xb8>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  400806:	68fb      	ldr	r3, [r7, #12]
  400808:	69ba      	ldr	r2, [r7, #24]
  40080a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  40080e:	e003      	b.n	400818 <ioport_set_pin_mode+0xc0>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400810:	68fb      	ldr	r3, [r7, #12]
  400812:	69ba      	ldr	r2, [r7, #24]
  400814:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  400818:	697b      	ldr	r3, [r7, #20]
  40081a:	f003 0301 	and.w	r3, r3, #1
  40081e:	2b00      	cmp	r3, #0
  400820:	d006      	beq.n	400830 <ioport_set_pin_mode+0xd8>
		base->PIO_ABCDSR[0] |= mask;
  400822:	68fb      	ldr	r3, [r7, #12]
  400824:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400826:	69bb      	ldr	r3, [r7, #24]
  400828:	431a      	orrs	r2, r3
  40082a:	68fb      	ldr	r3, [r7, #12]
  40082c:	671a      	str	r2, [r3, #112]	; 0x70
  40082e:	e006      	b.n	40083e <ioport_set_pin_mode+0xe6>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400830:	68fb      	ldr	r3, [r7, #12]
  400832:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400834:	69bb      	ldr	r3, [r7, #24]
  400836:	43db      	mvns	r3, r3
  400838:	401a      	ands	r2, r3
  40083a:	68fb      	ldr	r3, [r7, #12]
  40083c:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  40083e:	697b      	ldr	r3, [r7, #20]
  400840:	f003 0302 	and.w	r3, r3, #2
  400844:	2b00      	cmp	r3, #0
  400846:	d006      	beq.n	400856 <ioport_set_pin_mode+0xfe>
		base->PIO_ABCDSR[1] |= mask;
  400848:	68fb      	ldr	r3, [r7, #12]
  40084a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40084c:	69bb      	ldr	r3, [r7, #24]
  40084e:	431a      	orrs	r2, r3
  400850:	68fb      	ldr	r3, [r7, #12]
  400852:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  400854:	e006      	b.n	400864 <ioport_set_pin_mode+0x10c>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400856:	68fb      	ldr	r3, [r7, #12]
  400858:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40085a:	69bb      	ldr	r3, [r7, #24]
  40085c:	43db      	mvns	r3, r3
  40085e:	401a      	ands	r2, r3
  400860:	68fb      	ldr	r3, [r7, #12]
  400862:	675a      	str	r2, [r3, #116]	; 0x74
  400864:	bf00      	nop
  400866:	3734      	adds	r7, #52	; 0x34
  400868:	46bd      	mov	sp, r7
  40086a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40086e:	4770      	bx	lr
  400870:	00200707 	.word	0x00200707

00400874 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  400874:	b480      	push	{r7}
  400876:	b08d      	sub	sp, #52	; 0x34
  400878:	af00      	add	r7, sp, #0
  40087a:	6078      	str	r0, [r7, #4]
  40087c:	460b      	mov	r3, r1
  40087e:	70fb      	strb	r3, [r7, #3]
  400880:	687b      	ldr	r3, [r7, #4]
  400882:	62fb      	str	r3, [r7, #44]	; 0x2c
  400884:	78fb      	ldrb	r3, [r7, #3]
  400886:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  40088a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40088c:	627b      	str	r3, [r7, #36]	; 0x24
  40088e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400890:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  400892:	6a3b      	ldr	r3, [r7, #32]
  400894:	095b      	lsrs	r3, r3, #5
  400896:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400898:	69fa      	ldr	r2, [r7, #28]
  40089a:	4b17      	ldr	r3, [pc, #92]	; (4008f8 <ioport_set_pin_dir+0x84>)
  40089c:	4413      	add	r3, r2
  40089e:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  4008a0:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  4008a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4008a6:	2b01      	cmp	r3, #1
  4008a8:	d109      	bne.n	4008be <ioport_set_pin_dir+0x4a>
  4008aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4008ac:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  4008ae:	697b      	ldr	r3, [r7, #20]
  4008b0:	f003 031f 	and.w	r3, r3, #31
  4008b4:	2201      	movs	r2, #1
  4008b6:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4008b8:	69bb      	ldr	r3, [r7, #24]
  4008ba:	611a      	str	r2, [r3, #16]
  4008bc:	e00c      	b.n	4008d8 <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  4008be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4008c2:	2b00      	cmp	r3, #0
  4008c4:	d108      	bne.n	4008d8 <ioport_set_pin_dir+0x64>
  4008c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4008c8:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  4008ca:	693b      	ldr	r3, [r7, #16]
  4008cc:	f003 031f 	and.w	r3, r3, #31
  4008d0:	2201      	movs	r2, #1
  4008d2:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4008d4:	69bb      	ldr	r3, [r7, #24]
  4008d6:	615a      	str	r2, [r3, #20]
  4008d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4008da:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  4008dc:	68fb      	ldr	r3, [r7, #12]
  4008de:	f003 031f 	and.w	r3, r3, #31
  4008e2:	2201      	movs	r2, #1
  4008e4:	409a      	lsls	r2, r3
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4008e6:	69bb      	ldr	r3, [r7, #24]
  4008e8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  4008ec:	bf00      	nop
  4008ee:	3734      	adds	r7, #52	; 0x34
  4008f0:	46bd      	mov	sp, r7
  4008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4008f6:	4770      	bx	lr
  4008f8:	00200707 	.word	0x00200707

004008fc <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  4008fc:	b480      	push	{r7}
  4008fe:	b08b      	sub	sp, #44	; 0x2c
  400900:	af00      	add	r7, sp, #0
  400902:	6078      	str	r0, [r7, #4]
  400904:	460b      	mov	r3, r1
  400906:	70fb      	strb	r3, [r7, #3]
  400908:	687b      	ldr	r3, [r7, #4]
  40090a:	627b      	str	r3, [r7, #36]	; 0x24
  40090c:	78fb      	ldrb	r3, [r7, #3]
  40090e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  400912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400914:	61fb      	str	r3, [r7, #28]
  400916:	69fb      	ldr	r3, [r7, #28]
  400918:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  40091a:	69bb      	ldr	r3, [r7, #24]
  40091c:	095b      	lsrs	r3, r3, #5
  40091e:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400920:	697a      	ldr	r2, [r7, #20]
  400922:	4b10      	ldr	r3, [pc, #64]	; (400964 <ioport_set_pin_level+0x68>)
  400924:	4413      	add	r3, r2
  400926:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  400928:	613b      	str	r3, [r7, #16]

	if (level) {
  40092a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  40092e:	2b00      	cmp	r3, #0
  400930:	d009      	beq.n	400946 <ioport_set_pin_level+0x4a>
  400932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400934:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  400936:	68fb      	ldr	r3, [r7, #12]
  400938:	f003 031f 	and.w	r3, r3, #31
  40093c:	2201      	movs	r2, #1
  40093e:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400940:	693b      	ldr	r3, [r7, #16]
  400942:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  400944:	e008      	b.n	400958 <ioport_set_pin_level+0x5c>
  400946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400948:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  40094a:	68bb      	ldr	r3, [r7, #8]
  40094c:	f003 031f 	and.w	r3, r3, #31
  400950:	2201      	movs	r2, #1
  400952:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400954:	693b      	ldr	r3, [r7, #16]
  400956:	635a      	str	r2, [r3, #52]	; 0x34
  400958:	bf00      	nop
  40095a:	372c      	adds	r7, #44	; 0x2c
  40095c:	46bd      	mov	sp, r7
  40095e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400962:	4770      	bx	lr
  400964:	00200707 	.word	0x00200707

00400968 <ioport_set_pin_sense_mode>:
 * \param pin IOPORT pin to configure
 * \param pin_sense Edge to sense for the pin (\ref ioport_sense)
 */
static inline void ioport_set_pin_sense_mode(ioport_pin_t pin,
		enum ioport_sense pin_sense)
{
  400968:	b480      	push	{r7}
  40096a:	b08d      	sub	sp, #52	; 0x34
  40096c:	af00      	add	r7, sp, #0
  40096e:	6078      	str	r0, [r7, #4]
  400970:	460b      	mov	r3, r1
  400972:	70fb      	strb	r3, [r7, #3]
  400974:	687b      	ldr	r3, [r7, #4]
  400976:	62fb      	str	r3, [r7, #44]	; 0x2c
  400978:	78fb      	ldrb	r3, [r7, #3]
  40097a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  40097e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400980:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  400982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400984:	095a      	lsrs	r2, r3, #5
  400986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400988:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  40098a:	6a3b      	ldr	r3, [r7, #32]
  40098c:	f003 031f 	and.w	r3, r3, #31
  400990:	2101      	movs	r1, #1
  400992:	fa01 f303 	lsl.w	r3, r1, r3
  400996:	61fa      	str	r2, [r7, #28]
  400998:	61bb      	str	r3, [r7, #24]
  40099a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  40099e:	75fb      	strb	r3, [r7, #23]
  4009a0:	69fb      	ldr	r3, [r7, #28]
  4009a2:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4009a4:	693a      	ldr	r2, [r7, #16]
  4009a6:	4b23      	ldr	r3, [pc, #140]	; (400a34 <ioport_set_pin_sense_mode+0xcc>)
  4009a8:	4413      	add	r3, r2
  4009aa:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_sense_mode(ioport_port_t port,
		ioport_port_mask_t mask, enum ioport_sense pin_sense)
{
	Pio *base = arch_ioport_port_to_base(port);
  4009ac:	60fb      	str	r3, [r7, #12]
	 *       1       0         0    IOPORT_SENSE_FALLING
	 *       1       0         1    IOPORT_SENSE_RISING
	 *       1       1         0    IOPORT_SENSE_LEVEL_LOW
	 *       1       1         1    IOPORT_SENSE_LEVEL_HIGH
	 */
	switch(pin_sense) {
  4009ae:	7dfb      	ldrb	r3, [r7, #23]
  4009b0:	3b01      	subs	r3, #1
  4009b2:	2b03      	cmp	r3, #3
  4009b4:	d82e      	bhi.n	400a14 <ioport_set_pin_sense_mode+0xac>
  4009b6:	a201      	add	r2, pc, #4	; (adr r2, 4009bc <ioport_set_pin_sense_mode+0x54>)
  4009b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4009bc:	004009f1 	.word	0x004009f1
  4009c0:	00400a03 	.word	0x00400a03
  4009c4:	004009cd 	.word	0x004009cd
  4009c8:	004009df 	.word	0x004009df
	case IOPORT_SENSE_LEVEL_LOW:
		base->PIO_LSR = mask;
  4009cc:	68fb      	ldr	r3, [r7, #12]
  4009ce:	69ba      	ldr	r2, [r7, #24]
  4009d0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_FELLSR = mask;
  4009d4:	68fb      	ldr	r3, [r7, #12]
  4009d6:	69ba      	ldr	r2, [r7, #24]
  4009d8:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  4009dc:	e01f      	b.n	400a1e <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_LEVEL_HIGH:
		base->PIO_LSR = mask;
  4009de:	68fb      	ldr	r3, [r7, #12]
  4009e0:	69ba      	ldr	r2, [r7, #24]
  4009e2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_REHLSR = mask;
  4009e6:	68fb      	ldr	r3, [r7, #12]
  4009e8:	69ba      	ldr	r2, [r7, #24]
  4009ea:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  4009ee:	e016      	b.n	400a1e <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
  4009f0:	68fb      	ldr	r3, [r7, #12]
  4009f2:	69ba      	ldr	r2, [r7, #24]
  4009f4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  4009f8:	68fb      	ldr	r3, [r7, #12]
  4009fa:	69ba      	ldr	r2, [r7, #24]
  4009fc:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  400a00:	e00d      	b.n	400a1e <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400a02:	68fb      	ldr	r3, [r7, #12]
  400a04:	69ba      	ldr	r2, [r7, #24]
  400a06:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400a0a:	68fb      	ldr	r3, [r7, #12]
  400a0c:	69ba      	ldr	r2, [r7, #24]
  400a0e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  400a12:	e004      	b.n	400a1e <ioport_set_pin_sense_mode+0xb6>
		break;
	default:
		base->PIO_AIMDR = mask;
  400a14:	68fb      	ldr	r3, [r7, #12]
  400a16:	69ba      	ldr	r2, [r7, #24]
  400a18:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	arch_ioport_set_pin_sense_mode(pin, pin_sense);
}
  400a1c:	e003      	b.n	400a26 <ioport_set_pin_sense_mode+0xbe>
		return;
	}
	base->PIO_AIMER = mask;
  400a1e:	68fb      	ldr	r3, [r7, #12]
  400a20:	69ba      	ldr	r2, [r7, #24]
  400a22:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  400a26:	bf00      	nop
  400a28:	3734      	adds	r7, #52	; 0x34
  400a2a:	46bd      	mov	sp, r7
  400a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400a30:	4770      	bx	lr
  400a32:	bf00      	nop
  400a34:	00200707 	.word	0x00200707

00400a38 <tcm_disable>:
/** \brief  TCM memory Disable

	The function enables TCM memories
 */
static inline void tcm_disable(void) 
{
  400a38:	b480      	push	{r7}
  400a3a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb");
  400a3c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400a40:	f3bf 8f6f 	isb	sy

	__DSB();
	__ISB();
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400a44:	4a0c      	ldr	r2, [pc, #48]	; (400a78 <tcm_disable+0x40>)
  400a46:	4b0c      	ldr	r3, [pc, #48]	; (400a78 <tcm_disable+0x40>)
  400a48:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
  400a4c:	f023 0301 	bic.w	r3, r3, #1
  400a50:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400a54:	4a08      	ldr	r2, [pc, #32]	; (400a78 <tcm_disable+0x40>)
  400a56:	4b08      	ldr	r3, [pc, #32]	; (400a78 <tcm_disable+0x40>)
  400a58:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
  400a5c:	f023 0301 	bic.w	r3, r3, #1
  400a60:	f8c2 3294 	str.w	r3, [r2, #660]	; 0x294
  __ASM volatile ("dsb");
  400a64:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400a68:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
}
  400a6c:	bf00      	nop
  400a6e:	46bd      	mov	sp, r7
  400a70:	f85d 7b04 	ldr.w	r7, [sp], #4
  400a74:	4770      	bx	lr
  400a76:	bf00      	nop
  400a78:	e000ed00 	.word	0xe000ed00

00400a7c <board_init>:
#endif

void board_init(void)
{
  400a7c:	b580      	push	{r7, lr}
  400a7e:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400a80:	4b1e      	ldr	r3, [pc, #120]	; (400afc <board_init+0x80>)
  400a82:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400a86:	605a      	str	r2, [r3, #4]
	_setup_memory_region();
#endif

#ifdef CONF_BOARD_ENABLE_CACHE
	/* Enabling the Cache */
	SCB_EnableICache(); 
  400a88:	4b1d      	ldr	r3, [pc, #116]	; (400b00 <board_init+0x84>)
  400a8a:	4798      	blx	r3
	SCB_EnableDCache();
  400a8c:	4b1d      	ldr	r3, [pc, #116]	; (400b04 <board_init+0x88>)
  400a8e:	4798      	blx	r3
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400a90:	4b1d      	ldr	r3, [pc, #116]	; (400b08 <board_init+0x8c>)
  400a92:	4a1e      	ldr	r2, [pc, #120]	; (400b0c <board_init+0x90>)
  400a94:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400a96:	4b1c      	ldr	r3, [pc, #112]	; (400b08 <board_init+0x8c>)
  400a98:	4a1d      	ldr	r2, [pc, #116]	; (400b10 <board_init+0x94>)
  400a9a:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(7));
	
	tcm_disable();
  400a9c:	4b1d      	ldr	r3, [pc, #116]	; (400b14 <board_init+0x98>)
  400a9e:	4798      	blx	r3
#endif

	/* Initialize IOPORTs */
	ioport_init();
  400aa0:	4b1d      	ldr	r3, [pc, #116]	; (400b18 <board_init+0x9c>)
  400aa2:	4798      	blx	r3

	/* Configure the pins connected to LED as output and set their
	 * default initial state to high (LED off).
	 */
	ioport_set_pin_dir(LED0_GPIO, IOPORT_DIR_OUTPUT);
  400aa4:	2101      	movs	r1, #1
  400aa6:	2048      	movs	r0, #72	; 0x48
  400aa8:	4b1c      	ldr	r3, [pc, #112]	; (400b1c <board_init+0xa0>)
  400aaa:	4798      	blx	r3
	ioport_set_pin_level(LED0_GPIO, LED0_INACTIVE_LEVEL);
  400aac:	2101      	movs	r1, #1
  400aae:	2048      	movs	r0, #72	; 0x48
  400ab0:	4b1b      	ldr	r3, [pc, #108]	; (400b20 <board_init+0xa4>)
  400ab2:	4798      	blx	r3

	/* Configure Push Button pins */
	ioport_set_pin_input_mode(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS,
  400ab4:	2100      	movs	r1, #0
  400ab6:	200b      	movs	r0, #11
  400ab8:	4b18      	ldr	r3, [pc, #96]	; (400b1c <board_init+0xa0>)
  400aba:	4798      	blx	r3
  400abc:	2188      	movs	r1, #136	; 0x88
  400abe:	200b      	movs	r0, #11
  400ac0:	4b18      	ldr	r3, [pc, #96]	; (400b24 <board_init+0xa8>)
  400ac2:	4798      	blx	r3
  400ac4:	2102      	movs	r1, #2
  400ac6:	200b      	movs	r0, #11
  400ac8:	4b17      	ldr	r3, [pc, #92]	; (400b28 <board_init+0xac>)
  400aca:	4798      	blx	r3
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
  400acc:	2100      	movs	r1, #0
  400ace:	2015      	movs	r0, #21
  400ad0:	4b14      	ldr	r3, [pc, #80]	; (400b24 <board_init+0xa8>)
  400ad2:	4798      	blx	r3
  400ad4:	2015      	movs	r0, #21
  400ad6:	4b15      	ldr	r3, [pc, #84]	; (400b2c <board_init+0xb0>)
  400ad8:	4798      	blx	r3
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400ada:	4a15      	ldr	r2, [pc, #84]	; (400b30 <board_init+0xb4>)
  400adc:	4b14      	ldr	r3, [pc, #80]	; (400b30 <board_init+0xb4>)
  400ade:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
  400ae2:	f043 0310 	orr.w	r3, r3, #16
  400ae6:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	ioport_set_pin_peripheral_mode(USART1_TXD_GPIO, USART1_TXD_FLAGS);
  400aea:	2103      	movs	r1, #3
  400aec:	2024      	movs	r0, #36	; 0x24
  400aee:	4b0d      	ldr	r3, [pc, #52]	; (400b24 <board_init+0xa8>)
  400af0:	4798      	blx	r3
  400af2:	2024      	movs	r0, #36	; 0x24
  400af4:	4b0d      	ldr	r3, [pc, #52]	; (400b2c <board_init+0xb0>)
  400af6:	4798      	blx	r3
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
	pio_configure_pin(LCD_SPI_BACKLIGHT_PIO, LCD_SPI_BACKLIGHT_FLAGS);
	pio_set_pin_high(LCD_SPI_BACKLIGHT_PIO);

#endif
}
  400af8:	bf00      	nop
  400afa:	bd80      	pop	{r7, pc}
  400afc:	400e1850 	.word	0x400e1850
  400b00:	004005e9 	.word	0x004005e9
  400b04:	00400621 	.word	0x00400621
  400b08:	400e0c00 	.word	0x400e0c00
  400b0c:	5a00080c 	.word	0x5a00080c
  400b10:	5a00070c 	.word	0x5a00070c
  400b14:	00400a39 	.word	0x00400a39
  400b18:	004006e1 	.word	0x004006e1
  400b1c:	00400875 	.word	0x00400875
  400b20:	004008fd 	.word	0x004008fd
  400b24:	00400759 	.word	0x00400759
  400b28:	00400969 	.word	0x00400969
  400b2c:	0040070d 	.word	0x0040070d
  400b30:	40088000 	.word	0x40088000

00400b34 <pio_set_debounce_filter>:
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 * \param ul_cut_off Cuts off frequency for debouncing filter.
 */
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
  400b34:	b480      	push	{r7}
  400b36:	b085      	sub	sp, #20
  400b38:	af00      	add	r7, sp, #0
  400b3a:	60f8      	str	r0, [r7, #12]
  400b3c:	60b9      	str	r1, [r7, #8]
  400b3e:	607a      	str	r2, [r7, #4]
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  400b40:	68fb      	ldr	r3, [r7, #12]
  400b42:	68ba      	ldr	r2, [r7, #8]
  400b44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  400b48:	687b      	ldr	r3, [r7, #4]
  400b4a:	005b      	lsls	r3, r3, #1
  400b4c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400b50:	fbb2 f3f3 	udiv	r3, r2, r3
  400b54:	3b01      	subs	r3, #1
  400b56:	f3c3 020d 	ubfx	r2, r3, #0, #14
  400b5a:	68fb      	ldr	r3, [r7, #12]
  400b5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			(2 * (ul_cut_off))) - 1);
}
  400b60:	bf00      	nop
  400b62:	3714      	adds	r7, #20
  400b64:	46bd      	mov	sp, r7
  400b66:	f85d 7b04 	ldr.w	r7, [sp], #4
  400b6a:	4770      	bx	lr

00400b6c <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  400b6c:	b480      	push	{r7}
  400b6e:	b085      	sub	sp, #20
  400b70:	af00      	add	r7, sp, #0
  400b72:	60f8      	str	r0, [r7, #12]
  400b74:	60b9      	str	r1, [r7, #8]
  400b76:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  400b78:	687b      	ldr	r3, [r7, #4]
  400b7a:	f003 0310 	and.w	r3, r3, #16
  400b7e:	2b00      	cmp	r3, #0
  400b80:	d020      	beq.n	400bc4 <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  400b82:	68fb      	ldr	r3, [r7, #12]
  400b84:	68ba      	ldr	r2, [r7, #8]
  400b86:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  400b8a:	687b      	ldr	r3, [r7, #4]
  400b8c:	f003 0320 	and.w	r3, r3, #32
  400b90:	2b00      	cmp	r3, #0
  400b92:	d004      	beq.n	400b9e <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  400b94:	68fb      	ldr	r3, [r7, #12]
  400b96:	68ba      	ldr	r2, [r7, #8]
  400b98:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  400b9c:	e003      	b.n	400ba6 <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  400b9e:	68fb      	ldr	r3, [r7, #12]
  400ba0:	68ba      	ldr	r2, [r7, #8]
  400ba2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  400ba6:	687b      	ldr	r3, [r7, #4]
  400ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  400bac:	2b00      	cmp	r3, #0
  400bae:	d004      	beq.n	400bba <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  400bb0:	68fb      	ldr	r3, [r7, #12]
  400bb2:	68ba      	ldr	r2, [r7, #8]
  400bb4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  400bb8:	e008      	b.n	400bcc <pio_configure_interrupt+0x60>
			p_pio->PIO_LSR = ul_mask;
  400bba:	68fb      	ldr	r3, [r7, #12]
  400bbc:	68ba      	ldr	r2, [r7, #8]
  400bbe:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
  400bc2:	e003      	b.n	400bcc <pio_configure_interrupt+0x60>
		p_pio->PIO_AIMDR = ul_mask;
  400bc4:	68fb      	ldr	r3, [r7, #12]
  400bc6:	68ba      	ldr	r2, [r7, #8]
  400bc8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
  400bcc:	bf00      	nop
  400bce:	3714      	adds	r7, #20
  400bd0:	46bd      	mov	sp, r7
  400bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
  400bd6:	4770      	bx	lr

00400bd8 <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  400bd8:	b480      	push	{r7}
  400bda:	b083      	sub	sp, #12
  400bdc:	af00      	add	r7, sp, #0
  400bde:	6078      	str	r0, [r7, #4]
  400be0:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IER = ul_mask;
  400be2:	687b      	ldr	r3, [r7, #4]
  400be4:	683a      	ldr	r2, [r7, #0]
  400be6:	641a      	str	r2, [r3, #64]	; 0x40
}
  400be8:	bf00      	nop
  400bea:	370c      	adds	r7, #12
  400bec:	46bd      	mov	sp, r7
  400bee:	f85d 7b04 	ldr.w	r7, [sp], #4
  400bf2:	4770      	bx	lr

00400bf4 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  400bf4:	b480      	push	{r7}
  400bf6:	b083      	sub	sp, #12
  400bf8:	af00      	add	r7, sp, #0
  400bfa:	6078      	str	r0, [r7, #4]
  400bfc:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  400bfe:	687b      	ldr	r3, [r7, #4]
  400c00:	683a      	ldr	r2, [r7, #0]
  400c02:	645a      	str	r2, [r3, #68]	; 0x44
}
  400c04:	bf00      	nop
  400c06:	370c      	adds	r7, #12
  400c08:	46bd      	mov	sp, r7
  400c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c0e:	4770      	bx	lr

00400c10 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  400c10:	b480      	push	{r7}
  400c12:	b083      	sub	sp, #12
  400c14:	af00      	add	r7, sp, #0
  400c16:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  400c18:	687b      	ldr	r3, [r7, #4]
  400c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  400c1c:	4618      	mov	r0, r3
  400c1e:	370c      	adds	r7, #12
  400c20:	46bd      	mov	sp, r7
  400c22:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c26:	4770      	bx	lr

00400c28 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  400c28:	b480      	push	{r7}
  400c2a:	b083      	sub	sp, #12
  400c2c:	af00      	add	r7, sp, #0
  400c2e:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  400c30:	687b      	ldr	r3, [r7, #4]
  400c32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  400c34:	4618      	mov	r0, r3
  400c36:	370c      	adds	r7, #12
  400c38:	46bd      	mov	sp, r7
  400c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c3e:	4770      	bx	lr

00400c40 <NVIC_EnableIRQ>:
{
  400c40:	b480      	push	{r7}
  400c42:	b083      	sub	sp, #12
  400c44:	af00      	add	r7, sp, #0
  400c46:	4603      	mov	r3, r0
  400c48:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400c4a:	4909      	ldr	r1, [pc, #36]	; (400c70 <NVIC_EnableIRQ+0x30>)
  400c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400c50:	095b      	lsrs	r3, r3, #5
  400c52:	79fa      	ldrb	r2, [r7, #7]
  400c54:	f002 021f 	and.w	r2, r2, #31
  400c58:	2001      	movs	r0, #1
  400c5a:	fa00 f202 	lsl.w	r2, r0, r2
  400c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  400c62:	bf00      	nop
  400c64:	370c      	adds	r7, #12
  400c66:	46bd      	mov	sp, r7
  400c68:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c6c:	4770      	bx	lr
  400c6e:	bf00      	nop
  400c70:	e000e100 	.word	0xe000e100

00400c74 <NVIC_DisableIRQ>:
{
  400c74:	b480      	push	{r7}
  400c76:	b083      	sub	sp, #12
  400c78:	af00      	add	r7, sp, #0
  400c7a:	4603      	mov	r3, r0
  400c7c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  400c7e:	4909      	ldr	r1, [pc, #36]	; (400ca4 <NVIC_DisableIRQ+0x30>)
  400c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400c84:	095b      	lsrs	r3, r3, #5
  400c86:	79fa      	ldrb	r2, [r7, #7]
  400c88:	f002 021f 	and.w	r2, r2, #31
  400c8c:	2001      	movs	r0, #1
  400c8e:	fa00 f202 	lsl.w	r2, r0, r2
  400c92:	3320      	adds	r3, #32
  400c94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  400c98:	bf00      	nop
  400c9a:	370c      	adds	r7, #12
  400c9c:	46bd      	mov	sp, r7
  400c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ca2:	4770      	bx	lr
  400ca4:	e000e100 	.word	0xe000e100

00400ca8 <NVIC_ClearPendingIRQ>:
{
  400ca8:	b480      	push	{r7}
  400caa:	b083      	sub	sp, #12
  400cac:	af00      	add	r7, sp, #0
  400cae:	4603      	mov	r3, r0
  400cb0:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400cb2:	4909      	ldr	r1, [pc, #36]	; (400cd8 <NVIC_ClearPendingIRQ+0x30>)
  400cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400cb8:	095b      	lsrs	r3, r3, #5
  400cba:	79fa      	ldrb	r2, [r7, #7]
  400cbc:	f002 021f 	and.w	r2, r2, #31
  400cc0:	2001      	movs	r0, #1
  400cc2:	fa00 f202 	lsl.w	r2, r0, r2
  400cc6:	3360      	adds	r3, #96	; 0x60
  400cc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  400ccc:	bf00      	nop
  400cce:	370c      	adds	r7, #12
  400cd0:	46bd      	mov	sp, r7
  400cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
  400cd6:	4770      	bx	lr
  400cd8:	e000e100 	.word	0xe000e100

00400cdc <NVIC_SetPriority>:
{
  400cdc:	b480      	push	{r7}
  400cde:	b083      	sub	sp, #12
  400ce0:	af00      	add	r7, sp, #0
  400ce2:	4603      	mov	r3, r0
  400ce4:	6039      	str	r1, [r7, #0]
  400ce6:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  400ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400cec:	2b00      	cmp	r3, #0
  400cee:	da0b      	bge.n	400d08 <NVIC_SetPriority+0x2c>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  400cf0:	490d      	ldr	r1, [pc, #52]	; (400d28 <NVIC_SetPriority+0x4c>)
  400cf2:	79fb      	ldrb	r3, [r7, #7]
  400cf4:	f003 030f 	and.w	r3, r3, #15
  400cf8:	3b04      	subs	r3, #4
  400cfa:	683a      	ldr	r2, [r7, #0]
  400cfc:	b2d2      	uxtb	r2, r2
  400cfe:	0152      	lsls	r2, r2, #5
  400d00:	b2d2      	uxtb	r2, r2
  400d02:	440b      	add	r3, r1
  400d04:	761a      	strb	r2, [r3, #24]
}
  400d06:	e009      	b.n	400d1c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400d08:	4908      	ldr	r1, [pc, #32]	; (400d2c <NVIC_SetPriority+0x50>)
  400d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400d0e:	683a      	ldr	r2, [r7, #0]
  400d10:	b2d2      	uxtb	r2, r2
  400d12:	0152      	lsls	r2, r2, #5
  400d14:	b2d2      	uxtb	r2, r2
  400d16:	440b      	add	r3, r1
  400d18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  400d1c:	bf00      	nop
  400d1e:	370c      	adds	r7, #12
  400d20:	46bd      	mov	sp, r7
  400d22:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d26:	4770      	bx	lr
  400d28:	e000ed00 	.word	0xe000ed00
  400d2c:	e000e100 	.word	0xe000e100

00400d30 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400d30:	b580      	push	{r7, lr}
  400d32:	b084      	sub	sp, #16
  400d34:	af00      	add	r7, sp, #0
  400d36:	6078      	str	r0, [r7, #4]
  400d38:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400d3a:	6878      	ldr	r0, [r7, #4]
  400d3c:	4b26      	ldr	r3, [pc, #152]	; (400dd8 <pio_handler_process+0xa8>)
  400d3e:	4798      	blx	r3
  400d40:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  400d42:	6878      	ldr	r0, [r7, #4]
  400d44:	4b25      	ldr	r3, [pc, #148]	; (400ddc <pio_handler_process+0xac>)
  400d46:	4798      	blx	r3
  400d48:	4602      	mov	r2, r0
  400d4a:	68fb      	ldr	r3, [r7, #12]
  400d4c:	4013      	ands	r3, r2
  400d4e:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  400d50:	68fb      	ldr	r3, [r7, #12]
  400d52:	2b00      	cmp	r3, #0
  400d54:	d03c      	beq.n	400dd0 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  400d56:	2300      	movs	r3, #0
  400d58:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  400d5a:	e034      	b.n	400dc6 <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400d5c:	4a20      	ldr	r2, [pc, #128]	; (400de0 <pio_handler_process+0xb0>)
  400d5e:	68bb      	ldr	r3, [r7, #8]
  400d60:	011b      	lsls	r3, r3, #4
  400d62:	4413      	add	r3, r2
  400d64:	681a      	ldr	r2, [r3, #0]
  400d66:	683b      	ldr	r3, [r7, #0]
  400d68:	429a      	cmp	r2, r3
  400d6a:	d126      	bne.n	400dba <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400d6c:	4a1c      	ldr	r2, [pc, #112]	; (400de0 <pio_handler_process+0xb0>)
  400d6e:	68bb      	ldr	r3, [r7, #8]
  400d70:	011b      	lsls	r3, r3, #4
  400d72:	4413      	add	r3, r2
  400d74:	3304      	adds	r3, #4
  400d76:	681a      	ldr	r2, [r3, #0]
  400d78:	68fb      	ldr	r3, [r7, #12]
  400d7a:	4013      	ands	r3, r2
  400d7c:	2b00      	cmp	r3, #0
  400d7e:	d01c      	beq.n	400dba <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400d80:	4a17      	ldr	r2, [pc, #92]	; (400de0 <pio_handler_process+0xb0>)
  400d82:	68bb      	ldr	r3, [r7, #8]
  400d84:	011b      	lsls	r3, r3, #4
  400d86:	4413      	add	r3, r2
  400d88:	330c      	adds	r3, #12
  400d8a:	681b      	ldr	r3, [r3, #0]
  400d8c:	4914      	ldr	r1, [pc, #80]	; (400de0 <pio_handler_process+0xb0>)
  400d8e:	68ba      	ldr	r2, [r7, #8]
  400d90:	0112      	lsls	r2, r2, #4
  400d92:	440a      	add	r2, r1
  400d94:	6810      	ldr	r0, [r2, #0]
  400d96:	4912      	ldr	r1, [pc, #72]	; (400de0 <pio_handler_process+0xb0>)
  400d98:	68ba      	ldr	r2, [r7, #8]
  400d9a:	0112      	lsls	r2, r2, #4
  400d9c:	440a      	add	r2, r1
  400d9e:	3204      	adds	r2, #4
  400da0:	6812      	ldr	r2, [r2, #0]
  400da2:	4611      	mov	r1, r2
  400da4:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400da6:	4a0e      	ldr	r2, [pc, #56]	; (400de0 <pio_handler_process+0xb0>)
  400da8:	68bb      	ldr	r3, [r7, #8]
  400daa:	011b      	lsls	r3, r3, #4
  400dac:	4413      	add	r3, r2
  400dae:	3304      	adds	r3, #4
  400db0:	681b      	ldr	r3, [r3, #0]
  400db2:	43db      	mvns	r3, r3
  400db4:	68fa      	ldr	r2, [r7, #12]
  400db6:	4013      	ands	r3, r2
  400db8:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  400dba:	68bb      	ldr	r3, [r7, #8]
  400dbc:	3301      	adds	r3, #1
  400dbe:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  400dc0:	68bb      	ldr	r3, [r7, #8]
  400dc2:	2b06      	cmp	r3, #6
  400dc4:	d803      	bhi.n	400dce <pio_handler_process+0x9e>
		while (status != 0) {
  400dc6:	68fb      	ldr	r3, [r7, #12]
  400dc8:	2b00      	cmp	r3, #0
  400dca:	d1c7      	bne.n	400d5c <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  400dcc:	e000      	b.n	400dd0 <pio_handler_process+0xa0>
				break;
  400dce:	bf00      	nop
}
  400dd0:	bf00      	nop
  400dd2:	3710      	adds	r7, #16
  400dd4:	46bd      	mov	sp, r7
  400dd6:	bd80      	pop	{r7, pc}
  400dd8:	00400c11 	.word	0x00400c11
  400ddc:	00400c29 	.word	0x00400c29
  400de0:	204009d8 	.word	0x204009d8

00400de4 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400de4:	b580      	push	{r7, lr}
  400de6:	b086      	sub	sp, #24
  400de8:	af00      	add	r7, sp, #0
  400dea:	60f8      	str	r0, [r7, #12]
  400dec:	60b9      	str	r1, [r7, #8]
  400dee:	607a      	str	r2, [r7, #4]
  400df0:	603b      	str	r3, [r7, #0]
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400df2:	4b21      	ldr	r3, [pc, #132]	; (400e78 <pio_handler_set+0x94>)
  400df4:	681b      	ldr	r3, [r3, #0]
  400df6:	2b06      	cmp	r3, #6
  400df8:	d901      	bls.n	400dfe <pio_handler_set+0x1a>
		return 1;
  400dfa:	2301      	movs	r3, #1
  400dfc:	e038      	b.n	400e70 <pio_handler_set+0x8c>

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400dfe:	2300      	movs	r3, #0
  400e00:	75fb      	strb	r3, [r7, #23]
  400e02:	e011      	b.n	400e28 <pio_handler_set+0x44>
		pSource = &(gs_interrupt_sources[i]);
  400e04:	7dfb      	ldrb	r3, [r7, #23]
  400e06:	011b      	lsls	r3, r3, #4
  400e08:	4a1c      	ldr	r2, [pc, #112]	; (400e7c <pio_handler_set+0x98>)
  400e0a:	4413      	add	r3, r2
  400e0c:	613b      	str	r3, [r7, #16]
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400e0e:	693b      	ldr	r3, [r7, #16]
  400e10:	681a      	ldr	r2, [r3, #0]
  400e12:	68bb      	ldr	r3, [r7, #8]
  400e14:	429a      	cmp	r2, r3
  400e16:	d104      	bne.n	400e22 <pio_handler_set+0x3e>
  400e18:	693b      	ldr	r3, [r7, #16]
  400e1a:	685a      	ldr	r2, [r3, #4]
  400e1c:	687b      	ldr	r3, [r7, #4]
  400e1e:	429a      	cmp	r2, r3
  400e20:	d008      	beq.n	400e34 <pio_handler_set+0x50>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400e22:	7dfb      	ldrb	r3, [r7, #23]
  400e24:	3301      	adds	r3, #1
  400e26:	75fb      	strb	r3, [r7, #23]
  400e28:	7dfa      	ldrb	r2, [r7, #23]
  400e2a:	4b13      	ldr	r3, [pc, #76]	; (400e78 <pio_handler_set+0x94>)
  400e2c:	681b      	ldr	r3, [r3, #0]
  400e2e:	429a      	cmp	r2, r3
  400e30:	d9e8      	bls.n	400e04 <pio_handler_set+0x20>
  400e32:	e000      	b.n	400e36 <pio_handler_set+0x52>
			break;
  400e34:	bf00      	nop
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  400e36:	693b      	ldr	r3, [r7, #16]
  400e38:	68ba      	ldr	r2, [r7, #8]
  400e3a:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  400e3c:	693b      	ldr	r3, [r7, #16]
  400e3e:	687a      	ldr	r2, [r7, #4]
  400e40:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  400e42:	693b      	ldr	r3, [r7, #16]
  400e44:	683a      	ldr	r2, [r7, #0]
  400e46:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  400e48:	693b      	ldr	r3, [r7, #16]
  400e4a:	6a3a      	ldr	r2, [r7, #32]
  400e4c:	60da      	str	r2, [r3, #12]
	if (i == gs_ul_nb_sources + 1) {
  400e4e:	7dfa      	ldrb	r2, [r7, #23]
  400e50:	4b09      	ldr	r3, [pc, #36]	; (400e78 <pio_handler_set+0x94>)
  400e52:	681b      	ldr	r3, [r3, #0]
  400e54:	3301      	adds	r3, #1
  400e56:	429a      	cmp	r2, r3
  400e58:	d104      	bne.n	400e64 <pio_handler_set+0x80>
		gs_ul_nb_sources++;
  400e5a:	4b07      	ldr	r3, [pc, #28]	; (400e78 <pio_handler_set+0x94>)
  400e5c:	681b      	ldr	r3, [r3, #0]
  400e5e:	3301      	adds	r3, #1
  400e60:	4a05      	ldr	r2, [pc, #20]	; (400e78 <pio_handler_set+0x94>)
  400e62:	6013      	str	r3, [r2, #0]
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  400e64:	683a      	ldr	r2, [r7, #0]
  400e66:	6879      	ldr	r1, [r7, #4]
  400e68:	68f8      	ldr	r0, [r7, #12]
  400e6a:	4b05      	ldr	r3, [pc, #20]	; (400e80 <pio_handler_set+0x9c>)
  400e6c:	4798      	blx	r3

	return 0;
  400e6e:	2300      	movs	r3, #0
}
  400e70:	4618      	mov	r0, r3
  400e72:	3718      	adds	r7, #24
  400e74:	46bd      	mov	sp, r7
  400e76:	bd80      	pop	{r7, pc}
  400e78:	20400a48 	.word	0x20400a48
  400e7c:	204009d8 	.word	0x204009d8
  400e80:	00400b6d 	.word	0x00400b6d

00400e84 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400e84:	b580      	push	{r7, lr}
  400e86:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  400e88:	210a      	movs	r1, #10
  400e8a:	4802      	ldr	r0, [pc, #8]	; (400e94 <PIOA_Handler+0x10>)
  400e8c:	4b02      	ldr	r3, [pc, #8]	; (400e98 <PIOA_Handler+0x14>)
  400e8e:	4798      	blx	r3
}
  400e90:	bf00      	nop
  400e92:	bd80      	pop	{r7, pc}
  400e94:	400e0e00 	.word	0x400e0e00
  400e98:	00400d31 	.word	0x00400d31

00400e9c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400e9c:	b580      	push	{r7, lr}
  400e9e:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  400ea0:	210b      	movs	r1, #11
  400ea2:	4802      	ldr	r0, [pc, #8]	; (400eac <PIOB_Handler+0x10>)
  400ea4:	4b02      	ldr	r3, [pc, #8]	; (400eb0 <PIOB_Handler+0x14>)
  400ea6:	4798      	blx	r3
}
  400ea8:	bf00      	nop
  400eaa:	bd80      	pop	{r7, pc}
  400eac:	400e1000 	.word	0x400e1000
  400eb0:	00400d31 	.word	0x00400d31

00400eb4 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400eb4:	b580      	push	{r7, lr}
  400eb6:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  400eb8:	210c      	movs	r1, #12
  400eba:	4802      	ldr	r0, [pc, #8]	; (400ec4 <PIOC_Handler+0x10>)
  400ebc:	4b02      	ldr	r3, [pc, #8]	; (400ec8 <PIOC_Handler+0x14>)
  400ebe:	4798      	blx	r3
}
  400ec0:	bf00      	nop
  400ec2:	bd80      	pop	{r7, pc}
  400ec4:	400e1200 	.word	0x400e1200
  400ec8:	00400d31 	.word	0x00400d31

00400ecc <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400ecc:	b580      	push	{r7, lr}
  400ece:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  400ed0:	2110      	movs	r1, #16
  400ed2:	4802      	ldr	r0, [pc, #8]	; (400edc <PIOD_Handler+0x10>)
  400ed4:	4b02      	ldr	r3, [pc, #8]	; (400ee0 <PIOD_Handler+0x14>)
  400ed6:	4798      	blx	r3
}
  400ed8:	bf00      	nop
  400eda:	bd80      	pop	{r7, pc}
  400edc:	400e1400 	.word	0x400e1400
  400ee0:	00400d31 	.word	0x00400d31

00400ee4 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400ee4:	b580      	push	{r7, lr}
  400ee6:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  400ee8:	2111      	movs	r1, #17
  400eea:	4802      	ldr	r0, [pc, #8]	; (400ef4 <PIOE_Handler+0x10>)
  400eec:	4b02      	ldr	r3, [pc, #8]	; (400ef8 <PIOE_Handler+0x14>)
  400eee:	4798      	blx	r3
}
  400ef0:	bf00      	nop
  400ef2:	bd80      	pop	{r7, pc}
  400ef4:	400e1600 	.word	0x400e1600
  400ef8:	00400d31 	.word	0x00400d31

00400efc <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  400efc:	b580      	push	{r7, lr}
  400efe:	b086      	sub	sp, #24
  400f00:	af00      	add	r7, sp, #0
  400f02:	60f8      	str	r0, [r7, #12]
  400f04:	460b      	mov	r3, r1
  400f06:	607a      	str	r2, [r7, #4]
  400f08:	72fb      	strb	r3, [r7, #11]
	uint32_t bitmask = 0;
  400f0a:	2300      	movs	r3, #0
  400f0c:	617b      	str	r3, [r7, #20]

	bitmask = pio_get_interrupt_mask(p_pio);
  400f0e:	68f8      	ldr	r0, [r7, #12]
  400f10:	4b13      	ldr	r3, [pc, #76]	; (400f60 <pio_handler_set_priority+0x64>)
  400f12:	4798      	blx	r3
  400f14:	6178      	str	r0, [r7, #20]
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  400f16:	f04f 31ff 	mov.w	r1, #4294967295
  400f1a:	68f8      	ldr	r0, [r7, #12]
  400f1c:	4b11      	ldr	r3, [pc, #68]	; (400f64 <pio_handler_set_priority+0x68>)
  400f1e:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  400f20:	68f8      	ldr	r0, [r7, #12]
  400f22:	4b11      	ldr	r3, [pc, #68]	; (400f68 <pio_handler_set_priority+0x6c>)
  400f24:	4798      	blx	r3
	NVIC_DisableIRQ(ul_irqn);
  400f26:	f997 300b 	ldrsb.w	r3, [r7, #11]
  400f2a:	4618      	mov	r0, r3
  400f2c:	4b0f      	ldr	r3, [pc, #60]	; (400f6c <pio_handler_set_priority+0x70>)
  400f2e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(ul_irqn);
  400f30:	f997 300b 	ldrsb.w	r3, [r7, #11]
  400f34:	4618      	mov	r0, r3
  400f36:	4b0e      	ldr	r3, [pc, #56]	; (400f70 <pio_handler_set_priority+0x74>)
  400f38:	4798      	blx	r3
	NVIC_SetPriority(ul_irqn, ul_priority);
  400f3a:	f997 300b 	ldrsb.w	r3, [r7, #11]
  400f3e:	6879      	ldr	r1, [r7, #4]
  400f40:	4618      	mov	r0, r3
  400f42:	4b0c      	ldr	r3, [pc, #48]	; (400f74 <pio_handler_set_priority+0x78>)
  400f44:	4798      	blx	r3
	NVIC_EnableIRQ(ul_irqn);
  400f46:	f997 300b 	ldrsb.w	r3, [r7, #11]
  400f4a:	4618      	mov	r0, r3
  400f4c:	4b0a      	ldr	r3, [pc, #40]	; (400f78 <pio_handler_set_priority+0x7c>)
  400f4e:	4798      	blx	r3
	pio_enable_interrupt(p_pio, bitmask);
  400f50:	6979      	ldr	r1, [r7, #20]
  400f52:	68f8      	ldr	r0, [r7, #12]
  400f54:	4b09      	ldr	r3, [pc, #36]	; (400f7c <pio_handler_set_priority+0x80>)
  400f56:	4798      	blx	r3
}
  400f58:	bf00      	nop
  400f5a:	3718      	adds	r7, #24
  400f5c:	46bd      	mov	sp, r7
  400f5e:	bd80      	pop	{r7, pc}
  400f60:	00400c29 	.word	0x00400c29
  400f64:	00400bf5 	.word	0x00400bf5
  400f68:	00400c11 	.word	0x00400c11
  400f6c:	00400c75 	.word	0x00400c75
  400f70:	00400ca9 	.word	0x00400ca9
  400f74:	00400cdd 	.word	0x00400cdd
  400f78:	00400c41 	.word	0x00400c41
  400f7c:	00400bd9 	.word	0x00400bd9

00400f80 <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  400f80:	b480      	push	{r7}
  400f82:	b083      	sub	sp, #12
  400f84:	af00      	add	r7, sp, #0
  400f86:	6078      	str	r0, [r7, #4]
	switch (ul_div) {
  400f88:	687b      	ldr	r3, [r7, #4]
  400f8a:	3b01      	subs	r3, #1
  400f8c:	2b03      	cmp	r3, #3
  400f8e:	d81a      	bhi.n	400fc6 <pmc_mck_set_division+0x46>
  400f90:	a201      	add	r2, pc, #4	; (adr r2, 400f98 <pmc_mck_set_division+0x18>)
  400f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400f96:	bf00      	nop
  400f98:	00400fa9 	.word	0x00400fa9
  400f9c:	00400faf 	.word	0x00400faf
  400fa0:	00400fb7 	.word	0x00400fb7
  400fa4:	00400fbf 	.word	0x00400fbf
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400fa8:	2300      	movs	r3, #0
  400faa:	607b      	str	r3, [r7, #4]
			break;
  400fac:	e00e      	b.n	400fcc <pmc_mck_set_division+0x4c>
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
  400fae:	f44f 7380 	mov.w	r3, #256	; 0x100
  400fb2:	607b      	str	r3, [r7, #4]
			break;
  400fb4:	e00a      	b.n	400fcc <pmc_mck_set_division+0x4c>
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400fb6:	f44f 7340 	mov.w	r3, #768	; 0x300
  400fba:	607b      	str	r3, [r7, #4]
			break;
  400fbc:	e006      	b.n	400fcc <pmc_mck_set_division+0x4c>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400fbe:	f44f 7300 	mov.w	r3, #512	; 0x200
  400fc2:	607b      	str	r3, [r7, #4]
			break;
  400fc4:	e002      	b.n	400fcc <pmc_mck_set_division+0x4c>
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400fc6:	2300      	movs	r3, #0
  400fc8:	607b      	str	r3, [r7, #4]
			break;
  400fca:	bf00      	nop
	}
	PMC->PMC_MCKR =
  400fcc:	490a      	ldr	r1, [pc, #40]	; (400ff8 <pmc_mck_set_division+0x78>)
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400fce:	4b0a      	ldr	r3, [pc, #40]	; (400ff8 <pmc_mck_set_division+0x78>)
  400fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400fd2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  400fd6:	687b      	ldr	r3, [r7, #4]
  400fd8:	4313      	orrs	r3, r2
	PMC->PMC_MCKR =
  400fda:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400fdc:	bf00      	nop
  400fde:	4b06      	ldr	r3, [pc, #24]	; (400ff8 <pmc_mck_set_division+0x78>)
  400fe0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400fe2:	f003 0308 	and.w	r3, r3, #8
  400fe6:	2b00      	cmp	r3, #0
  400fe8:	d0f9      	beq.n	400fde <pmc_mck_set_division+0x5e>
}
  400fea:	bf00      	nop
  400fec:	370c      	adds	r7, #12
  400fee:	46bd      	mov	sp, r7
  400ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ff4:	4770      	bx	lr
  400ff6:	bf00      	nop
  400ff8:	400e0600 	.word	0x400e0600

00400ffc <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  400ffc:	b480      	push	{r7}
  400ffe:	b085      	sub	sp, #20
  401000:	af00      	add	r7, sp, #0
  401002:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401004:	491d      	ldr	r1, [pc, #116]	; (40107c <pmc_switch_mck_to_pllack+0x80>)
  401006:	4b1d      	ldr	r3, [pc, #116]	; (40107c <pmc_switch_mck_to_pllack+0x80>)
  401008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40100a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  40100e:	687b      	ldr	r3, [r7, #4]
  401010:	4313      	orrs	r3, r2
  401012:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401014:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401018:	60fb      	str	r3, [r7, #12]
  40101a:	e007      	b.n	40102c <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40101c:	68fb      	ldr	r3, [r7, #12]
  40101e:	2b00      	cmp	r3, #0
  401020:	d101      	bne.n	401026 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  401022:	2301      	movs	r3, #1
  401024:	e023      	b.n	40106e <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  401026:	68fb      	ldr	r3, [r7, #12]
  401028:	3b01      	subs	r3, #1
  40102a:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40102c:	4b13      	ldr	r3, [pc, #76]	; (40107c <pmc_switch_mck_to_pllack+0x80>)
  40102e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401030:	f003 0308 	and.w	r3, r3, #8
  401034:	2b00      	cmp	r3, #0
  401036:	d0f1      	beq.n	40101c <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401038:	4a10      	ldr	r2, [pc, #64]	; (40107c <pmc_switch_mck_to_pllack+0x80>)
  40103a:	4b10      	ldr	r3, [pc, #64]	; (40107c <pmc_switch_mck_to_pllack+0x80>)
  40103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40103e:	f023 0303 	bic.w	r3, r3, #3
  401042:	f043 0302 	orr.w	r3, r3, #2
  401046:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401048:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40104c:	60fb      	str	r3, [r7, #12]
  40104e:	e007      	b.n	401060 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401050:	68fb      	ldr	r3, [r7, #12]
  401052:	2b00      	cmp	r3, #0
  401054:	d101      	bne.n	40105a <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  401056:	2301      	movs	r3, #1
  401058:	e009      	b.n	40106e <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  40105a:	68fb      	ldr	r3, [r7, #12]
  40105c:	3b01      	subs	r3, #1
  40105e:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401060:	4b06      	ldr	r3, [pc, #24]	; (40107c <pmc_switch_mck_to_pllack+0x80>)
  401062:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401064:	f003 0308 	and.w	r3, r3, #8
  401068:	2b00      	cmp	r3, #0
  40106a:	d0f1      	beq.n	401050 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  40106c:	2300      	movs	r3, #0
}
  40106e:	4618      	mov	r0, r3
  401070:	3714      	adds	r7, #20
  401072:	46bd      	mov	sp, r7
  401074:	f85d 7b04 	ldr.w	r7, [sp], #4
  401078:	4770      	bx	lr
  40107a:	bf00      	nop
  40107c:	400e0600 	.word	0x400e0600

00401080 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  401080:	b480      	push	{r7}
  401082:	b083      	sub	sp, #12
  401084:	af00      	add	r7, sp, #0
  401086:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  401088:	687b      	ldr	r3, [r7, #4]
  40108a:	2b01      	cmp	r3, #1
  40108c:	d105      	bne.n	40109a <pmc_switch_sclk_to_32kxtal+0x1a>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  40108e:	4907      	ldr	r1, [pc, #28]	; (4010ac <pmc_switch_sclk_to_32kxtal+0x2c>)
  401090:	4b06      	ldr	r3, [pc, #24]	; (4010ac <pmc_switch_sclk_to_32kxtal+0x2c>)
  401092:	689a      	ldr	r2, [r3, #8]
  401094:	4b06      	ldr	r3, [pc, #24]	; (4010b0 <pmc_switch_sclk_to_32kxtal+0x30>)
  401096:	4313      	orrs	r3, r2
  401098:	608b      	str	r3, [r1, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  40109a:	4b04      	ldr	r3, [pc, #16]	; (4010ac <pmc_switch_sclk_to_32kxtal+0x2c>)
  40109c:	4a05      	ldr	r2, [pc, #20]	; (4010b4 <pmc_switch_sclk_to_32kxtal+0x34>)
  40109e:	601a      	str	r2, [r3, #0]
}
  4010a0:	bf00      	nop
  4010a2:	370c      	adds	r7, #12
  4010a4:	46bd      	mov	sp, r7
  4010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4010aa:	4770      	bx	lr
  4010ac:	400e1810 	.word	0x400e1810
  4010b0:	a5100000 	.word	0xa5100000
  4010b4:	a5000008 	.word	0xa5000008

004010b8 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  4010b8:	b480      	push	{r7}
  4010ba:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  4010bc:	4b09      	ldr	r3, [pc, #36]	; (4010e4 <pmc_osc_is_ready_32kxtal+0x2c>)
  4010be:	695b      	ldr	r3, [r3, #20]
  4010c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  4010c4:	2b00      	cmp	r3, #0
  4010c6:	d007      	beq.n	4010d8 <pmc_osc_is_ready_32kxtal+0x20>
  4010c8:	4b07      	ldr	r3, [pc, #28]	; (4010e8 <pmc_osc_is_ready_32kxtal+0x30>)
  4010ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4010cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4010d0:	2b00      	cmp	r3, #0
  4010d2:	d001      	beq.n	4010d8 <pmc_osc_is_ready_32kxtal+0x20>
  4010d4:	2301      	movs	r3, #1
  4010d6:	e000      	b.n	4010da <pmc_osc_is_ready_32kxtal+0x22>
  4010d8:	2300      	movs	r3, #0
}
  4010da:	4618      	mov	r0, r3
  4010dc:	46bd      	mov	sp, r7
  4010de:	f85d 7b04 	ldr.w	r7, [sp], #4
  4010e2:	4770      	bx	lr
  4010e4:	400e1810 	.word	0x400e1810
  4010e8:	400e0600 	.word	0x400e0600

004010ec <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  4010ec:	b480      	push	{r7}
  4010ee:	b083      	sub	sp, #12
  4010f0:	af00      	add	r7, sp, #0
  4010f2:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  4010f4:	4915      	ldr	r1, [pc, #84]	; (40114c <pmc_switch_mainck_to_fastrc+0x60>)
  4010f6:	4b15      	ldr	r3, [pc, #84]	; (40114c <pmc_switch_mainck_to_fastrc+0x60>)
  4010f8:	6a1a      	ldr	r2, [r3, #32]
  4010fa:	4b15      	ldr	r3, [pc, #84]	; (401150 <pmc_switch_mainck_to_fastrc+0x64>)
  4010fc:	4313      	orrs	r3, r2
  4010fe:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  401100:	bf00      	nop
  401102:	4b12      	ldr	r3, [pc, #72]	; (40114c <pmc_switch_mainck_to_fastrc+0x60>)
  401104:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40110a:	2b00      	cmp	r3, #0
  40110c:	d0f9      	beq.n	401102 <pmc_switch_mainck_to_fastrc+0x16>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40110e:	490f      	ldr	r1, [pc, #60]	; (40114c <pmc_switch_mainck_to_fastrc+0x60>)
  401110:	4b0e      	ldr	r3, [pc, #56]	; (40114c <pmc_switch_mainck_to_fastrc+0x60>)
  401112:	6a1a      	ldr	r2, [r3, #32]
  401114:	4b0f      	ldr	r3, [pc, #60]	; (401154 <pmc_switch_mainck_to_fastrc+0x68>)
  401116:	4013      	ands	r3, r2
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  401118:	687a      	ldr	r2, [r7, #4]
  40111a:	4313      	orrs	r3, r2
  40111c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  401120:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  401122:	bf00      	nop
  401124:	4b09      	ldr	r3, [pc, #36]	; (40114c <pmc_switch_mainck_to_fastrc+0x60>)
  401126:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40112c:	2b00      	cmp	r3, #0
  40112e:	d0f9      	beq.n	401124 <pmc_switch_mainck_to_fastrc+0x38>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  401130:	4906      	ldr	r1, [pc, #24]	; (40114c <pmc_switch_mainck_to_fastrc+0x60>)
  401132:	4b06      	ldr	r3, [pc, #24]	; (40114c <pmc_switch_mainck_to_fastrc+0x60>)
  401134:	6a1a      	ldr	r2, [r3, #32]
  401136:	4b08      	ldr	r3, [pc, #32]	; (401158 <pmc_switch_mainck_to_fastrc+0x6c>)
  401138:	4013      	ands	r3, r2
  40113a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40113e:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD;
}
  401140:	bf00      	nop
  401142:	370c      	adds	r7, #12
  401144:	46bd      	mov	sp, r7
  401146:	f85d 7b04 	ldr.w	r7, [sp], #4
  40114a:	4770      	bx	lr
  40114c:	400e0600 	.word	0x400e0600
  401150:	00370008 	.word	0x00370008
  401154:	ffc8ff8f 	.word	0xffc8ff8f
  401158:	fec8ffff 	.word	0xfec8ffff

0040115c <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  40115c:	b480      	push	{r7}
  40115e:	b083      	sub	sp, #12
  401160:	af00      	add	r7, sp, #0
  401162:	6078      	str	r0, [r7, #4]
  401164:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401166:	687b      	ldr	r3, [r7, #4]
  401168:	2b00      	cmp	r3, #0
  40116a:	d008      	beq.n	40117e <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40116c:	4913      	ldr	r1, [pc, #76]	; (4011bc <pmc_switch_mainck_to_xtal+0x60>)
  40116e:	4b13      	ldr	r3, [pc, #76]	; (4011bc <pmc_switch_mainck_to_xtal+0x60>)
  401170:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401172:	4a13      	ldr	r2, [pc, #76]	; (4011c0 <pmc_switch_mainck_to_xtal+0x64>)
  401174:	401a      	ands	r2, r3
  401176:	4b13      	ldr	r3, [pc, #76]	; (4011c4 <pmc_switch_mainck_to_xtal+0x68>)
  401178:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40117a:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  40117c:	e018      	b.n	4011b0 <pmc_switch_mainck_to_xtal+0x54>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40117e:	490f      	ldr	r1, [pc, #60]	; (4011bc <pmc_switch_mainck_to_xtal+0x60>)
  401180:	4b0e      	ldr	r3, [pc, #56]	; (4011bc <pmc_switch_mainck_to_xtal+0x60>)
  401182:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401184:	4b10      	ldr	r3, [pc, #64]	; (4011c8 <pmc_switch_mainck_to_xtal+0x6c>)
  401186:	4013      	ands	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  401188:	683a      	ldr	r2, [r7, #0]
  40118a:	0212      	lsls	r2, r2, #8
  40118c:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40118e:	431a      	orrs	r2, r3
  401190:	4b0e      	ldr	r3, [pc, #56]	; (4011cc <pmc_switch_mainck_to_xtal+0x70>)
  401192:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401194:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401196:	bf00      	nop
  401198:	4b08      	ldr	r3, [pc, #32]	; (4011bc <pmc_switch_mainck_to_xtal+0x60>)
  40119a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40119c:	f003 0301 	and.w	r3, r3, #1
  4011a0:	2b00      	cmp	r3, #0
  4011a2:	d0f9      	beq.n	401198 <pmc_switch_mainck_to_xtal+0x3c>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4011a4:	4905      	ldr	r1, [pc, #20]	; (4011bc <pmc_switch_mainck_to_xtal+0x60>)
  4011a6:	4b05      	ldr	r3, [pc, #20]	; (4011bc <pmc_switch_mainck_to_xtal+0x60>)
  4011a8:	6a1a      	ldr	r2, [r3, #32]
  4011aa:	4b09      	ldr	r3, [pc, #36]	; (4011d0 <pmc_switch_mainck_to_xtal+0x74>)
  4011ac:	4313      	orrs	r3, r2
  4011ae:	620b      	str	r3, [r1, #32]
}
  4011b0:	bf00      	nop
  4011b2:	370c      	adds	r7, #12
  4011b4:	46bd      	mov	sp, r7
  4011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4011ba:	4770      	bx	lr
  4011bc:	400e0600 	.word	0x400e0600
  4011c0:	fec8fffc 	.word	0xfec8fffc
  4011c4:	01370002 	.word	0x01370002
  4011c8:	ffc8fffc 	.word	0xffc8fffc
  4011cc:	00370001 	.word	0x00370001
  4011d0:	01370000 	.word	0x01370000

004011d4 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  4011d4:	b480      	push	{r7}
  4011d6:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4011d8:	4b04      	ldr	r3, [pc, #16]	; (4011ec <pmc_osc_is_ready_mainck+0x18>)
  4011da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4011dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  4011e0:	4618      	mov	r0, r3
  4011e2:	46bd      	mov	sp, r7
  4011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4011e8:	4770      	bx	lr
  4011ea:	bf00      	nop
  4011ec:	400e0600 	.word	0x400e0600

004011f0 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  4011f0:	b480      	push	{r7}
  4011f2:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4011f4:	4b04      	ldr	r3, [pc, #16]	; (401208 <pmc_disable_pllack+0x18>)
  4011f6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4011fa:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  4011fc:	bf00      	nop
  4011fe:	46bd      	mov	sp, r7
  401200:	f85d 7b04 	ldr.w	r7, [sp], #4
  401204:	4770      	bx	lr
  401206:	bf00      	nop
  401208:	400e0600 	.word	0x400e0600

0040120c <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  40120c:	b480      	push	{r7}
  40120e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401210:	4b04      	ldr	r3, [pc, #16]	; (401224 <pmc_is_locked_pllack+0x18>)
  401212:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401214:	f003 0302 	and.w	r3, r3, #2
}
  401218:	4618      	mov	r0, r3
  40121a:	46bd      	mov	sp, r7
  40121c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401220:	4770      	bx	lr
  401222:	bf00      	nop
  401224:	400e0600 	.word	0x400e0600

00401228 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
  401228:	b480      	push	{r7}
  40122a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
  40122c:	4b04      	ldr	r3, [pc, #16]	; (401240 <pmc_is_locked_upll+0x18>)
  40122e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401230:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
  401234:	4618      	mov	r0, r3
  401236:	46bd      	mov	sp, r7
  401238:	f85d 7b04 	ldr.w	r7, [sp], #4
  40123c:	4770      	bx	lr
  40123e:	bf00      	nop
  401240:	400e0600 	.word	0x400e0600

00401244 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  401244:	b480      	push	{r7}
  401246:	b083      	sub	sp, #12
  401248:	af00      	add	r7, sp, #0
  40124a:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  40124c:	687b      	ldr	r3, [r7, #4]
  40124e:	2b3f      	cmp	r3, #63	; 0x3f
  401250:	d901      	bls.n	401256 <pmc_enable_periph_clk+0x12>
		return 1;
  401252:	2301      	movs	r3, #1
  401254:	e02f      	b.n	4012b6 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  401256:	687b      	ldr	r3, [r7, #4]
  401258:	2b1f      	cmp	r3, #31
  40125a:	d813      	bhi.n	401284 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  40125c:	4b19      	ldr	r3, [pc, #100]	; (4012c4 <pmc_enable_periph_clk+0x80>)
  40125e:	699a      	ldr	r2, [r3, #24]
  401260:	2101      	movs	r1, #1
  401262:	687b      	ldr	r3, [r7, #4]
  401264:	fa01 f303 	lsl.w	r3, r1, r3
  401268:	401a      	ands	r2, r3
  40126a:	2101      	movs	r1, #1
  40126c:	687b      	ldr	r3, [r7, #4]
  40126e:	fa01 f303 	lsl.w	r3, r1, r3
  401272:	429a      	cmp	r2, r3
  401274:	d01e      	beq.n	4012b4 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  401276:	4a13      	ldr	r2, [pc, #76]	; (4012c4 <pmc_enable_periph_clk+0x80>)
  401278:	2101      	movs	r1, #1
  40127a:	687b      	ldr	r3, [r7, #4]
  40127c:	fa01 f303 	lsl.w	r3, r1, r3
  401280:	6113      	str	r3, [r2, #16]
  401282:	e017      	b.n	4012b4 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  401284:	687b      	ldr	r3, [r7, #4]
  401286:	3b20      	subs	r3, #32
  401288:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40128a:	4b0e      	ldr	r3, [pc, #56]	; (4012c4 <pmc_enable_periph_clk+0x80>)
  40128c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401290:	2101      	movs	r1, #1
  401292:	687b      	ldr	r3, [r7, #4]
  401294:	fa01 f303 	lsl.w	r3, r1, r3
  401298:	401a      	ands	r2, r3
  40129a:	2101      	movs	r1, #1
  40129c:	687b      	ldr	r3, [r7, #4]
  40129e:	fa01 f303 	lsl.w	r3, r1, r3
  4012a2:	429a      	cmp	r2, r3
  4012a4:	d006      	beq.n	4012b4 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  4012a6:	4a07      	ldr	r2, [pc, #28]	; (4012c4 <pmc_enable_periph_clk+0x80>)
  4012a8:	2101      	movs	r1, #1
  4012aa:	687b      	ldr	r3, [r7, #4]
  4012ac:	fa01 f303 	lsl.w	r3, r1, r3
  4012b0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  4012b4:	2300      	movs	r3, #0
}
  4012b6:	4618      	mov	r0, r3
  4012b8:	370c      	adds	r7, #12
  4012ba:	46bd      	mov	sp, r7
  4012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4012c0:	4770      	bx	lr
  4012c2:	bf00      	nop
  4012c4:	400e0600 	.word	0x400e0600

004012c8 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  4012c8:	b480      	push	{r7}
  4012ca:	b085      	sub	sp, #20
  4012cc:	af00      	add	r7, sp, #0
  4012ce:	6078      	str	r0, [r7, #4]
  4012d0:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
  4012d2:	2300      	movs	r3, #0
  4012d4:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  4012d6:	687b      	ldr	r3, [r7, #4]
  4012d8:	22ac      	movs	r2, #172	; 0xac
  4012da:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  4012dc:	683b      	ldr	r3, [r7, #0]
  4012de:	681a      	ldr	r2, [r3, #0]
  4012e0:	683b      	ldr	r3, [r7, #0]
  4012e2:	685b      	ldr	r3, [r3, #4]
  4012e4:	fbb2 f3f3 	udiv	r3, r2, r3
  4012e8:	091b      	lsrs	r3, r3, #4
  4012ea:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  4012ec:	68fb      	ldr	r3, [r7, #12]
  4012ee:	2b00      	cmp	r3, #0
  4012f0:	d003      	beq.n	4012fa <uart_init+0x32>
  4012f2:	68fb      	ldr	r3, [r7, #12]
  4012f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  4012f8:	d301      	bcc.n	4012fe <uart_init+0x36>
		return 1;
  4012fa:	2301      	movs	r3, #1
  4012fc:	e00a      	b.n	401314 <uart_init+0x4c>

	p_uart->UART_BRGR = cd;
  4012fe:	687b      	ldr	r3, [r7, #4]
  401300:	68fa      	ldr	r2, [r7, #12]
  401302:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  401304:	683b      	ldr	r3, [r7, #0]
  401306:	689a      	ldr	r2, [r3, #8]
  401308:	687b      	ldr	r3, [r7, #4]
  40130a:	605a      	str	r2, [r3, #4]
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  40130c:	687b      	ldr	r3, [r7, #4]
  40130e:	2250      	movs	r2, #80	; 0x50
  401310:	601a      	str	r2, [r3, #0]

	return 0;
  401312:	2300      	movs	r3, #0
}
  401314:	4618      	mov	r0, r3
  401316:	3714      	adds	r7, #20
  401318:	46bd      	mov	sp, r7
  40131a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40131e:	4770      	bx	lr

00401320 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
  401320:	b480      	push	{r7}
  401322:	b083      	sub	sp, #12
  401324:	af00      	add	r7, sp, #0
  401326:	6078      	str	r0, [r7, #4]
  401328:	460b      	mov	r3, r1
  40132a:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  40132c:	687b      	ldr	r3, [r7, #4]
  40132e:	695b      	ldr	r3, [r3, #20]
  401330:	f003 0302 	and.w	r3, r3, #2
  401334:	2b00      	cmp	r3, #0
  401336:	d101      	bne.n	40133c <uart_write+0x1c>
		return 1;
  401338:	2301      	movs	r3, #1
  40133a:	e003      	b.n	401344 <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
  40133c:	78fa      	ldrb	r2, [r7, #3]
  40133e:	687b      	ldr	r3, [r7, #4]
  401340:	61da      	str	r2, [r3, #28]
	return 0;
  401342:	2300      	movs	r3, #0
}
  401344:	4618      	mov	r0, r3
  401346:	370c      	adds	r7, #12
  401348:	46bd      	mov	sp, r7
  40134a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40134e:	4770      	bx	lr

00401350 <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
  401350:	b480      	push	{r7}
  401352:	b083      	sub	sp, #12
  401354:	af00      	add	r7, sp, #0
  401356:	6078      	str	r0, [r7, #4]
  401358:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  40135a:	687b      	ldr	r3, [r7, #4]
  40135c:	695b      	ldr	r3, [r3, #20]
  40135e:	f003 0301 	and.w	r3, r3, #1
  401362:	2b00      	cmp	r3, #0
  401364:	d101      	bne.n	40136a <uart_read+0x1a>
		return 1;
  401366:	2301      	movs	r3, #1
  401368:	e005      	b.n	401376 <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  40136a:	687b      	ldr	r3, [r7, #4]
  40136c:	699b      	ldr	r3, [r3, #24]
  40136e:	b2da      	uxtb	r2, r3
  401370:	683b      	ldr	r3, [r7, #0]
  401372:	701a      	strb	r2, [r3, #0]
	return 0;
  401374:	2300      	movs	r3, #0
}
  401376:	4618      	mov	r0, r3
  401378:	370c      	adds	r7, #12
  40137a:	46bd      	mov	sp, r7
  40137c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401380:	4770      	bx	lr

00401382 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  401382:	b480      	push	{r7}
  401384:	b089      	sub	sp, #36	; 0x24
  401386:	af00      	add	r7, sp, #0
  401388:	60f8      	str	r0, [r7, #12]
  40138a:	60b9      	str	r1, [r7, #8]
  40138c:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  40138e:	68bb      	ldr	r3, [r7, #8]
  401390:	011a      	lsls	r2, r3, #4
  401392:	687b      	ldr	r3, [r7, #4]
  401394:	429a      	cmp	r2, r3
  401396:	d802      	bhi.n	40139e <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  401398:	2310      	movs	r3, #16
  40139a:	61fb      	str	r3, [r7, #28]
  40139c:	e001      	b.n	4013a2 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  40139e:	2308      	movs	r3, #8
  4013a0:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4013a2:	687b      	ldr	r3, [r7, #4]
  4013a4:	00da      	lsls	r2, r3, #3
  4013a6:	69fb      	ldr	r3, [r7, #28]
  4013a8:	68b9      	ldr	r1, [r7, #8]
  4013aa:	fb01 f303 	mul.w	r3, r1, r3
  4013ae:	085b      	lsrs	r3, r3, #1
  4013b0:	441a      	add	r2, r3
  4013b2:	69fb      	ldr	r3, [r7, #28]
  4013b4:	68b9      	ldr	r1, [r7, #8]
  4013b6:	fb01 f303 	mul.w	r3, r1, r3
  4013ba:	fbb2 f3f3 	udiv	r3, r2, r3
  4013be:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  4013c0:	69bb      	ldr	r3, [r7, #24]
  4013c2:	08db      	lsrs	r3, r3, #3
  4013c4:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  4013c6:	69bb      	ldr	r3, [r7, #24]
  4013c8:	f003 0307 	and.w	r3, r3, #7
  4013cc:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4013ce:	697b      	ldr	r3, [r7, #20]
  4013d0:	2b00      	cmp	r3, #0
  4013d2:	d003      	beq.n	4013dc <usart_set_async_baudrate+0x5a>
  4013d4:	697b      	ldr	r3, [r7, #20]
  4013d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  4013da:	d301      	bcc.n	4013e0 <usart_set_async_baudrate+0x5e>
		return 1;
  4013dc:	2301      	movs	r3, #1
  4013de:	e00f      	b.n	401400 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  4013e0:	69fb      	ldr	r3, [r7, #28]
  4013e2:	2b08      	cmp	r3, #8
  4013e4:	d105      	bne.n	4013f2 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  4013e6:	68fb      	ldr	r3, [r7, #12]
  4013e8:	685b      	ldr	r3, [r3, #4]
  4013ea:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  4013ee:	68fb      	ldr	r3, [r7, #12]
  4013f0:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4013f2:	693b      	ldr	r3, [r7, #16]
  4013f4:	041a      	lsls	r2, r3, #16
  4013f6:	697b      	ldr	r3, [r7, #20]
  4013f8:	431a      	orrs	r2, r3
  4013fa:	68fb      	ldr	r3, [r7, #12]
  4013fc:	621a      	str	r2, [r3, #32]

	return 0;
  4013fe:	2300      	movs	r3, #0
}
  401400:	4618      	mov	r0, r3
  401402:	3724      	adds	r7, #36	; 0x24
  401404:	46bd      	mov	sp, r7
  401406:	f85d 7b04 	ldr.w	r7, [sp], #4
  40140a:	4770      	bx	lr

0040140c <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  40140c:	b580      	push	{r7, lr}
  40140e:	b082      	sub	sp, #8
  401410:	af00      	add	r7, sp, #0
  401412:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  401414:	6878      	ldr	r0, [r7, #4]
  401416:	4b0d      	ldr	r3, [pc, #52]	; (40144c <usart_reset+0x40>)
  401418:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  40141a:	687b      	ldr	r3, [r7, #4]
  40141c:	2200      	movs	r2, #0
  40141e:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  401420:	687b      	ldr	r3, [r7, #4]
  401422:	2200      	movs	r2, #0
  401424:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  401426:	687b      	ldr	r3, [r7, #4]
  401428:	2200      	movs	r2, #0
  40142a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  40142c:	6878      	ldr	r0, [r7, #4]
  40142e:	4b08      	ldr	r3, [pc, #32]	; (401450 <usart_reset+0x44>)
  401430:	4798      	blx	r3
	usart_reset_rx(p_usart);
  401432:	6878      	ldr	r0, [r7, #4]
  401434:	4b07      	ldr	r3, [pc, #28]	; (401454 <usart_reset+0x48>)
  401436:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  401438:	6878      	ldr	r0, [r7, #4]
  40143a:	4b07      	ldr	r3, [pc, #28]	; (401458 <usart_reset+0x4c>)
  40143c:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  40143e:	6878      	ldr	r0, [r7, #4]
  401440:	4b06      	ldr	r3, [pc, #24]	; (40145c <usart_reset+0x50>)
  401442:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
  401444:	bf00      	nop
  401446:	3708      	adds	r7, #8
  401448:	46bd      	mov	sp, r7
  40144a:	bd80      	pop	{r7, pc}
  40144c:	004015ed 	.word	0x004015ed
  401450:	004014ff 	.word	0x004014ff
  401454:	00401533 	.word	0x00401533
  401458:	0040154d 	.word	0x0040154d
  40145c:	00401569 	.word	0x00401569

00401460 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  401460:	b580      	push	{r7, lr}
  401462:	b084      	sub	sp, #16
  401464:	af00      	add	r7, sp, #0
  401466:	60f8      	str	r0, [r7, #12]
  401468:	60b9      	str	r1, [r7, #8]
  40146a:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  40146c:	68f8      	ldr	r0, [r7, #12]
  40146e:	4b1a      	ldr	r3, [pc, #104]	; (4014d8 <usart_init_rs232+0x78>)
  401470:	4798      	blx	r3

	ul_reg_val = 0;
  401472:	4b1a      	ldr	r3, [pc, #104]	; (4014dc <usart_init_rs232+0x7c>)
  401474:	2200      	movs	r2, #0
  401476:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  401478:	68bb      	ldr	r3, [r7, #8]
  40147a:	2b00      	cmp	r3, #0
  40147c:	d009      	beq.n	401492 <usart_init_rs232+0x32>
  40147e:	68bb      	ldr	r3, [r7, #8]
  401480:	681b      	ldr	r3, [r3, #0]
  401482:	687a      	ldr	r2, [r7, #4]
  401484:	4619      	mov	r1, r3
  401486:	68f8      	ldr	r0, [r7, #12]
  401488:	4b15      	ldr	r3, [pc, #84]	; (4014e0 <usart_init_rs232+0x80>)
  40148a:	4798      	blx	r3
  40148c:	4603      	mov	r3, r0
  40148e:	2b00      	cmp	r3, #0
  401490:	d001      	beq.n	401496 <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  401492:	2301      	movs	r3, #1
  401494:	e01b      	b.n	4014ce <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401496:	68bb      	ldr	r3, [r7, #8]
  401498:	685a      	ldr	r2, [r3, #4]
  40149a:	68bb      	ldr	r3, [r7, #8]
  40149c:	689b      	ldr	r3, [r3, #8]
  40149e:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4014a0:	68bb      	ldr	r3, [r7, #8]
  4014a2:	691b      	ldr	r3, [r3, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4014a4:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4014a6:	68bb      	ldr	r3, [r7, #8]
  4014a8:	68db      	ldr	r3, [r3, #12]
  4014aa:	431a      	orrs	r2, r3
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4014ac:	4b0b      	ldr	r3, [pc, #44]	; (4014dc <usart_init_rs232+0x7c>)
  4014ae:	681b      	ldr	r3, [r3, #0]
  4014b0:	4313      	orrs	r3, r2
  4014b2:	4a0a      	ldr	r2, [pc, #40]	; (4014dc <usart_init_rs232+0x7c>)
  4014b4:	6013      	str	r3, [r2, #0]

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  4014b6:	4b09      	ldr	r3, [pc, #36]	; (4014dc <usart_init_rs232+0x7c>)
  4014b8:	681b      	ldr	r3, [r3, #0]
  4014ba:	4a08      	ldr	r2, [pc, #32]	; (4014dc <usart_init_rs232+0x7c>)
  4014bc:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  4014be:	68fb      	ldr	r3, [r7, #12]
  4014c0:	685a      	ldr	r2, [r3, #4]
  4014c2:	4b06      	ldr	r3, [pc, #24]	; (4014dc <usart_init_rs232+0x7c>)
  4014c4:	681b      	ldr	r3, [r3, #0]
  4014c6:	431a      	orrs	r2, r3
  4014c8:	68fb      	ldr	r3, [r7, #12]
  4014ca:	605a      	str	r2, [r3, #4]

	return 0;
  4014cc:	2300      	movs	r3, #0
}
  4014ce:	4618      	mov	r0, r3
  4014d0:	3710      	adds	r7, #16
  4014d2:	46bd      	mov	sp, r7
  4014d4:	bd80      	pop	{r7, pc}
  4014d6:	bf00      	nop
  4014d8:	0040140d 	.word	0x0040140d
  4014dc:	20400a4c 	.word	0x20400a4c
  4014e0:	00401383 	.word	0x00401383

004014e4 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  4014e4:	b480      	push	{r7}
  4014e6:	b083      	sub	sp, #12
  4014e8:	af00      	add	r7, sp, #0
  4014ea:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  4014ec:	687b      	ldr	r3, [r7, #4]
  4014ee:	2240      	movs	r2, #64	; 0x40
  4014f0:	601a      	str	r2, [r3, #0]
}
  4014f2:	bf00      	nop
  4014f4:	370c      	adds	r7, #12
  4014f6:	46bd      	mov	sp, r7
  4014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4014fc:	4770      	bx	lr

004014fe <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  4014fe:	b480      	push	{r7}
  401500:	b083      	sub	sp, #12
  401502:	af00      	add	r7, sp, #0
  401504:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  401506:	687b      	ldr	r3, [r7, #4]
  401508:	2288      	movs	r2, #136	; 0x88
  40150a:	601a      	str	r2, [r3, #0]
}
  40150c:	bf00      	nop
  40150e:	370c      	adds	r7, #12
  401510:	46bd      	mov	sp, r7
  401512:	f85d 7b04 	ldr.w	r7, [sp], #4
  401516:	4770      	bx	lr

00401518 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  401518:	b480      	push	{r7}
  40151a:	b083      	sub	sp, #12
  40151c:	af00      	add	r7, sp, #0
  40151e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  401520:	687b      	ldr	r3, [r7, #4]
  401522:	2210      	movs	r2, #16
  401524:	601a      	str	r2, [r3, #0]
}
  401526:	bf00      	nop
  401528:	370c      	adds	r7, #12
  40152a:	46bd      	mov	sp, r7
  40152c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401530:	4770      	bx	lr

00401532 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  401532:	b480      	push	{r7}
  401534:	b083      	sub	sp, #12
  401536:	af00      	add	r7, sp, #0
  401538:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  40153a:	687b      	ldr	r3, [r7, #4]
  40153c:	2224      	movs	r2, #36	; 0x24
  40153e:	601a      	str	r2, [r3, #0]
}
  401540:	bf00      	nop
  401542:	370c      	adds	r7, #12
  401544:	46bd      	mov	sp, r7
  401546:	f85d 7b04 	ldr.w	r7, [sp], #4
  40154a:	4770      	bx	lr

0040154c <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  40154c:	b480      	push	{r7}
  40154e:	b083      	sub	sp, #12
  401550:	af00      	add	r7, sp, #0
  401552:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  401554:	687b      	ldr	r3, [r7, #4]
  401556:	f44f 7280 	mov.w	r2, #256	; 0x100
  40155a:	601a      	str	r2, [r3, #0]
}
  40155c:	bf00      	nop
  40155e:	370c      	adds	r7, #12
  401560:	46bd      	mov	sp, r7
  401562:	f85d 7b04 	ldr.w	r7, [sp], #4
  401566:	4770      	bx	lr

00401568 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  401568:	b480      	push	{r7}
  40156a:	b083      	sub	sp, #12
  40156c:	af00      	add	r7, sp, #0
  40156e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  401570:	687b      	ldr	r3, [r7, #4]
  401572:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  401576:	601a      	str	r2, [r3, #0]
}
  401578:	bf00      	nop
  40157a:	370c      	adds	r7, #12
  40157c:	46bd      	mov	sp, r7
  40157e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401582:	4770      	bx	lr

00401584 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
  401584:	b480      	push	{r7}
  401586:	b083      	sub	sp, #12
  401588:	af00      	add	r7, sp, #0
  40158a:	6078      	str	r0, [r7, #4]
  40158c:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  40158e:	687b      	ldr	r3, [r7, #4]
  401590:	695b      	ldr	r3, [r3, #20]
  401592:	f003 0302 	and.w	r3, r3, #2
  401596:	2b00      	cmp	r3, #0
  401598:	d101      	bne.n	40159e <usart_write+0x1a>
		return 1;
  40159a:	2301      	movs	r3, #1
  40159c:	e005      	b.n	4015aa <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  40159e:	683b      	ldr	r3, [r7, #0]
  4015a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
  4015a4:	687b      	ldr	r3, [r7, #4]
  4015a6:	61da      	str	r2, [r3, #28]
	return 0;
  4015a8:	2300      	movs	r3, #0
}
  4015aa:	4618      	mov	r0, r3
  4015ac:	370c      	adds	r7, #12
  4015ae:	46bd      	mov	sp, r7
  4015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4015b4:	4770      	bx	lr

004015b6 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  4015b6:	b480      	push	{r7}
  4015b8:	b083      	sub	sp, #12
  4015ba:	af00      	add	r7, sp, #0
  4015bc:	6078      	str	r0, [r7, #4]
  4015be:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4015c0:	687b      	ldr	r3, [r7, #4]
  4015c2:	695b      	ldr	r3, [r3, #20]
  4015c4:	f003 0301 	and.w	r3, r3, #1
  4015c8:	2b00      	cmp	r3, #0
  4015ca:	d101      	bne.n	4015d0 <usart_read+0x1a>
		return 1;
  4015cc:	2301      	movs	r3, #1
  4015ce:	e006      	b.n	4015de <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4015d0:	687b      	ldr	r3, [r7, #4]
  4015d2:	699b      	ldr	r3, [r3, #24]
  4015d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
  4015d8:	683b      	ldr	r3, [r7, #0]
  4015da:	601a      	str	r2, [r3, #0]

	return 0;
  4015dc:	2300      	movs	r3, #0
}
  4015de:	4618      	mov	r0, r3
  4015e0:	370c      	adds	r7, #12
  4015e2:	46bd      	mov	sp, r7
  4015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4015e8:	4770      	bx	lr
	...

004015ec <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  4015ec:	b480      	push	{r7}
  4015ee:	b083      	sub	sp, #12
  4015f0:	af00      	add	r7, sp, #0
  4015f2:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  4015f4:	687b      	ldr	r3, [r7, #4]
  4015f6:	4a04      	ldr	r2, [pc, #16]	; (401608 <usart_disable_writeprotect+0x1c>)
  4015f8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  4015fc:	bf00      	nop
  4015fe:	370c      	adds	r7, #12
  401600:	46bd      	mov	sp, r7
  401602:	f85d 7b04 	ldr.w	r7, [sp], #4
  401606:	4770      	bx	lr
  401608:	55534100 	.word	0x55534100

0040160c <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  40160c:	b480      	push	{r7}
  40160e:	b083      	sub	sp, #12
  401610:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401612:	f3ef 8310 	mrs	r3, PRIMASK
  401616:	607b      	str	r3, [r7, #4]
  return(result);
  401618:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40161a:	2b00      	cmp	r3, #0
  40161c:	bf0c      	ite	eq
  40161e:	2301      	moveq	r3, #1
  401620:	2300      	movne	r3, #0
  401622:	b2db      	uxtb	r3, r3
  401624:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  401626:	b672      	cpsid	i
  __ASM volatile ("dmb");
  401628:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40162c:	4b04      	ldr	r3, [pc, #16]	; (401640 <cpu_irq_save+0x34>)
  40162e:	2200      	movs	r2, #0
  401630:	701a      	strb	r2, [r3, #0]
	return flags;
  401632:	683b      	ldr	r3, [r7, #0]
}
  401634:	4618      	mov	r0, r3
  401636:	370c      	adds	r7, #12
  401638:	46bd      	mov	sp, r7
  40163a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40163e:	4770      	bx	lr
  401640:	20400000 	.word	0x20400000

00401644 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  401644:	b480      	push	{r7}
  401646:	b083      	sub	sp, #12
  401648:	af00      	add	r7, sp, #0
  40164a:	6078      	str	r0, [r7, #4]
	return (flags);
  40164c:	687b      	ldr	r3, [r7, #4]
  40164e:	2b00      	cmp	r3, #0
  401650:	bf14      	ite	ne
  401652:	2301      	movne	r3, #1
  401654:	2300      	moveq	r3, #0
  401656:	b2db      	uxtb	r3, r3
}
  401658:	4618      	mov	r0, r3
  40165a:	370c      	adds	r7, #12
  40165c:	46bd      	mov	sp, r7
  40165e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401662:	4770      	bx	lr

00401664 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  401664:	b580      	push	{r7, lr}
  401666:	b082      	sub	sp, #8
  401668:	af00      	add	r7, sp, #0
  40166a:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  40166c:	6878      	ldr	r0, [r7, #4]
  40166e:	4b07      	ldr	r3, [pc, #28]	; (40168c <cpu_irq_restore+0x28>)
  401670:	4798      	blx	r3
  401672:	4603      	mov	r3, r0
  401674:	2b00      	cmp	r3, #0
  401676:	d005      	beq.n	401684 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  401678:	4b05      	ldr	r3, [pc, #20]	; (401690 <cpu_irq_restore+0x2c>)
  40167a:	2201      	movs	r2, #1
  40167c:	701a      	strb	r2, [r3, #0]
  40167e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401682:	b662      	cpsie	i
}
  401684:	bf00      	nop
  401686:	3708      	adds	r7, #8
  401688:	46bd      	mov	sp, r7
  40168a:	bd80      	pop	{r7, pc}
  40168c:	00401645 	.word	0x00401645
  401690:	20400000 	.word	0x20400000

00401694 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  401694:	b580      	push	{r7, lr}
  401696:	b084      	sub	sp, #16
  401698:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  40169a:	4b1e      	ldr	r3, [pc, #120]	; (401714 <Reset_Handler+0x80>)
  40169c:	60fb      	str	r3, [r7, #12]
        pDest = &_srelocate;
  40169e:	4b1e      	ldr	r3, [pc, #120]	; (401718 <Reset_Handler+0x84>)
  4016a0:	60bb      	str	r3, [r7, #8]

        if (pSrc != pDest) {
  4016a2:	68fa      	ldr	r2, [r7, #12]
  4016a4:	68bb      	ldr	r3, [r7, #8]
  4016a6:	429a      	cmp	r2, r3
  4016a8:	d00c      	beq.n	4016c4 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  4016aa:	e007      	b.n	4016bc <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  4016ac:	68bb      	ldr	r3, [r7, #8]
  4016ae:	1d1a      	adds	r2, r3, #4
  4016b0:	60ba      	str	r2, [r7, #8]
  4016b2:	68fa      	ldr	r2, [r7, #12]
  4016b4:	1d11      	adds	r1, r2, #4
  4016b6:	60f9      	str	r1, [r7, #12]
  4016b8:	6812      	ldr	r2, [r2, #0]
  4016ba:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
  4016bc:	68bb      	ldr	r3, [r7, #8]
  4016be:	4a17      	ldr	r2, [pc, #92]	; (40171c <Reset_Handler+0x88>)
  4016c0:	4293      	cmp	r3, r2
  4016c2:	d3f3      	bcc.n	4016ac <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  4016c4:	4b16      	ldr	r3, [pc, #88]	; (401720 <Reset_Handler+0x8c>)
  4016c6:	60bb      	str	r3, [r7, #8]
  4016c8:	e004      	b.n	4016d4 <Reset_Handler+0x40>
                *pDest++ = 0;
  4016ca:	68bb      	ldr	r3, [r7, #8]
  4016cc:	1d1a      	adds	r2, r3, #4
  4016ce:	60ba      	str	r2, [r7, #8]
  4016d0:	2200      	movs	r2, #0
  4016d2:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
  4016d4:	68bb      	ldr	r3, [r7, #8]
  4016d6:	4a13      	ldr	r2, [pc, #76]	; (401724 <Reset_Handler+0x90>)
  4016d8:	4293      	cmp	r3, r2
  4016da:	d3f6      	bcc.n	4016ca <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  4016dc:	4b12      	ldr	r3, [pc, #72]	; (401728 <Reset_Handler+0x94>)
  4016de:	60fb      	str	r3, [r7, #12]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4016e0:	4a12      	ldr	r2, [pc, #72]	; (40172c <Reset_Handler+0x98>)
  4016e2:	68fb      	ldr	r3, [r7, #12]
  4016e4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4016e8:	6093      	str	r3, [r2, #8]
 * \brief Enable FPU
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
  4016ea:	4b11      	ldr	r3, [pc, #68]	; (401730 <Reset_Handler+0x9c>)
  4016ec:	4798      	blx	r3
  4016ee:	6078      	str	r0, [r7, #4]
	REG_CPACR |=  (0xFu << 20);
  4016f0:	4a10      	ldr	r2, [pc, #64]	; (401734 <Reset_Handler+0xa0>)
  4016f2:	4b10      	ldr	r3, [pc, #64]	; (401734 <Reset_Handler+0xa0>)
  4016f4:	681b      	ldr	r3, [r3, #0]
  4016f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4016fa:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  4016fc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401700:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	cpu_irq_restore(flags);
  401704:	6878      	ldr	r0, [r7, #4]
  401706:	4b0c      	ldr	r3, [pc, #48]	; (401738 <Reset_Handler+0xa4>)
  401708:	4798      	blx	r3
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  40170a:	4b0c      	ldr	r3, [pc, #48]	; (40173c <Reset_Handler+0xa8>)
  40170c:	4798      	blx	r3

        /* Branch to main function */
        main();
  40170e:	4b0c      	ldr	r3, [pc, #48]	; (401740 <Reset_Handler+0xac>)
  401710:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  401712:	e7fe      	b.n	401712 <Reset_Handler+0x7e>
  401714:	00405354 	.word	0x00405354
  401718:	20400000 	.word	0x20400000
  40171c:	204009bc 	.word	0x204009bc
  401720:	204009bc 	.word	0x204009bc
  401724:	20400a9c 	.word	0x20400a9c
  401728:	00400000 	.word	0x00400000
  40172c:	e000ed00 	.word	0xe000ed00
  401730:	0040160d 	.word	0x0040160d
  401734:	e000ed88 	.word	0xe000ed88
  401738:	00401665 	.word	0x00401665
  40173c:	00402229 	.word	0x00402229
  401740:	00402139 	.word	0x00402139

00401744 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401744:	b480      	push	{r7}
  401746:	af00      	add	r7, sp, #0
        while (1) {
  401748:	e7fe      	b.n	401748 <Dummy_Handler+0x4>
	...

0040174c <SystemCoreClockUpdate>:

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  40174c:	b480      	push	{r7}
  40174e:	af00      	add	r7, sp, #0
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401750:	4b52      	ldr	r3, [pc, #328]	; (40189c <SystemCoreClockUpdate+0x150>)
  401752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401754:	f003 0303 	and.w	r3, r3, #3
  401758:	2b01      	cmp	r3, #1
  40175a:	d014      	beq.n	401786 <SystemCoreClockUpdate+0x3a>
  40175c:	2b01      	cmp	r3, #1
  40175e:	d302      	bcc.n	401766 <SystemCoreClockUpdate+0x1a>
  401760:	2b02      	cmp	r3, #2
  401762:	d038      	beq.n	4017d6 <SystemCoreClockUpdate+0x8a>
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
    break;

    default:
    break;
  401764:	e07a      	b.n	40185c <SystemCoreClockUpdate+0x110>
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401766:	4b4e      	ldr	r3, [pc, #312]	; (4018a0 <SystemCoreClockUpdate+0x154>)
  401768:	695b      	ldr	r3, [r3, #20]
  40176a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40176e:	2b00      	cmp	r3, #0
  401770:	d004      	beq.n	40177c <SystemCoreClockUpdate+0x30>
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401772:	4b4c      	ldr	r3, [pc, #304]	; (4018a4 <SystemCoreClockUpdate+0x158>)
  401774:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401778:	601a      	str	r2, [r3, #0]
    break;
  40177a:	e06f      	b.n	40185c <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40177c:	4b49      	ldr	r3, [pc, #292]	; (4018a4 <SystemCoreClockUpdate+0x158>)
  40177e:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  401782:	601a      	str	r2, [r3, #0]
    break;
  401784:	e06a      	b.n	40185c <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401786:	4b45      	ldr	r3, [pc, #276]	; (40189c <SystemCoreClockUpdate+0x150>)
  401788:	6a1b      	ldr	r3, [r3, #32]
  40178a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  40178e:	2b00      	cmp	r3, #0
  401790:	d003      	beq.n	40179a <SystemCoreClockUpdate+0x4e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401792:	4b44      	ldr	r3, [pc, #272]	; (4018a4 <SystemCoreClockUpdate+0x158>)
  401794:	4a44      	ldr	r2, [pc, #272]	; (4018a8 <SystemCoreClockUpdate+0x15c>)
  401796:	601a      	str	r2, [r3, #0]
    break;
  401798:	e060      	b.n	40185c <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40179a:	4b42      	ldr	r3, [pc, #264]	; (4018a4 <SystemCoreClockUpdate+0x158>)
  40179c:	4a43      	ldr	r2, [pc, #268]	; (4018ac <SystemCoreClockUpdate+0x160>)
  40179e:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4017a0:	4b3e      	ldr	r3, [pc, #248]	; (40189c <SystemCoreClockUpdate+0x150>)
  4017a2:	6a1b      	ldr	r3, [r3, #32]
  4017a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4017a8:	2b10      	cmp	r3, #16
  4017aa:	d004      	beq.n	4017b6 <SystemCoreClockUpdate+0x6a>
  4017ac:	2b20      	cmp	r3, #32
  4017ae:	d008      	beq.n	4017c2 <SystemCoreClockUpdate+0x76>
  4017b0:	2b00      	cmp	r3, #0
  4017b2:	d00e      	beq.n	4017d2 <SystemCoreClockUpdate+0x86>
          break;
  4017b4:	e00e      	b.n	4017d4 <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 2U;
  4017b6:	4b3b      	ldr	r3, [pc, #236]	; (4018a4 <SystemCoreClockUpdate+0x158>)
  4017b8:	681b      	ldr	r3, [r3, #0]
  4017ba:	005b      	lsls	r3, r3, #1
  4017bc:	4a39      	ldr	r2, [pc, #228]	; (4018a4 <SystemCoreClockUpdate+0x158>)
  4017be:	6013      	str	r3, [r2, #0]
          break;
  4017c0:	e008      	b.n	4017d4 <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 3U;
  4017c2:	4b38      	ldr	r3, [pc, #224]	; (4018a4 <SystemCoreClockUpdate+0x158>)
  4017c4:	681a      	ldr	r2, [r3, #0]
  4017c6:	4613      	mov	r3, r2
  4017c8:	005b      	lsls	r3, r3, #1
  4017ca:	4413      	add	r3, r2
  4017cc:	4a35      	ldr	r2, [pc, #212]	; (4018a4 <SystemCoreClockUpdate+0x158>)
  4017ce:	6013      	str	r3, [r2, #0]
          break;
  4017d0:	e000      	b.n	4017d4 <SystemCoreClockUpdate+0x88>
          break;
  4017d2:	bf00      	nop
    break;
  4017d4:	e042      	b.n	40185c <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4017d6:	4b31      	ldr	r3, [pc, #196]	; (40189c <SystemCoreClockUpdate+0x150>)
  4017d8:	6a1b      	ldr	r3, [r3, #32]
  4017da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4017de:	2b00      	cmp	r3, #0
  4017e0:	d003      	beq.n	4017ea <SystemCoreClockUpdate+0x9e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4017e2:	4b30      	ldr	r3, [pc, #192]	; (4018a4 <SystemCoreClockUpdate+0x158>)
  4017e4:	4a30      	ldr	r2, [pc, #192]	; (4018a8 <SystemCoreClockUpdate+0x15c>)
  4017e6:	601a      	str	r2, [r3, #0]
  4017e8:	e01c      	b.n	401824 <SystemCoreClockUpdate+0xd8>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4017ea:	4b2e      	ldr	r3, [pc, #184]	; (4018a4 <SystemCoreClockUpdate+0x158>)
  4017ec:	4a2f      	ldr	r2, [pc, #188]	; (4018ac <SystemCoreClockUpdate+0x160>)
  4017ee:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4017f0:	4b2a      	ldr	r3, [pc, #168]	; (40189c <SystemCoreClockUpdate+0x150>)
  4017f2:	6a1b      	ldr	r3, [r3, #32]
  4017f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4017f8:	2b10      	cmp	r3, #16
  4017fa:	d004      	beq.n	401806 <SystemCoreClockUpdate+0xba>
  4017fc:	2b20      	cmp	r3, #32
  4017fe:	d008      	beq.n	401812 <SystemCoreClockUpdate+0xc6>
  401800:	2b00      	cmp	r3, #0
  401802:	d00e      	beq.n	401822 <SystemCoreClockUpdate+0xd6>
          break;
  401804:	e00e      	b.n	401824 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 2U;
  401806:	4b27      	ldr	r3, [pc, #156]	; (4018a4 <SystemCoreClockUpdate+0x158>)
  401808:	681b      	ldr	r3, [r3, #0]
  40180a:	005b      	lsls	r3, r3, #1
  40180c:	4a25      	ldr	r2, [pc, #148]	; (4018a4 <SystemCoreClockUpdate+0x158>)
  40180e:	6013      	str	r3, [r2, #0]
          break;
  401810:	e008      	b.n	401824 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 3U;
  401812:	4b24      	ldr	r3, [pc, #144]	; (4018a4 <SystemCoreClockUpdate+0x158>)
  401814:	681a      	ldr	r2, [r3, #0]
  401816:	4613      	mov	r3, r2
  401818:	005b      	lsls	r3, r3, #1
  40181a:	4413      	add	r3, r2
  40181c:	4a21      	ldr	r2, [pc, #132]	; (4018a4 <SystemCoreClockUpdate+0x158>)
  40181e:	6013      	str	r3, [r2, #0]
          break;
  401820:	e000      	b.n	401824 <SystemCoreClockUpdate+0xd8>
          break;
  401822:	bf00      	nop
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401824:	4b1d      	ldr	r3, [pc, #116]	; (40189c <SystemCoreClockUpdate+0x150>)
  401826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401828:	f003 0303 	and.w	r3, r3, #3
  40182c:	2b02      	cmp	r3, #2
  40182e:	d114      	bne.n	40185a <SystemCoreClockUpdate+0x10e>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401830:	4b1a      	ldr	r3, [pc, #104]	; (40189c <SystemCoreClockUpdate+0x150>)
  401832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  401834:	0c1b      	lsrs	r3, r3, #16
  401836:	f3c3 030a 	ubfx	r3, r3, #0, #11
  40183a:	3301      	adds	r3, #1
  40183c:	4a19      	ldr	r2, [pc, #100]	; (4018a4 <SystemCoreClockUpdate+0x158>)
  40183e:	6812      	ldr	r2, [r2, #0]
  401840:	fb02 f303 	mul.w	r3, r2, r3
  401844:	4a17      	ldr	r2, [pc, #92]	; (4018a4 <SystemCoreClockUpdate+0x158>)
  401846:	6013      	str	r3, [r2, #0]
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401848:	4b14      	ldr	r3, [pc, #80]	; (40189c <SystemCoreClockUpdate+0x150>)
  40184a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40184c:	b2db      	uxtb	r3, r3
  40184e:	4a15      	ldr	r2, [pc, #84]	; (4018a4 <SystemCoreClockUpdate+0x158>)
  401850:	6812      	ldr	r2, [r2, #0]
  401852:	fbb2 f3f3 	udiv	r3, r2, r3
  401856:	4a13      	ldr	r2, [pc, #76]	; (4018a4 <SystemCoreClockUpdate+0x158>)
  401858:	6013      	str	r3, [r2, #0]
    break;
  40185a:	bf00      	nop
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40185c:	4b0f      	ldr	r3, [pc, #60]	; (40189c <SystemCoreClockUpdate+0x150>)
  40185e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401860:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401864:	2b70      	cmp	r3, #112	; 0x70
  401866:	d108      	bne.n	40187a <SystemCoreClockUpdate+0x12e>
  {
    SystemCoreClock /= 3U;
  401868:	4b0e      	ldr	r3, [pc, #56]	; (4018a4 <SystemCoreClockUpdate+0x158>)
  40186a:	681b      	ldr	r3, [r3, #0]
  40186c:	4a10      	ldr	r2, [pc, #64]	; (4018b0 <SystemCoreClockUpdate+0x164>)
  40186e:	fba2 2303 	umull	r2, r3, r2, r3
  401872:	085b      	lsrs	r3, r3, #1
  401874:	4a0b      	ldr	r2, [pc, #44]	; (4018a4 <SystemCoreClockUpdate+0x158>)
  401876:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  }
}
  401878:	e00a      	b.n	401890 <SystemCoreClockUpdate+0x144>
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40187a:	4b08      	ldr	r3, [pc, #32]	; (40189c <SystemCoreClockUpdate+0x150>)
  40187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40187e:	091b      	lsrs	r3, r3, #4
  401880:	f003 0307 	and.w	r3, r3, #7
  401884:	4a07      	ldr	r2, [pc, #28]	; (4018a4 <SystemCoreClockUpdate+0x158>)
  401886:	6812      	ldr	r2, [r2, #0]
  401888:	fa22 f303 	lsr.w	r3, r2, r3
  40188c:	4a05      	ldr	r2, [pc, #20]	; (4018a4 <SystemCoreClockUpdate+0x158>)
  40188e:	6013      	str	r3, [r2, #0]
}
  401890:	bf00      	nop
  401892:	46bd      	mov	sp, r7
  401894:	f85d 7b04 	ldr.w	r7, [sp], #4
  401898:	4770      	bx	lr
  40189a:	bf00      	nop
  40189c:	400e0600 	.word	0x400e0600
  4018a0:	400e1810 	.word	0x400e1810
  4018a4:	20400004 	.word	0x20400004
  4018a8:	00b71b00 	.word	0x00b71b00
  4018ac:	003d0900 	.word	0x003d0900
  4018b0:	aaaaaaab 	.word	0xaaaaaaab

004018b4 <system_init_flash>:
/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  4018b4:	b480      	push	{r7}
  4018b6:	b083      	sub	sp, #12
  4018b8:	af00      	add	r7, sp, #0
  4018ba:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  4018bc:	687b      	ldr	r3, [r7, #4]
  4018be:	4a19      	ldr	r2, [pc, #100]	; (401924 <system_init_flash+0x70>)
  4018c0:	4293      	cmp	r3, r2
  4018c2:	d804      	bhi.n	4018ce <system_init_flash+0x1a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4018c4:	4b18      	ldr	r3, [pc, #96]	; (401928 <system_init_flash+0x74>)
  4018c6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4018ca:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  4018cc:	e023      	b.n	401916 <system_init_flash+0x62>
    if (ul_clk < CHIP_FREQ_FWS_1)
  4018ce:	687b      	ldr	r3, [r7, #4]
  4018d0:	4a16      	ldr	r2, [pc, #88]	; (40192c <system_init_flash+0x78>)
  4018d2:	4293      	cmp	r3, r2
  4018d4:	d803      	bhi.n	4018de <system_init_flash+0x2a>
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4018d6:	4b14      	ldr	r3, [pc, #80]	; (401928 <system_init_flash+0x74>)
  4018d8:	4a15      	ldr	r2, [pc, #84]	; (401930 <system_init_flash+0x7c>)
  4018da:	601a      	str	r2, [r3, #0]
}
  4018dc:	e01b      	b.n	401916 <system_init_flash+0x62>
      if (ul_clk < CHIP_FREQ_FWS_2)
  4018de:	687b      	ldr	r3, [r7, #4]
  4018e0:	4a14      	ldr	r2, [pc, #80]	; (401934 <system_init_flash+0x80>)
  4018e2:	4293      	cmp	r3, r2
  4018e4:	d803      	bhi.n	4018ee <system_init_flash+0x3a>
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4018e6:	4b10      	ldr	r3, [pc, #64]	; (401928 <system_init_flash+0x74>)
  4018e8:	4a13      	ldr	r2, [pc, #76]	; (401938 <system_init_flash+0x84>)
  4018ea:	601a      	str	r2, [r3, #0]
}
  4018ec:	e013      	b.n	401916 <system_init_flash+0x62>
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4018ee:	687b      	ldr	r3, [r7, #4]
  4018f0:	4a12      	ldr	r2, [pc, #72]	; (40193c <system_init_flash+0x88>)
  4018f2:	4293      	cmp	r3, r2
  4018f4:	d803      	bhi.n	4018fe <system_init_flash+0x4a>
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4018f6:	4b0c      	ldr	r3, [pc, #48]	; (401928 <system_init_flash+0x74>)
  4018f8:	4a11      	ldr	r2, [pc, #68]	; (401940 <system_init_flash+0x8c>)
  4018fa:	601a      	str	r2, [r3, #0]
}
  4018fc:	e00b      	b.n	401916 <system_init_flash+0x62>
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4018fe:	687b      	ldr	r3, [r7, #4]
  401900:	4a10      	ldr	r2, [pc, #64]	; (401944 <system_init_flash+0x90>)
  401902:	4293      	cmp	r3, r2
  401904:	d804      	bhi.n	401910 <system_init_flash+0x5c>
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401906:	4b08      	ldr	r3, [pc, #32]	; (401928 <system_init_flash+0x74>)
  401908:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  40190c:	601a      	str	r2, [r3, #0]
}
  40190e:	e002      	b.n	401916 <system_init_flash+0x62>
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401910:	4b05      	ldr	r3, [pc, #20]	; (401928 <system_init_flash+0x74>)
  401912:	4a0d      	ldr	r2, [pc, #52]	; (401948 <system_init_flash+0x94>)
  401914:	601a      	str	r2, [r3, #0]
}
  401916:	bf00      	nop
  401918:	370c      	adds	r7, #12
  40191a:	46bd      	mov	sp, r7
  40191c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401920:	4770      	bx	lr
  401922:	bf00      	nop
  401924:	01312cff 	.word	0x01312cff
  401928:	400e0c00 	.word	0x400e0c00
  40192c:	026259ff 	.word	0x026259ff
  401930:	04000100 	.word	0x04000100
  401934:	039386ff 	.word	0x039386ff
  401938:	04000200 	.word	0x04000200
  40193c:	04c4b3ff 	.word	0x04c4b3ff
  401940:	04000300 	.word	0x04000300
  401944:	05f5e0ff 	.word	0x05f5e0ff
  401948:	04000500 	.word	0x04000500

0040194c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  40194c:	b480      	push	{r7}
  40194e:	b085      	sub	sp, #20
  401950:	af00      	add	r7, sp, #0
  401952:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  401954:	4b10      	ldr	r3, [pc, #64]	; (401998 <_sbrk+0x4c>)
  401956:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  401958:	4b10      	ldr	r3, [pc, #64]	; (40199c <_sbrk+0x50>)
  40195a:	681b      	ldr	r3, [r3, #0]
  40195c:	2b00      	cmp	r3, #0
  40195e:	d102      	bne.n	401966 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  401960:	4b0e      	ldr	r3, [pc, #56]	; (40199c <_sbrk+0x50>)
  401962:	4a0f      	ldr	r2, [pc, #60]	; (4019a0 <_sbrk+0x54>)
  401964:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  401966:	4b0d      	ldr	r3, [pc, #52]	; (40199c <_sbrk+0x50>)
  401968:	681b      	ldr	r3, [r3, #0]
  40196a:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  40196c:	68ba      	ldr	r2, [r7, #8]
  40196e:	687b      	ldr	r3, [r7, #4]
  401970:	441a      	add	r2, r3
  401972:	68fb      	ldr	r3, [r7, #12]
  401974:	429a      	cmp	r2, r3
  401976:	dd02      	ble.n	40197e <_sbrk+0x32>
		return (caddr_t) -1;	
  401978:	f04f 33ff 	mov.w	r3, #4294967295
  40197c:	e006      	b.n	40198c <_sbrk+0x40>
	}

	heap += incr;
  40197e:	4b07      	ldr	r3, [pc, #28]	; (40199c <_sbrk+0x50>)
  401980:	681a      	ldr	r2, [r3, #0]
  401982:	687b      	ldr	r3, [r7, #4]
  401984:	4413      	add	r3, r2
  401986:	4a05      	ldr	r2, [pc, #20]	; (40199c <_sbrk+0x50>)
  401988:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  40198a:	68bb      	ldr	r3, [r7, #8]
}
  40198c:	4618      	mov	r0, r3
  40198e:	3714      	adds	r7, #20
  401990:	46bd      	mov	sp, r7
  401992:	f85d 7b04 	ldr.w	r7, [sp], #4
  401996:	4770      	bx	lr
  401998:	2045fffc 	.word	0x2045fffc
  40199c:	20400a50 	.word	0x20400a50
  4019a0:	20402ca0 	.word	0x20402ca0

004019a4 <_close>:
{
	return -1;
}

extern int _close(int file)
{
  4019a4:	b480      	push	{r7}
  4019a6:	b083      	sub	sp, #12
  4019a8:	af00      	add	r7, sp, #0
  4019aa:	6078      	str	r0, [r7, #4]
	return -1;
  4019ac:	f04f 33ff 	mov.w	r3, #4294967295
}
  4019b0:	4618      	mov	r0, r3
  4019b2:	370c      	adds	r7, #12
  4019b4:	46bd      	mov	sp, r7
  4019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4019ba:	4770      	bx	lr

004019bc <_fstat>:

extern int _fstat(int file, struct stat *st)
{
  4019bc:	b480      	push	{r7}
  4019be:	b083      	sub	sp, #12
  4019c0:	af00      	add	r7, sp, #0
  4019c2:	6078      	str	r0, [r7, #4]
  4019c4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
  4019c6:	683b      	ldr	r3, [r7, #0]
  4019c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4019cc:	605a      	str	r2, [r3, #4]

	return 0;
  4019ce:	2300      	movs	r3, #0
}
  4019d0:	4618      	mov	r0, r3
  4019d2:	370c      	adds	r7, #12
  4019d4:	46bd      	mov	sp, r7
  4019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4019da:	4770      	bx	lr

004019dc <_isatty>:

extern int _isatty(int file)
{
  4019dc:	b480      	push	{r7}
  4019de:	b083      	sub	sp, #12
  4019e0:	af00      	add	r7, sp, #0
  4019e2:	6078      	str	r0, [r7, #4]
	return 1;
  4019e4:	2301      	movs	r3, #1
}
  4019e6:	4618      	mov	r0, r3
  4019e8:	370c      	adds	r7, #12
  4019ea:	46bd      	mov	sp, r7
  4019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
  4019f0:	4770      	bx	lr

004019f2 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
  4019f2:	b480      	push	{r7}
  4019f4:	b085      	sub	sp, #20
  4019f6:	af00      	add	r7, sp, #0
  4019f8:	60f8      	str	r0, [r7, #12]
  4019fa:	60b9      	str	r1, [r7, #8]
  4019fc:	607a      	str	r2, [r7, #4]
	return 0;
  4019fe:	2300      	movs	r3, #0
}
  401a00:	4618      	mov	r0, r3
  401a02:	3714      	adds	r7, #20
  401a04:	46bd      	mov	sp, r7
  401a06:	f85d 7b04 	ldr.w	r7, [sp], #4
  401a0a:	4770      	bx	lr

00401a0c <NVIC_EnableIRQ>:
{
  401a0c:	b480      	push	{r7}
  401a0e:	b083      	sub	sp, #12
  401a10:	af00      	add	r7, sp, #0
  401a12:	4603      	mov	r3, r0
  401a14:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401a16:	4909      	ldr	r1, [pc, #36]	; (401a3c <NVIC_EnableIRQ+0x30>)
  401a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401a1c:	095b      	lsrs	r3, r3, #5
  401a1e:	79fa      	ldrb	r2, [r7, #7]
  401a20:	f002 021f 	and.w	r2, r2, #31
  401a24:	2001      	movs	r0, #1
  401a26:	fa00 f202 	lsl.w	r2, r0, r2
  401a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  401a2e:	bf00      	nop
  401a30:	370c      	adds	r7, #12
  401a32:	46bd      	mov	sp, r7
  401a34:	f85d 7b04 	ldr.w	r7, [sp], #4
  401a38:	4770      	bx	lr
  401a3a:	bf00      	nop
  401a3c:	e000e100 	.word	0xe000e100

00401a40 <NVIC_SetPriority>:
{
  401a40:	b480      	push	{r7}
  401a42:	b083      	sub	sp, #12
  401a44:	af00      	add	r7, sp, #0
  401a46:	4603      	mov	r3, r0
  401a48:	6039      	str	r1, [r7, #0]
  401a4a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  401a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401a50:	2b00      	cmp	r3, #0
  401a52:	da0b      	bge.n	401a6c <NVIC_SetPriority+0x2c>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  401a54:	490d      	ldr	r1, [pc, #52]	; (401a8c <NVIC_SetPriority+0x4c>)
  401a56:	79fb      	ldrb	r3, [r7, #7]
  401a58:	f003 030f 	and.w	r3, r3, #15
  401a5c:	3b04      	subs	r3, #4
  401a5e:	683a      	ldr	r2, [r7, #0]
  401a60:	b2d2      	uxtb	r2, r2
  401a62:	0152      	lsls	r2, r2, #5
  401a64:	b2d2      	uxtb	r2, r2
  401a66:	440b      	add	r3, r1
  401a68:	761a      	strb	r2, [r3, #24]
}
  401a6a:	e009      	b.n	401a80 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401a6c:	4908      	ldr	r1, [pc, #32]	; (401a90 <NVIC_SetPriority+0x50>)
  401a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401a72:	683a      	ldr	r2, [r7, #0]
  401a74:	b2d2      	uxtb	r2, r2
  401a76:	0152      	lsls	r2, r2, #5
  401a78:	b2d2      	uxtb	r2, r2
  401a7a:	440b      	add	r3, r1
  401a7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  401a80:	bf00      	nop
  401a82:	370c      	adds	r7, #12
  401a84:	46bd      	mov	sp, r7
  401a86:	f85d 7b04 	ldr.w	r7, [sp], #4
  401a8a:	4770      	bx	lr
  401a8c:	e000ed00 	.word	0xe000ed00
  401a90:	e000e100 	.word	0xe000e100

00401a94 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  401a94:	b580      	push	{r7, lr}
  401a96:	b082      	sub	sp, #8
  401a98:	af00      	add	r7, sp, #0
  401a9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
  401a9c:	687b      	ldr	r3, [r7, #4]
  401a9e:	3b01      	subs	r3, #1
  401aa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
  401aa4:	d301      	bcc.n	401aaa <SysTick_Config+0x16>
  401aa6:	2301      	movs	r3, #1
  401aa8:	e00f      	b.n	401aca <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  401aaa:	4a0a      	ldr	r2, [pc, #40]	; (401ad4 <SysTick_Config+0x40>)
  401aac:	687b      	ldr	r3, [r7, #4]
  401aae:	3b01      	subs	r3, #1
  401ab0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  401ab2:	2107      	movs	r1, #7
  401ab4:	f04f 30ff 	mov.w	r0, #4294967295
  401ab8:	4b07      	ldr	r3, [pc, #28]	; (401ad8 <SysTick_Config+0x44>)
  401aba:	4798      	blx	r3
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  401abc:	4b05      	ldr	r3, [pc, #20]	; (401ad4 <SysTick_Config+0x40>)
  401abe:	2200      	movs	r2, #0
  401ac0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  401ac2:	4b04      	ldr	r3, [pc, #16]	; (401ad4 <SysTick_Config+0x40>)
  401ac4:	2207      	movs	r2, #7
  401ac6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
  401ac8:	2300      	movs	r3, #0
}
  401aca:	4618      	mov	r0, r3
  401acc:	3708      	adds	r7, #8
  401ace:	46bd      	mov	sp, r7
  401ad0:	bd80      	pop	{r7, pc}
  401ad2:	bf00      	nop
  401ad4:	e000e010 	.word	0xe000e010
  401ad8:	00401a41 	.word	0x00401a41

00401adc <osc_get_rate>:
{
  401adc:	b480      	push	{r7}
  401ade:	b083      	sub	sp, #12
  401ae0:	af00      	add	r7, sp, #0
  401ae2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401ae4:	687b      	ldr	r3, [r7, #4]
  401ae6:	2b07      	cmp	r3, #7
  401ae8:	d825      	bhi.n	401b36 <osc_get_rate+0x5a>
  401aea:	a201      	add	r2, pc, #4	; (adr r2, 401af0 <osc_get_rate+0x14>)
  401aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401af0:	00401b11 	.word	0x00401b11
  401af4:	00401b17 	.word	0x00401b17
  401af8:	00401b1d 	.word	0x00401b1d
  401afc:	00401b23 	.word	0x00401b23
  401b00:	00401b27 	.word	0x00401b27
  401b04:	00401b2b 	.word	0x00401b2b
  401b08:	00401b2f 	.word	0x00401b2f
  401b0c:	00401b33 	.word	0x00401b33
		return OSC_SLCK_32K_RC_HZ;
  401b10:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401b14:	e010      	b.n	401b38 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  401b16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401b1a:	e00d      	b.n	401b38 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  401b1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401b20:	e00a      	b.n	401b38 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  401b22:	4b08      	ldr	r3, [pc, #32]	; (401b44 <osc_get_rate+0x68>)
  401b24:	e008      	b.n	401b38 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  401b26:	4b08      	ldr	r3, [pc, #32]	; (401b48 <osc_get_rate+0x6c>)
  401b28:	e006      	b.n	401b38 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  401b2a:	4b08      	ldr	r3, [pc, #32]	; (401b4c <osc_get_rate+0x70>)
  401b2c:	e004      	b.n	401b38 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  401b2e:	4b07      	ldr	r3, [pc, #28]	; (401b4c <osc_get_rate+0x70>)
  401b30:	e002      	b.n	401b38 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  401b32:	4b06      	ldr	r3, [pc, #24]	; (401b4c <osc_get_rate+0x70>)
  401b34:	e000      	b.n	401b38 <osc_get_rate+0x5c>
	return 0;
  401b36:	2300      	movs	r3, #0
}
  401b38:	4618      	mov	r0, r3
  401b3a:	370c      	adds	r7, #12
  401b3c:	46bd      	mov	sp, r7
  401b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b42:	4770      	bx	lr
  401b44:	003d0900 	.word	0x003d0900
  401b48:	007a1200 	.word	0x007a1200
  401b4c:	00b71b00 	.word	0x00b71b00

00401b50 <sysclk_get_main_hz>:
{
  401b50:	b580      	push	{r7, lr}
  401b52:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  401b54:	2006      	movs	r0, #6
  401b56:	4b05      	ldr	r3, [pc, #20]	; (401b6c <sysclk_get_main_hz+0x1c>)
  401b58:	4798      	blx	r3
  401b5a:	4602      	mov	r2, r0
  401b5c:	4613      	mov	r3, r2
  401b5e:	009b      	lsls	r3, r3, #2
  401b60:	4413      	add	r3, r2
  401b62:	009a      	lsls	r2, r3, #2
  401b64:	4413      	add	r3, r2
}
  401b66:	4618      	mov	r0, r3
  401b68:	bd80      	pop	{r7, pc}
  401b6a:	bf00      	nop
  401b6c:	00401add 	.word	0x00401add

00401b70 <sysclk_get_cpu_hz>:
{
  401b70:	b580      	push	{r7, lr}
  401b72:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  401b74:	4b02      	ldr	r3, [pc, #8]	; (401b80 <sysclk_get_cpu_hz+0x10>)
  401b76:	4798      	blx	r3
  401b78:	4603      	mov	r3, r0
}
  401b7a:	4618      	mov	r0, r3
  401b7c:	bd80      	pop	{r7, pc}
  401b7e:	bf00      	nop
  401b80:	00401b51 	.word	0x00401b51

00401b84 <sysclk_get_peripheral_hz>:
{
  401b84:	b580      	push	{r7, lr}
  401b86:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  401b88:	4b02      	ldr	r3, [pc, #8]	; (401b94 <sysclk_get_peripheral_hz+0x10>)
  401b8a:	4798      	blx	r3
  401b8c:	4603      	mov	r3, r0
  401b8e:	085b      	lsrs	r3, r3, #1
}
  401b90:	4618      	mov	r0, r3
  401b92:	bd80      	pop	{r7, pc}
  401b94:	00401b51 	.word	0x00401b51

00401b98 <sysclk_enable_peripheral_clock>:
{
  401b98:	b580      	push	{r7, lr}
  401b9a:	b082      	sub	sp, #8
  401b9c:	af00      	add	r7, sp, #0
  401b9e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  401ba0:	6878      	ldr	r0, [r7, #4]
  401ba2:	4b03      	ldr	r3, [pc, #12]	; (401bb0 <sysclk_enable_peripheral_clock+0x18>)
  401ba4:	4798      	blx	r3
}
  401ba6:	bf00      	nop
  401ba8:	3708      	adds	r7, #8
  401baa:	46bd      	mov	sp, r7
  401bac:	bd80      	pop	{r7, pc}
  401bae:	bf00      	nop
  401bb0:	00401245 	.word	0x00401245

00401bb4 <ioport_toggle_pin_level>:
{
  401bb4:	b480      	push	{r7}
  401bb6:	b08b      	sub	sp, #44	; 0x2c
  401bb8:	af00      	add	r7, sp, #0
  401bba:	6078      	str	r0, [r7, #4]
  401bbc:	687b      	ldr	r3, [r7, #4]
  401bbe:	627b      	str	r3, [r7, #36]	; 0x24
  401bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401bc2:	623b      	str	r3, [r7, #32]
  401bc4:	6a3b      	ldr	r3, [r7, #32]
  401bc6:	61fb      	str	r3, [r7, #28]
	return pin >> 5;
  401bc8:	69fb      	ldr	r3, [r7, #28]
  401bca:	095b      	lsrs	r3, r3, #5
  401bcc:	61bb      	str	r3, [r7, #24]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401bce:	69ba      	ldr	r2, [r7, #24]
  401bd0:	4b13      	ldr	r3, [pc, #76]	; (401c20 <ioport_toggle_pin_level+0x6c>)
  401bd2:	4413      	add	r3, r2
  401bd4:	025b      	lsls	r3, r3, #9
	Pio *port = arch_ioport_pin_to_base(pin);
  401bd6:	617b      	str	r3, [r7, #20]
  401bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401bda:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  401bdc:	693b      	ldr	r3, [r7, #16]
  401bde:	f003 031f 	and.w	r3, r3, #31
  401be2:	2201      	movs	r2, #1
  401be4:	fa02 f303 	lsl.w	r3, r2, r3
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);
  401be8:	60fb      	str	r3, [r7, #12]
	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  401bea:	697b      	ldr	r3, [r7, #20]
  401bec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  401bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401bf0:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  401bf2:	68bb      	ldr	r3, [r7, #8]
  401bf4:	f003 031f 	and.w	r3, r3, #31
  401bf8:	2101      	movs	r1, #1
  401bfa:	fa01 f303 	lsl.w	r3, r1, r3
	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  401bfe:	4013      	ands	r3, r2
  401c00:	2b00      	cmp	r3, #0
  401c02:	d003      	beq.n	401c0c <ioport_toggle_pin_level+0x58>
		port->PIO_CODR = mask;
  401c04:	697b      	ldr	r3, [r7, #20]
  401c06:	68fa      	ldr	r2, [r7, #12]
  401c08:	635a      	str	r2, [r3, #52]	; 0x34
}
  401c0a:	e002      	b.n	401c12 <ioport_toggle_pin_level+0x5e>
		port->PIO_SODR = mask;
  401c0c:	697b      	ldr	r3, [r7, #20]
  401c0e:	68fa      	ldr	r2, [r7, #12]
  401c10:	631a      	str	r2, [r3, #48]	; 0x30
  401c12:	bf00      	nop
  401c14:	372c      	adds	r7, #44	; 0x2c
  401c16:	46bd      	mov	sp, r7
  401c18:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c1c:	4770      	bx	lr
  401c1e:	bf00      	nop
  401c20:	00200707 	.word	0x00200707

00401c24 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
  401c24:	b580      	push	{r7, lr}
  401c26:	b08c      	sub	sp, #48	; 0x30
  401c28:	af00      	add	r7, sp, #0
  401c2a:	6078      	str	r0, [r7, #4]
  401c2c:	6039      	str	r1, [r7, #0]
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  401c2e:	4b49      	ldr	r3, [pc, #292]	; (401d54 <usart_serial_init+0x130>)
  401c30:	4798      	blx	r3
  401c32:	4603      	mov	r3, r0
  401c34:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_baudrate = opt->baudrate;
  401c36:	683b      	ldr	r3, [r7, #0]
  401c38:	681b      	ldr	r3, [r3, #0]
  401c3a:	62bb      	str	r3, [r7, #40]	; 0x28
	uart_settings.ul_mode = opt->paritytype;
  401c3c:	683b      	ldr	r3, [r7, #0]
  401c3e:	689b      	ldr	r3, [r3, #8]
  401c40:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  401c42:	683b      	ldr	r3, [r7, #0]
  401c44:	681b      	ldr	r3, [r3, #0]
  401c46:	60fb      	str	r3, [r7, #12]
	usart_settings.char_length = opt->charlength;
  401c48:	683b      	ldr	r3, [r7, #0]
  401c4a:	685b      	ldr	r3, [r3, #4]
  401c4c:	613b      	str	r3, [r7, #16]
	usart_settings.parity_type = opt->paritytype;
  401c4e:	683b      	ldr	r3, [r7, #0]
  401c50:	689b      	ldr	r3, [r3, #8]
  401c52:	617b      	str	r3, [r7, #20]
	usart_settings.stop_bits= opt->stopbits;
  401c54:	683b      	ldr	r3, [r7, #0]
  401c56:	68db      	ldr	r3, [r3, #12]
  401c58:	61bb      	str	r3, [r7, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  401c5a:	2300      	movs	r3, #0
  401c5c:	61fb      	str	r3, [r7, #28]
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  401c5e:	687b      	ldr	r3, [r7, #4]
  401c60:	4a3d      	ldr	r2, [pc, #244]	; (401d58 <usart_serial_init+0x134>)
  401c62:	4293      	cmp	r3, r2
  401c64:	d108      	bne.n	401c78 <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART0);
  401c66:	2007      	movs	r0, #7
  401c68:	4b3c      	ldr	r3, [pc, #240]	; (401d5c <usart_serial_init+0x138>)
  401c6a:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  401c6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
  401c70:	4619      	mov	r1, r3
  401c72:	6878      	ldr	r0, [r7, #4]
  401c74:	4b3a      	ldr	r3, [pc, #232]	; (401d60 <usart_serial_init+0x13c>)
  401c76:	4798      	blx	r3
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  401c78:	687b      	ldr	r3, [r7, #4]
  401c7a:	4a3a      	ldr	r2, [pc, #232]	; (401d64 <usart_serial_init+0x140>)
  401c7c:	4293      	cmp	r3, r2
  401c7e:	d108      	bne.n	401c92 <usart_serial_init+0x6e>
		sysclk_enable_peripheral_clock(ID_UART1);
  401c80:	2008      	movs	r0, #8
  401c82:	4b36      	ldr	r3, [pc, #216]	; (401d5c <usart_serial_init+0x138>)
  401c84:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  401c86:	f107 0324 	add.w	r3, r7, #36	; 0x24
  401c8a:	4619      	mov	r1, r3
  401c8c:	6878      	ldr	r0, [r7, #4]
  401c8e:	4b34      	ldr	r3, [pc, #208]	; (401d60 <usart_serial_init+0x13c>)
  401c90:	4798      	blx	r3
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  401c92:	687b      	ldr	r3, [r7, #4]
  401c94:	4a34      	ldr	r2, [pc, #208]	; (401d68 <usart_serial_init+0x144>)
  401c96:	4293      	cmp	r3, r2
  401c98:	d108      	bne.n	401cac <usart_serial_init+0x88>
		sysclk_enable_peripheral_clock(ID_UART2);
  401c9a:	202c      	movs	r0, #44	; 0x2c
  401c9c:	4b2f      	ldr	r3, [pc, #188]	; (401d5c <usart_serial_init+0x138>)
  401c9e:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  401ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
  401ca4:	4619      	mov	r1, r3
  401ca6:	6878      	ldr	r0, [r7, #4]
  401ca8:	4b2d      	ldr	r3, [pc, #180]	; (401d60 <usart_serial_init+0x13c>)
  401caa:	4798      	blx	r3
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  401cac:	687b      	ldr	r3, [r7, #4]
  401cae:	4a2f      	ldr	r2, [pc, #188]	; (401d6c <usart_serial_init+0x148>)
  401cb0:	4293      	cmp	r3, r2
  401cb2:	d108      	bne.n	401cc6 <usart_serial_init+0xa2>
		sysclk_enable_peripheral_clock(ID_UART3);
  401cb4:	202d      	movs	r0, #45	; 0x2d
  401cb6:	4b29      	ldr	r3, [pc, #164]	; (401d5c <usart_serial_init+0x138>)
  401cb8:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  401cba:	f107 0324 	add.w	r3, r7, #36	; 0x24
  401cbe:	4619      	mov	r1, r3
  401cc0:	6878      	ldr	r0, [r7, #4]
  401cc2:	4b27      	ldr	r3, [pc, #156]	; (401d60 <usart_serial_init+0x13c>)
  401cc4:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  401cc6:	687b      	ldr	r3, [r7, #4]
  401cc8:	4a29      	ldr	r2, [pc, #164]	; (401d70 <usart_serial_init+0x14c>)
  401cca:	4293      	cmp	r3, r2
  401ccc:	d111      	bne.n	401cf2 <usart_serial_init+0xce>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART0);
  401cce:	200d      	movs	r0, #13
  401cd0:	4b22      	ldr	r3, [pc, #136]	; (401d5c <usart_serial_init+0x138>)
  401cd2:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  401cd4:	4b1f      	ldr	r3, [pc, #124]	; (401d54 <usart_serial_init+0x130>)
  401cd6:	4798      	blx	r3
  401cd8:	4602      	mov	r2, r0
  401cda:	f107 030c 	add.w	r3, r7, #12
  401cde:	4619      	mov	r1, r3
  401ce0:	6878      	ldr	r0, [r7, #4]
  401ce2:	4b24      	ldr	r3, [pc, #144]	; (401d74 <usart_serial_init+0x150>)
  401ce4:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  401ce6:	6878      	ldr	r0, [r7, #4]
  401ce8:	4b23      	ldr	r3, [pc, #140]	; (401d78 <usart_serial_init+0x154>)
  401cea:	4798      	blx	r3
		usart_enable_rx(p_usart);
  401cec:	6878      	ldr	r0, [r7, #4]
  401cee:	4b23      	ldr	r3, [pc, #140]	; (401d7c <usart_serial_init+0x158>)
  401cf0:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  401cf2:	687b      	ldr	r3, [r7, #4]
  401cf4:	4a22      	ldr	r2, [pc, #136]	; (401d80 <usart_serial_init+0x15c>)
  401cf6:	4293      	cmp	r3, r2
  401cf8:	d111      	bne.n	401d1e <usart_serial_init+0xfa>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM1);
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
  401cfa:	200e      	movs	r0, #14
  401cfc:	4b17      	ldr	r3, [pc, #92]	; (401d5c <usart_serial_init+0x138>)
  401cfe:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  401d00:	4b14      	ldr	r3, [pc, #80]	; (401d54 <usart_serial_init+0x130>)
  401d02:	4798      	blx	r3
  401d04:	4602      	mov	r2, r0
  401d06:	f107 030c 	add.w	r3, r7, #12
  401d0a:	4619      	mov	r1, r3
  401d0c:	6878      	ldr	r0, [r7, #4]
  401d0e:	4b19      	ldr	r3, [pc, #100]	; (401d74 <usart_serial_init+0x150>)
  401d10:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  401d12:	6878      	ldr	r0, [r7, #4]
  401d14:	4b18      	ldr	r3, [pc, #96]	; (401d78 <usart_serial_init+0x154>)
  401d16:	4798      	blx	r3
		usart_enable_rx(p_usart);
  401d18:	6878      	ldr	r0, [r7, #4]
  401d1a:	4b18      	ldr	r3, [pc, #96]	; (401d7c <usart_serial_init+0x158>)
  401d1c:	4798      	blx	r3
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  401d1e:	687b      	ldr	r3, [r7, #4]
  401d20:	4a18      	ldr	r2, [pc, #96]	; (401d84 <usart_serial_init+0x160>)
  401d22:	4293      	cmp	r3, r2
  401d24:	d111      	bne.n	401d4a <usart_serial_init+0x126>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM2);
		flexcom_set_opmode(FLEXCOM2, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART2);
  401d26:	200f      	movs	r0, #15
  401d28:	4b0c      	ldr	r3, [pc, #48]	; (401d5c <usart_serial_init+0x138>)
  401d2a:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  401d2c:	4b09      	ldr	r3, [pc, #36]	; (401d54 <usart_serial_init+0x130>)
  401d2e:	4798      	blx	r3
  401d30:	4602      	mov	r2, r0
  401d32:	f107 030c 	add.w	r3, r7, #12
  401d36:	4619      	mov	r1, r3
  401d38:	6878      	ldr	r0, [r7, #4]
  401d3a:	4b0e      	ldr	r3, [pc, #56]	; (401d74 <usart_serial_init+0x150>)
  401d3c:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  401d3e:	6878      	ldr	r0, [r7, #4]
  401d40:	4b0d      	ldr	r3, [pc, #52]	; (401d78 <usart_serial_init+0x154>)
  401d42:	4798      	blx	r3
		usart_enable_rx(p_usart);
  401d44:	6878      	ldr	r0, [r7, #4]
  401d46:	4b0d      	ldr	r3, [pc, #52]	; (401d7c <usart_serial_init+0x158>)
  401d48:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
  401d4a:	bf00      	nop
  401d4c:	3730      	adds	r7, #48	; 0x30
  401d4e:	46bd      	mov	sp, r7
  401d50:	bd80      	pop	{r7, pc}
  401d52:	bf00      	nop
  401d54:	00401b85 	.word	0x00401b85
  401d58:	400e0800 	.word	0x400e0800
  401d5c:	00401b99 	.word	0x00401b99
  401d60:	004012c9 	.word	0x004012c9
  401d64:	400e0a00 	.word	0x400e0a00
  401d68:	400e1a00 	.word	0x400e1a00
  401d6c:	400e1c00 	.word	0x400e1c00
  401d70:	40024000 	.word	0x40024000
  401d74:	00401461 	.word	0x00401461
  401d78:	004014e5 	.word	0x004014e5
  401d7c:	00401519 	.word	0x00401519
  401d80:	40028000 	.word	0x40028000
  401d84:	4002c000 	.word	0x4002c000

00401d88 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  401d88:	b580      	push	{r7, lr}
  401d8a:	b082      	sub	sp, #8
  401d8c:	af00      	add	r7, sp, #0
  401d8e:	6078      	str	r0, [r7, #4]
  401d90:	460b      	mov	r3, r1
  401d92:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  401d94:	687b      	ldr	r3, [r7, #4]
  401d96:	4a36      	ldr	r2, [pc, #216]	; (401e70 <usart_serial_putchar+0xe8>)
  401d98:	4293      	cmp	r3, r2
  401d9a:	d10a      	bne.n	401db2 <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  401d9c:	bf00      	nop
  401d9e:	78fb      	ldrb	r3, [r7, #3]
  401da0:	4619      	mov	r1, r3
  401da2:	6878      	ldr	r0, [r7, #4]
  401da4:	4b33      	ldr	r3, [pc, #204]	; (401e74 <usart_serial_putchar+0xec>)
  401da6:	4798      	blx	r3
  401da8:	4603      	mov	r3, r0
  401daa:	2b00      	cmp	r3, #0
  401dac:	d1f7      	bne.n	401d9e <usart_serial_putchar+0x16>
		return 1;
  401dae:	2301      	movs	r3, #1
  401db0:	e05a      	b.n	401e68 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  401db2:	687b      	ldr	r3, [r7, #4]
  401db4:	4a30      	ldr	r2, [pc, #192]	; (401e78 <usart_serial_putchar+0xf0>)
  401db6:	4293      	cmp	r3, r2
  401db8:	d10a      	bne.n	401dd0 <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  401dba:	bf00      	nop
  401dbc:	78fb      	ldrb	r3, [r7, #3]
  401dbe:	4619      	mov	r1, r3
  401dc0:	6878      	ldr	r0, [r7, #4]
  401dc2:	4b2c      	ldr	r3, [pc, #176]	; (401e74 <usart_serial_putchar+0xec>)
  401dc4:	4798      	blx	r3
  401dc6:	4603      	mov	r3, r0
  401dc8:	2b00      	cmp	r3, #0
  401dca:	d1f7      	bne.n	401dbc <usart_serial_putchar+0x34>
		return 1;
  401dcc:	2301      	movs	r3, #1
  401dce:	e04b      	b.n	401e68 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  401dd0:	687b      	ldr	r3, [r7, #4]
  401dd2:	4a2a      	ldr	r2, [pc, #168]	; (401e7c <usart_serial_putchar+0xf4>)
  401dd4:	4293      	cmp	r3, r2
  401dd6:	d10a      	bne.n	401dee <usart_serial_putchar+0x66>
		while (uart_write((Uart*)p_usart, c)!=0);
  401dd8:	bf00      	nop
  401dda:	78fb      	ldrb	r3, [r7, #3]
  401ddc:	4619      	mov	r1, r3
  401dde:	6878      	ldr	r0, [r7, #4]
  401de0:	4b24      	ldr	r3, [pc, #144]	; (401e74 <usart_serial_putchar+0xec>)
  401de2:	4798      	blx	r3
  401de4:	4603      	mov	r3, r0
  401de6:	2b00      	cmp	r3, #0
  401de8:	d1f7      	bne.n	401dda <usart_serial_putchar+0x52>
		return 1;
  401dea:	2301      	movs	r3, #1
  401dec:	e03c      	b.n	401e68 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  401dee:	687b      	ldr	r3, [r7, #4]
  401df0:	4a23      	ldr	r2, [pc, #140]	; (401e80 <usart_serial_putchar+0xf8>)
  401df2:	4293      	cmp	r3, r2
  401df4:	d10a      	bne.n	401e0c <usart_serial_putchar+0x84>
		while (uart_write((Uart*)p_usart, c)!=0);
  401df6:	bf00      	nop
  401df8:	78fb      	ldrb	r3, [r7, #3]
  401dfa:	4619      	mov	r1, r3
  401dfc:	6878      	ldr	r0, [r7, #4]
  401dfe:	4b1d      	ldr	r3, [pc, #116]	; (401e74 <usart_serial_putchar+0xec>)
  401e00:	4798      	blx	r3
  401e02:	4603      	mov	r3, r0
  401e04:	2b00      	cmp	r3, #0
  401e06:	d1f7      	bne.n	401df8 <usart_serial_putchar+0x70>
		return 1;
  401e08:	2301      	movs	r3, #1
  401e0a:	e02d      	b.n	401e68 <usart_serial_putchar+0xe0>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  401e0c:	687b      	ldr	r3, [r7, #4]
  401e0e:	4a1d      	ldr	r2, [pc, #116]	; (401e84 <usart_serial_putchar+0xfc>)
  401e10:	4293      	cmp	r3, r2
  401e12:	d10a      	bne.n	401e2a <usart_serial_putchar+0xa2>
		while (usart_write(p_usart, c)!=0);
  401e14:	bf00      	nop
  401e16:	78fb      	ldrb	r3, [r7, #3]
  401e18:	4619      	mov	r1, r3
  401e1a:	6878      	ldr	r0, [r7, #4]
  401e1c:	4b1a      	ldr	r3, [pc, #104]	; (401e88 <usart_serial_putchar+0x100>)
  401e1e:	4798      	blx	r3
  401e20:	4603      	mov	r3, r0
  401e22:	2b00      	cmp	r3, #0
  401e24:	d1f7      	bne.n	401e16 <usart_serial_putchar+0x8e>
		return 1;
  401e26:	2301      	movs	r3, #1
  401e28:	e01e      	b.n	401e68 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  401e2a:	687b      	ldr	r3, [r7, #4]
  401e2c:	4a17      	ldr	r2, [pc, #92]	; (401e8c <usart_serial_putchar+0x104>)
  401e2e:	4293      	cmp	r3, r2
  401e30:	d10a      	bne.n	401e48 <usart_serial_putchar+0xc0>
		while (usart_write(p_usart, c)!=0);
  401e32:	bf00      	nop
  401e34:	78fb      	ldrb	r3, [r7, #3]
  401e36:	4619      	mov	r1, r3
  401e38:	6878      	ldr	r0, [r7, #4]
  401e3a:	4b13      	ldr	r3, [pc, #76]	; (401e88 <usart_serial_putchar+0x100>)
  401e3c:	4798      	blx	r3
  401e3e:	4603      	mov	r3, r0
  401e40:	2b00      	cmp	r3, #0
  401e42:	d1f7      	bne.n	401e34 <usart_serial_putchar+0xac>
		return 1;
  401e44:	2301      	movs	r3, #1
  401e46:	e00f      	b.n	401e68 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  401e48:	687b      	ldr	r3, [r7, #4]
  401e4a:	4a11      	ldr	r2, [pc, #68]	; (401e90 <usart_serial_putchar+0x108>)
  401e4c:	4293      	cmp	r3, r2
  401e4e:	d10a      	bne.n	401e66 <usart_serial_putchar+0xde>
		while (usart_write(p_usart, c)!=0);
  401e50:	bf00      	nop
  401e52:	78fb      	ldrb	r3, [r7, #3]
  401e54:	4619      	mov	r1, r3
  401e56:	6878      	ldr	r0, [r7, #4]
  401e58:	4b0b      	ldr	r3, [pc, #44]	; (401e88 <usart_serial_putchar+0x100>)
  401e5a:	4798      	blx	r3
  401e5c:	4603      	mov	r3, r0
  401e5e:	2b00      	cmp	r3, #0
  401e60:	d1f7      	bne.n	401e52 <usart_serial_putchar+0xca>
		return 1;
  401e62:	2301      	movs	r3, #1
  401e64:	e000      	b.n	401e68 <usart_serial_putchar+0xe0>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  401e66:	2300      	movs	r3, #0
}
  401e68:	4618      	mov	r0, r3
  401e6a:	3708      	adds	r7, #8
  401e6c:	46bd      	mov	sp, r7
  401e6e:	bd80      	pop	{r7, pc}
  401e70:	400e0800 	.word	0x400e0800
  401e74:	00401321 	.word	0x00401321
  401e78:	400e0a00 	.word	0x400e0a00
  401e7c:	400e1a00 	.word	0x400e1a00
  401e80:	400e1c00 	.word	0x400e1c00
  401e84:	40024000 	.word	0x40024000
  401e88:	00401585 	.word	0x00401585
  401e8c:	40028000 	.word	0x40028000
  401e90:	4002c000 	.word	0x4002c000

00401e94 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  401e94:	b580      	push	{r7, lr}
  401e96:	b084      	sub	sp, #16
  401e98:	af00      	add	r7, sp, #0
  401e9a:	6078      	str	r0, [r7, #4]
  401e9c:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  401e9e:	2300      	movs	r3, #0
  401ea0:	60fb      	str	r3, [r7, #12]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  401ea2:	687b      	ldr	r3, [r7, #4]
  401ea4:	4a34      	ldr	r2, [pc, #208]	; (401f78 <usart_serial_getchar+0xe4>)
  401ea6:	4293      	cmp	r3, r2
  401ea8:	d107      	bne.n	401eba <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
  401eaa:	bf00      	nop
  401eac:	6839      	ldr	r1, [r7, #0]
  401eae:	6878      	ldr	r0, [r7, #4]
  401eb0:	4b32      	ldr	r3, [pc, #200]	; (401f7c <usart_serial_getchar+0xe8>)
  401eb2:	4798      	blx	r3
  401eb4:	4603      	mov	r3, r0
  401eb6:	2b00      	cmp	r3, #0
  401eb8:	d1f8      	bne.n	401eac <usart_serial_getchar+0x18>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  401eba:	687b      	ldr	r3, [r7, #4]
  401ebc:	4a30      	ldr	r2, [pc, #192]	; (401f80 <usart_serial_getchar+0xec>)
  401ebe:	4293      	cmp	r3, r2
  401ec0:	d107      	bne.n	401ed2 <usart_serial_getchar+0x3e>
		while (uart_read((Uart*)p_usart, data));
  401ec2:	bf00      	nop
  401ec4:	6839      	ldr	r1, [r7, #0]
  401ec6:	6878      	ldr	r0, [r7, #4]
  401ec8:	4b2c      	ldr	r3, [pc, #176]	; (401f7c <usart_serial_getchar+0xe8>)
  401eca:	4798      	blx	r3
  401ecc:	4603      	mov	r3, r0
  401ece:	2b00      	cmp	r3, #0
  401ed0:	d1f8      	bne.n	401ec4 <usart_serial_getchar+0x30>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  401ed2:	687b      	ldr	r3, [r7, #4]
  401ed4:	4a2b      	ldr	r2, [pc, #172]	; (401f84 <usart_serial_getchar+0xf0>)
  401ed6:	4293      	cmp	r3, r2
  401ed8:	d107      	bne.n	401eea <usart_serial_getchar+0x56>
		while (uart_read((Uart*)p_usart, data));
  401eda:	bf00      	nop
  401edc:	6839      	ldr	r1, [r7, #0]
  401ede:	6878      	ldr	r0, [r7, #4]
  401ee0:	4b26      	ldr	r3, [pc, #152]	; (401f7c <usart_serial_getchar+0xe8>)
  401ee2:	4798      	blx	r3
  401ee4:	4603      	mov	r3, r0
  401ee6:	2b00      	cmp	r3, #0
  401ee8:	d1f8      	bne.n	401edc <usart_serial_getchar+0x48>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  401eea:	687b      	ldr	r3, [r7, #4]
  401eec:	4a26      	ldr	r2, [pc, #152]	; (401f88 <usart_serial_getchar+0xf4>)
  401eee:	4293      	cmp	r3, r2
  401ef0:	d107      	bne.n	401f02 <usart_serial_getchar+0x6e>
		while (uart_read((Uart*)p_usart, data));
  401ef2:	bf00      	nop
  401ef4:	6839      	ldr	r1, [r7, #0]
  401ef6:	6878      	ldr	r0, [r7, #4]
  401ef8:	4b20      	ldr	r3, [pc, #128]	; (401f7c <usart_serial_getchar+0xe8>)
  401efa:	4798      	blx	r3
  401efc:	4603      	mov	r3, r0
  401efe:	2b00      	cmp	r3, #0
  401f00:	d1f8      	bne.n	401ef4 <usart_serial_getchar+0x60>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  401f02:	687b      	ldr	r3, [r7, #4]
  401f04:	4a21      	ldr	r2, [pc, #132]	; (401f8c <usart_serial_getchar+0xf8>)
  401f06:	4293      	cmp	r3, r2
  401f08:	d10d      	bne.n	401f26 <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
  401f0a:	bf00      	nop
  401f0c:	f107 030c 	add.w	r3, r7, #12
  401f10:	4619      	mov	r1, r3
  401f12:	6878      	ldr	r0, [r7, #4]
  401f14:	4b1e      	ldr	r3, [pc, #120]	; (401f90 <usart_serial_getchar+0xfc>)
  401f16:	4798      	blx	r3
  401f18:	4603      	mov	r3, r0
  401f1a:	2b00      	cmp	r3, #0
  401f1c:	d1f6      	bne.n	401f0c <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
  401f1e:	68fb      	ldr	r3, [r7, #12]
  401f20:	b2da      	uxtb	r2, r3
  401f22:	683b      	ldr	r3, [r7, #0]
  401f24:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  401f26:	687b      	ldr	r3, [r7, #4]
  401f28:	4a1a      	ldr	r2, [pc, #104]	; (401f94 <usart_serial_getchar+0x100>)
  401f2a:	4293      	cmp	r3, r2
  401f2c:	d10d      	bne.n	401f4a <usart_serial_getchar+0xb6>
		while (usart_read(p_usart, &val));
  401f2e:	bf00      	nop
  401f30:	f107 030c 	add.w	r3, r7, #12
  401f34:	4619      	mov	r1, r3
  401f36:	6878      	ldr	r0, [r7, #4]
  401f38:	4b15      	ldr	r3, [pc, #84]	; (401f90 <usart_serial_getchar+0xfc>)
  401f3a:	4798      	blx	r3
  401f3c:	4603      	mov	r3, r0
  401f3e:	2b00      	cmp	r3, #0
  401f40:	d1f6      	bne.n	401f30 <usart_serial_getchar+0x9c>
		*data = (uint8_t)(val & 0xFF);
  401f42:	68fb      	ldr	r3, [r7, #12]
  401f44:	b2da      	uxtb	r2, r3
  401f46:	683b      	ldr	r3, [r7, #0]
  401f48:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  401f4a:	687b      	ldr	r3, [r7, #4]
  401f4c:	4a12      	ldr	r2, [pc, #72]	; (401f98 <usart_serial_getchar+0x104>)
  401f4e:	4293      	cmp	r3, r2
  401f50:	d10d      	bne.n	401f6e <usart_serial_getchar+0xda>
		while (usart_read(p_usart, &val));
  401f52:	bf00      	nop
  401f54:	f107 030c 	add.w	r3, r7, #12
  401f58:	4619      	mov	r1, r3
  401f5a:	6878      	ldr	r0, [r7, #4]
  401f5c:	4b0c      	ldr	r3, [pc, #48]	; (401f90 <usart_serial_getchar+0xfc>)
  401f5e:	4798      	blx	r3
  401f60:	4603      	mov	r3, r0
  401f62:	2b00      	cmp	r3, #0
  401f64:	d1f6      	bne.n	401f54 <usart_serial_getchar+0xc0>
		*data = (uint8_t)(val & 0xFF);
  401f66:	68fb      	ldr	r3, [r7, #12]
  401f68:	b2da      	uxtb	r2, r3
  401f6a:	683b      	ldr	r3, [r7, #0]
  401f6c:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  401f6e:	bf00      	nop
  401f70:	3710      	adds	r7, #16
  401f72:	46bd      	mov	sp, r7
  401f74:	bd80      	pop	{r7, pc}
  401f76:	bf00      	nop
  401f78:	400e0800 	.word	0x400e0800
  401f7c:	00401351 	.word	0x00401351
  401f80:	400e0a00 	.word	0x400e0a00
  401f84:	400e1a00 	.word	0x400e1a00
  401f88:	400e1c00 	.word	0x400e1c00
  401f8c:	40024000 	.word	0x40024000
  401f90:	004015b7 	.word	0x004015b7
  401f94:	40028000 	.word	0x40028000
  401f98:	4002c000 	.word	0x4002c000

00401f9c <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
  401f9c:	b580      	push	{r7, lr}
  401f9e:	b082      	sub	sp, #8
  401fa0:	af00      	add	r7, sp, #0
  401fa2:	6078      	str	r0, [r7, #4]
  401fa4:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
  401fa6:	4a0f      	ldr	r2, [pc, #60]	; (401fe4 <stdio_serial_init+0x48>)
  401fa8:	687b      	ldr	r3, [r7, #4]
  401faa:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  401fac:	4b0e      	ldr	r3, [pc, #56]	; (401fe8 <stdio_serial_init+0x4c>)
  401fae:	4a0f      	ldr	r2, [pc, #60]	; (401fec <stdio_serial_init+0x50>)
  401fb0:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  401fb2:	4b0f      	ldr	r3, [pc, #60]	; (401ff0 <stdio_serial_init+0x54>)
  401fb4:	4a0f      	ldr	r2, [pc, #60]	; (401ff4 <stdio_serial_init+0x58>)
  401fb6:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
  401fb8:	6839      	ldr	r1, [r7, #0]
  401fba:	6878      	ldr	r0, [r7, #4]
  401fbc:	4b0e      	ldr	r3, [pc, #56]	; (401ff8 <stdio_serial_init+0x5c>)
  401fbe:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  401fc0:	4b0e      	ldr	r3, [pc, #56]	; (401ffc <stdio_serial_init+0x60>)
  401fc2:	681b      	ldr	r3, [r3, #0]
  401fc4:	689b      	ldr	r3, [r3, #8]
  401fc6:	2100      	movs	r1, #0
  401fc8:	4618      	mov	r0, r3
  401fca:	4b0d      	ldr	r3, [pc, #52]	; (402000 <stdio_serial_init+0x64>)
  401fcc:	4798      	blx	r3
	setbuf(stdin, NULL);
  401fce:	4b0b      	ldr	r3, [pc, #44]	; (401ffc <stdio_serial_init+0x60>)
  401fd0:	681b      	ldr	r3, [r3, #0]
  401fd2:	685b      	ldr	r3, [r3, #4]
  401fd4:	2100      	movs	r1, #0
  401fd6:	4618      	mov	r0, r3
  401fd8:	4b09      	ldr	r3, [pc, #36]	; (402000 <stdio_serial_init+0x64>)
  401fda:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
  401fdc:	bf00      	nop
  401fde:	3708      	adds	r7, #8
  401fe0:	46bd      	mov	sp, r7
  401fe2:	bd80      	pop	{r7, pc}
  401fe4:	20400a94 	.word	0x20400a94
  401fe8:	20400a90 	.word	0x20400a90
  401fec:	00401d89 	.word	0x00401d89
  401ff0:	20400a8c 	.word	0x20400a8c
  401ff4:	00401e95 	.word	0x00401e95
  401ff8:	00401c25 	.word	0x00401c25
  401ffc:	20400010 	.word	0x20400010
  402000:	004023b5 	.word	0x004023b5

00402004 <SysTick_Handler>:
 *  Process System Tick Event
 *  Increments the g_ul_ms_ticks counter.
 */
// [main_systick_handler]
void SysTick_Handler(void)
{
  402004:	b480      	push	{r7}
  402006:	af00      	add	r7, sp, #0
	g_ul_ms_ticks++;
  402008:	4b04      	ldr	r3, [pc, #16]	; (40201c <SysTick_Handler+0x18>)
  40200a:	681b      	ldr	r3, [r3, #0]
  40200c:	3301      	adds	r3, #1
  40200e:	4a03      	ldr	r2, [pc, #12]	; (40201c <SysTick_Handler+0x18>)
  402010:	6013      	str	r3, [r2, #0]
}
  402012:	bf00      	nop
  402014:	46bd      	mov	sp, r7
  402016:	f85d 7b04 	ldr.w	r7, [sp], #4
  40201a:	4770      	bx	lr
  40201c:	20400a54 	.word	0x20400a54

00402020 <Button1_Handler>:
 *
 *  Handle process led1 status change.
 */
// [main_button1_handler]
static void Button1_Handler(uint32_t id, uint32_t mask)
{
  402020:	b480      	push	{r7}
  402022:	b083      	sub	sp, #12
  402024:	af00      	add	r7, sp, #0
  402026:	6078      	str	r0, [r7, #4]
  402028:	6039      	str	r1, [r7, #0]
	if (PIN_PUSHBUTTON_1_ID == id && PIN_PUSHBUTTON_1_MASK == mask) {
  40202a:	687b      	ldr	r3, [r7, #4]
  40202c:	2b0a      	cmp	r3, #10
  40202e:	d110      	bne.n	402052 <Button1_Handler+0x32>
  402030:	683b      	ldr	r3, [r7, #0]
  402032:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
  402036:	d10c      	bne.n	402052 <Button1_Handler+0x32>
		//ProcessButtonEvt(0);
		if (LEDfreq == 500) {
  402038:	4b09      	ldr	r3, [pc, #36]	; (402060 <Button1_Handler+0x40>)
  40203a:	681b      	ldr	r3, [r3, #0]
  40203c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  402040:	d103      	bne.n	40204a <Button1_Handler+0x2a>
			LEDfreq = 100;
  402042:	4b07      	ldr	r3, [pc, #28]	; (402060 <Button1_Handler+0x40>)
  402044:	2264      	movs	r2, #100	; 0x64
  402046:	601a      	str	r2, [r3, #0]
		} else {
			LEDfreq = 500;
		}
	}
}
  402048:	e003      	b.n	402052 <Button1_Handler+0x32>
			LEDfreq = 500;
  40204a:	4b05      	ldr	r3, [pc, #20]	; (402060 <Button1_Handler+0x40>)
  40204c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  402050:	601a      	str	r2, [r3, #0]
}
  402052:	bf00      	nop
  402054:	370c      	adds	r7, #12
  402056:	46bd      	mov	sp, r7
  402058:	f85d 7b04 	ldr.w	r7, [sp], #4
  40205c:	4770      	bx	lr
  40205e:	bf00      	nop
  402060:	20400008 	.word	0x20400008

00402064 <configure_buttons>:
 *
 *  Configure the PIO as inputs and generate corresponding interrupt when
 *  pressed or released.
 */
static void configure_buttons(void)
{
  402064:	b590      	push	{r4, r7, lr}
  402066:	b083      	sub	sp, #12
  402068:	af02      	add	r7, sp, #8
// [main_button1_configure]
	/* Configure Pushbutton 1 */
	pmc_enable_periph_clk(PIN_PUSHBUTTON_1_ID);
  40206a:	200a      	movs	r0, #10
  40206c:	4b10      	ldr	r3, [pc, #64]	; (4020b0 <configure_buttons+0x4c>)
  40206e:	4798      	blx	r3
	pio_set_debounce_filter(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_MASK, 10);
  402070:	220a      	movs	r2, #10
  402072:	f44f 6100 	mov.w	r1, #2048	; 0x800
  402076:	480f      	ldr	r0, [pc, #60]	; (4020b4 <configure_buttons+0x50>)
  402078:	4b0f      	ldr	r3, [pc, #60]	; (4020b8 <configure_buttons+0x54>)
  40207a:	4798      	blx	r3
	/* Interrupt on rising edge  */
	pio_handler_set(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_ID,
  40207c:	4b0f      	ldr	r3, [pc, #60]	; (4020bc <configure_buttons+0x58>)
  40207e:	9300      	str	r3, [sp, #0]
  402080:	2379      	movs	r3, #121	; 0x79
  402082:	f44f 6200 	mov.w	r2, #2048	; 0x800
  402086:	210a      	movs	r1, #10
  402088:	480a      	ldr	r0, [pc, #40]	; (4020b4 <configure_buttons+0x50>)
  40208a:	4c0d      	ldr	r4, [pc, #52]	; (4020c0 <configure_buttons+0x5c>)
  40208c:	47a0      	blx	r4
			PIN_PUSHBUTTON_1_MASK, PIN_PUSHBUTTON_1_ATTR, Button1_Handler);
	NVIC_EnableIRQ((IRQn_Type) PIN_PUSHBUTTON_1_ID);
  40208e:	200a      	movs	r0, #10
  402090:	4b0c      	ldr	r3, [pc, #48]	; (4020c4 <configure_buttons+0x60>)
  402092:	4798      	blx	r3
	pio_handler_set_priority(PIN_PUSHBUTTON_1_PIO,
  402094:	2200      	movs	r2, #0
  402096:	210a      	movs	r1, #10
  402098:	4806      	ldr	r0, [pc, #24]	; (4020b4 <configure_buttons+0x50>)
  40209a:	4b0b      	ldr	r3, [pc, #44]	; (4020c8 <configure_buttons+0x64>)
  40209c:	4798      	blx	r3
			(IRQn_Type) PIN_PUSHBUTTON_1_ID, IRQ_PRIOR_PIO);
	pio_enable_interrupt(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_MASK);
  40209e:	f44f 6100 	mov.w	r1, #2048	; 0x800
  4020a2:	4804      	ldr	r0, [pc, #16]	; (4020b4 <configure_buttons+0x50>)
  4020a4:	4b09      	ldr	r3, [pc, #36]	; (4020cc <configure_buttons+0x68>)
  4020a6:	4798      	blx	r3
	pio_handler_set_priority(PIN_PUSHBUTTON_2_PIO,
			(IRQn_Type) PIN_PUSHBUTTON_2_ID, IRQ_PRIOR_PIO);
	pio_enable_interrupt(PIN_PUSHBUTTON_2_PIO, PIN_PUSHBUTTON_2_MASK);
// [main_button2_configure]
#endif
}
  4020a8:	bf00      	nop
  4020aa:	3704      	adds	r7, #4
  4020ac:	46bd      	mov	sp, r7
  4020ae:	bd90      	pop	{r4, r7, pc}
  4020b0:	00401245 	.word	0x00401245
  4020b4:	400e0e00 	.word	0x400e0e00
  4020b8:	00400b35 	.word	0x00400b35
  4020bc:	00402021 	.word	0x00402021
  4020c0:	00400de5 	.word	0x00400de5
  4020c4:	00401a0d 	.word	0x00401a0d
  4020c8:	00400efd 	.word	0x00400efd
  4020cc:	00400bd9 	.word	0x00400bd9

004020d0 <configure_console>:
/**
 *  Configure UART console.
 */
// [main_console_configure]
static void configure_console(void)
{
  4020d0:	b590      	push	{r4, r7, lr}
  4020d2:	b085      	sub	sp, #20
  4020d4:	af00      	add	r7, sp, #0
	const usart_serial_options_t uart_serial_options = {
  4020d6:	4b08      	ldr	r3, [pc, #32]	; (4020f8 <configure_console+0x28>)
  4020d8:	463c      	mov	r4, r7
  4020da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  4020dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		.stopbits = CONF_UART_STOP_BITS,
#endif
	};

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
  4020e0:	200e      	movs	r0, #14
  4020e2:	4b06      	ldr	r3, [pc, #24]	; (4020fc <configure_console+0x2c>)
  4020e4:	4798      	blx	r3
	stdio_serial_init(CONF_UART, &uart_serial_options);
  4020e6:	463b      	mov	r3, r7
  4020e8:	4619      	mov	r1, r3
  4020ea:	4805      	ldr	r0, [pc, #20]	; (402100 <configure_console+0x30>)
  4020ec:	4b05      	ldr	r3, [pc, #20]	; (402104 <configure_console+0x34>)
  4020ee:	4798      	blx	r3
}
  4020f0:	bf00      	nop
  4020f2:	3714      	adds	r7, #20
  4020f4:	46bd      	mov	sp, r7
  4020f6:	bd90      	pop	{r4, r7, pc}
  4020f8:	00405094 	.word	0x00405094
  4020fc:	00401b99 	.word	0x00401b99
  402100:	40028000 	.word	0x40028000
  402104:	00401f9d 	.word	0x00401f9d

00402108 <mdelay>:
 *
 * \param ul_dly_ticks  Delay to wait for, in milliseconds.
 */
// [main_ms_delay]
static void mdelay(uint32_t ul_dly_ticks)
{
  402108:	b480      	push	{r7}
  40210a:	b085      	sub	sp, #20
  40210c:	af00      	add	r7, sp, #0
  40210e:	6078      	str	r0, [r7, #4]
	uint32_t ul_cur_ticks;

	ul_cur_ticks = g_ul_ms_ticks;
  402110:	4b08      	ldr	r3, [pc, #32]	; (402134 <mdelay+0x2c>)
  402112:	681b      	ldr	r3, [r3, #0]
  402114:	60fb      	str	r3, [r7, #12]
	while ((g_ul_ms_ticks - ul_cur_ticks) < ul_dly_ticks);
  402116:	bf00      	nop
  402118:	4b06      	ldr	r3, [pc, #24]	; (402134 <mdelay+0x2c>)
  40211a:	681a      	ldr	r2, [r3, #0]
  40211c:	68fb      	ldr	r3, [r7, #12]
  40211e:	1ad2      	subs	r2, r2, r3
  402120:	687b      	ldr	r3, [r7, #4]
  402122:	429a      	cmp	r2, r3
  402124:	d3f8      	bcc.n	402118 <mdelay+0x10>
}
  402126:	bf00      	nop
  402128:	3714      	adds	r7, #20
  40212a:	46bd      	mov	sp, r7
  40212c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402130:	4770      	bx	lr
  402132:	bf00      	nop
  402134:	20400a54 	.word	0x20400a54

00402138 <main>:
 *
 *  \return Unused (ANSI-C compatibility).
 */
// [main]
int main(void)
{
  402138:	b580      	push	{r7, lr}
  40213a:	b082      	sub	sp, #8
  40213c:	af00      	add	r7, sp, #0
//! [main_step_sys_init]
	/* Initialize the SAM system */
	sysclk_init();
  40213e:	4b24      	ldr	r3, [pc, #144]	; (4021d0 <main+0x98>)
  402140:	4798      	blx	r3
	board_init();
  402142:	4b24      	ldr	r3, [pc, #144]	; (4021d4 <main+0x9c>)
  402144:	4798      	blx	r3
ioport_set_pin_sense_mode(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_SENSE);
#endif
#endif
//! [main_step_console_init]
	/* Initialize the console uart */
	configure_console();
  402146:	4b24      	ldr	r3, [pc, #144]	; (4021d8 <main+0xa0>)
  402148:	4798      	blx	r3
//! [main_step_console_init]

	/* Output example information */
	puts(STRING_HEADER);
  40214a:	4824      	ldr	r0, [pc, #144]	; (4021dc <main+0xa4>)
  40214c:	4b24      	ldr	r3, [pc, #144]	; (4021e0 <main+0xa8>)
  40214e:	4798      	blx	r3

	uint32_t cpuFreq;
	cpuFreq = sysclk_get_cpu_hz();
  402150:	4b24      	ldr	r3, [pc, #144]	; (4021e4 <main+0xac>)
  402152:	4798      	blx	r3
  402154:	6078      	str	r0, [r7, #4]
	printf("%d", cpuFreq);
  402156:	6879      	ldr	r1, [r7, #4]
  402158:	4823      	ldr	r0, [pc, #140]	; (4021e8 <main+0xb0>)
  40215a:	4b24      	ldr	r3, [pc, #144]	; (4021ec <main+0xb4>)
  40215c:	4798      	blx	r3
	
	/* Configure systick for 1 ms */
	puts("Configure system tick to get 1ms tick period.\r");
  40215e:	4824      	ldr	r0, [pc, #144]	; (4021f0 <main+0xb8>)
  402160:	4b1f      	ldr	r3, [pc, #124]	; (4021e0 <main+0xa8>)
  402162:	4798      	blx	r3
//! [main_step_systick_init]
	if (SysTick_Config(sysclk_get_cpu_hz() / 1000)) {
  402164:	4b1f      	ldr	r3, [pc, #124]	; (4021e4 <main+0xac>)
  402166:	4798      	blx	r3
  402168:	4602      	mov	r2, r0
  40216a:	4b22      	ldr	r3, [pc, #136]	; (4021f4 <main+0xbc>)
  40216c:	fba3 2302 	umull	r2, r3, r3, r2
  402170:	099b      	lsrs	r3, r3, #6
  402172:	4618      	mov	r0, r3
  402174:	4b20      	ldr	r3, [pc, #128]	; (4021f8 <main+0xc0>)
  402176:	4798      	blx	r3
  402178:	4603      	mov	r3, r0
  40217a:	2b00      	cmp	r3, #0
  40217c:	d003      	beq.n	402186 <main+0x4e>
		puts("-F- Systick configuration error\r");
  40217e:	481f      	ldr	r0, [pc, #124]	; (4021fc <main+0xc4>)
  402180:	4b17      	ldr	r3, [pc, #92]	; (4021e0 <main+0xa8>)
  402182:	4798      	blx	r3
		while (1);
  402184:	e7fe      	b.n	402184 <main+0x4c>
//! [main_step_tc_init]
	configure_tc();
//! [main_step_tc_init]
#endif

	puts("Configure buttons with debouncing.\r");
  402186:	481e      	ldr	r0, [pc, #120]	; (402200 <main+0xc8>)
  402188:	4b15      	ldr	r3, [pc, #84]	; (4021e0 <main+0xa8>)
  40218a:	4798      	blx	r3
//! [main_step_btn_init]
	configure_buttons();
  40218c:	4b1d      	ldr	r3, [pc, #116]	; (402204 <main+0xcc>)
  40218e:	4798      	blx	r3
//! [main_step_btn_init]

	printf("Press %s to Start/Stop the %s blinking.\r\n",
  402190:	4a1d      	ldr	r2, [pc, #116]	; (402208 <main+0xd0>)
  402192:	491e      	ldr	r1, [pc, #120]	; (40220c <main+0xd4>)
  402194:	481e      	ldr	r0, [pc, #120]	; (402210 <main+0xd8>)
  402196:	4b15      	ldr	r3, [pc, #84]	; (4021ec <main+0xb4>)
  402198:	4798      	blx	r3

//! [main_step_loop]
	while (1) {
		
		/* Wait for LED to be active */
		while (!g_b_led0_active);
  40219a:	bf00      	nop
  40219c:	4b1d      	ldr	r3, [pc, #116]	; (402214 <main+0xdc>)
  40219e:	781b      	ldrb	r3, [r3, #0]
  4021a0:	b2db      	uxtb	r3, r3
  4021a2:	f083 0301 	eor.w	r3, r3, #1
  4021a6:	b2db      	uxtb	r3, r3
  4021a8:	2b00      	cmp	r3, #0
  4021aa:	d1f7      	bne.n	40219c <main+0x64>

		/* Toggle LED state if active */
		if (g_b_led0_active) {
  4021ac:	4b19      	ldr	r3, [pc, #100]	; (402214 <main+0xdc>)
  4021ae:	781b      	ldrb	r3, [r3, #0]
  4021b0:	b2db      	uxtb	r3, r3
  4021b2:	2b00      	cmp	r3, #0
  4021b4:	d005      	beq.n	4021c2 <main+0x8a>
			ioport_toggle_pin_level(LED0_GPIO);
  4021b6:	2048      	movs	r0, #72	; 0x48
  4021b8:	4b17      	ldr	r3, [pc, #92]	; (402218 <main+0xe0>)
  4021ba:	4798      	blx	r3
			printf("1 ");
  4021bc:	4817      	ldr	r0, [pc, #92]	; (40221c <main+0xe4>)
  4021be:	4b0b      	ldr	r3, [pc, #44]	; (4021ec <main+0xb4>)
  4021c0:	4798      	blx	r3
		}

		/* Wait for 500ms */
		mdelay(LEDfreq);
  4021c2:	4b17      	ldr	r3, [pc, #92]	; (402220 <main+0xe8>)
  4021c4:	681b      	ldr	r3, [r3, #0]
  4021c6:	4618      	mov	r0, r3
  4021c8:	4b16      	ldr	r3, [pc, #88]	; (402224 <main+0xec>)
  4021ca:	4798      	blx	r3
		while (!g_b_led0_active);
  4021cc:	e7e5      	b.n	40219a <main+0x62>
  4021ce:	bf00      	nop
  4021d0:	004004ad 	.word	0x004004ad
  4021d4:	00400a7d 	.word	0x00400a7d
  4021d8:	004020d1 	.word	0x004020d1
  4021dc:	004050a4 	.word	0x004050a4
  4021e0:	004023a5 	.word	0x004023a5
  4021e4:	00401b71 	.word	0x00401b71
  4021e8:	004050fc 	.word	0x004050fc
  4021ec:	00402279 	.word	0x00402279
  4021f0:	00405100 	.word	0x00405100
  4021f4:	10624dd3 	.word	0x10624dd3
  4021f8:	00401a95 	.word	0x00401a95
  4021fc:	00405130 	.word	0x00405130
  402200:	00405154 	.word	0x00405154
  402204:	00402065 	.word	0x00402065
  402208:	00405178 	.word	0x00405178
  40220c:	00405188 	.word	0x00405188
  402210:	0040518c 	.word	0x0040518c
  402214:	2040000c 	.word	0x2040000c
  402218:	00401bb5 	.word	0x00401bb5
  40221c:	004051b8 	.word	0x004051b8
  402220:	20400008 	.word	0x20400008
  402224:	00402109 	.word	0x00402109

00402228 <__libc_init_array>:
  402228:	b570      	push	{r4, r5, r6, lr}
  40222a:	4e0f      	ldr	r6, [pc, #60]	; (402268 <__libc_init_array+0x40>)
  40222c:	4d0f      	ldr	r5, [pc, #60]	; (40226c <__libc_init_array+0x44>)
  40222e:	1b76      	subs	r6, r6, r5
  402230:	10b6      	asrs	r6, r6, #2
  402232:	bf18      	it	ne
  402234:	2400      	movne	r4, #0
  402236:	d005      	beq.n	402244 <__libc_init_array+0x1c>
  402238:	3401      	adds	r4, #1
  40223a:	f855 3b04 	ldr.w	r3, [r5], #4
  40223e:	4798      	blx	r3
  402240:	42a6      	cmp	r6, r4
  402242:	d1f9      	bne.n	402238 <__libc_init_array+0x10>
  402244:	4e0a      	ldr	r6, [pc, #40]	; (402270 <__libc_init_array+0x48>)
  402246:	4d0b      	ldr	r5, [pc, #44]	; (402274 <__libc_init_array+0x4c>)
  402248:	1b76      	subs	r6, r6, r5
  40224a:	f003 f86d 	bl	405328 <_init>
  40224e:	10b6      	asrs	r6, r6, #2
  402250:	bf18      	it	ne
  402252:	2400      	movne	r4, #0
  402254:	d006      	beq.n	402264 <__libc_init_array+0x3c>
  402256:	3401      	adds	r4, #1
  402258:	f855 3b04 	ldr.w	r3, [r5], #4
  40225c:	4798      	blx	r3
  40225e:	42a6      	cmp	r6, r4
  402260:	d1f9      	bne.n	402256 <__libc_init_array+0x2e>
  402262:	bd70      	pop	{r4, r5, r6, pc}
  402264:	bd70      	pop	{r4, r5, r6, pc}
  402266:	bf00      	nop
  402268:	00405334 	.word	0x00405334
  40226c:	00405334 	.word	0x00405334
  402270:	0040533c 	.word	0x0040533c
  402274:	00405334 	.word	0x00405334

00402278 <iprintf>:
  402278:	b40f      	push	{r0, r1, r2, r3}
  40227a:	b500      	push	{lr}
  40227c:	4907      	ldr	r1, [pc, #28]	; (40229c <iprintf+0x24>)
  40227e:	b083      	sub	sp, #12
  402280:	ab04      	add	r3, sp, #16
  402282:	6808      	ldr	r0, [r1, #0]
  402284:	f853 2b04 	ldr.w	r2, [r3], #4
  402288:	6881      	ldr	r1, [r0, #8]
  40228a:	9301      	str	r3, [sp, #4]
  40228c:	f000 fa06 	bl	40269c <_vfiprintf_r>
  402290:	b003      	add	sp, #12
  402292:	f85d eb04 	ldr.w	lr, [sp], #4
  402296:	b004      	add	sp, #16
  402298:	4770      	bx	lr
  40229a:	bf00      	nop
  40229c:	20400010 	.word	0x20400010

004022a0 <memset>:
  4022a0:	b470      	push	{r4, r5, r6}
  4022a2:	0786      	lsls	r6, r0, #30
  4022a4:	d046      	beq.n	402334 <memset+0x94>
  4022a6:	1e54      	subs	r4, r2, #1
  4022a8:	2a00      	cmp	r2, #0
  4022aa:	d041      	beq.n	402330 <memset+0x90>
  4022ac:	b2ca      	uxtb	r2, r1
  4022ae:	4603      	mov	r3, r0
  4022b0:	e002      	b.n	4022b8 <memset+0x18>
  4022b2:	f114 34ff 	adds.w	r4, r4, #4294967295
  4022b6:	d33b      	bcc.n	402330 <memset+0x90>
  4022b8:	f803 2b01 	strb.w	r2, [r3], #1
  4022bc:	079d      	lsls	r5, r3, #30
  4022be:	d1f8      	bne.n	4022b2 <memset+0x12>
  4022c0:	2c03      	cmp	r4, #3
  4022c2:	d92e      	bls.n	402322 <memset+0x82>
  4022c4:	b2cd      	uxtb	r5, r1
  4022c6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4022ca:	2c0f      	cmp	r4, #15
  4022cc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4022d0:	d919      	bls.n	402306 <memset+0x66>
  4022d2:	f103 0210 	add.w	r2, r3, #16
  4022d6:	4626      	mov	r6, r4
  4022d8:	3e10      	subs	r6, #16
  4022da:	2e0f      	cmp	r6, #15
  4022dc:	f842 5c10 	str.w	r5, [r2, #-16]
  4022e0:	f842 5c0c 	str.w	r5, [r2, #-12]
  4022e4:	f842 5c08 	str.w	r5, [r2, #-8]
  4022e8:	f842 5c04 	str.w	r5, [r2, #-4]
  4022ec:	f102 0210 	add.w	r2, r2, #16
  4022f0:	d8f2      	bhi.n	4022d8 <memset+0x38>
  4022f2:	f1a4 0210 	sub.w	r2, r4, #16
  4022f6:	f022 020f 	bic.w	r2, r2, #15
  4022fa:	f004 040f 	and.w	r4, r4, #15
  4022fe:	3210      	adds	r2, #16
  402300:	2c03      	cmp	r4, #3
  402302:	4413      	add	r3, r2
  402304:	d90d      	bls.n	402322 <memset+0x82>
  402306:	461e      	mov	r6, r3
  402308:	4622      	mov	r2, r4
  40230a:	3a04      	subs	r2, #4
  40230c:	2a03      	cmp	r2, #3
  40230e:	f846 5b04 	str.w	r5, [r6], #4
  402312:	d8fa      	bhi.n	40230a <memset+0x6a>
  402314:	1f22      	subs	r2, r4, #4
  402316:	f022 0203 	bic.w	r2, r2, #3
  40231a:	3204      	adds	r2, #4
  40231c:	4413      	add	r3, r2
  40231e:	f004 0403 	and.w	r4, r4, #3
  402322:	b12c      	cbz	r4, 402330 <memset+0x90>
  402324:	b2c9      	uxtb	r1, r1
  402326:	441c      	add	r4, r3
  402328:	f803 1b01 	strb.w	r1, [r3], #1
  40232c:	429c      	cmp	r4, r3
  40232e:	d1fb      	bne.n	402328 <memset+0x88>
  402330:	bc70      	pop	{r4, r5, r6}
  402332:	4770      	bx	lr
  402334:	4614      	mov	r4, r2
  402336:	4603      	mov	r3, r0
  402338:	e7c2      	b.n	4022c0 <memset+0x20>
  40233a:	bf00      	nop

0040233c <_puts_r>:
  40233c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40233e:	4605      	mov	r5, r0
  402340:	b089      	sub	sp, #36	; 0x24
  402342:	4608      	mov	r0, r1
  402344:	460c      	mov	r4, r1
  402346:	f000 f8fb 	bl	402540 <strlen>
  40234a:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40234c:	4f14      	ldr	r7, [pc, #80]	; (4023a0 <_puts_r+0x64>)
  40234e:	9404      	str	r4, [sp, #16]
  402350:	2601      	movs	r6, #1
  402352:	1c44      	adds	r4, r0, #1
  402354:	a904      	add	r1, sp, #16
  402356:	2202      	movs	r2, #2
  402358:	9403      	str	r4, [sp, #12]
  40235a:	9005      	str	r0, [sp, #20]
  40235c:	68ac      	ldr	r4, [r5, #8]
  40235e:	9706      	str	r7, [sp, #24]
  402360:	9607      	str	r6, [sp, #28]
  402362:	9101      	str	r1, [sp, #4]
  402364:	9202      	str	r2, [sp, #8]
  402366:	b1b3      	cbz	r3, 402396 <_puts_r+0x5a>
  402368:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40236c:	049a      	lsls	r2, r3, #18
  40236e:	d406      	bmi.n	40237e <_puts_r+0x42>
  402370:	6e62      	ldr	r2, [r4, #100]	; 0x64
  402372:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  402376:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  40237a:	81a3      	strh	r3, [r4, #12]
  40237c:	6662      	str	r2, [r4, #100]	; 0x64
  40237e:	4621      	mov	r1, r4
  402380:	4628      	mov	r0, r5
  402382:	aa01      	add	r2, sp, #4
  402384:	f001 fb24 	bl	4039d0 <__sfvwrite_r>
  402388:	2800      	cmp	r0, #0
  40238a:	bf14      	ite	ne
  40238c:	f04f 30ff 	movne.w	r0, #4294967295
  402390:	200a      	moveq	r0, #10
  402392:	b009      	add	sp, #36	; 0x24
  402394:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402396:	4628      	mov	r0, r5
  402398:	f001 f95e 	bl	403658 <__sinit>
  40239c:	e7e4      	b.n	402368 <_puts_r+0x2c>
  40239e:	bf00      	nop
  4023a0:	004051c0 	.word	0x004051c0

004023a4 <puts>:
  4023a4:	4b02      	ldr	r3, [pc, #8]	; (4023b0 <puts+0xc>)
  4023a6:	4601      	mov	r1, r0
  4023a8:	6818      	ldr	r0, [r3, #0]
  4023aa:	f7ff bfc7 	b.w	40233c <_puts_r>
  4023ae:	bf00      	nop
  4023b0:	20400010 	.word	0x20400010

004023b4 <setbuf>:
  4023b4:	2900      	cmp	r1, #0
  4023b6:	bf0c      	ite	eq
  4023b8:	2202      	moveq	r2, #2
  4023ba:	2200      	movne	r2, #0
  4023bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4023c0:	f000 b800 	b.w	4023c4 <setvbuf>

004023c4 <setvbuf>:
  4023c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4023c8:	4c50      	ldr	r4, [pc, #320]	; (40250c <setvbuf+0x148>)
  4023ca:	6825      	ldr	r5, [r4, #0]
  4023cc:	b083      	sub	sp, #12
  4023ce:	4604      	mov	r4, r0
  4023d0:	460f      	mov	r7, r1
  4023d2:	4690      	mov	r8, r2
  4023d4:	461e      	mov	r6, r3
  4023d6:	b115      	cbz	r5, 4023de <setvbuf+0x1a>
  4023d8:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4023da:	2b00      	cmp	r3, #0
  4023dc:	d077      	beq.n	4024ce <setvbuf+0x10a>
  4023de:	f1b8 0f02 	cmp.w	r8, #2
  4023e2:	d004      	beq.n	4023ee <setvbuf+0x2a>
  4023e4:	f1b8 0f01 	cmp.w	r8, #1
  4023e8:	d87d      	bhi.n	4024e6 <setvbuf+0x122>
  4023ea:	2e00      	cmp	r6, #0
  4023ec:	db7b      	blt.n	4024e6 <setvbuf+0x122>
  4023ee:	4621      	mov	r1, r4
  4023f0:	4628      	mov	r0, r5
  4023f2:	f001 f89d 	bl	403530 <_fflush_r>
  4023f6:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4023f8:	b141      	cbz	r1, 40240c <setvbuf+0x48>
  4023fa:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4023fe:	4299      	cmp	r1, r3
  402400:	d002      	beq.n	402408 <setvbuf+0x44>
  402402:	4628      	mov	r0, r5
  402404:	f001 f9fe 	bl	403804 <_free_r>
  402408:	2300      	movs	r3, #0
  40240a:	6323      	str	r3, [r4, #48]	; 0x30
  40240c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402410:	2200      	movs	r2, #0
  402412:	61a2      	str	r2, [r4, #24]
  402414:	6062      	str	r2, [r4, #4]
  402416:	061a      	lsls	r2, r3, #24
  402418:	d452      	bmi.n	4024c0 <setvbuf+0xfc>
  40241a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  40241e:	f023 0303 	bic.w	r3, r3, #3
  402422:	f1b8 0f02 	cmp.w	r8, #2
  402426:	81a3      	strh	r3, [r4, #12]
  402428:	d037      	beq.n	40249a <setvbuf+0xd6>
  40242a:	ab01      	add	r3, sp, #4
  40242c:	466a      	mov	r2, sp
  40242e:	4621      	mov	r1, r4
  402430:	4628      	mov	r0, r5
  402432:	f001 fc7d 	bl	403d30 <__swhatbuf_r>
  402436:	89a3      	ldrh	r3, [r4, #12]
  402438:	4318      	orrs	r0, r3
  40243a:	81a0      	strh	r0, [r4, #12]
  40243c:	b316      	cbz	r6, 402484 <setvbuf+0xc0>
  40243e:	b317      	cbz	r7, 402486 <setvbuf+0xc2>
  402440:	6bab      	ldr	r3, [r5, #56]	; 0x38
  402442:	2b00      	cmp	r3, #0
  402444:	d04b      	beq.n	4024de <setvbuf+0x11a>
  402446:	9b00      	ldr	r3, [sp, #0]
  402448:	6027      	str	r7, [r4, #0]
  40244a:	429e      	cmp	r6, r3
  40244c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402450:	6127      	str	r7, [r4, #16]
  402452:	bf1c      	itt	ne
  402454:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
  402458:	81a3      	strhne	r3, [r4, #12]
  40245a:	f1b8 0f01 	cmp.w	r8, #1
  40245e:	bf04      	itt	eq
  402460:	f043 0301 	orreq.w	r3, r3, #1
  402464:	81a3      	strheq	r3, [r4, #12]
  402466:	b29b      	uxth	r3, r3
  402468:	f013 0008 	ands.w	r0, r3, #8
  40246c:	6166      	str	r6, [r4, #20]
  40246e:	d023      	beq.n	4024b8 <setvbuf+0xf4>
  402470:	f013 0001 	ands.w	r0, r3, #1
  402474:	d02f      	beq.n	4024d6 <setvbuf+0x112>
  402476:	2000      	movs	r0, #0
  402478:	4276      	negs	r6, r6
  40247a:	61a6      	str	r6, [r4, #24]
  40247c:	60a0      	str	r0, [r4, #8]
  40247e:	b003      	add	sp, #12
  402480:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402484:	9e00      	ldr	r6, [sp, #0]
  402486:	4630      	mov	r0, r6
  402488:	f001 fcc4 	bl	403e14 <malloc>
  40248c:	4607      	mov	r7, r0
  40248e:	b368      	cbz	r0, 4024ec <setvbuf+0x128>
  402490:	89a3      	ldrh	r3, [r4, #12]
  402492:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402496:	81a3      	strh	r3, [r4, #12]
  402498:	e7d2      	b.n	402440 <setvbuf+0x7c>
  40249a:	2000      	movs	r0, #0
  40249c:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4024a0:	f043 0302 	orr.w	r3, r3, #2
  4024a4:	2500      	movs	r5, #0
  4024a6:	2101      	movs	r1, #1
  4024a8:	81a3      	strh	r3, [r4, #12]
  4024aa:	60a5      	str	r5, [r4, #8]
  4024ac:	6022      	str	r2, [r4, #0]
  4024ae:	6122      	str	r2, [r4, #16]
  4024b0:	6161      	str	r1, [r4, #20]
  4024b2:	b003      	add	sp, #12
  4024b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4024b8:	60a0      	str	r0, [r4, #8]
  4024ba:	b003      	add	sp, #12
  4024bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4024c0:	6921      	ldr	r1, [r4, #16]
  4024c2:	4628      	mov	r0, r5
  4024c4:	f001 f99e 	bl	403804 <_free_r>
  4024c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4024cc:	e7a5      	b.n	40241a <setvbuf+0x56>
  4024ce:	4628      	mov	r0, r5
  4024d0:	f001 f8c2 	bl	403658 <__sinit>
  4024d4:	e783      	b.n	4023de <setvbuf+0x1a>
  4024d6:	60a6      	str	r6, [r4, #8]
  4024d8:	b003      	add	sp, #12
  4024da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4024de:	4628      	mov	r0, r5
  4024e0:	f001 f8ba 	bl	403658 <__sinit>
  4024e4:	e7af      	b.n	402446 <setvbuf+0x82>
  4024e6:	f04f 30ff 	mov.w	r0, #4294967295
  4024ea:	e7e2      	b.n	4024b2 <setvbuf+0xee>
  4024ec:	f8dd 9000 	ldr.w	r9, [sp]
  4024f0:	45b1      	cmp	r9, r6
  4024f2:	d006      	beq.n	402502 <setvbuf+0x13e>
  4024f4:	4648      	mov	r0, r9
  4024f6:	f001 fc8d 	bl	403e14 <malloc>
  4024fa:	4607      	mov	r7, r0
  4024fc:	b108      	cbz	r0, 402502 <setvbuf+0x13e>
  4024fe:	464e      	mov	r6, r9
  402500:	e7c6      	b.n	402490 <setvbuf+0xcc>
  402502:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402506:	f04f 30ff 	mov.w	r0, #4294967295
  40250a:	e7c7      	b.n	40249c <setvbuf+0xd8>
  40250c:	20400010 	.word	0x20400010
	...

00402540 <strlen>:
  402540:	f890 f000 	pld	[r0]
  402544:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  402548:	f020 0107 	bic.w	r1, r0, #7
  40254c:	f06f 0c00 	mvn.w	ip, #0
  402550:	f010 0407 	ands.w	r4, r0, #7
  402554:	f891 f020 	pld	[r1, #32]
  402558:	f040 8049 	bne.w	4025ee <strlen+0xae>
  40255c:	f04f 0400 	mov.w	r4, #0
  402560:	f06f 0007 	mvn.w	r0, #7
  402564:	e9d1 2300 	ldrd	r2, r3, [r1]
  402568:	f891 f040 	pld	[r1, #64]	; 0x40
  40256c:	f100 0008 	add.w	r0, r0, #8
  402570:	fa82 f24c 	uadd8	r2, r2, ip
  402574:	faa4 f28c 	sel	r2, r4, ip
  402578:	fa83 f34c 	uadd8	r3, r3, ip
  40257c:	faa2 f38c 	sel	r3, r2, ip
  402580:	bb4b      	cbnz	r3, 4025d6 <strlen+0x96>
  402582:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  402586:	fa82 f24c 	uadd8	r2, r2, ip
  40258a:	f100 0008 	add.w	r0, r0, #8
  40258e:	faa4 f28c 	sel	r2, r4, ip
  402592:	fa83 f34c 	uadd8	r3, r3, ip
  402596:	faa2 f38c 	sel	r3, r2, ip
  40259a:	b9e3      	cbnz	r3, 4025d6 <strlen+0x96>
  40259c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4025a0:	fa82 f24c 	uadd8	r2, r2, ip
  4025a4:	f100 0008 	add.w	r0, r0, #8
  4025a8:	faa4 f28c 	sel	r2, r4, ip
  4025ac:	fa83 f34c 	uadd8	r3, r3, ip
  4025b0:	faa2 f38c 	sel	r3, r2, ip
  4025b4:	b97b      	cbnz	r3, 4025d6 <strlen+0x96>
  4025b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4025ba:	f101 0120 	add.w	r1, r1, #32
  4025be:	fa82 f24c 	uadd8	r2, r2, ip
  4025c2:	f100 0008 	add.w	r0, r0, #8
  4025c6:	faa4 f28c 	sel	r2, r4, ip
  4025ca:	fa83 f34c 	uadd8	r3, r3, ip
  4025ce:	faa2 f38c 	sel	r3, r2, ip
  4025d2:	2b00      	cmp	r3, #0
  4025d4:	d0c6      	beq.n	402564 <strlen+0x24>
  4025d6:	2a00      	cmp	r2, #0
  4025d8:	bf04      	itt	eq
  4025da:	3004      	addeq	r0, #4
  4025dc:	461a      	moveq	r2, r3
  4025de:	ba12      	rev	r2, r2
  4025e0:	fab2 f282 	clz	r2, r2
  4025e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4025e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4025ec:	4770      	bx	lr
  4025ee:	e9d1 2300 	ldrd	r2, r3, [r1]
  4025f2:	f004 0503 	and.w	r5, r4, #3
  4025f6:	f1c4 0000 	rsb	r0, r4, #0
  4025fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4025fe:	f014 0f04 	tst.w	r4, #4
  402602:	f891 f040 	pld	[r1, #64]	; 0x40
  402606:	fa0c f505 	lsl.w	r5, ip, r5
  40260a:	ea62 0205 	orn	r2, r2, r5
  40260e:	bf1c      	itt	ne
  402610:	ea63 0305 	ornne	r3, r3, r5
  402614:	4662      	movne	r2, ip
  402616:	f04f 0400 	mov.w	r4, #0
  40261a:	e7a9      	b.n	402570 <strlen+0x30>

0040261c <__sprint_r.part.0>:
  40261c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402620:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  402622:	049c      	lsls	r4, r3, #18
  402624:	4693      	mov	fp, r2
  402626:	d52f      	bpl.n	402688 <__sprint_r.part.0+0x6c>
  402628:	6893      	ldr	r3, [r2, #8]
  40262a:	6812      	ldr	r2, [r2, #0]
  40262c:	b353      	cbz	r3, 402684 <__sprint_r.part.0+0x68>
  40262e:	460e      	mov	r6, r1
  402630:	4607      	mov	r7, r0
  402632:	f102 0908 	add.w	r9, r2, #8
  402636:	e919 0420 	ldmdb	r9, {r5, sl}
  40263a:	ea5f 089a 	movs.w	r8, sl, lsr #2
  40263e:	d017      	beq.n	402670 <__sprint_r.part.0+0x54>
  402640:	3d04      	subs	r5, #4
  402642:	2400      	movs	r4, #0
  402644:	e001      	b.n	40264a <__sprint_r.part.0+0x2e>
  402646:	45a0      	cmp	r8, r4
  402648:	d010      	beq.n	40266c <__sprint_r.part.0+0x50>
  40264a:	4632      	mov	r2, r6
  40264c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  402650:	4638      	mov	r0, r7
  402652:	f001 f875 	bl	403740 <_fputwc_r>
  402656:	1c43      	adds	r3, r0, #1
  402658:	f104 0401 	add.w	r4, r4, #1
  40265c:	d1f3      	bne.n	402646 <__sprint_r.part.0+0x2a>
  40265e:	2300      	movs	r3, #0
  402660:	f8cb 3008 	str.w	r3, [fp, #8]
  402664:	f8cb 3004 	str.w	r3, [fp, #4]
  402668:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40266c:	f8db 3008 	ldr.w	r3, [fp, #8]
  402670:	f02a 0a03 	bic.w	sl, sl, #3
  402674:	eba3 030a 	sub.w	r3, r3, sl
  402678:	f8cb 3008 	str.w	r3, [fp, #8]
  40267c:	f109 0908 	add.w	r9, r9, #8
  402680:	2b00      	cmp	r3, #0
  402682:	d1d8      	bne.n	402636 <__sprint_r.part.0+0x1a>
  402684:	2000      	movs	r0, #0
  402686:	e7ea      	b.n	40265e <__sprint_r.part.0+0x42>
  402688:	f001 f9a2 	bl	4039d0 <__sfvwrite_r>
  40268c:	2300      	movs	r3, #0
  40268e:	f8cb 3008 	str.w	r3, [fp, #8]
  402692:	f8cb 3004 	str.w	r3, [fp, #4]
  402696:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40269a:	bf00      	nop

0040269c <_vfiprintf_r>:
  40269c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4026a0:	b0ad      	sub	sp, #180	; 0xb4
  4026a2:	461d      	mov	r5, r3
  4026a4:	9101      	str	r1, [sp, #4]
  4026a6:	4691      	mov	r9, r2
  4026a8:	9308      	str	r3, [sp, #32]
  4026aa:	9006      	str	r0, [sp, #24]
  4026ac:	b118      	cbz	r0, 4026b6 <_vfiprintf_r+0x1a>
  4026ae:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4026b0:	2b00      	cmp	r3, #0
  4026b2:	f000 80e0 	beq.w	402876 <_vfiprintf_r+0x1da>
  4026b6:	9c01      	ldr	r4, [sp, #4]
  4026b8:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
  4026bc:	b281      	uxth	r1, r0
  4026be:	048b      	lsls	r3, r1, #18
  4026c0:	d407      	bmi.n	4026d2 <_vfiprintf_r+0x36>
  4026c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4026c4:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  4026c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  4026cc:	81a1      	strh	r1, [r4, #12]
  4026ce:	6663      	str	r3, [r4, #100]	; 0x64
  4026d0:	b289      	uxth	r1, r1
  4026d2:	070f      	lsls	r7, r1, #28
  4026d4:	f140 80b1 	bpl.w	40283a <_vfiprintf_r+0x19e>
  4026d8:	9b01      	ldr	r3, [sp, #4]
  4026da:	691b      	ldr	r3, [r3, #16]
  4026dc:	2b00      	cmp	r3, #0
  4026de:	f000 80ac 	beq.w	40283a <_vfiprintf_r+0x19e>
  4026e2:	f001 011a 	and.w	r1, r1, #26
  4026e6:	290a      	cmp	r1, #10
  4026e8:	f000 80b5 	beq.w	402856 <_vfiprintf_r+0x1ba>
  4026ec:	2300      	movs	r3, #0
  4026ee:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
  4026f2:	930b      	str	r3, [sp, #44]	; 0x2c
  4026f4:	9311      	str	r3, [sp, #68]	; 0x44
  4026f6:	9310      	str	r3, [sp, #64]	; 0x40
  4026f8:	9304      	str	r3, [sp, #16]
  4026fa:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  4026fe:	46da      	mov	sl, fp
  402700:	f899 3000 	ldrb.w	r3, [r9]
  402704:	464c      	mov	r4, r9
  402706:	b1fb      	cbz	r3, 402748 <_vfiprintf_r+0xac>
  402708:	2b25      	cmp	r3, #37	; 0x25
  40270a:	d102      	bne.n	402712 <_vfiprintf_r+0x76>
  40270c:	e01c      	b.n	402748 <_vfiprintf_r+0xac>
  40270e:	2b25      	cmp	r3, #37	; 0x25
  402710:	d003      	beq.n	40271a <_vfiprintf_r+0x7e>
  402712:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  402716:	2b00      	cmp	r3, #0
  402718:	d1f9      	bne.n	40270e <_vfiprintf_r+0x72>
  40271a:	eba4 0509 	sub.w	r5, r4, r9
  40271e:	b19d      	cbz	r5, 402748 <_vfiprintf_r+0xac>
  402720:	9b10      	ldr	r3, [sp, #64]	; 0x40
  402722:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402724:	f8ca 9000 	str.w	r9, [sl]
  402728:	3301      	adds	r3, #1
  40272a:	442a      	add	r2, r5
  40272c:	2b07      	cmp	r3, #7
  40272e:	f8ca 5004 	str.w	r5, [sl, #4]
  402732:	9211      	str	r2, [sp, #68]	; 0x44
  402734:	9310      	str	r3, [sp, #64]	; 0x40
  402736:	dd7a      	ble.n	40282e <_vfiprintf_r+0x192>
  402738:	2a00      	cmp	r2, #0
  40273a:	f040 848f 	bne.w	40305c <_vfiprintf_r+0x9c0>
  40273e:	9b04      	ldr	r3, [sp, #16]
  402740:	9210      	str	r2, [sp, #64]	; 0x40
  402742:	442b      	add	r3, r5
  402744:	46da      	mov	sl, fp
  402746:	9304      	str	r3, [sp, #16]
  402748:	7823      	ldrb	r3, [r4, #0]
  40274a:	2b00      	cmp	r3, #0
  40274c:	f000 83b1 	beq.w	402eb2 <_vfiprintf_r+0x816>
  402750:	2000      	movs	r0, #0
  402752:	f04f 0300 	mov.w	r3, #0
  402756:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  40275a:	f104 0901 	add.w	r9, r4, #1
  40275e:	7862      	ldrb	r2, [r4, #1]
  402760:	4605      	mov	r5, r0
  402762:	4606      	mov	r6, r0
  402764:	4603      	mov	r3, r0
  402766:	f04f 34ff 	mov.w	r4, #4294967295
  40276a:	f109 0901 	add.w	r9, r9, #1
  40276e:	f1a2 0120 	sub.w	r1, r2, #32
  402772:	2958      	cmp	r1, #88	; 0x58
  402774:	f200 830e 	bhi.w	402d94 <_vfiprintf_r+0x6f8>
  402778:	e8df f011 	tbh	[pc, r1, lsl #1]
  40277c:	030c0237 	.word	0x030c0237
  402780:	02eb030c 	.word	0x02eb030c
  402784:	030c030c 	.word	0x030c030c
  402788:	030c030c 	.word	0x030c030c
  40278c:	030c030c 	.word	0x030c030c
  402790:	02f0029e 	.word	0x02f0029e
  402794:	0082030c 	.word	0x0082030c
  402798:	030c0277 	.word	0x030c0277
  40279c:	01d401cf 	.word	0x01d401cf
  4027a0:	01d401d4 	.word	0x01d401d4
  4027a4:	01d401d4 	.word	0x01d401d4
  4027a8:	01d401d4 	.word	0x01d401d4
  4027ac:	01d401d4 	.word	0x01d401d4
  4027b0:	030c030c 	.word	0x030c030c
  4027b4:	030c030c 	.word	0x030c030c
  4027b8:	030c030c 	.word	0x030c030c
  4027bc:	030c030c 	.word	0x030c030c
  4027c0:	030c030c 	.word	0x030c030c
  4027c4:	030c023f 	.word	0x030c023f
  4027c8:	030c030c 	.word	0x030c030c
  4027cc:	030c030c 	.word	0x030c030c
  4027d0:	030c030c 	.word	0x030c030c
  4027d4:	030c030c 	.word	0x030c030c
  4027d8:	0246030c 	.word	0x0246030c
  4027dc:	030c030c 	.word	0x030c030c
  4027e0:	030c030c 	.word	0x030c030c
  4027e4:	024a030c 	.word	0x024a030c
  4027e8:	030c030c 	.word	0x030c030c
  4027ec:	030c0252 	.word	0x030c0252
  4027f0:	030c030c 	.word	0x030c030c
  4027f4:	030c030c 	.word	0x030c030c
  4027f8:	030c030c 	.word	0x030c030c
  4027fc:	030c030c 	.word	0x030c030c
  402800:	01e2030c 	.word	0x01e2030c
  402804:	030c01f6 	.word	0x030c01f6
  402808:	030c030c 	.word	0x030c030c
  40280c:	01f60307 	.word	0x01f60307
  402810:	030c030c 	.word	0x030c030c
  402814:	030c0291 	.word	0x030c0291
  402818:	008702f5 	.word	0x008702f5
  40281c:	02c302b1 	.word	0x02c302b1
  402820:	02c8030c 	.word	0x02c8030c
  402824:	01bd030c 	.word	0x01bd030c
  402828:	030c030c 	.word	0x030c030c
  40282c:	02aa      	.short	0x02aa
  40282e:	f10a 0a08 	add.w	sl, sl, #8
  402832:	9b04      	ldr	r3, [sp, #16]
  402834:	442b      	add	r3, r5
  402836:	9304      	str	r3, [sp, #16]
  402838:	e786      	b.n	402748 <_vfiprintf_r+0xac>
  40283a:	9c01      	ldr	r4, [sp, #4]
  40283c:	9806      	ldr	r0, [sp, #24]
  40283e:	4621      	mov	r1, r4
  402840:	f000 fd62 	bl	403308 <__swsetup_r>
  402844:	2800      	cmp	r0, #0
  402846:	f040 8340 	bne.w	402eca <_vfiprintf_r+0x82e>
  40284a:	89a1      	ldrh	r1, [r4, #12]
  40284c:	f001 011a 	and.w	r1, r1, #26
  402850:	290a      	cmp	r1, #10
  402852:	f47f af4b 	bne.w	4026ec <_vfiprintf_r+0x50>
  402856:	9901      	ldr	r1, [sp, #4]
  402858:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
  40285c:	2b00      	cmp	r3, #0
  40285e:	f6ff af45 	blt.w	4026ec <_vfiprintf_r+0x50>
  402862:	462b      	mov	r3, r5
  402864:	464a      	mov	r2, r9
  402866:	9806      	ldr	r0, [sp, #24]
  402868:	f000 fd18 	bl	40329c <__sbprintf>
  40286c:	9004      	str	r0, [sp, #16]
  40286e:	9804      	ldr	r0, [sp, #16]
  402870:	b02d      	add	sp, #180	; 0xb4
  402872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402876:	f000 feef 	bl	403658 <__sinit>
  40287a:	e71c      	b.n	4026b6 <_vfiprintf_r+0x1a>
  40287c:	4276      	negs	r6, r6
  40287e:	9208      	str	r2, [sp, #32]
  402880:	f043 0304 	orr.w	r3, r3, #4
  402884:	f899 2000 	ldrb.w	r2, [r9]
  402888:	e76f      	b.n	40276a <_vfiprintf_r+0xce>
  40288a:	9607      	str	r6, [sp, #28]
  40288c:	f013 0220 	ands.w	r2, r3, #32
  402890:	f040 845a 	bne.w	403148 <_vfiprintf_r+0xaac>
  402894:	f013 0110 	ands.w	r1, r3, #16
  402898:	f040 83f1 	bne.w	40307e <_vfiprintf_r+0x9e2>
  40289c:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  4028a0:	f000 83ed 	beq.w	40307e <_vfiprintf_r+0x9e2>
  4028a4:	9808      	ldr	r0, [sp, #32]
  4028a6:	460a      	mov	r2, r1
  4028a8:	4601      	mov	r1, r0
  4028aa:	3104      	adds	r1, #4
  4028ac:	8806      	ldrh	r6, [r0, #0]
  4028ae:	9108      	str	r1, [sp, #32]
  4028b0:	2700      	movs	r7, #0
  4028b2:	f04f 0100 	mov.w	r1, #0
  4028b6:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  4028ba:	2500      	movs	r5, #0
  4028bc:	1c61      	adds	r1, r4, #1
  4028be:	f000 8175 	beq.w	402bac <_vfiprintf_r+0x510>
  4028c2:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  4028c6:	9103      	str	r1, [sp, #12]
  4028c8:	ea56 0107 	orrs.w	r1, r6, r7
  4028cc:	f040 8173 	bne.w	402bb6 <_vfiprintf_r+0x51a>
  4028d0:	2c00      	cmp	r4, #0
  4028d2:	f040 8356 	bne.w	402f82 <_vfiprintf_r+0x8e6>
  4028d6:	2a00      	cmp	r2, #0
  4028d8:	f040 83b2 	bne.w	403040 <_vfiprintf_r+0x9a4>
  4028dc:	f013 0301 	ands.w	r3, r3, #1
  4028e0:	9305      	str	r3, [sp, #20]
  4028e2:	f000 8447 	beq.w	403174 <_vfiprintf_r+0xad8>
  4028e6:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
  4028ea:	2330      	movs	r3, #48	; 0x30
  4028ec:	f808 3d41 	strb.w	r3, [r8, #-65]!
  4028f0:	9b05      	ldr	r3, [sp, #20]
  4028f2:	42a3      	cmp	r3, r4
  4028f4:	bfb8      	it	lt
  4028f6:	4623      	movlt	r3, r4
  4028f8:	9302      	str	r3, [sp, #8]
  4028fa:	b10d      	cbz	r5, 402900 <_vfiprintf_r+0x264>
  4028fc:	3301      	adds	r3, #1
  4028fe:	9302      	str	r3, [sp, #8]
  402900:	9b03      	ldr	r3, [sp, #12]
  402902:	f013 0302 	ands.w	r3, r3, #2
  402906:	9309      	str	r3, [sp, #36]	; 0x24
  402908:	d002      	beq.n	402910 <_vfiprintf_r+0x274>
  40290a:	9b02      	ldr	r3, [sp, #8]
  40290c:	3302      	adds	r3, #2
  40290e:	9302      	str	r3, [sp, #8]
  402910:	9b03      	ldr	r3, [sp, #12]
  402912:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  402916:	930a      	str	r3, [sp, #40]	; 0x28
  402918:	f040 8263 	bne.w	402de2 <_vfiprintf_r+0x746>
  40291c:	9b07      	ldr	r3, [sp, #28]
  40291e:	9a02      	ldr	r2, [sp, #8]
  402920:	1a9d      	subs	r5, r3, r2
  402922:	2d00      	cmp	r5, #0
  402924:	f340 825d 	ble.w	402de2 <_vfiprintf_r+0x746>
  402928:	2d10      	cmp	r5, #16
  40292a:	f340 8477 	ble.w	40321c <_vfiprintf_r+0xb80>
  40292e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  402930:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402932:	4eb9      	ldr	r6, [pc, #740]	; (402c18 <_vfiprintf_r+0x57c>)
  402934:	46d6      	mov	lr, sl
  402936:	2710      	movs	r7, #16
  402938:	46a2      	mov	sl, r4
  40293a:	4619      	mov	r1, r3
  40293c:	9c06      	ldr	r4, [sp, #24]
  40293e:	e007      	b.n	402950 <_vfiprintf_r+0x2b4>
  402940:	f101 0c02 	add.w	ip, r1, #2
  402944:	f10e 0e08 	add.w	lr, lr, #8
  402948:	4601      	mov	r1, r0
  40294a:	3d10      	subs	r5, #16
  40294c:	2d10      	cmp	r5, #16
  40294e:	dd11      	ble.n	402974 <_vfiprintf_r+0x2d8>
  402950:	1c48      	adds	r0, r1, #1
  402952:	3210      	adds	r2, #16
  402954:	2807      	cmp	r0, #7
  402956:	9211      	str	r2, [sp, #68]	; 0x44
  402958:	e88e 00c0 	stmia.w	lr, {r6, r7}
  40295c:	9010      	str	r0, [sp, #64]	; 0x40
  40295e:	ddef      	ble.n	402940 <_vfiprintf_r+0x2a4>
  402960:	2a00      	cmp	r2, #0
  402962:	f040 8231 	bne.w	402dc8 <_vfiprintf_r+0x72c>
  402966:	3d10      	subs	r5, #16
  402968:	2d10      	cmp	r5, #16
  40296a:	4611      	mov	r1, r2
  40296c:	f04f 0c01 	mov.w	ip, #1
  402970:	46de      	mov	lr, fp
  402972:	dced      	bgt.n	402950 <_vfiprintf_r+0x2b4>
  402974:	4654      	mov	r4, sl
  402976:	4661      	mov	r1, ip
  402978:	46f2      	mov	sl, lr
  40297a:	442a      	add	r2, r5
  40297c:	2907      	cmp	r1, #7
  40297e:	9211      	str	r2, [sp, #68]	; 0x44
  402980:	f8ca 6000 	str.w	r6, [sl]
  402984:	f8ca 5004 	str.w	r5, [sl, #4]
  402988:	9110      	str	r1, [sp, #64]	; 0x40
  40298a:	f300 82e6 	bgt.w	402f5a <_vfiprintf_r+0x8be>
  40298e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402992:	f10a 0a08 	add.w	sl, sl, #8
  402996:	1c48      	adds	r0, r1, #1
  402998:	2d00      	cmp	r5, #0
  40299a:	f040 822a 	bne.w	402df2 <_vfiprintf_r+0x756>
  40299e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4029a0:	2b00      	cmp	r3, #0
  4029a2:	f000 8244 	beq.w	402e2e <_vfiprintf_r+0x792>
  4029a6:	3202      	adds	r2, #2
  4029a8:	a90e      	add	r1, sp, #56	; 0x38
  4029aa:	2302      	movs	r3, #2
  4029ac:	2807      	cmp	r0, #7
  4029ae:	9211      	str	r2, [sp, #68]	; 0x44
  4029b0:	9010      	str	r0, [sp, #64]	; 0x40
  4029b2:	e88a 000a 	stmia.w	sl, {r1, r3}
  4029b6:	f340 8236 	ble.w	402e26 <_vfiprintf_r+0x78a>
  4029ba:	2a00      	cmp	r2, #0
  4029bc:	f040 838b 	bne.w	4030d6 <_vfiprintf_r+0xa3a>
  4029c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4029c2:	2b80      	cmp	r3, #128	; 0x80
  4029c4:	f04f 0001 	mov.w	r0, #1
  4029c8:	4611      	mov	r1, r2
  4029ca:	46da      	mov	sl, fp
  4029cc:	f040 8233 	bne.w	402e36 <_vfiprintf_r+0x79a>
  4029d0:	9b07      	ldr	r3, [sp, #28]
  4029d2:	9d02      	ldr	r5, [sp, #8]
  4029d4:	1b5e      	subs	r6, r3, r5
  4029d6:	2e00      	cmp	r6, #0
  4029d8:	f340 822d 	ble.w	402e36 <_vfiprintf_r+0x79a>
  4029dc:	2e10      	cmp	r6, #16
  4029de:	4d8f      	ldr	r5, [pc, #572]	; (402c1c <_vfiprintf_r+0x580>)
  4029e0:	f340 842f 	ble.w	403242 <_vfiprintf_r+0xba6>
  4029e4:	46d4      	mov	ip, sl
  4029e6:	2710      	movs	r7, #16
  4029e8:	46a2      	mov	sl, r4
  4029ea:	9c06      	ldr	r4, [sp, #24]
  4029ec:	e007      	b.n	4029fe <_vfiprintf_r+0x362>
  4029ee:	f101 0e02 	add.w	lr, r1, #2
  4029f2:	f10c 0c08 	add.w	ip, ip, #8
  4029f6:	4601      	mov	r1, r0
  4029f8:	3e10      	subs	r6, #16
  4029fa:	2e10      	cmp	r6, #16
  4029fc:	dd11      	ble.n	402a22 <_vfiprintf_r+0x386>
  4029fe:	1c48      	adds	r0, r1, #1
  402a00:	3210      	adds	r2, #16
  402a02:	2807      	cmp	r0, #7
  402a04:	9211      	str	r2, [sp, #68]	; 0x44
  402a06:	e88c 00a0 	stmia.w	ip, {r5, r7}
  402a0a:	9010      	str	r0, [sp, #64]	; 0x40
  402a0c:	ddef      	ble.n	4029ee <_vfiprintf_r+0x352>
  402a0e:	2a00      	cmp	r2, #0
  402a10:	f040 8296 	bne.w	402f40 <_vfiprintf_r+0x8a4>
  402a14:	3e10      	subs	r6, #16
  402a16:	2e10      	cmp	r6, #16
  402a18:	f04f 0e01 	mov.w	lr, #1
  402a1c:	4611      	mov	r1, r2
  402a1e:	46dc      	mov	ip, fp
  402a20:	dced      	bgt.n	4029fe <_vfiprintf_r+0x362>
  402a22:	4654      	mov	r4, sl
  402a24:	46e2      	mov	sl, ip
  402a26:	4432      	add	r2, r6
  402a28:	f1be 0f07 	cmp.w	lr, #7
  402a2c:	9211      	str	r2, [sp, #68]	; 0x44
  402a2e:	e88a 0060 	stmia.w	sl, {r5, r6}
  402a32:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  402a36:	f300 835b 	bgt.w	4030f0 <_vfiprintf_r+0xa54>
  402a3a:	9b05      	ldr	r3, [sp, #20]
  402a3c:	1ae4      	subs	r4, r4, r3
  402a3e:	2c00      	cmp	r4, #0
  402a40:	f10a 0a08 	add.w	sl, sl, #8
  402a44:	f10e 0001 	add.w	r0, lr, #1
  402a48:	4671      	mov	r1, lr
  402a4a:	f300 81f9 	bgt.w	402e40 <_vfiprintf_r+0x7a4>
  402a4e:	9905      	ldr	r1, [sp, #20]
  402a50:	f8ca 8000 	str.w	r8, [sl]
  402a54:	440a      	add	r2, r1
  402a56:	2807      	cmp	r0, #7
  402a58:	9211      	str	r2, [sp, #68]	; 0x44
  402a5a:	f8ca 1004 	str.w	r1, [sl, #4]
  402a5e:	9010      	str	r0, [sp, #64]	; 0x40
  402a60:	f340 8255 	ble.w	402f0e <_vfiprintf_r+0x872>
  402a64:	2a00      	cmp	r2, #0
  402a66:	f040 82ee 	bne.w	403046 <_vfiprintf_r+0x9aa>
  402a6a:	9b03      	ldr	r3, [sp, #12]
  402a6c:	9210      	str	r2, [sp, #64]	; 0x40
  402a6e:	0758      	lsls	r0, r3, #29
  402a70:	d538      	bpl.n	402ae4 <_vfiprintf_r+0x448>
  402a72:	9b07      	ldr	r3, [sp, #28]
  402a74:	9902      	ldr	r1, [sp, #8]
  402a76:	1a5c      	subs	r4, r3, r1
  402a78:	2c00      	cmp	r4, #0
  402a7a:	f340 82ba 	ble.w	402ff2 <_vfiprintf_r+0x956>
  402a7e:	46da      	mov	sl, fp
  402a80:	2c10      	cmp	r4, #16
  402a82:	f340 83da 	ble.w	40323a <_vfiprintf_r+0xb9e>
  402a86:	9910      	ldr	r1, [sp, #64]	; 0x40
  402a88:	4e63      	ldr	r6, [pc, #396]	; (402c18 <_vfiprintf_r+0x57c>)
  402a8a:	9f06      	ldr	r7, [sp, #24]
  402a8c:	f8dd 8004 	ldr.w	r8, [sp, #4]
  402a90:	2510      	movs	r5, #16
  402a92:	e006      	b.n	402aa2 <_vfiprintf_r+0x406>
  402a94:	1c88      	adds	r0, r1, #2
  402a96:	f10a 0a08 	add.w	sl, sl, #8
  402a9a:	4619      	mov	r1, r3
  402a9c:	3c10      	subs	r4, #16
  402a9e:	2c10      	cmp	r4, #16
  402aa0:	dd13      	ble.n	402aca <_vfiprintf_r+0x42e>
  402aa2:	1c4b      	adds	r3, r1, #1
  402aa4:	3210      	adds	r2, #16
  402aa6:	2b07      	cmp	r3, #7
  402aa8:	9211      	str	r2, [sp, #68]	; 0x44
  402aaa:	f8ca 6000 	str.w	r6, [sl]
  402aae:	f8ca 5004 	str.w	r5, [sl, #4]
  402ab2:	9310      	str	r3, [sp, #64]	; 0x40
  402ab4:	ddee      	ble.n	402a94 <_vfiprintf_r+0x3f8>
  402ab6:	2a00      	cmp	r2, #0
  402ab8:	f040 820b 	bne.w	402ed2 <_vfiprintf_r+0x836>
  402abc:	3c10      	subs	r4, #16
  402abe:	2c10      	cmp	r4, #16
  402ac0:	f04f 0001 	mov.w	r0, #1
  402ac4:	4611      	mov	r1, r2
  402ac6:	46da      	mov	sl, fp
  402ac8:	dceb      	bgt.n	402aa2 <_vfiprintf_r+0x406>
  402aca:	4422      	add	r2, r4
  402acc:	2807      	cmp	r0, #7
  402ace:	9211      	str	r2, [sp, #68]	; 0x44
  402ad0:	f8ca 6000 	str.w	r6, [sl]
  402ad4:	f8ca 4004 	str.w	r4, [sl, #4]
  402ad8:	9010      	str	r0, [sp, #64]	; 0x40
  402ada:	f340 8223 	ble.w	402f24 <_vfiprintf_r+0x888>
  402ade:	2a00      	cmp	r2, #0
  402ae0:	f040 8367 	bne.w	4031b2 <_vfiprintf_r+0xb16>
  402ae4:	9b04      	ldr	r3, [sp, #16]
  402ae6:	9a07      	ldr	r2, [sp, #28]
  402ae8:	9902      	ldr	r1, [sp, #8]
  402aea:	428a      	cmp	r2, r1
  402aec:	bfac      	ite	ge
  402aee:	189b      	addge	r3, r3, r2
  402af0:	185b      	addlt	r3, r3, r1
  402af2:	9304      	str	r3, [sp, #16]
  402af4:	e21f      	b.n	402f36 <_vfiprintf_r+0x89a>
  402af6:	9607      	str	r6, [sp, #28]
  402af8:	069e      	lsls	r6, r3, #26
  402afa:	f100 8319 	bmi.w	403130 <_vfiprintf_r+0xa94>
  402afe:	9908      	ldr	r1, [sp, #32]
  402b00:	06dd      	lsls	r5, r3, #27
  402b02:	460a      	mov	r2, r1
  402b04:	f100 82b5 	bmi.w	403072 <_vfiprintf_r+0x9d6>
  402b08:	0658      	lsls	r0, r3, #25
  402b0a:	f140 82b2 	bpl.w	403072 <_vfiprintf_r+0x9d6>
  402b0e:	880e      	ldrh	r6, [r1, #0]
  402b10:	3104      	adds	r1, #4
  402b12:	2700      	movs	r7, #0
  402b14:	2201      	movs	r2, #1
  402b16:	9108      	str	r1, [sp, #32]
  402b18:	e6cb      	b.n	4028b2 <_vfiprintf_r+0x216>
  402b1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402b1e:	f899 2000 	ldrb.w	r2, [r9]
  402b22:	e622      	b.n	40276a <_vfiprintf_r+0xce>
  402b24:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  402b28:	2600      	movs	r6, #0
  402b2a:	f819 2b01 	ldrb.w	r2, [r9], #1
  402b2e:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  402b32:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  402b36:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  402b3a:	2909      	cmp	r1, #9
  402b3c:	d9f5      	bls.n	402b2a <_vfiprintf_r+0x48e>
  402b3e:	e616      	b.n	40276e <_vfiprintf_r+0xd2>
  402b40:	9908      	ldr	r1, [sp, #32]
  402b42:	9607      	str	r6, [sp, #28]
  402b44:	680a      	ldr	r2, [r1, #0]
  402b46:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  402b4a:	f04f 0000 	mov.w	r0, #0
  402b4e:	460a      	mov	r2, r1
  402b50:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  402b54:	3204      	adds	r2, #4
  402b56:	2001      	movs	r0, #1
  402b58:	9002      	str	r0, [sp, #8]
  402b5a:	9208      	str	r2, [sp, #32]
  402b5c:	9005      	str	r0, [sp, #20]
  402b5e:	f10d 0848 	add.w	r8, sp, #72	; 0x48
  402b62:	9303      	str	r3, [sp, #12]
  402b64:	2400      	movs	r4, #0
  402b66:	e6cb      	b.n	402900 <_vfiprintf_r+0x264>
  402b68:	9607      	str	r6, [sp, #28]
  402b6a:	2800      	cmp	r0, #0
  402b6c:	f040 8382 	bne.w	403274 <_vfiprintf_r+0xbd8>
  402b70:	069e      	lsls	r6, r3, #26
  402b72:	f100 82d1 	bmi.w	403118 <_vfiprintf_r+0xa7c>
  402b76:	06dd      	lsls	r5, r3, #27
  402b78:	f100 828d 	bmi.w	403096 <_vfiprintf_r+0x9fa>
  402b7c:	0658      	lsls	r0, r3, #25
  402b7e:	f140 828a 	bpl.w	403096 <_vfiprintf_r+0x9fa>
  402b82:	9d08      	ldr	r5, [sp, #32]
  402b84:	f9b5 6000 	ldrsh.w	r6, [r5]
  402b88:	462a      	mov	r2, r5
  402b8a:	17f7      	asrs	r7, r6, #31
  402b8c:	3204      	adds	r2, #4
  402b8e:	4630      	mov	r0, r6
  402b90:	4639      	mov	r1, r7
  402b92:	9208      	str	r2, [sp, #32]
  402b94:	2800      	cmp	r0, #0
  402b96:	f171 0200 	sbcs.w	r2, r1, #0
  402b9a:	f2c0 82ee 	blt.w	40317a <_vfiprintf_r+0xade>
  402b9e:	1c61      	adds	r1, r4, #1
  402ba0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402ba4:	f04f 0201 	mov.w	r2, #1
  402ba8:	f47f ae8b 	bne.w	4028c2 <_vfiprintf_r+0x226>
  402bac:	ea56 0107 	orrs.w	r1, r6, r7
  402bb0:	f000 81e8 	beq.w	402f84 <_vfiprintf_r+0x8e8>
  402bb4:	9303      	str	r3, [sp, #12]
  402bb6:	2a01      	cmp	r2, #1
  402bb8:	f000 8225 	beq.w	403006 <_vfiprintf_r+0x96a>
  402bbc:	2a02      	cmp	r2, #2
  402bbe:	f040 81f5 	bne.w	402fac <_vfiprintf_r+0x910>
  402bc2:	980b      	ldr	r0, [sp, #44]	; 0x2c
  402bc4:	46d8      	mov	r8, fp
  402bc6:	0933      	lsrs	r3, r6, #4
  402bc8:	f006 010f 	and.w	r1, r6, #15
  402bcc:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  402bd0:	093a      	lsrs	r2, r7, #4
  402bd2:	461e      	mov	r6, r3
  402bd4:	4617      	mov	r7, r2
  402bd6:	5c43      	ldrb	r3, [r0, r1]
  402bd8:	f808 3d01 	strb.w	r3, [r8, #-1]!
  402bdc:	ea56 0307 	orrs.w	r3, r6, r7
  402be0:	d1f1      	bne.n	402bc6 <_vfiprintf_r+0x52a>
  402be2:	ebab 0308 	sub.w	r3, fp, r8
  402be6:	9305      	str	r3, [sp, #20]
  402be8:	e682      	b.n	4028f0 <_vfiprintf_r+0x254>
  402bea:	f899 2000 	ldrb.w	r2, [r9]
  402bee:	2d00      	cmp	r5, #0
  402bf0:	f47f adbb 	bne.w	40276a <_vfiprintf_r+0xce>
  402bf4:	2001      	movs	r0, #1
  402bf6:	2520      	movs	r5, #32
  402bf8:	e5b7      	b.n	40276a <_vfiprintf_r+0xce>
  402bfa:	9607      	str	r6, [sp, #28]
  402bfc:	2800      	cmp	r0, #0
  402bfe:	f040 8336 	bne.w	40326e <_vfiprintf_r+0xbd2>
  402c02:	f043 0310 	orr.w	r3, r3, #16
  402c06:	e7b3      	b.n	402b70 <_vfiprintf_r+0x4d4>
  402c08:	9607      	str	r6, [sp, #28]
  402c0a:	f043 0310 	orr.w	r3, r3, #16
  402c0e:	e63d      	b.n	40288c <_vfiprintf_r+0x1f0>
  402c10:	9607      	str	r6, [sp, #28]
  402c12:	f043 0310 	orr.w	r3, r3, #16
  402c16:	e76f      	b.n	402af8 <_vfiprintf_r+0x45c>
  402c18:	004051f4 	.word	0x004051f4
  402c1c:	00405204 	.word	0x00405204
  402c20:	9607      	str	r6, [sp, #28]
  402c22:	2800      	cmp	r0, #0
  402c24:	f040 832c 	bne.w	403280 <_vfiprintf_r+0xbe4>
  402c28:	49b0      	ldr	r1, [pc, #704]	; (402eec <_vfiprintf_r+0x850>)
  402c2a:	910b      	str	r1, [sp, #44]	; 0x2c
  402c2c:	069f      	lsls	r7, r3, #26
  402c2e:	f100 8297 	bmi.w	403160 <_vfiprintf_r+0xac4>
  402c32:	9808      	ldr	r0, [sp, #32]
  402c34:	06de      	lsls	r6, r3, #27
  402c36:	4601      	mov	r1, r0
  402c38:	f100 8228 	bmi.w	40308c <_vfiprintf_r+0x9f0>
  402c3c:	065d      	lsls	r5, r3, #25
  402c3e:	f140 8225 	bpl.w	40308c <_vfiprintf_r+0x9f0>
  402c42:	3104      	adds	r1, #4
  402c44:	8806      	ldrh	r6, [r0, #0]
  402c46:	9108      	str	r1, [sp, #32]
  402c48:	2700      	movs	r7, #0
  402c4a:	07d8      	lsls	r0, r3, #31
  402c4c:	f140 81d9 	bpl.w	403002 <_vfiprintf_r+0x966>
  402c50:	ea56 0107 	orrs.w	r1, r6, r7
  402c54:	f000 81d5 	beq.w	403002 <_vfiprintf_r+0x966>
  402c58:	2130      	movs	r1, #48	; 0x30
  402c5a:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  402c5e:	f043 0302 	orr.w	r3, r3, #2
  402c62:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  402c66:	2202      	movs	r2, #2
  402c68:	e623      	b.n	4028b2 <_vfiprintf_r+0x216>
  402c6a:	f899 2000 	ldrb.w	r2, [r9]
  402c6e:	2a2a      	cmp	r2, #42	; 0x2a
  402c70:	f109 0701 	add.w	r7, r9, #1
  402c74:	f000 82f0 	beq.w	403258 <_vfiprintf_r+0xbbc>
  402c78:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  402c7c:	2909      	cmp	r1, #9
  402c7e:	46b9      	mov	r9, r7
  402c80:	f04f 0400 	mov.w	r4, #0
  402c84:	f63f ad73 	bhi.w	40276e <_vfiprintf_r+0xd2>
  402c88:	f819 2b01 	ldrb.w	r2, [r9], #1
  402c8c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  402c90:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  402c94:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  402c98:	2909      	cmp	r1, #9
  402c9a:	d9f5      	bls.n	402c88 <_vfiprintf_r+0x5ec>
  402c9c:	e567      	b.n	40276e <_vfiprintf_r+0xd2>
  402c9e:	f899 2000 	ldrb.w	r2, [r9]
  402ca2:	2a6c      	cmp	r2, #108	; 0x6c
  402ca4:	bf03      	ittte	eq
  402ca6:	f899 2001 	ldrbeq.w	r2, [r9, #1]
  402caa:	f043 0320 	orreq.w	r3, r3, #32
  402cae:	f109 0901 	addeq.w	r9, r9, #1
  402cb2:	f043 0310 	orrne.w	r3, r3, #16
  402cb6:	e558      	b.n	40276a <_vfiprintf_r+0xce>
  402cb8:	9908      	ldr	r1, [sp, #32]
  402cba:	680e      	ldr	r6, [r1, #0]
  402cbc:	460a      	mov	r2, r1
  402cbe:	2e00      	cmp	r6, #0
  402cc0:	f102 0204 	add.w	r2, r2, #4
  402cc4:	f6ff adda 	blt.w	40287c <_vfiprintf_r+0x1e0>
  402cc8:	9208      	str	r2, [sp, #32]
  402cca:	f899 2000 	ldrb.w	r2, [r9]
  402cce:	e54c      	b.n	40276a <_vfiprintf_r+0xce>
  402cd0:	9607      	str	r6, [sp, #28]
  402cd2:	2800      	cmp	r0, #0
  402cd4:	f040 82da 	bne.w	40328c <_vfiprintf_r+0xbf0>
  402cd8:	4985      	ldr	r1, [pc, #532]	; (402ef0 <_vfiprintf_r+0x854>)
  402cda:	910b      	str	r1, [sp, #44]	; 0x2c
  402cdc:	e7a6      	b.n	402c2c <_vfiprintf_r+0x590>
  402cde:	9808      	ldr	r0, [sp, #32]
  402ce0:	4a83      	ldr	r2, [pc, #524]	; (402ef0 <_vfiprintf_r+0x854>)
  402ce2:	9607      	str	r6, [sp, #28]
  402ce4:	920b      	str	r2, [sp, #44]	; 0x2c
  402ce6:	6806      	ldr	r6, [r0, #0]
  402ce8:	2278      	movs	r2, #120	; 0x78
  402cea:	2130      	movs	r1, #48	; 0x30
  402cec:	3004      	adds	r0, #4
  402cee:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  402cf2:	f043 0302 	orr.w	r3, r3, #2
  402cf6:	9008      	str	r0, [sp, #32]
  402cf8:	2700      	movs	r7, #0
  402cfa:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  402cfe:	2202      	movs	r2, #2
  402d00:	e5d7      	b.n	4028b2 <_vfiprintf_r+0x216>
  402d02:	f043 0320 	orr.w	r3, r3, #32
  402d06:	f899 2000 	ldrb.w	r2, [r9]
  402d0a:	e52e      	b.n	40276a <_vfiprintf_r+0xce>
  402d0c:	9908      	ldr	r1, [sp, #32]
  402d0e:	9607      	str	r6, [sp, #28]
  402d10:	f8d1 8000 	ldr.w	r8, [r1]
  402d14:	f04f 0200 	mov.w	r2, #0
  402d18:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  402d1c:	1d0e      	adds	r6, r1, #4
  402d1e:	f1b8 0f00 	cmp.w	r8, #0
  402d22:	f000 8281 	beq.w	403228 <_vfiprintf_r+0xb8c>
  402d26:	1c67      	adds	r7, r4, #1
  402d28:	f000 8260 	beq.w	4031ec <_vfiprintf_r+0xb50>
  402d2c:	4622      	mov	r2, r4
  402d2e:	2100      	movs	r1, #0
  402d30:	4640      	mov	r0, r8
  402d32:	9302      	str	r3, [sp, #8]
  402d34:	f001 fb3c 	bl	4043b0 <memchr>
  402d38:	9b02      	ldr	r3, [sp, #8]
  402d3a:	2800      	cmp	r0, #0
  402d3c:	f000 8284 	beq.w	403248 <_vfiprintf_r+0xbac>
  402d40:	eba0 0208 	sub.w	r2, r0, r8
  402d44:	9205      	str	r2, [sp, #20]
  402d46:	9608      	str	r6, [sp, #32]
  402d48:	9303      	str	r3, [sp, #12]
  402d4a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402d4e:	2400      	movs	r4, #0
  402d50:	e5ce      	b.n	4028f0 <_vfiprintf_r+0x254>
  402d52:	f043 0301 	orr.w	r3, r3, #1
  402d56:	f899 2000 	ldrb.w	r2, [r9]
  402d5a:	e506      	b.n	40276a <_vfiprintf_r+0xce>
  402d5c:	f899 2000 	ldrb.w	r2, [r9]
  402d60:	2001      	movs	r0, #1
  402d62:	252b      	movs	r5, #43	; 0x2b
  402d64:	e501      	b.n	40276a <_vfiprintf_r+0xce>
  402d66:	2800      	cmp	r0, #0
  402d68:	f040 8287 	bne.w	40327a <_vfiprintf_r+0xbde>
  402d6c:	0699      	lsls	r1, r3, #26
  402d6e:	f100 8231 	bmi.w	4031d4 <_vfiprintf_r+0xb38>
  402d72:	06da      	lsls	r2, r3, #27
  402d74:	d421      	bmi.n	402dba <_vfiprintf_r+0x71e>
  402d76:	065b      	lsls	r3, r3, #25
  402d78:	d51f      	bpl.n	402dba <_vfiprintf_r+0x71e>
  402d7a:	9a08      	ldr	r2, [sp, #32]
  402d7c:	6813      	ldr	r3, [r2, #0]
  402d7e:	3204      	adds	r2, #4
  402d80:	9208      	str	r2, [sp, #32]
  402d82:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  402d86:	801a      	strh	r2, [r3, #0]
  402d88:	e4ba      	b.n	402700 <_vfiprintf_r+0x64>
  402d8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402d8e:	f899 2000 	ldrb.w	r2, [r9]
  402d92:	e4ea      	b.n	40276a <_vfiprintf_r+0xce>
  402d94:	9607      	str	r6, [sp, #28]
  402d96:	2800      	cmp	r0, #0
  402d98:	f040 8275 	bne.w	403286 <_vfiprintf_r+0xbea>
  402d9c:	2a00      	cmp	r2, #0
  402d9e:	f000 8088 	beq.w	402eb2 <_vfiprintf_r+0x816>
  402da2:	2101      	movs	r1, #1
  402da4:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  402da8:	f04f 0200 	mov.w	r2, #0
  402dac:	9102      	str	r1, [sp, #8]
  402dae:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  402db2:	9105      	str	r1, [sp, #20]
  402db4:	f10d 0848 	add.w	r8, sp, #72	; 0x48
  402db8:	e6d3      	b.n	402b62 <_vfiprintf_r+0x4c6>
  402dba:	9a08      	ldr	r2, [sp, #32]
  402dbc:	6813      	ldr	r3, [r2, #0]
  402dbe:	3204      	adds	r2, #4
  402dc0:	9208      	str	r2, [sp, #32]
  402dc2:	9a04      	ldr	r2, [sp, #16]
  402dc4:	601a      	str	r2, [r3, #0]
  402dc6:	e49b      	b.n	402700 <_vfiprintf_r+0x64>
  402dc8:	aa0f      	add	r2, sp, #60	; 0x3c
  402dca:	9901      	ldr	r1, [sp, #4]
  402dcc:	4620      	mov	r0, r4
  402dce:	f7ff fc25 	bl	40261c <__sprint_r.part.0>
  402dd2:	2800      	cmp	r0, #0
  402dd4:	d174      	bne.n	402ec0 <_vfiprintf_r+0x824>
  402dd6:	9910      	ldr	r1, [sp, #64]	; 0x40
  402dd8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402dda:	f101 0c01 	add.w	ip, r1, #1
  402dde:	46de      	mov	lr, fp
  402de0:	e5b3      	b.n	40294a <_vfiprintf_r+0x2ae>
  402de2:	9910      	ldr	r1, [sp, #64]	; 0x40
  402de4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402de6:	1c48      	adds	r0, r1, #1
  402de8:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402dec:	2d00      	cmp	r5, #0
  402dee:	f43f add6 	beq.w	40299e <_vfiprintf_r+0x302>
  402df2:	3201      	adds	r2, #1
  402df4:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  402df8:	2101      	movs	r1, #1
  402dfa:	2807      	cmp	r0, #7
  402dfc:	9211      	str	r2, [sp, #68]	; 0x44
  402dfe:	9010      	str	r0, [sp, #64]	; 0x40
  402e00:	f8ca 5000 	str.w	r5, [sl]
  402e04:	f8ca 1004 	str.w	r1, [sl, #4]
  402e08:	f340 80b6 	ble.w	402f78 <_vfiprintf_r+0x8dc>
  402e0c:	2a00      	cmp	r2, #0
  402e0e:	f040 8155 	bne.w	4030bc <_vfiprintf_r+0xa20>
  402e12:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402e14:	2b00      	cmp	r3, #0
  402e16:	f43f add3 	beq.w	4029c0 <_vfiprintf_r+0x324>
  402e1a:	ab0e      	add	r3, sp, #56	; 0x38
  402e1c:	2202      	movs	r2, #2
  402e1e:	4608      	mov	r0, r1
  402e20:	931c      	str	r3, [sp, #112]	; 0x70
  402e22:	921d      	str	r2, [sp, #116]	; 0x74
  402e24:	46da      	mov	sl, fp
  402e26:	4601      	mov	r1, r0
  402e28:	f10a 0a08 	add.w	sl, sl, #8
  402e2c:	3001      	adds	r0, #1
  402e2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402e30:	2b80      	cmp	r3, #128	; 0x80
  402e32:	f43f adcd 	beq.w	4029d0 <_vfiprintf_r+0x334>
  402e36:	9b05      	ldr	r3, [sp, #20]
  402e38:	1ae4      	subs	r4, r4, r3
  402e3a:	2c00      	cmp	r4, #0
  402e3c:	f77f ae07 	ble.w	402a4e <_vfiprintf_r+0x3b2>
  402e40:	2c10      	cmp	r4, #16
  402e42:	4d2c      	ldr	r5, [pc, #176]	; (402ef4 <_vfiprintf_r+0x858>)
  402e44:	dd1d      	ble.n	402e82 <_vfiprintf_r+0x7e6>
  402e46:	46d6      	mov	lr, sl
  402e48:	2610      	movs	r6, #16
  402e4a:	9f06      	ldr	r7, [sp, #24]
  402e4c:	f8dd a004 	ldr.w	sl, [sp, #4]
  402e50:	e006      	b.n	402e60 <_vfiprintf_r+0x7c4>
  402e52:	1c88      	adds	r0, r1, #2
  402e54:	f10e 0e08 	add.w	lr, lr, #8
  402e58:	4619      	mov	r1, r3
  402e5a:	3c10      	subs	r4, #16
  402e5c:	2c10      	cmp	r4, #16
  402e5e:	dd0f      	ble.n	402e80 <_vfiprintf_r+0x7e4>
  402e60:	1c4b      	adds	r3, r1, #1
  402e62:	3210      	adds	r2, #16
  402e64:	2b07      	cmp	r3, #7
  402e66:	9211      	str	r2, [sp, #68]	; 0x44
  402e68:	e88e 0060 	stmia.w	lr, {r5, r6}
  402e6c:	9310      	str	r3, [sp, #64]	; 0x40
  402e6e:	ddf0      	ble.n	402e52 <_vfiprintf_r+0x7b6>
  402e70:	b9a2      	cbnz	r2, 402e9c <_vfiprintf_r+0x800>
  402e72:	3c10      	subs	r4, #16
  402e74:	2c10      	cmp	r4, #16
  402e76:	f04f 0001 	mov.w	r0, #1
  402e7a:	4611      	mov	r1, r2
  402e7c:	46de      	mov	lr, fp
  402e7e:	dcef      	bgt.n	402e60 <_vfiprintf_r+0x7c4>
  402e80:	46f2      	mov	sl, lr
  402e82:	4422      	add	r2, r4
  402e84:	2807      	cmp	r0, #7
  402e86:	9211      	str	r2, [sp, #68]	; 0x44
  402e88:	f8ca 5000 	str.w	r5, [sl]
  402e8c:	f8ca 4004 	str.w	r4, [sl, #4]
  402e90:	9010      	str	r0, [sp, #64]	; 0x40
  402e92:	dc31      	bgt.n	402ef8 <_vfiprintf_r+0x85c>
  402e94:	f10a 0a08 	add.w	sl, sl, #8
  402e98:	3001      	adds	r0, #1
  402e9a:	e5d8      	b.n	402a4e <_vfiprintf_r+0x3b2>
  402e9c:	aa0f      	add	r2, sp, #60	; 0x3c
  402e9e:	4651      	mov	r1, sl
  402ea0:	4638      	mov	r0, r7
  402ea2:	f7ff fbbb 	bl	40261c <__sprint_r.part.0>
  402ea6:	b958      	cbnz	r0, 402ec0 <_vfiprintf_r+0x824>
  402ea8:	9910      	ldr	r1, [sp, #64]	; 0x40
  402eaa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402eac:	1c48      	adds	r0, r1, #1
  402eae:	46de      	mov	lr, fp
  402eb0:	e7d3      	b.n	402e5a <_vfiprintf_r+0x7be>
  402eb2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402eb4:	b123      	cbz	r3, 402ec0 <_vfiprintf_r+0x824>
  402eb6:	9806      	ldr	r0, [sp, #24]
  402eb8:	9901      	ldr	r1, [sp, #4]
  402eba:	aa0f      	add	r2, sp, #60	; 0x3c
  402ebc:	f7ff fbae 	bl	40261c <__sprint_r.part.0>
  402ec0:	9b01      	ldr	r3, [sp, #4]
  402ec2:	899b      	ldrh	r3, [r3, #12]
  402ec4:	065b      	lsls	r3, r3, #25
  402ec6:	f57f acd2 	bpl.w	40286e <_vfiprintf_r+0x1d2>
  402eca:	f04f 33ff 	mov.w	r3, #4294967295
  402ece:	9304      	str	r3, [sp, #16]
  402ed0:	e4cd      	b.n	40286e <_vfiprintf_r+0x1d2>
  402ed2:	aa0f      	add	r2, sp, #60	; 0x3c
  402ed4:	4641      	mov	r1, r8
  402ed6:	4638      	mov	r0, r7
  402ed8:	f7ff fba0 	bl	40261c <__sprint_r.part.0>
  402edc:	2800      	cmp	r0, #0
  402ede:	d1ef      	bne.n	402ec0 <_vfiprintf_r+0x824>
  402ee0:	9910      	ldr	r1, [sp, #64]	; 0x40
  402ee2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402ee4:	1c48      	adds	r0, r1, #1
  402ee6:	46da      	mov	sl, fp
  402ee8:	e5d8      	b.n	402a9c <_vfiprintf_r+0x400>
  402eea:	bf00      	nop
  402eec:	004051c4 	.word	0x004051c4
  402ef0:	004051d8 	.word	0x004051d8
  402ef4:	00405204 	.word	0x00405204
  402ef8:	2a00      	cmp	r2, #0
  402efa:	f040 8100 	bne.w	4030fe <_vfiprintf_r+0xa62>
  402efe:	9a05      	ldr	r2, [sp, #20]
  402f00:	921d      	str	r2, [sp, #116]	; 0x74
  402f02:	2301      	movs	r3, #1
  402f04:	9211      	str	r2, [sp, #68]	; 0x44
  402f06:	f8cd 8070 	str.w	r8, [sp, #112]	; 0x70
  402f0a:	9310      	str	r3, [sp, #64]	; 0x40
  402f0c:	46da      	mov	sl, fp
  402f0e:	f10a 0a08 	add.w	sl, sl, #8
  402f12:	9b03      	ldr	r3, [sp, #12]
  402f14:	0759      	lsls	r1, r3, #29
  402f16:	d505      	bpl.n	402f24 <_vfiprintf_r+0x888>
  402f18:	9b07      	ldr	r3, [sp, #28]
  402f1a:	9902      	ldr	r1, [sp, #8]
  402f1c:	1a5c      	subs	r4, r3, r1
  402f1e:	2c00      	cmp	r4, #0
  402f20:	f73f adae 	bgt.w	402a80 <_vfiprintf_r+0x3e4>
  402f24:	9b04      	ldr	r3, [sp, #16]
  402f26:	9907      	ldr	r1, [sp, #28]
  402f28:	9802      	ldr	r0, [sp, #8]
  402f2a:	4281      	cmp	r1, r0
  402f2c:	bfac      	ite	ge
  402f2e:	185b      	addge	r3, r3, r1
  402f30:	181b      	addlt	r3, r3, r0
  402f32:	9304      	str	r3, [sp, #16]
  402f34:	bb7a      	cbnz	r2, 402f96 <_vfiprintf_r+0x8fa>
  402f36:	2300      	movs	r3, #0
  402f38:	9310      	str	r3, [sp, #64]	; 0x40
  402f3a:	46da      	mov	sl, fp
  402f3c:	f7ff bbe0 	b.w	402700 <_vfiprintf_r+0x64>
  402f40:	aa0f      	add	r2, sp, #60	; 0x3c
  402f42:	9901      	ldr	r1, [sp, #4]
  402f44:	4620      	mov	r0, r4
  402f46:	f7ff fb69 	bl	40261c <__sprint_r.part.0>
  402f4a:	2800      	cmp	r0, #0
  402f4c:	d1b8      	bne.n	402ec0 <_vfiprintf_r+0x824>
  402f4e:	9910      	ldr	r1, [sp, #64]	; 0x40
  402f50:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402f52:	f101 0e01 	add.w	lr, r1, #1
  402f56:	46dc      	mov	ip, fp
  402f58:	e54e      	b.n	4029f8 <_vfiprintf_r+0x35c>
  402f5a:	2a00      	cmp	r2, #0
  402f5c:	f040 811c 	bne.w	403198 <_vfiprintf_r+0xafc>
  402f60:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  402f64:	2900      	cmp	r1, #0
  402f66:	f000 8111 	beq.w	40318c <_vfiprintf_r+0xaf0>
  402f6a:	2201      	movs	r2, #1
  402f6c:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  402f70:	4610      	mov	r0, r2
  402f72:	921d      	str	r2, [sp, #116]	; 0x74
  402f74:	911c      	str	r1, [sp, #112]	; 0x70
  402f76:	46da      	mov	sl, fp
  402f78:	4601      	mov	r1, r0
  402f7a:	f10a 0a08 	add.w	sl, sl, #8
  402f7e:	3001      	adds	r0, #1
  402f80:	e50d      	b.n	40299e <_vfiprintf_r+0x302>
  402f82:	9b03      	ldr	r3, [sp, #12]
  402f84:	2a01      	cmp	r2, #1
  402f86:	f000 8090 	beq.w	4030aa <_vfiprintf_r+0xa0e>
  402f8a:	2a02      	cmp	r2, #2
  402f8c:	d10b      	bne.n	402fa6 <_vfiprintf_r+0x90a>
  402f8e:	9303      	str	r3, [sp, #12]
  402f90:	2600      	movs	r6, #0
  402f92:	2700      	movs	r7, #0
  402f94:	e615      	b.n	402bc2 <_vfiprintf_r+0x526>
  402f96:	aa0f      	add	r2, sp, #60	; 0x3c
  402f98:	9901      	ldr	r1, [sp, #4]
  402f9a:	9806      	ldr	r0, [sp, #24]
  402f9c:	f7ff fb3e 	bl	40261c <__sprint_r.part.0>
  402fa0:	2800      	cmp	r0, #0
  402fa2:	d0c8      	beq.n	402f36 <_vfiprintf_r+0x89a>
  402fa4:	e78c      	b.n	402ec0 <_vfiprintf_r+0x824>
  402fa6:	9303      	str	r3, [sp, #12]
  402fa8:	2600      	movs	r6, #0
  402faa:	2700      	movs	r7, #0
  402fac:	4659      	mov	r1, fp
  402fae:	e000      	b.n	402fb2 <_vfiprintf_r+0x916>
  402fb0:	4641      	mov	r1, r8
  402fb2:	08f2      	lsrs	r2, r6, #3
  402fb4:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  402fb8:	08f8      	lsrs	r0, r7, #3
  402fba:	f006 0307 	and.w	r3, r6, #7
  402fbe:	4607      	mov	r7, r0
  402fc0:	4616      	mov	r6, r2
  402fc2:	3330      	adds	r3, #48	; 0x30
  402fc4:	ea56 0207 	orrs.w	r2, r6, r7
  402fc8:	f801 3c01 	strb.w	r3, [r1, #-1]
  402fcc:	f101 38ff 	add.w	r8, r1, #4294967295
  402fd0:	d1ee      	bne.n	402fb0 <_vfiprintf_r+0x914>
  402fd2:	9a03      	ldr	r2, [sp, #12]
  402fd4:	07d6      	lsls	r6, r2, #31
  402fd6:	f57f ae04 	bpl.w	402be2 <_vfiprintf_r+0x546>
  402fda:	2b30      	cmp	r3, #48	; 0x30
  402fdc:	f43f ae01 	beq.w	402be2 <_vfiprintf_r+0x546>
  402fe0:	3902      	subs	r1, #2
  402fe2:	2330      	movs	r3, #48	; 0x30
  402fe4:	f808 3c01 	strb.w	r3, [r8, #-1]
  402fe8:	ebab 0301 	sub.w	r3, fp, r1
  402fec:	9305      	str	r3, [sp, #20]
  402fee:	4688      	mov	r8, r1
  402ff0:	e47e      	b.n	4028f0 <_vfiprintf_r+0x254>
  402ff2:	9b04      	ldr	r3, [sp, #16]
  402ff4:	9a07      	ldr	r2, [sp, #28]
  402ff6:	428a      	cmp	r2, r1
  402ff8:	bfac      	ite	ge
  402ffa:	189b      	addge	r3, r3, r2
  402ffc:	185b      	addlt	r3, r3, r1
  402ffe:	9304      	str	r3, [sp, #16]
  403000:	e799      	b.n	402f36 <_vfiprintf_r+0x89a>
  403002:	2202      	movs	r2, #2
  403004:	e455      	b.n	4028b2 <_vfiprintf_r+0x216>
  403006:	2f00      	cmp	r7, #0
  403008:	bf08      	it	eq
  40300a:	2e0a      	cmpeq	r6, #10
  40300c:	d34c      	bcc.n	4030a8 <_vfiprintf_r+0xa0c>
  40300e:	46d8      	mov	r8, fp
  403010:	4630      	mov	r0, r6
  403012:	4639      	mov	r1, r7
  403014:	220a      	movs	r2, #10
  403016:	2300      	movs	r3, #0
  403018:	f001 feb4 	bl	404d84 <__aeabi_uldivmod>
  40301c:	3230      	adds	r2, #48	; 0x30
  40301e:	f808 2d01 	strb.w	r2, [r8, #-1]!
  403022:	4630      	mov	r0, r6
  403024:	4639      	mov	r1, r7
  403026:	2300      	movs	r3, #0
  403028:	220a      	movs	r2, #10
  40302a:	f001 feab 	bl	404d84 <__aeabi_uldivmod>
  40302e:	4606      	mov	r6, r0
  403030:	460f      	mov	r7, r1
  403032:	ea56 0307 	orrs.w	r3, r6, r7
  403036:	d1eb      	bne.n	403010 <_vfiprintf_r+0x974>
  403038:	ebab 0308 	sub.w	r3, fp, r8
  40303c:	9305      	str	r3, [sp, #20]
  40303e:	e457      	b.n	4028f0 <_vfiprintf_r+0x254>
  403040:	9405      	str	r4, [sp, #20]
  403042:	46d8      	mov	r8, fp
  403044:	e454      	b.n	4028f0 <_vfiprintf_r+0x254>
  403046:	aa0f      	add	r2, sp, #60	; 0x3c
  403048:	9901      	ldr	r1, [sp, #4]
  40304a:	9806      	ldr	r0, [sp, #24]
  40304c:	f7ff fae6 	bl	40261c <__sprint_r.part.0>
  403050:	2800      	cmp	r0, #0
  403052:	f47f af35 	bne.w	402ec0 <_vfiprintf_r+0x824>
  403056:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403058:	46da      	mov	sl, fp
  40305a:	e75a      	b.n	402f12 <_vfiprintf_r+0x876>
  40305c:	aa0f      	add	r2, sp, #60	; 0x3c
  40305e:	9901      	ldr	r1, [sp, #4]
  403060:	9806      	ldr	r0, [sp, #24]
  403062:	f7ff fadb 	bl	40261c <__sprint_r.part.0>
  403066:	2800      	cmp	r0, #0
  403068:	f47f af2a 	bne.w	402ec0 <_vfiprintf_r+0x824>
  40306c:	46da      	mov	sl, fp
  40306e:	f7ff bbe0 	b.w	402832 <_vfiprintf_r+0x196>
  403072:	3104      	adds	r1, #4
  403074:	6816      	ldr	r6, [r2, #0]
  403076:	9108      	str	r1, [sp, #32]
  403078:	2201      	movs	r2, #1
  40307a:	2700      	movs	r7, #0
  40307c:	e419      	b.n	4028b2 <_vfiprintf_r+0x216>
  40307e:	9808      	ldr	r0, [sp, #32]
  403080:	4601      	mov	r1, r0
  403082:	3104      	adds	r1, #4
  403084:	6806      	ldr	r6, [r0, #0]
  403086:	9108      	str	r1, [sp, #32]
  403088:	2700      	movs	r7, #0
  40308a:	e412      	b.n	4028b2 <_vfiprintf_r+0x216>
  40308c:	680e      	ldr	r6, [r1, #0]
  40308e:	3104      	adds	r1, #4
  403090:	9108      	str	r1, [sp, #32]
  403092:	2700      	movs	r7, #0
  403094:	e5d9      	b.n	402c4a <_vfiprintf_r+0x5ae>
  403096:	9908      	ldr	r1, [sp, #32]
  403098:	680e      	ldr	r6, [r1, #0]
  40309a:	460a      	mov	r2, r1
  40309c:	17f7      	asrs	r7, r6, #31
  40309e:	3204      	adds	r2, #4
  4030a0:	9208      	str	r2, [sp, #32]
  4030a2:	4630      	mov	r0, r6
  4030a4:	4639      	mov	r1, r7
  4030a6:	e575      	b.n	402b94 <_vfiprintf_r+0x4f8>
  4030a8:	9b03      	ldr	r3, [sp, #12]
  4030aa:	9303      	str	r3, [sp, #12]
  4030ac:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
  4030b0:	3630      	adds	r6, #48	; 0x30
  4030b2:	2301      	movs	r3, #1
  4030b4:	f808 6d41 	strb.w	r6, [r8, #-65]!
  4030b8:	9305      	str	r3, [sp, #20]
  4030ba:	e419      	b.n	4028f0 <_vfiprintf_r+0x254>
  4030bc:	aa0f      	add	r2, sp, #60	; 0x3c
  4030be:	9901      	ldr	r1, [sp, #4]
  4030c0:	9806      	ldr	r0, [sp, #24]
  4030c2:	f7ff faab 	bl	40261c <__sprint_r.part.0>
  4030c6:	2800      	cmp	r0, #0
  4030c8:	f47f aefa 	bne.w	402ec0 <_vfiprintf_r+0x824>
  4030cc:	9910      	ldr	r1, [sp, #64]	; 0x40
  4030ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4030d0:	1c48      	adds	r0, r1, #1
  4030d2:	46da      	mov	sl, fp
  4030d4:	e463      	b.n	40299e <_vfiprintf_r+0x302>
  4030d6:	aa0f      	add	r2, sp, #60	; 0x3c
  4030d8:	9901      	ldr	r1, [sp, #4]
  4030da:	9806      	ldr	r0, [sp, #24]
  4030dc:	f7ff fa9e 	bl	40261c <__sprint_r.part.0>
  4030e0:	2800      	cmp	r0, #0
  4030e2:	f47f aeed 	bne.w	402ec0 <_vfiprintf_r+0x824>
  4030e6:	9910      	ldr	r1, [sp, #64]	; 0x40
  4030e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4030ea:	1c48      	adds	r0, r1, #1
  4030ec:	46da      	mov	sl, fp
  4030ee:	e69e      	b.n	402e2e <_vfiprintf_r+0x792>
  4030f0:	2a00      	cmp	r2, #0
  4030f2:	f040 8086 	bne.w	403202 <_vfiprintf_r+0xb66>
  4030f6:	2001      	movs	r0, #1
  4030f8:	4611      	mov	r1, r2
  4030fa:	46da      	mov	sl, fp
  4030fc:	e69b      	b.n	402e36 <_vfiprintf_r+0x79a>
  4030fe:	aa0f      	add	r2, sp, #60	; 0x3c
  403100:	9901      	ldr	r1, [sp, #4]
  403102:	9806      	ldr	r0, [sp, #24]
  403104:	f7ff fa8a 	bl	40261c <__sprint_r.part.0>
  403108:	2800      	cmp	r0, #0
  40310a:	f47f aed9 	bne.w	402ec0 <_vfiprintf_r+0x824>
  40310e:	9810      	ldr	r0, [sp, #64]	; 0x40
  403110:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403112:	3001      	adds	r0, #1
  403114:	46da      	mov	sl, fp
  403116:	e49a      	b.n	402a4e <_vfiprintf_r+0x3b2>
  403118:	9e08      	ldr	r6, [sp, #32]
  40311a:	3607      	adds	r6, #7
  40311c:	f026 0607 	bic.w	r6, r6, #7
  403120:	e9d6 0100 	ldrd	r0, r1, [r6]
  403124:	f106 0208 	add.w	r2, r6, #8
  403128:	9208      	str	r2, [sp, #32]
  40312a:	4606      	mov	r6, r0
  40312c:	460f      	mov	r7, r1
  40312e:	e531      	b.n	402b94 <_vfiprintf_r+0x4f8>
  403130:	9e08      	ldr	r6, [sp, #32]
  403132:	3607      	adds	r6, #7
  403134:	f026 0207 	bic.w	r2, r6, #7
  403138:	f102 0108 	add.w	r1, r2, #8
  40313c:	e9d2 6700 	ldrd	r6, r7, [r2]
  403140:	9108      	str	r1, [sp, #32]
  403142:	2201      	movs	r2, #1
  403144:	f7ff bbb5 	b.w	4028b2 <_vfiprintf_r+0x216>
  403148:	9e08      	ldr	r6, [sp, #32]
  40314a:	3607      	adds	r6, #7
  40314c:	f026 0207 	bic.w	r2, r6, #7
  403150:	f102 0108 	add.w	r1, r2, #8
  403154:	e9d2 6700 	ldrd	r6, r7, [r2]
  403158:	9108      	str	r1, [sp, #32]
  40315a:	2200      	movs	r2, #0
  40315c:	f7ff bba9 	b.w	4028b2 <_vfiprintf_r+0x216>
  403160:	9e08      	ldr	r6, [sp, #32]
  403162:	3607      	adds	r6, #7
  403164:	f026 0107 	bic.w	r1, r6, #7
  403168:	f101 0008 	add.w	r0, r1, #8
  40316c:	9008      	str	r0, [sp, #32]
  40316e:	e9d1 6700 	ldrd	r6, r7, [r1]
  403172:	e56a      	b.n	402c4a <_vfiprintf_r+0x5ae>
  403174:	46d8      	mov	r8, fp
  403176:	f7ff bbbb 	b.w	4028f0 <_vfiprintf_r+0x254>
  40317a:	252d      	movs	r5, #45	; 0x2d
  40317c:	4276      	negs	r6, r6
  40317e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  403182:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403186:	2201      	movs	r2, #1
  403188:	f7ff bb98 	b.w	4028bc <_vfiprintf_r+0x220>
  40318c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40318e:	b9d3      	cbnz	r3, 4031c6 <_vfiprintf_r+0xb2a>
  403190:	4611      	mov	r1, r2
  403192:	2001      	movs	r0, #1
  403194:	46da      	mov	sl, fp
  403196:	e64e      	b.n	402e36 <_vfiprintf_r+0x79a>
  403198:	aa0f      	add	r2, sp, #60	; 0x3c
  40319a:	9901      	ldr	r1, [sp, #4]
  40319c:	9806      	ldr	r0, [sp, #24]
  40319e:	f7ff fa3d 	bl	40261c <__sprint_r.part.0>
  4031a2:	2800      	cmp	r0, #0
  4031a4:	f47f ae8c 	bne.w	402ec0 <_vfiprintf_r+0x824>
  4031a8:	9910      	ldr	r1, [sp, #64]	; 0x40
  4031aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4031ac:	1c48      	adds	r0, r1, #1
  4031ae:	46da      	mov	sl, fp
  4031b0:	e61a      	b.n	402de8 <_vfiprintf_r+0x74c>
  4031b2:	aa0f      	add	r2, sp, #60	; 0x3c
  4031b4:	9901      	ldr	r1, [sp, #4]
  4031b6:	9806      	ldr	r0, [sp, #24]
  4031b8:	f7ff fa30 	bl	40261c <__sprint_r.part.0>
  4031bc:	2800      	cmp	r0, #0
  4031be:	f47f ae7f 	bne.w	402ec0 <_vfiprintf_r+0x824>
  4031c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4031c4:	e6ae      	b.n	402f24 <_vfiprintf_r+0x888>
  4031c6:	ab0e      	add	r3, sp, #56	; 0x38
  4031c8:	2202      	movs	r2, #2
  4031ca:	931c      	str	r3, [sp, #112]	; 0x70
  4031cc:	921d      	str	r2, [sp, #116]	; 0x74
  4031ce:	2001      	movs	r0, #1
  4031d0:	46da      	mov	sl, fp
  4031d2:	e628      	b.n	402e26 <_vfiprintf_r+0x78a>
  4031d4:	9a08      	ldr	r2, [sp, #32]
  4031d6:	9904      	ldr	r1, [sp, #16]
  4031d8:	6813      	ldr	r3, [r2, #0]
  4031da:	17cd      	asrs	r5, r1, #31
  4031dc:	4608      	mov	r0, r1
  4031de:	3204      	adds	r2, #4
  4031e0:	4629      	mov	r1, r5
  4031e2:	9208      	str	r2, [sp, #32]
  4031e4:	e9c3 0100 	strd	r0, r1, [r3]
  4031e8:	f7ff ba8a 	b.w	402700 <_vfiprintf_r+0x64>
  4031ec:	4640      	mov	r0, r8
  4031ee:	9608      	str	r6, [sp, #32]
  4031f0:	9303      	str	r3, [sp, #12]
  4031f2:	f7ff f9a5 	bl	402540 <strlen>
  4031f6:	2400      	movs	r4, #0
  4031f8:	9005      	str	r0, [sp, #20]
  4031fa:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4031fe:	f7ff bb77 	b.w	4028f0 <_vfiprintf_r+0x254>
  403202:	aa0f      	add	r2, sp, #60	; 0x3c
  403204:	9901      	ldr	r1, [sp, #4]
  403206:	9806      	ldr	r0, [sp, #24]
  403208:	f7ff fa08 	bl	40261c <__sprint_r.part.0>
  40320c:	2800      	cmp	r0, #0
  40320e:	f47f ae57 	bne.w	402ec0 <_vfiprintf_r+0x824>
  403212:	9910      	ldr	r1, [sp, #64]	; 0x40
  403214:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403216:	1c48      	adds	r0, r1, #1
  403218:	46da      	mov	sl, fp
  40321a:	e60c      	b.n	402e36 <_vfiprintf_r+0x79a>
  40321c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40321e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403220:	4e1c      	ldr	r6, [pc, #112]	; (403294 <_vfiprintf_r+0xbf8>)
  403222:	3101      	adds	r1, #1
  403224:	f7ff bba9 	b.w	40297a <_vfiprintf_r+0x2de>
  403228:	2c06      	cmp	r4, #6
  40322a:	bf28      	it	cs
  40322c:	2406      	movcs	r4, #6
  40322e:	9405      	str	r4, [sp, #20]
  403230:	9608      	str	r6, [sp, #32]
  403232:	9402      	str	r4, [sp, #8]
  403234:	f8df 8060 	ldr.w	r8, [pc, #96]	; 403298 <_vfiprintf_r+0xbfc>
  403238:	e493      	b.n	402b62 <_vfiprintf_r+0x4c6>
  40323a:	9810      	ldr	r0, [sp, #64]	; 0x40
  40323c:	4e15      	ldr	r6, [pc, #84]	; (403294 <_vfiprintf_r+0xbf8>)
  40323e:	3001      	adds	r0, #1
  403240:	e443      	b.n	402aca <_vfiprintf_r+0x42e>
  403242:	4686      	mov	lr, r0
  403244:	f7ff bbef 	b.w	402a26 <_vfiprintf_r+0x38a>
  403248:	9405      	str	r4, [sp, #20]
  40324a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40324e:	9608      	str	r6, [sp, #32]
  403250:	9303      	str	r3, [sp, #12]
  403252:	4604      	mov	r4, r0
  403254:	f7ff bb4c 	b.w	4028f0 <_vfiprintf_r+0x254>
  403258:	9908      	ldr	r1, [sp, #32]
  40325a:	f899 2001 	ldrb.w	r2, [r9, #1]
  40325e:	680c      	ldr	r4, [r1, #0]
  403260:	3104      	adds	r1, #4
  403262:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  403266:	46b9      	mov	r9, r7
  403268:	9108      	str	r1, [sp, #32]
  40326a:	f7ff ba7e 	b.w	40276a <_vfiprintf_r+0xce>
  40326e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403272:	e4c6      	b.n	402c02 <_vfiprintf_r+0x566>
  403274:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403278:	e47a      	b.n	402b70 <_vfiprintf_r+0x4d4>
  40327a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40327e:	e575      	b.n	402d6c <_vfiprintf_r+0x6d0>
  403280:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403284:	e4d0      	b.n	402c28 <_vfiprintf_r+0x58c>
  403286:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40328a:	e587      	b.n	402d9c <_vfiprintf_r+0x700>
  40328c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403290:	e522      	b.n	402cd8 <_vfiprintf_r+0x63c>
  403292:	bf00      	nop
  403294:	004051f4 	.word	0x004051f4
  403298:	004051ec 	.word	0x004051ec

0040329c <__sbprintf>:
  40329c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40329e:	460c      	mov	r4, r1
  4032a0:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
  4032a4:	8989      	ldrh	r1, [r1, #12]
  4032a6:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4032a8:	89e5      	ldrh	r5, [r4, #14]
  4032aa:	9619      	str	r6, [sp, #100]	; 0x64
  4032ac:	f021 0102 	bic.w	r1, r1, #2
  4032b0:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4032b2:	f8ad 500e 	strh.w	r5, [sp, #14]
  4032b6:	2500      	movs	r5, #0
  4032b8:	69e7      	ldr	r7, [r4, #28]
  4032ba:	f8ad 100c 	strh.w	r1, [sp, #12]
  4032be:	9609      	str	r6, [sp, #36]	; 0x24
  4032c0:	9506      	str	r5, [sp, #24]
  4032c2:	ae1a      	add	r6, sp, #104	; 0x68
  4032c4:	f44f 6580 	mov.w	r5, #1024	; 0x400
  4032c8:	4669      	mov	r1, sp
  4032ca:	9600      	str	r6, [sp, #0]
  4032cc:	9604      	str	r6, [sp, #16]
  4032ce:	9502      	str	r5, [sp, #8]
  4032d0:	9505      	str	r5, [sp, #20]
  4032d2:	9707      	str	r7, [sp, #28]
  4032d4:	4606      	mov	r6, r0
  4032d6:	f7ff f9e1 	bl	40269c <_vfiprintf_r>
  4032da:	1e05      	subs	r5, r0, #0
  4032dc:	db07      	blt.n	4032ee <__sbprintf+0x52>
  4032de:	4630      	mov	r0, r6
  4032e0:	4669      	mov	r1, sp
  4032e2:	f000 f925 	bl	403530 <_fflush_r>
  4032e6:	2800      	cmp	r0, #0
  4032e8:	bf18      	it	ne
  4032ea:	f04f 35ff 	movne.w	r5, #4294967295
  4032ee:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  4032f2:	065b      	lsls	r3, r3, #25
  4032f4:	d503      	bpl.n	4032fe <__sbprintf+0x62>
  4032f6:	89a3      	ldrh	r3, [r4, #12]
  4032f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4032fc:	81a3      	strh	r3, [r4, #12]
  4032fe:	4628      	mov	r0, r5
  403300:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
  403304:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403306:	bf00      	nop

00403308 <__swsetup_r>:
  403308:	b538      	push	{r3, r4, r5, lr}
  40330a:	4b30      	ldr	r3, [pc, #192]	; (4033cc <__swsetup_r+0xc4>)
  40330c:	681b      	ldr	r3, [r3, #0]
  40330e:	4605      	mov	r5, r0
  403310:	460c      	mov	r4, r1
  403312:	b113      	cbz	r3, 40331a <__swsetup_r+0x12>
  403314:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  403316:	2a00      	cmp	r2, #0
  403318:	d038      	beq.n	40338c <__swsetup_r+0x84>
  40331a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40331e:	b293      	uxth	r3, r2
  403320:	0718      	lsls	r0, r3, #28
  403322:	d50c      	bpl.n	40333e <__swsetup_r+0x36>
  403324:	6920      	ldr	r0, [r4, #16]
  403326:	b1a8      	cbz	r0, 403354 <__swsetup_r+0x4c>
  403328:	f013 0201 	ands.w	r2, r3, #1
  40332c:	d01e      	beq.n	40336c <__swsetup_r+0x64>
  40332e:	6963      	ldr	r3, [r4, #20]
  403330:	2200      	movs	r2, #0
  403332:	425b      	negs	r3, r3
  403334:	61a3      	str	r3, [r4, #24]
  403336:	60a2      	str	r2, [r4, #8]
  403338:	b1f0      	cbz	r0, 403378 <__swsetup_r+0x70>
  40333a:	2000      	movs	r0, #0
  40333c:	bd38      	pop	{r3, r4, r5, pc}
  40333e:	06d9      	lsls	r1, r3, #27
  403340:	d53c      	bpl.n	4033bc <__swsetup_r+0xb4>
  403342:	0758      	lsls	r0, r3, #29
  403344:	d426      	bmi.n	403394 <__swsetup_r+0x8c>
  403346:	6920      	ldr	r0, [r4, #16]
  403348:	f042 0308 	orr.w	r3, r2, #8
  40334c:	81a3      	strh	r3, [r4, #12]
  40334e:	b29b      	uxth	r3, r3
  403350:	2800      	cmp	r0, #0
  403352:	d1e9      	bne.n	403328 <__swsetup_r+0x20>
  403354:	f403 7220 	and.w	r2, r3, #640	; 0x280
  403358:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  40335c:	d0e4      	beq.n	403328 <__swsetup_r+0x20>
  40335e:	4628      	mov	r0, r5
  403360:	4621      	mov	r1, r4
  403362:	f000 fd13 	bl	403d8c <__smakebuf_r>
  403366:	89a3      	ldrh	r3, [r4, #12]
  403368:	6920      	ldr	r0, [r4, #16]
  40336a:	e7dd      	b.n	403328 <__swsetup_r+0x20>
  40336c:	0799      	lsls	r1, r3, #30
  40336e:	bf58      	it	pl
  403370:	6962      	ldrpl	r2, [r4, #20]
  403372:	60a2      	str	r2, [r4, #8]
  403374:	2800      	cmp	r0, #0
  403376:	d1e0      	bne.n	40333a <__swsetup_r+0x32>
  403378:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40337c:	061a      	lsls	r2, r3, #24
  40337e:	d5dd      	bpl.n	40333c <__swsetup_r+0x34>
  403380:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403384:	81a3      	strh	r3, [r4, #12]
  403386:	f04f 30ff 	mov.w	r0, #4294967295
  40338a:	bd38      	pop	{r3, r4, r5, pc}
  40338c:	4618      	mov	r0, r3
  40338e:	f000 f963 	bl	403658 <__sinit>
  403392:	e7c2      	b.n	40331a <__swsetup_r+0x12>
  403394:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403396:	b151      	cbz	r1, 4033ae <__swsetup_r+0xa6>
  403398:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40339c:	4299      	cmp	r1, r3
  40339e:	d004      	beq.n	4033aa <__swsetup_r+0xa2>
  4033a0:	4628      	mov	r0, r5
  4033a2:	f000 fa2f 	bl	403804 <_free_r>
  4033a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4033aa:	2300      	movs	r3, #0
  4033ac:	6323      	str	r3, [r4, #48]	; 0x30
  4033ae:	2300      	movs	r3, #0
  4033b0:	6920      	ldr	r0, [r4, #16]
  4033b2:	6063      	str	r3, [r4, #4]
  4033b4:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  4033b8:	6020      	str	r0, [r4, #0]
  4033ba:	e7c5      	b.n	403348 <__swsetup_r+0x40>
  4033bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4033c0:	2309      	movs	r3, #9
  4033c2:	602b      	str	r3, [r5, #0]
  4033c4:	f04f 30ff 	mov.w	r0, #4294967295
  4033c8:	81a2      	strh	r2, [r4, #12]
  4033ca:	bd38      	pop	{r3, r4, r5, pc}
  4033cc:	20400010 	.word	0x20400010

004033d0 <register_fini>:
  4033d0:	4b02      	ldr	r3, [pc, #8]	; (4033dc <register_fini+0xc>)
  4033d2:	b113      	cbz	r3, 4033da <register_fini+0xa>
  4033d4:	4802      	ldr	r0, [pc, #8]	; (4033e0 <register_fini+0x10>)
  4033d6:	f000 b805 	b.w	4033e4 <atexit>
  4033da:	4770      	bx	lr
  4033dc:	00000000 	.word	0x00000000
  4033e0:	0040366d 	.word	0x0040366d

004033e4 <atexit>:
  4033e4:	2300      	movs	r3, #0
  4033e6:	4601      	mov	r1, r0
  4033e8:	461a      	mov	r2, r3
  4033ea:	4618      	mov	r0, r3
  4033ec:	f001 bbd4 	b.w	404b98 <__register_exitproc>

004033f0 <__sflush_r>:
  4033f0:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  4033f4:	b29a      	uxth	r2, r3
  4033f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4033fa:	460d      	mov	r5, r1
  4033fc:	0711      	lsls	r1, r2, #28
  4033fe:	4680      	mov	r8, r0
  403400:	d43a      	bmi.n	403478 <__sflush_r+0x88>
  403402:	686a      	ldr	r2, [r5, #4]
  403404:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  403408:	2a00      	cmp	r2, #0
  40340a:	81ab      	strh	r3, [r5, #12]
  40340c:	dd6f      	ble.n	4034ee <__sflush_r+0xfe>
  40340e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  403410:	2c00      	cmp	r4, #0
  403412:	d049      	beq.n	4034a8 <__sflush_r+0xb8>
  403414:	2200      	movs	r2, #0
  403416:	b29b      	uxth	r3, r3
  403418:	f8d8 6000 	ldr.w	r6, [r8]
  40341c:	f8c8 2000 	str.w	r2, [r8]
  403420:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  403424:	d067      	beq.n	4034f6 <__sflush_r+0x106>
  403426:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  403428:	075f      	lsls	r7, r3, #29
  40342a:	d505      	bpl.n	403438 <__sflush_r+0x48>
  40342c:	6869      	ldr	r1, [r5, #4]
  40342e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  403430:	1a52      	subs	r2, r2, r1
  403432:	b10b      	cbz	r3, 403438 <__sflush_r+0x48>
  403434:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  403436:	1ad2      	subs	r2, r2, r3
  403438:	2300      	movs	r3, #0
  40343a:	69e9      	ldr	r1, [r5, #28]
  40343c:	4640      	mov	r0, r8
  40343e:	47a0      	blx	r4
  403440:	1c44      	adds	r4, r0, #1
  403442:	d03c      	beq.n	4034be <__sflush_r+0xce>
  403444:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  403448:	692a      	ldr	r2, [r5, #16]
  40344a:	602a      	str	r2, [r5, #0]
  40344c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  403450:	2200      	movs	r2, #0
  403452:	81ab      	strh	r3, [r5, #12]
  403454:	04db      	lsls	r3, r3, #19
  403456:	606a      	str	r2, [r5, #4]
  403458:	d447      	bmi.n	4034ea <__sflush_r+0xfa>
  40345a:	6b29      	ldr	r1, [r5, #48]	; 0x30
  40345c:	f8c8 6000 	str.w	r6, [r8]
  403460:	b311      	cbz	r1, 4034a8 <__sflush_r+0xb8>
  403462:	f105 0340 	add.w	r3, r5, #64	; 0x40
  403466:	4299      	cmp	r1, r3
  403468:	d002      	beq.n	403470 <__sflush_r+0x80>
  40346a:	4640      	mov	r0, r8
  40346c:	f000 f9ca 	bl	403804 <_free_r>
  403470:	2000      	movs	r0, #0
  403472:	6328      	str	r0, [r5, #48]	; 0x30
  403474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403478:	692e      	ldr	r6, [r5, #16]
  40347a:	b1ae      	cbz	r6, 4034a8 <__sflush_r+0xb8>
  40347c:	682c      	ldr	r4, [r5, #0]
  40347e:	602e      	str	r6, [r5, #0]
  403480:	0791      	lsls	r1, r2, #30
  403482:	bf0c      	ite	eq
  403484:	696b      	ldreq	r3, [r5, #20]
  403486:	2300      	movne	r3, #0
  403488:	1ba4      	subs	r4, r4, r6
  40348a:	60ab      	str	r3, [r5, #8]
  40348c:	e00a      	b.n	4034a4 <__sflush_r+0xb4>
  40348e:	4623      	mov	r3, r4
  403490:	4632      	mov	r2, r6
  403492:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  403494:	69e9      	ldr	r1, [r5, #28]
  403496:	4640      	mov	r0, r8
  403498:	47b8      	blx	r7
  40349a:	2800      	cmp	r0, #0
  40349c:	eba4 0400 	sub.w	r4, r4, r0
  4034a0:	4406      	add	r6, r0
  4034a2:	dd04      	ble.n	4034ae <__sflush_r+0xbe>
  4034a4:	2c00      	cmp	r4, #0
  4034a6:	dcf2      	bgt.n	40348e <__sflush_r+0x9e>
  4034a8:	2000      	movs	r0, #0
  4034aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4034ae:	89ab      	ldrh	r3, [r5, #12]
  4034b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4034b4:	81ab      	strh	r3, [r5, #12]
  4034b6:	f04f 30ff 	mov.w	r0, #4294967295
  4034ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4034be:	f8d8 4000 	ldr.w	r4, [r8]
  4034c2:	2c1d      	cmp	r4, #29
  4034c4:	d8f3      	bhi.n	4034ae <__sflush_r+0xbe>
  4034c6:	4b19      	ldr	r3, [pc, #100]	; (40352c <__sflush_r+0x13c>)
  4034c8:	40e3      	lsrs	r3, r4
  4034ca:	43db      	mvns	r3, r3
  4034cc:	f013 0301 	ands.w	r3, r3, #1
  4034d0:	d1ed      	bne.n	4034ae <__sflush_r+0xbe>
  4034d2:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  4034d6:	606b      	str	r3, [r5, #4]
  4034d8:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  4034dc:	6929      	ldr	r1, [r5, #16]
  4034de:	81ab      	strh	r3, [r5, #12]
  4034e0:	04da      	lsls	r2, r3, #19
  4034e2:	6029      	str	r1, [r5, #0]
  4034e4:	d5b9      	bpl.n	40345a <__sflush_r+0x6a>
  4034e6:	2c00      	cmp	r4, #0
  4034e8:	d1b7      	bne.n	40345a <__sflush_r+0x6a>
  4034ea:	6528      	str	r0, [r5, #80]	; 0x50
  4034ec:	e7b5      	b.n	40345a <__sflush_r+0x6a>
  4034ee:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4034f0:	2a00      	cmp	r2, #0
  4034f2:	dc8c      	bgt.n	40340e <__sflush_r+0x1e>
  4034f4:	e7d8      	b.n	4034a8 <__sflush_r+0xb8>
  4034f6:	2301      	movs	r3, #1
  4034f8:	69e9      	ldr	r1, [r5, #28]
  4034fa:	4640      	mov	r0, r8
  4034fc:	47a0      	blx	r4
  4034fe:	1c43      	adds	r3, r0, #1
  403500:	4602      	mov	r2, r0
  403502:	d002      	beq.n	40350a <__sflush_r+0x11a>
  403504:	89ab      	ldrh	r3, [r5, #12]
  403506:	6aac      	ldr	r4, [r5, #40]	; 0x28
  403508:	e78e      	b.n	403428 <__sflush_r+0x38>
  40350a:	f8d8 3000 	ldr.w	r3, [r8]
  40350e:	2b00      	cmp	r3, #0
  403510:	d0f8      	beq.n	403504 <__sflush_r+0x114>
  403512:	2b1d      	cmp	r3, #29
  403514:	d001      	beq.n	40351a <__sflush_r+0x12a>
  403516:	2b16      	cmp	r3, #22
  403518:	d102      	bne.n	403520 <__sflush_r+0x130>
  40351a:	f8c8 6000 	str.w	r6, [r8]
  40351e:	e7c3      	b.n	4034a8 <__sflush_r+0xb8>
  403520:	89ab      	ldrh	r3, [r5, #12]
  403522:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403526:	81ab      	strh	r3, [r5, #12]
  403528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40352c:	20400001 	.word	0x20400001

00403530 <_fflush_r>:
  403530:	b510      	push	{r4, lr}
  403532:	4604      	mov	r4, r0
  403534:	b082      	sub	sp, #8
  403536:	b108      	cbz	r0, 40353c <_fflush_r+0xc>
  403538:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40353a:	b153      	cbz	r3, 403552 <_fflush_r+0x22>
  40353c:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  403540:	b908      	cbnz	r0, 403546 <_fflush_r+0x16>
  403542:	b002      	add	sp, #8
  403544:	bd10      	pop	{r4, pc}
  403546:	4620      	mov	r0, r4
  403548:	b002      	add	sp, #8
  40354a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40354e:	f7ff bf4f 	b.w	4033f0 <__sflush_r>
  403552:	9101      	str	r1, [sp, #4]
  403554:	f000 f880 	bl	403658 <__sinit>
  403558:	9901      	ldr	r1, [sp, #4]
  40355a:	e7ef      	b.n	40353c <_fflush_r+0xc>

0040355c <_cleanup_r>:
  40355c:	4901      	ldr	r1, [pc, #4]	; (403564 <_cleanup_r+0x8>)
  40355e:	f000 bbaf 	b.w	403cc0 <_fwalk_reent>
  403562:	bf00      	nop
  403564:	00404c61 	.word	0x00404c61

00403568 <__sinit.part.1>:
  403568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40356c:	4b35      	ldr	r3, [pc, #212]	; (403644 <__sinit.part.1+0xdc>)
  40356e:	6845      	ldr	r5, [r0, #4]
  403570:	63c3      	str	r3, [r0, #60]	; 0x3c
  403572:	2400      	movs	r4, #0
  403574:	4607      	mov	r7, r0
  403576:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  40357a:	2304      	movs	r3, #4
  40357c:	2103      	movs	r1, #3
  40357e:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  403582:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  403586:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  40358a:	b083      	sub	sp, #12
  40358c:	602c      	str	r4, [r5, #0]
  40358e:	606c      	str	r4, [r5, #4]
  403590:	60ac      	str	r4, [r5, #8]
  403592:	666c      	str	r4, [r5, #100]	; 0x64
  403594:	81ec      	strh	r4, [r5, #14]
  403596:	612c      	str	r4, [r5, #16]
  403598:	616c      	str	r4, [r5, #20]
  40359a:	61ac      	str	r4, [r5, #24]
  40359c:	81ab      	strh	r3, [r5, #12]
  40359e:	4621      	mov	r1, r4
  4035a0:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  4035a4:	2208      	movs	r2, #8
  4035a6:	f7fe fe7b 	bl	4022a0 <memset>
  4035aa:	68be      	ldr	r6, [r7, #8]
  4035ac:	f8df b098 	ldr.w	fp, [pc, #152]	; 403648 <__sinit.part.1+0xe0>
  4035b0:	f8df a098 	ldr.w	sl, [pc, #152]	; 40364c <__sinit.part.1+0xe4>
  4035b4:	f8df 9098 	ldr.w	r9, [pc, #152]	; 403650 <__sinit.part.1+0xe8>
  4035b8:	f8df 8098 	ldr.w	r8, [pc, #152]	; 403654 <__sinit.part.1+0xec>
  4035bc:	f8c5 b020 	str.w	fp, [r5, #32]
  4035c0:	2301      	movs	r3, #1
  4035c2:	2209      	movs	r2, #9
  4035c4:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  4035c8:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  4035cc:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  4035d0:	61ed      	str	r5, [r5, #28]
  4035d2:	4621      	mov	r1, r4
  4035d4:	81f3      	strh	r3, [r6, #14]
  4035d6:	81b2      	strh	r2, [r6, #12]
  4035d8:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  4035dc:	6034      	str	r4, [r6, #0]
  4035de:	6074      	str	r4, [r6, #4]
  4035e0:	60b4      	str	r4, [r6, #8]
  4035e2:	6674      	str	r4, [r6, #100]	; 0x64
  4035e4:	6134      	str	r4, [r6, #16]
  4035e6:	6174      	str	r4, [r6, #20]
  4035e8:	61b4      	str	r4, [r6, #24]
  4035ea:	2208      	movs	r2, #8
  4035ec:	9301      	str	r3, [sp, #4]
  4035ee:	f7fe fe57 	bl	4022a0 <memset>
  4035f2:	68fd      	ldr	r5, [r7, #12]
  4035f4:	61f6      	str	r6, [r6, #28]
  4035f6:	2012      	movs	r0, #18
  4035f8:	2202      	movs	r2, #2
  4035fa:	f8c6 b020 	str.w	fp, [r6, #32]
  4035fe:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  403602:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  403606:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  40360a:	4621      	mov	r1, r4
  40360c:	81a8      	strh	r0, [r5, #12]
  40360e:	81ea      	strh	r2, [r5, #14]
  403610:	602c      	str	r4, [r5, #0]
  403612:	606c      	str	r4, [r5, #4]
  403614:	60ac      	str	r4, [r5, #8]
  403616:	666c      	str	r4, [r5, #100]	; 0x64
  403618:	612c      	str	r4, [r5, #16]
  40361a:	616c      	str	r4, [r5, #20]
  40361c:	61ac      	str	r4, [r5, #24]
  40361e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  403622:	2208      	movs	r2, #8
  403624:	f7fe fe3c 	bl	4022a0 <memset>
  403628:	9b01      	ldr	r3, [sp, #4]
  40362a:	61ed      	str	r5, [r5, #28]
  40362c:	f8c5 b020 	str.w	fp, [r5, #32]
  403630:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  403634:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  403638:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  40363c:	63bb      	str	r3, [r7, #56]	; 0x38
  40363e:	b003      	add	sp, #12
  403640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403644:	0040355d 	.word	0x0040355d
  403648:	004049c5 	.word	0x004049c5
  40364c:	004049e9 	.word	0x004049e9
  403650:	00404a25 	.word	0x00404a25
  403654:	00404a45 	.word	0x00404a45

00403658 <__sinit>:
  403658:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40365a:	b103      	cbz	r3, 40365e <__sinit+0x6>
  40365c:	4770      	bx	lr
  40365e:	f7ff bf83 	b.w	403568 <__sinit.part.1>
  403662:	bf00      	nop

00403664 <__sfp_lock_acquire>:
  403664:	4770      	bx	lr
  403666:	bf00      	nop

00403668 <__sfp_lock_release>:
  403668:	4770      	bx	lr
  40366a:	bf00      	nop

0040366c <__libc_fini_array>:
  40366c:	b538      	push	{r3, r4, r5, lr}
  40366e:	4c0a      	ldr	r4, [pc, #40]	; (403698 <__libc_fini_array+0x2c>)
  403670:	4d0a      	ldr	r5, [pc, #40]	; (40369c <__libc_fini_array+0x30>)
  403672:	1b64      	subs	r4, r4, r5
  403674:	10a4      	asrs	r4, r4, #2
  403676:	d00a      	beq.n	40368e <__libc_fini_array+0x22>
  403678:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40367c:	3b01      	subs	r3, #1
  40367e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  403682:	3c01      	subs	r4, #1
  403684:	f855 3904 	ldr.w	r3, [r5], #-4
  403688:	4798      	blx	r3
  40368a:	2c00      	cmp	r4, #0
  40368c:	d1f9      	bne.n	403682 <__libc_fini_array+0x16>
  40368e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  403692:	f001 be53 	b.w	40533c <_fini>
  403696:	bf00      	nop
  403698:	0040534c 	.word	0x0040534c
  40369c:	00405348 	.word	0x00405348

004036a0 <__fputwc>:
  4036a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4036a4:	b082      	sub	sp, #8
  4036a6:	4680      	mov	r8, r0
  4036a8:	4689      	mov	r9, r1
  4036aa:	4614      	mov	r4, r2
  4036ac:	f000 fb32 	bl	403d14 <__locale_mb_cur_max>
  4036b0:	2801      	cmp	r0, #1
  4036b2:	d036      	beq.n	403722 <__fputwc+0x82>
  4036b4:	464a      	mov	r2, r9
  4036b6:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  4036ba:	a901      	add	r1, sp, #4
  4036bc:	4640      	mov	r0, r8
  4036be:	f001 fa1d 	bl	404afc <_wcrtomb_r>
  4036c2:	1c42      	adds	r2, r0, #1
  4036c4:	4606      	mov	r6, r0
  4036c6:	d025      	beq.n	403714 <__fputwc+0x74>
  4036c8:	b3a8      	cbz	r0, 403736 <__fputwc+0x96>
  4036ca:	f89d e004 	ldrb.w	lr, [sp, #4]
  4036ce:	2500      	movs	r5, #0
  4036d0:	f10d 0a04 	add.w	sl, sp, #4
  4036d4:	e009      	b.n	4036ea <__fputwc+0x4a>
  4036d6:	6823      	ldr	r3, [r4, #0]
  4036d8:	1c5a      	adds	r2, r3, #1
  4036da:	6022      	str	r2, [r4, #0]
  4036dc:	f883 e000 	strb.w	lr, [r3]
  4036e0:	3501      	adds	r5, #1
  4036e2:	42b5      	cmp	r5, r6
  4036e4:	d227      	bcs.n	403736 <__fputwc+0x96>
  4036e6:	f815 e00a 	ldrb.w	lr, [r5, sl]
  4036ea:	68a3      	ldr	r3, [r4, #8]
  4036ec:	3b01      	subs	r3, #1
  4036ee:	2b00      	cmp	r3, #0
  4036f0:	60a3      	str	r3, [r4, #8]
  4036f2:	daf0      	bge.n	4036d6 <__fputwc+0x36>
  4036f4:	69a7      	ldr	r7, [r4, #24]
  4036f6:	42bb      	cmp	r3, r7
  4036f8:	4671      	mov	r1, lr
  4036fa:	4622      	mov	r2, r4
  4036fc:	4640      	mov	r0, r8
  4036fe:	db02      	blt.n	403706 <__fputwc+0x66>
  403700:	f1be 0f0a 	cmp.w	lr, #10
  403704:	d1e7      	bne.n	4036d6 <__fputwc+0x36>
  403706:	f001 f9a1 	bl	404a4c <__swbuf_r>
  40370a:	1c43      	adds	r3, r0, #1
  40370c:	d1e8      	bne.n	4036e0 <__fputwc+0x40>
  40370e:	b002      	add	sp, #8
  403710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403714:	89a3      	ldrh	r3, [r4, #12]
  403716:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40371a:	81a3      	strh	r3, [r4, #12]
  40371c:	b002      	add	sp, #8
  40371e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403722:	f109 33ff 	add.w	r3, r9, #4294967295
  403726:	2bfe      	cmp	r3, #254	; 0xfe
  403728:	d8c4      	bhi.n	4036b4 <__fputwc+0x14>
  40372a:	fa5f fe89 	uxtb.w	lr, r9
  40372e:	4606      	mov	r6, r0
  403730:	f88d e004 	strb.w	lr, [sp, #4]
  403734:	e7cb      	b.n	4036ce <__fputwc+0x2e>
  403736:	4648      	mov	r0, r9
  403738:	b002      	add	sp, #8
  40373a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40373e:	bf00      	nop

00403740 <_fputwc_r>:
  403740:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  403744:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  403748:	d10a      	bne.n	403760 <_fputwc_r+0x20>
  40374a:	b410      	push	{r4}
  40374c:	6e54      	ldr	r4, [r2, #100]	; 0x64
  40374e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  403752:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  403756:	6654      	str	r4, [r2, #100]	; 0x64
  403758:	8193      	strh	r3, [r2, #12]
  40375a:	bc10      	pop	{r4}
  40375c:	f7ff bfa0 	b.w	4036a0 <__fputwc>
  403760:	f7ff bf9e 	b.w	4036a0 <__fputwc>

00403764 <_malloc_trim_r>:
  403764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403766:	4f24      	ldr	r7, [pc, #144]	; (4037f8 <_malloc_trim_r+0x94>)
  403768:	460c      	mov	r4, r1
  40376a:	4606      	mov	r6, r0
  40376c:	f000 ff6e 	bl	40464c <__malloc_lock>
  403770:	68bb      	ldr	r3, [r7, #8]
  403772:	685d      	ldr	r5, [r3, #4]
  403774:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  403778:	310f      	adds	r1, #15
  40377a:	f025 0503 	bic.w	r5, r5, #3
  40377e:	4429      	add	r1, r5
  403780:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  403784:	f021 010f 	bic.w	r1, r1, #15
  403788:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40378c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  403790:	db07      	blt.n	4037a2 <_malloc_trim_r+0x3e>
  403792:	2100      	movs	r1, #0
  403794:	4630      	mov	r0, r6
  403796:	f001 f903 	bl	4049a0 <_sbrk_r>
  40379a:	68bb      	ldr	r3, [r7, #8]
  40379c:	442b      	add	r3, r5
  40379e:	4298      	cmp	r0, r3
  4037a0:	d004      	beq.n	4037ac <_malloc_trim_r+0x48>
  4037a2:	4630      	mov	r0, r6
  4037a4:	f000 ff54 	bl	404650 <__malloc_unlock>
  4037a8:	2000      	movs	r0, #0
  4037aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4037ac:	4261      	negs	r1, r4
  4037ae:	4630      	mov	r0, r6
  4037b0:	f001 f8f6 	bl	4049a0 <_sbrk_r>
  4037b4:	3001      	adds	r0, #1
  4037b6:	d00d      	beq.n	4037d4 <_malloc_trim_r+0x70>
  4037b8:	4b10      	ldr	r3, [pc, #64]	; (4037fc <_malloc_trim_r+0x98>)
  4037ba:	68ba      	ldr	r2, [r7, #8]
  4037bc:	6819      	ldr	r1, [r3, #0]
  4037be:	1b2d      	subs	r5, r5, r4
  4037c0:	f045 0501 	orr.w	r5, r5, #1
  4037c4:	4630      	mov	r0, r6
  4037c6:	1b09      	subs	r1, r1, r4
  4037c8:	6055      	str	r5, [r2, #4]
  4037ca:	6019      	str	r1, [r3, #0]
  4037cc:	f000 ff40 	bl	404650 <__malloc_unlock>
  4037d0:	2001      	movs	r0, #1
  4037d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4037d4:	2100      	movs	r1, #0
  4037d6:	4630      	mov	r0, r6
  4037d8:	f001 f8e2 	bl	4049a0 <_sbrk_r>
  4037dc:	68ba      	ldr	r2, [r7, #8]
  4037de:	1a83      	subs	r3, r0, r2
  4037e0:	2b0f      	cmp	r3, #15
  4037e2:	ddde      	ble.n	4037a2 <_malloc_trim_r+0x3e>
  4037e4:	4c06      	ldr	r4, [pc, #24]	; (403800 <_malloc_trim_r+0x9c>)
  4037e6:	4905      	ldr	r1, [pc, #20]	; (4037fc <_malloc_trim_r+0x98>)
  4037e8:	6824      	ldr	r4, [r4, #0]
  4037ea:	f043 0301 	orr.w	r3, r3, #1
  4037ee:	1b00      	subs	r0, r0, r4
  4037f0:	6053      	str	r3, [r2, #4]
  4037f2:	6008      	str	r0, [r1, #0]
  4037f4:	e7d5      	b.n	4037a2 <_malloc_trim_r+0x3e>
  4037f6:	bf00      	nop
  4037f8:	204005ac 	.word	0x204005ac
  4037fc:	20400a58 	.word	0x20400a58
  403800:	204009b4 	.word	0x204009b4

00403804 <_free_r>:
  403804:	2900      	cmp	r1, #0
  403806:	d044      	beq.n	403892 <_free_r+0x8e>
  403808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40380c:	460d      	mov	r5, r1
  40380e:	4680      	mov	r8, r0
  403810:	f000 ff1c 	bl	40464c <__malloc_lock>
  403814:	f855 7c04 	ldr.w	r7, [r5, #-4]
  403818:	4969      	ldr	r1, [pc, #420]	; (4039c0 <_free_r+0x1bc>)
  40381a:	f027 0301 	bic.w	r3, r7, #1
  40381e:	f1a5 0408 	sub.w	r4, r5, #8
  403822:	18e2      	adds	r2, r4, r3
  403824:	688e      	ldr	r6, [r1, #8]
  403826:	6850      	ldr	r0, [r2, #4]
  403828:	42b2      	cmp	r2, r6
  40382a:	f020 0003 	bic.w	r0, r0, #3
  40382e:	d05e      	beq.n	4038ee <_free_r+0xea>
  403830:	07fe      	lsls	r6, r7, #31
  403832:	6050      	str	r0, [r2, #4]
  403834:	d40b      	bmi.n	40384e <_free_r+0x4a>
  403836:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40383a:	1be4      	subs	r4, r4, r7
  40383c:	f101 0e08 	add.w	lr, r1, #8
  403840:	68a5      	ldr	r5, [r4, #8]
  403842:	4575      	cmp	r5, lr
  403844:	443b      	add	r3, r7
  403846:	d06d      	beq.n	403924 <_free_r+0x120>
  403848:	68e7      	ldr	r7, [r4, #12]
  40384a:	60ef      	str	r7, [r5, #12]
  40384c:	60bd      	str	r5, [r7, #8]
  40384e:	1815      	adds	r5, r2, r0
  403850:	686d      	ldr	r5, [r5, #4]
  403852:	07ed      	lsls	r5, r5, #31
  403854:	d53e      	bpl.n	4038d4 <_free_r+0xd0>
  403856:	f043 0201 	orr.w	r2, r3, #1
  40385a:	6062      	str	r2, [r4, #4]
  40385c:	50e3      	str	r3, [r4, r3]
  40385e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403862:	d217      	bcs.n	403894 <_free_r+0x90>
  403864:	08db      	lsrs	r3, r3, #3
  403866:	1c58      	adds	r0, r3, #1
  403868:	109a      	asrs	r2, r3, #2
  40386a:	684d      	ldr	r5, [r1, #4]
  40386c:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  403870:	60a7      	str	r7, [r4, #8]
  403872:	2301      	movs	r3, #1
  403874:	4093      	lsls	r3, r2
  403876:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40387a:	432b      	orrs	r3, r5
  40387c:	3a08      	subs	r2, #8
  40387e:	60e2      	str	r2, [r4, #12]
  403880:	604b      	str	r3, [r1, #4]
  403882:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  403886:	60fc      	str	r4, [r7, #12]
  403888:	4640      	mov	r0, r8
  40388a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40388e:	f000 bedf 	b.w	404650 <__malloc_unlock>
  403892:	4770      	bx	lr
  403894:	0a5a      	lsrs	r2, r3, #9
  403896:	2a04      	cmp	r2, #4
  403898:	d852      	bhi.n	403940 <_free_r+0x13c>
  40389a:	099a      	lsrs	r2, r3, #6
  40389c:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4038a0:	00ff      	lsls	r7, r7, #3
  4038a2:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4038a6:	19c8      	adds	r0, r1, r7
  4038a8:	59ca      	ldr	r2, [r1, r7]
  4038aa:	3808      	subs	r0, #8
  4038ac:	4290      	cmp	r0, r2
  4038ae:	d04f      	beq.n	403950 <_free_r+0x14c>
  4038b0:	6851      	ldr	r1, [r2, #4]
  4038b2:	f021 0103 	bic.w	r1, r1, #3
  4038b6:	428b      	cmp	r3, r1
  4038b8:	d232      	bcs.n	403920 <_free_r+0x11c>
  4038ba:	6892      	ldr	r2, [r2, #8]
  4038bc:	4290      	cmp	r0, r2
  4038be:	d1f7      	bne.n	4038b0 <_free_r+0xac>
  4038c0:	68c3      	ldr	r3, [r0, #12]
  4038c2:	60a0      	str	r0, [r4, #8]
  4038c4:	60e3      	str	r3, [r4, #12]
  4038c6:	609c      	str	r4, [r3, #8]
  4038c8:	60c4      	str	r4, [r0, #12]
  4038ca:	4640      	mov	r0, r8
  4038cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4038d0:	f000 bebe 	b.w	404650 <__malloc_unlock>
  4038d4:	6895      	ldr	r5, [r2, #8]
  4038d6:	4f3b      	ldr	r7, [pc, #236]	; (4039c4 <_free_r+0x1c0>)
  4038d8:	42bd      	cmp	r5, r7
  4038da:	4403      	add	r3, r0
  4038dc:	d040      	beq.n	403960 <_free_r+0x15c>
  4038de:	68d0      	ldr	r0, [r2, #12]
  4038e0:	60e8      	str	r0, [r5, #12]
  4038e2:	f043 0201 	orr.w	r2, r3, #1
  4038e6:	6085      	str	r5, [r0, #8]
  4038e8:	6062      	str	r2, [r4, #4]
  4038ea:	50e3      	str	r3, [r4, r3]
  4038ec:	e7b7      	b.n	40385e <_free_r+0x5a>
  4038ee:	07ff      	lsls	r7, r7, #31
  4038f0:	4403      	add	r3, r0
  4038f2:	d407      	bmi.n	403904 <_free_r+0x100>
  4038f4:	f855 2c08 	ldr.w	r2, [r5, #-8]
  4038f8:	1aa4      	subs	r4, r4, r2
  4038fa:	4413      	add	r3, r2
  4038fc:	68a0      	ldr	r0, [r4, #8]
  4038fe:	68e2      	ldr	r2, [r4, #12]
  403900:	60c2      	str	r2, [r0, #12]
  403902:	6090      	str	r0, [r2, #8]
  403904:	4a30      	ldr	r2, [pc, #192]	; (4039c8 <_free_r+0x1c4>)
  403906:	6812      	ldr	r2, [r2, #0]
  403908:	f043 0001 	orr.w	r0, r3, #1
  40390c:	4293      	cmp	r3, r2
  40390e:	6060      	str	r0, [r4, #4]
  403910:	608c      	str	r4, [r1, #8]
  403912:	d3b9      	bcc.n	403888 <_free_r+0x84>
  403914:	4b2d      	ldr	r3, [pc, #180]	; (4039cc <_free_r+0x1c8>)
  403916:	4640      	mov	r0, r8
  403918:	6819      	ldr	r1, [r3, #0]
  40391a:	f7ff ff23 	bl	403764 <_malloc_trim_r>
  40391e:	e7b3      	b.n	403888 <_free_r+0x84>
  403920:	4610      	mov	r0, r2
  403922:	e7cd      	b.n	4038c0 <_free_r+0xbc>
  403924:	1811      	adds	r1, r2, r0
  403926:	6849      	ldr	r1, [r1, #4]
  403928:	07c9      	lsls	r1, r1, #31
  40392a:	d444      	bmi.n	4039b6 <_free_r+0x1b2>
  40392c:	6891      	ldr	r1, [r2, #8]
  40392e:	68d2      	ldr	r2, [r2, #12]
  403930:	60ca      	str	r2, [r1, #12]
  403932:	4403      	add	r3, r0
  403934:	f043 0001 	orr.w	r0, r3, #1
  403938:	6091      	str	r1, [r2, #8]
  40393a:	6060      	str	r0, [r4, #4]
  40393c:	50e3      	str	r3, [r4, r3]
  40393e:	e7a3      	b.n	403888 <_free_r+0x84>
  403940:	2a14      	cmp	r2, #20
  403942:	d816      	bhi.n	403972 <_free_r+0x16e>
  403944:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  403948:	00ff      	lsls	r7, r7, #3
  40394a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40394e:	e7aa      	b.n	4038a6 <_free_r+0xa2>
  403950:	10aa      	asrs	r2, r5, #2
  403952:	2301      	movs	r3, #1
  403954:	684d      	ldr	r5, [r1, #4]
  403956:	4093      	lsls	r3, r2
  403958:	432b      	orrs	r3, r5
  40395a:	604b      	str	r3, [r1, #4]
  40395c:	4603      	mov	r3, r0
  40395e:	e7b0      	b.n	4038c2 <_free_r+0xbe>
  403960:	f043 0201 	orr.w	r2, r3, #1
  403964:	614c      	str	r4, [r1, #20]
  403966:	610c      	str	r4, [r1, #16]
  403968:	60e5      	str	r5, [r4, #12]
  40396a:	60a5      	str	r5, [r4, #8]
  40396c:	6062      	str	r2, [r4, #4]
  40396e:	50e3      	str	r3, [r4, r3]
  403970:	e78a      	b.n	403888 <_free_r+0x84>
  403972:	2a54      	cmp	r2, #84	; 0x54
  403974:	d806      	bhi.n	403984 <_free_r+0x180>
  403976:	0b1a      	lsrs	r2, r3, #12
  403978:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40397c:	00ff      	lsls	r7, r7, #3
  40397e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  403982:	e790      	b.n	4038a6 <_free_r+0xa2>
  403984:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403988:	d806      	bhi.n	403998 <_free_r+0x194>
  40398a:	0bda      	lsrs	r2, r3, #15
  40398c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  403990:	00ff      	lsls	r7, r7, #3
  403992:	f102 0577 	add.w	r5, r2, #119	; 0x77
  403996:	e786      	b.n	4038a6 <_free_r+0xa2>
  403998:	f240 5054 	movw	r0, #1364	; 0x554
  40399c:	4282      	cmp	r2, r0
  40399e:	d806      	bhi.n	4039ae <_free_r+0x1aa>
  4039a0:	0c9a      	lsrs	r2, r3, #18
  4039a2:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4039a6:	00ff      	lsls	r7, r7, #3
  4039a8:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4039ac:	e77b      	b.n	4038a6 <_free_r+0xa2>
  4039ae:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  4039b2:	257e      	movs	r5, #126	; 0x7e
  4039b4:	e777      	b.n	4038a6 <_free_r+0xa2>
  4039b6:	f043 0101 	orr.w	r1, r3, #1
  4039ba:	6061      	str	r1, [r4, #4]
  4039bc:	6013      	str	r3, [r2, #0]
  4039be:	e763      	b.n	403888 <_free_r+0x84>
  4039c0:	204005ac 	.word	0x204005ac
  4039c4:	204005b4 	.word	0x204005b4
  4039c8:	204009b8 	.word	0x204009b8
  4039cc:	20400a88 	.word	0x20400a88

004039d0 <__sfvwrite_r>:
  4039d0:	6893      	ldr	r3, [r2, #8]
  4039d2:	2b00      	cmp	r3, #0
  4039d4:	d073      	beq.n	403abe <__sfvwrite_r+0xee>
  4039d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4039da:	898b      	ldrh	r3, [r1, #12]
  4039dc:	b083      	sub	sp, #12
  4039de:	460c      	mov	r4, r1
  4039e0:	0719      	lsls	r1, r3, #28
  4039e2:	9000      	str	r0, [sp, #0]
  4039e4:	4616      	mov	r6, r2
  4039e6:	d526      	bpl.n	403a36 <__sfvwrite_r+0x66>
  4039e8:	6922      	ldr	r2, [r4, #16]
  4039ea:	b322      	cbz	r2, 403a36 <__sfvwrite_r+0x66>
  4039ec:	f013 0002 	ands.w	r0, r3, #2
  4039f0:	6835      	ldr	r5, [r6, #0]
  4039f2:	d02c      	beq.n	403a4e <__sfvwrite_r+0x7e>
  4039f4:	f04f 0900 	mov.w	r9, #0
  4039f8:	4fb0      	ldr	r7, [pc, #704]	; (403cbc <__sfvwrite_r+0x2ec>)
  4039fa:	46c8      	mov	r8, r9
  4039fc:	46b2      	mov	sl, r6
  4039fe:	45b8      	cmp	r8, r7
  403a00:	4643      	mov	r3, r8
  403a02:	464a      	mov	r2, r9
  403a04:	bf28      	it	cs
  403a06:	463b      	movcs	r3, r7
  403a08:	9800      	ldr	r0, [sp, #0]
  403a0a:	f1b8 0f00 	cmp.w	r8, #0
  403a0e:	d050      	beq.n	403ab2 <__sfvwrite_r+0xe2>
  403a10:	69e1      	ldr	r1, [r4, #28]
  403a12:	6a66      	ldr	r6, [r4, #36]	; 0x24
  403a14:	47b0      	blx	r6
  403a16:	2800      	cmp	r0, #0
  403a18:	dd58      	ble.n	403acc <__sfvwrite_r+0xfc>
  403a1a:	f8da 3008 	ldr.w	r3, [sl, #8]
  403a1e:	1a1b      	subs	r3, r3, r0
  403a20:	4481      	add	r9, r0
  403a22:	eba8 0800 	sub.w	r8, r8, r0
  403a26:	f8ca 3008 	str.w	r3, [sl, #8]
  403a2a:	2b00      	cmp	r3, #0
  403a2c:	d1e7      	bne.n	4039fe <__sfvwrite_r+0x2e>
  403a2e:	2000      	movs	r0, #0
  403a30:	b003      	add	sp, #12
  403a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403a36:	4621      	mov	r1, r4
  403a38:	9800      	ldr	r0, [sp, #0]
  403a3a:	f7ff fc65 	bl	403308 <__swsetup_r>
  403a3e:	2800      	cmp	r0, #0
  403a40:	f040 8133 	bne.w	403caa <__sfvwrite_r+0x2da>
  403a44:	89a3      	ldrh	r3, [r4, #12]
  403a46:	6835      	ldr	r5, [r6, #0]
  403a48:	f013 0002 	ands.w	r0, r3, #2
  403a4c:	d1d2      	bne.n	4039f4 <__sfvwrite_r+0x24>
  403a4e:	f013 0901 	ands.w	r9, r3, #1
  403a52:	d145      	bne.n	403ae0 <__sfvwrite_r+0x110>
  403a54:	464f      	mov	r7, r9
  403a56:	9601      	str	r6, [sp, #4]
  403a58:	b337      	cbz	r7, 403aa8 <__sfvwrite_r+0xd8>
  403a5a:	059a      	lsls	r2, r3, #22
  403a5c:	f8d4 8008 	ldr.w	r8, [r4, #8]
  403a60:	f140 8083 	bpl.w	403b6a <__sfvwrite_r+0x19a>
  403a64:	4547      	cmp	r7, r8
  403a66:	46c3      	mov	fp, r8
  403a68:	f0c0 80ab 	bcc.w	403bc2 <__sfvwrite_r+0x1f2>
  403a6c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  403a70:	f040 80ac 	bne.w	403bcc <__sfvwrite_r+0x1fc>
  403a74:	6820      	ldr	r0, [r4, #0]
  403a76:	46ba      	mov	sl, r7
  403a78:	465a      	mov	r2, fp
  403a7a:	4649      	mov	r1, r9
  403a7c:	f000 fd82 	bl	404584 <memmove>
  403a80:	68a2      	ldr	r2, [r4, #8]
  403a82:	6823      	ldr	r3, [r4, #0]
  403a84:	eba2 0208 	sub.w	r2, r2, r8
  403a88:	445b      	add	r3, fp
  403a8a:	60a2      	str	r2, [r4, #8]
  403a8c:	6023      	str	r3, [r4, #0]
  403a8e:	9a01      	ldr	r2, [sp, #4]
  403a90:	6893      	ldr	r3, [r2, #8]
  403a92:	eba3 030a 	sub.w	r3, r3, sl
  403a96:	44d1      	add	r9, sl
  403a98:	eba7 070a 	sub.w	r7, r7, sl
  403a9c:	6093      	str	r3, [r2, #8]
  403a9e:	2b00      	cmp	r3, #0
  403aa0:	d0c5      	beq.n	403a2e <__sfvwrite_r+0x5e>
  403aa2:	89a3      	ldrh	r3, [r4, #12]
  403aa4:	2f00      	cmp	r7, #0
  403aa6:	d1d8      	bne.n	403a5a <__sfvwrite_r+0x8a>
  403aa8:	f8d5 9000 	ldr.w	r9, [r5]
  403aac:	686f      	ldr	r7, [r5, #4]
  403aae:	3508      	adds	r5, #8
  403ab0:	e7d2      	b.n	403a58 <__sfvwrite_r+0x88>
  403ab2:	f8d5 9000 	ldr.w	r9, [r5]
  403ab6:	f8d5 8004 	ldr.w	r8, [r5, #4]
  403aba:	3508      	adds	r5, #8
  403abc:	e79f      	b.n	4039fe <__sfvwrite_r+0x2e>
  403abe:	2000      	movs	r0, #0
  403ac0:	4770      	bx	lr
  403ac2:	4621      	mov	r1, r4
  403ac4:	9800      	ldr	r0, [sp, #0]
  403ac6:	f7ff fd33 	bl	403530 <_fflush_r>
  403aca:	b370      	cbz	r0, 403b2a <__sfvwrite_r+0x15a>
  403acc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403ad0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403ad4:	f04f 30ff 	mov.w	r0, #4294967295
  403ad8:	81a3      	strh	r3, [r4, #12]
  403ada:	b003      	add	sp, #12
  403adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403ae0:	4681      	mov	r9, r0
  403ae2:	4633      	mov	r3, r6
  403ae4:	464e      	mov	r6, r9
  403ae6:	46a8      	mov	r8, r5
  403ae8:	469a      	mov	sl, r3
  403aea:	464d      	mov	r5, r9
  403aec:	b34e      	cbz	r6, 403b42 <__sfvwrite_r+0x172>
  403aee:	b380      	cbz	r0, 403b52 <__sfvwrite_r+0x182>
  403af0:	6820      	ldr	r0, [r4, #0]
  403af2:	6923      	ldr	r3, [r4, #16]
  403af4:	6962      	ldr	r2, [r4, #20]
  403af6:	45b1      	cmp	r9, r6
  403af8:	46cb      	mov	fp, r9
  403afa:	bf28      	it	cs
  403afc:	46b3      	movcs	fp, r6
  403afe:	4298      	cmp	r0, r3
  403b00:	465f      	mov	r7, fp
  403b02:	d904      	bls.n	403b0e <__sfvwrite_r+0x13e>
  403b04:	68a3      	ldr	r3, [r4, #8]
  403b06:	4413      	add	r3, r2
  403b08:	459b      	cmp	fp, r3
  403b0a:	f300 80a6 	bgt.w	403c5a <__sfvwrite_r+0x28a>
  403b0e:	4593      	cmp	fp, r2
  403b10:	db4b      	blt.n	403baa <__sfvwrite_r+0x1da>
  403b12:	4613      	mov	r3, r2
  403b14:	6a67      	ldr	r7, [r4, #36]	; 0x24
  403b16:	69e1      	ldr	r1, [r4, #28]
  403b18:	9800      	ldr	r0, [sp, #0]
  403b1a:	462a      	mov	r2, r5
  403b1c:	47b8      	blx	r7
  403b1e:	1e07      	subs	r7, r0, #0
  403b20:	ddd4      	ble.n	403acc <__sfvwrite_r+0xfc>
  403b22:	ebb9 0907 	subs.w	r9, r9, r7
  403b26:	d0cc      	beq.n	403ac2 <__sfvwrite_r+0xf2>
  403b28:	2001      	movs	r0, #1
  403b2a:	f8da 3008 	ldr.w	r3, [sl, #8]
  403b2e:	1bdb      	subs	r3, r3, r7
  403b30:	443d      	add	r5, r7
  403b32:	1bf6      	subs	r6, r6, r7
  403b34:	f8ca 3008 	str.w	r3, [sl, #8]
  403b38:	2b00      	cmp	r3, #0
  403b3a:	f43f af78 	beq.w	403a2e <__sfvwrite_r+0x5e>
  403b3e:	2e00      	cmp	r6, #0
  403b40:	d1d5      	bne.n	403aee <__sfvwrite_r+0x11e>
  403b42:	f108 0308 	add.w	r3, r8, #8
  403b46:	e913 0060 	ldmdb	r3, {r5, r6}
  403b4a:	4698      	mov	r8, r3
  403b4c:	3308      	adds	r3, #8
  403b4e:	2e00      	cmp	r6, #0
  403b50:	d0f9      	beq.n	403b46 <__sfvwrite_r+0x176>
  403b52:	4632      	mov	r2, r6
  403b54:	210a      	movs	r1, #10
  403b56:	4628      	mov	r0, r5
  403b58:	f000 fc2a 	bl	4043b0 <memchr>
  403b5c:	2800      	cmp	r0, #0
  403b5e:	f000 80a1 	beq.w	403ca4 <__sfvwrite_r+0x2d4>
  403b62:	3001      	adds	r0, #1
  403b64:	eba0 0905 	sub.w	r9, r0, r5
  403b68:	e7c2      	b.n	403af0 <__sfvwrite_r+0x120>
  403b6a:	6820      	ldr	r0, [r4, #0]
  403b6c:	6923      	ldr	r3, [r4, #16]
  403b6e:	4298      	cmp	r0, r3
  403b70:	d802      	bhi.n	403b78 <__sfvwrite_r+0x1a8>
  403b72:	6963      	ldr	r3, [r4, #20]
  403b74:	429f      	cmp	r7, r3
  403b76:	d25d      	bcs.n	403c34 <__sfvwrite_r+0x264>
  403b78:	45b8      	cmp	r8, r7
  403b7a:	bf28      	it	cs
  403b7c:	46b8      	movcs	r8, r7
  403b7e:	4642      	mov	r2, r8
  403b80:	4649      	mov	r1, r9
  403b82:	f000 fcff 	bl	404584 <memmove>
  403b86:	68a3      	ldr	r3, [r4, #8]
  403b88:	6822      	ldr	r2, [r4, #0]
  403b8a:	eba3 0308 	sub.w	r3, r3, r8
  403b8e:	4442      	add	r2, r8
  403b90:	60a3      	str	r3, [r4, #8]
  403b92:	6022      	str	r2, [r4, #0]
  403b94:	b10b      	cbz	r3, 403b9a <__sfvwrite_r+0x1ca>
  403b96:	46c2      	mov	sl, r8
  403b98:	e779      	b.n	403a8e <__sfvwrite_r+0xbe>
  403b9a:	4621      	mov	r1, r4
  403b9c:	9800      	ldr	r0, [sp, #0]
  403b9e:	f7ff fcc7 	bl	403530 <_fflush_r>
  403ba2:	2800      	cmp	r0, #0
  403ba4:	d192      	bne.n	403acc <__sfvwrite_r+0xfc>
  403ba6:	46c2      	mov	sl, r8
  403ba8:	e771      	b.n	403a8e <__sfvwrite_r+0xbe>
  403baa:	465a      	mov	r2, fp
  403bac:	4629      	mov	r1, r5
  403bae:	f000 fce9 	bl	404584 <memmove>
  403bb2:	68a2      	ldr	r2, [r4, #8]
  403bb4:	6823      	ldr	r3, [r4, #0]
  403bb6:	eba2 020b 	sub.w	r2, r2, fp
  403bba:	445b      	add	r3, fp
  403bbc:	60a2      	str	r2, [r4, #8]
  403bbe:	6023      	str	r3, [r4, #0]
  403bc0:	e7af      	b.n	403b22 <__sfvwrite_r+0x152>
  403bc2:	6820      	ldr	r0, [r4, #0]
  403bc4:	46b8      	mov	r8, r7
  403bc6:	46ba      	mov	sl, r7
  403bc8:	46bb      	mov	fp, r7
  403bca:	e755      	b.n	403a78 <__sfvwrite_r+0xa8>
  403bcc:	6962      	ldr	r2, [r4, #20]
  403bce:	6820      	ldr	r0, [r4, #0]
  403bd0:	6921      	ldr	r1, [r4, #16]
  403bd2:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  403bd6:	eba0 0a01 	sub.w	sl, r0, r1
  403bda:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  403bde:	f10a 0001 	add.w	r0, sl, #1
  403be2:	ea4f 0868 	mov.w	r8, r8, asr #1
  403be6:	4438      	add	r0, r7
  403be8:	4540      	cmp	r0, r8
  403bea:	4642      	mov	r2, r8
  403bec:	bf84      	itt	hi
  403bee:	4680      	movhi	r8, r0
  403bf0:	4642      	movhi	r2, r8
  403bf2:	055b      	lsls	r3, r3, #21
  403bf4:	d544      	bpl.n	403c80 <__sfvwrite_r+0x2b0>
  403bf6:	4611      	mov	r1, r2
  403bf8:	9800      	ldr	r0, [sp, #0]
  403bfa:	f000 f913 	bl	403e24 <_malloc_r>
  403bfe:	4683      	mov	fp, r0
  403c00:	2800      	cmp	r0, #0
  403c02:	d055      	beq.n	403cb0 <__sfvwrite_r+0x2e0>
  403c04:	4652      	mov	r2, sl
  403c06:	6921      	ldr	r1, [r4, #16]
  403c08:	f000 fc22 	bl	404450 <memcpy>
  403c0c:	89a3      	ldrh	r3, [r4, #12]
  403c0e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  403c12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403c16:	81a3      	strh	r3, [r4, #12]
  403c18:	eb0b 000a 	add.w	r0, fp, sl
  403c1c:	eba8 030a 	sub.w	r3, r8, sl
  403c20:	f8c4 b010 	str.w	fp, [r4, #16]
  403c24:	f8c4 8014 	str.w	r8, [r4, #20]
  403c28:	6020      	str	r0, [r4, #0]
  403c2a:	60a3      	str	r3, [r4, #8]
  403c2c:	46b8      	mov	r8, r7
  403c2e:	46ba      	mov	sl, r7
  403c30:	46bb      	mov	fp, r7
  403c32:	e721      	b.n	403a78 <__sfvwrite_r+0xa8>
  403c34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  403c38:	42b9      	cmp	r1, r7
  403c3a:	bf28      	it	cs
  403c3c:	4639      	movcs	r1, r7
  403c3e:	464a      	mov	r2, r9
  403c40:	fb91 f1f3 	sdiv	r1, r1, r3
  403c44:	9800      	ldr	r0, [sp, #0]
  403c46:	6a66      	ldr	r6, [r4, #36]	; 0x24
  403c48:	fb03 f301 	mul.w	r3, r3, r1
  403c4c:	69e1      	ldr	r1, [r4, #28]
  403c4e:	47b0      	blx	r6
  403c50:	f1b0 0a00 	subs.w	sl, r0, #0
  403c54:	f73f af1b 	bgt.w	403a8e <__sfvwrite_r+0xbe>
  403c58:	e738      	b.n	403acc <__sfvwrite_r+0xfc>
  403c5a:	461a      	mov	r2, r3
  403c5c:	4629      	mov	r1, r5
  403c5e:	9301      	str	r3, [sp, #4]
  403c60:	f000 fc90 	bl	404584 <memmove>
  403c64:	6822      	ldr	r2, [r4, #0]
  403c66:	9b01      	ldr	r3, [sp, #4]
  403c68:	9800      	ldr	r0, [sp, #0]
  403c6a:	441a      	add	r2, r3
  403c6c:	6022      	str	r2, [r4, #0]
  403c6e:	4621      	mov	r1, r4
  403c70:	f7ff fc5e 	bl	403530 <_fflush_r>
  403c74:	9b01      	ldr	r3, [sp, #4]
  403c76:	2800      	cmp	r0, #0
  403c78:	f47f af28 	bne.w	403acc <__sfvwrite_r+0xfc>
  403c7c:	461f      	mov	r7, r3
  403c7e:	e750      	b.n	403b22 <__sfvwrite_r+0x152>
  403c80:	9800      	ldr	r0, [sp, #0]
  403c82:	f000 fce7 	bl	404654 <_realloc_r>
  403c86:	4683      	mov	fp, r0
  403c88:	2800      	cmp	r0, #0
  403c8a:	d1c5      	bne.n	403c18 <__sfvwrite_r+0x248>
  403c8c:	9d00      	ldr	r5, [sp, #0]
  403c8e:	6921      	ldr	r1, [r4, #16]
  403c90:	4628      	mov	r0, r5
  403c92:	f7ff fdb7 	bl	403804 <_free_r>
  403c96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403c9a:	220c      	movs	r2, #12
  403c9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  403ca0:	602a      	str	r2, [r5, #0]
  403ca2:	e715      	b.n	403ad0 <__sfvwrite_r+0x100>
  403ca4:	f106 0901 	add.w	r9, r6, #1
  403ca8:	e722      	b.n	403af0 <__sfvwrite_r+0x120>
  403caa:	f04f 30ff 	mov.w	r0, #4294967295
  403cae:	e6bf      	b.n	403a30 <__sfvwrite_r+0x60>
  403cb0:	9a00      	ldr	r2, [sp, #0]
  403cb2:	230c      	movs	r3, #12
  403cb4:	6013      	str	r3, [r2, #0]
  403cb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403cba:	e709      	b.n	403ad0 <__sfvwrite_r+0x100>
  403cbc:	7ffffc00 	.word	0x7ffffc00

00403cc0 <_fwalk_reent>:
  403cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403cc4:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  403cc8:	d01f      	beq.n	403d0a <_fwalk_reent+0x4a>
  403cca:	4688      	mov	r8, r1
  403ccc:	4606      	mov	r6, r0
  403cce:	f04f 0900 	mov.w	r9, #0
  403cd2:	687d      	ldr	r5, [r7, #4]
  403cd4:	68bc      	ldr	r4, [r7, #8]
  403cd6:	3d01      	subs	r5, #1
  403cd8:	d411      	bmi.n	403cfe <_fwalk_reent+0x3e>
  403cda:	89a3      	ldrh	r3, [r4, #12]
  403cdc:	2b01      	cmp	r3, #1
  403cde:	f105 35ff 	add.w	r5, r5, #4294967295
  403ce2:	d908      	bls.n	403cf6 <_fwalk_reent+0x36>
  403ce4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  403ce8:	3301      	adds	r3, #1
  403cea:	4621      	mov	r1, r4
  403cec:	4630      	mov	r0, r6
  403cee:	d002      	beq.n	403cf6 <_fwalk_reent+0x36>
  403cf0:	47c0      	blx	r8
  403cf2:	ea49 0900 	orr.w	r9, r9, r0
  403cf6:	1c6b      	adds	r3, r5, #1
  403cf8:	f104 0468 	add.w	r4, r4, #104	; 0x68
  403cfc:	d1ed      	bne.n	403cda <_fwalk_reent+0x1a>
  403cfe:	683f      	ldr	r7, [r7, #0]
  403d00:	2f00      	cmp	r7, #0
  403d02:	d1e6      	bne.n	403cd2 <_fwalk_reent+0x12>
  403d04:	4648      	mov	r0, r9
  403d06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403d0a:	46b9      	mov	r9, r7
  403d0c:	4648      	mov	r0, r9
  403d0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403d12:	bf00      	nop

00403d14 <__locale_mb_cur_max>:
  403d14:	4b04      	ldr	r3, [pc, #16]	; (403d28 <__locale_mb_cur_max+0x14>)
  403d16:	4a05      	ldr	r2, [pc, #20]	; (403d2c <__locale_mb_cur_max+0x18>)
  403d18:	681b      	ldr	r3, [r3, #0]
  403d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  403d1c:	2b00      	cmp	r3, #0
  403d1e:	bf08      	it	eq
  403d20:	4613      	moveq	r3, r2
  403d22:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  403d26:	4770      	bx	lr
  403d28:	20400010 	.word	0x20400010
  403d2c:	20400440 	.word	0x20400440

00403d30 <__swhatbuf_r>:
  403d30:	b570      	push	{r4, r5, r6, lr}
  403d32:	460c      	mov	r4, r1
  403d34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403d38:	2900      	cmp	r1, #0
  403d3a:	b090      	sub	sp, #64	; 0x40
  403d3c:	4615      	mov	r5, r2
  403d3e:	461e      	mov	r6, r3
  403d40:	db14      	blt.n	403d6c <__swhatbuf_r+0x3c>
  403d42:	aa01      	add	r2, sp, #4
  403d44:	f000 ffcc 	bl	404ce0 <_fstat_r>
  403d48:	2800      	cmp	r0, #0
  403d4a:	db0f      	blt.n	403d6c <__swhatbuf_r+0x3c>
  403d4c:	9a02      	ldr	r2, [sp, #8]
  403d4e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  403d52:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  403d56:	fab2 f282 	clz	r2, r2
  403d5a:	0952      	lsrs	r2, r2, #5
  403d5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403d60:	f44f 6000 	mov.w	r0, #2048	; 0x800
  403d64:	6032      	str	r2, [r6, #0]
  403d66:	602b      	str	r3, [r5, #0]
  403d68:	b010      	add	sp, #64	; 0x40
  403d6a:	bd70      	pop	{r4, r5, r6, pc}
  403d6c:	89a2      	ldrh	r2, [r4, #12]
  403d6e:	2300      	movs	r3, #0
  403d70:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  403d74:	6033      	str	r3, [r6, #0]
  403d76:	d004      	beq.n	403d82 <__swhatbuf_r+0x52>
  403d78:	2240      	movs	r2, #64	; 0x40
  403d7a:	4618      	mov	r0, r3
  403d7c:	602a      	str	r2, [r5, #0]
  403d7e:	b010      	add	sp, #64	; 0x40
  403d80:	bd70      	pop	{r4, r5, r6, pc}
  403d82:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403d86:	602b      	str	r3, [r5, #0]
  403d88:	b010      	add	sp, #64	; 0x40
  403d8a:	bd70      	pop	{r4, r5, r6, pc}

00403d8c <__smakebuf_r>:
  403d8c:	898a      	ldrh	r2, [r1, #12]
  403d8e:	0792      	lsls	r2, r2, #30
  403d90:	460b      	mov	r3, r1
  403d92:	d506      	bpl.n	403da2 <__smakebuf_r+0x16>
  403d94:	f101 0243 	add.w	r2, r1, #67	; 0x43
  403d98:	2101      	movs	r1, #1
  403d9a:	601a      	str	r2, [r3, #0]
  403d9c:	611a      	str	r2, [r3, #16]
  403d9e:	6159      	str	r1, [r3, #20]
  403da0:	4770      	bx	lr
  403da2:	b5f0      	push	{r4, r5, r6, r7, lr}
  403da4:	b083      	sub	sp, #12
  403da6:	ab01      	add	r3, sp, #4
  403da8:	466a      	mov	r2, sp
  403daa:	460c      	mov	r4, r1
  403dac:	4605      	mov	r5, r0
  403dae:	f7ff ffbf 	bl	403d30 <__swhatbuf_r>
  403db2:	9900      	ldr	r1, [sp, #0]
  403db4:	4606      	mov	r6, r0
  403db6:	4628      	mov	r0, r5
  403db8:	f000 f834 	bl	403e24 <_malloc_r>
  403dbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403dc0:	b1d0      	cbz	r0, 403df8 <__smakebuf_r+0x6c>
  403dc2:	9a01      	ldr	r2, [sp, #4]
  403dc4:	4f12      	ldr	r7, [pc, #72]	; (403e10 <__smakebuf_r+0x84>)
  403dc6:	9900      	ldr	r1, [sp, #0]
  403dc8:	63ef      	str	r7, [r5, #60]	; 0x3c
  403dca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403dce:	81a3      	strh	r3, [r4, #12]
  403dd0:	6020      	str	r0, [r4, #0]
  403dd2:	6120      	str	r0, [r4, #16]
  403dd4:	6161      	str	r1, [r4, #20]
  403dd6:	b91a      	cbnz	r2, 403de0 <__smakebuf_r+0x54>
  403dd8:	4333      	orrs	r3, r6
  403dda:	81a3      	strh	r3, [r4, #12]
  403ddc:	b003      	add	sp, #12
  403dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403de0:	4628      	mov	r0, r5
  403de2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403de6:	f000 ff8f 	bl	404d08 <_isatty_r>
  403dea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403dee:	2800      	cmp	r0, #0
  403df0:	d0f2      	beq.n	403dd8 <__smakebuf_r+0x4c>
  403df2:	f043 0301 	orr.w	r3, r3, #1
  403df6:	e7ef      	b.n	403dd8 <__smakebuf_r+0x4c>
  403df8:	059a      	lsls	r2, r3, #22
  403dfa:	d4ef      	bmi.n	403ddc <__smakebuf_r+0x50>
  403dfc:	f104 0243 	add.w	r2, r4, #67	; 0x43
  403e00:	f043 0302 	orr.w	r3, r3, #2
  403e04:	2101      	movs	r1, #1
  403e06:	81a3      	strh	r3, [r4, #12]
  403e08:	6022      	str	r2, [r4, #0]
  403e0a:	6122      	str	r2, [r4, #16]
  403e0c:	6161      	str	r1, [r4, #20]
  403e0e:	e7e5      	b.n	403ddc <__smakebuf_r+0x50>
  403e10:	0040355d 	.word	0x0040355d

00403e14 <malloc>:
  403e14:	4b02      	ldr	r3, [pc, #8]	; (403e20 <malloc+0xc>)
  403e16:	4601      	mov	r1, r0
  403e18:	6818      	ldr	r0, [r3, #0]
  403e1a:	f000 b803 	b.w	403e24 <_malloc_r>
  403e1e:	bf00      	nop
  403e20:	20400010 	.word	0x20400010

00403e24 <_malloc_r>:
  403e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403e28:	f101 060b 	add.w	r6, r1, #11
  403e2c:	2e16      	cmp	r6, #22
  403e2e:	b083      	sub	sp, #12
  403e30:	4605      	mov	r5, r0
  403e32:	f240 809e 	bls.w	403f72 <_malloc_r+0x14e>
  403e36:	f036 0607 	bics.w	r6, r6, #7
  403e3a:	f100 80bd 	bmi.w	403fb8 <_malloc_r+0x194>
  403e3e:	42b1      	cmp	r1, r6
  403e40:	f200 80ba 	bhi.w	403fb8 <_malloc_r+0x194>
  403e44:	f000 fc02 	bl	40464c <__malloc_lock>
  403e48:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  403e4c:	f0c0 8293 	bcc.w	404376 <_malloc_r+0x552>
  403e50:	0a73      	lsrs	r3, r6, #9
  403e52:	f000 80b8 	beq.w	403fc6 <_malloc_r+0x1a2>
  403e56:	2b04      	cmp	r3, #4
  403e58:	f200 8179 	bhi.w	40414e <_malloc_r+0x32a>
  403e5c:	09b3      	lsrs	r3, r6, #6
  403e5e:	f103 0039 	add.w	r0, r3, #57	; 0x39
  403e62:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  403e66:	00c3      	lsls	r3, r0, #3
  403e68:	4fbf      	ldr	r7, [pc, #764]	; (404168 <_malloc_r+0x344>)
  403e6a:	443b      	add	r3, r7
  403e6c:	f1a3 0108 	sub.w	r1, r3, #8
  403e70:	685c      	ldr	r4, [r3, #4]
  403e72:	42a1      	cmp	r1, r4
  403e74:	d106      	bne.n	403e84 <_malloc_r+0x60>
  403e76:	e00c      	b.n	403e92 <_malloc_r+0x6e>
  403e78:	2a00      	cmp	r2, #0
  403e7a:	f280 80aa 	bge.w	403fd2 <_malloc_r+0x1ae>
  403e7e:	68e4      	ldr	r4, [r4, #12]
  403e80:	42a1      	cmp	r1, r4
  403e82:	d006      	beq.n	403e92 <_malloc_r+0x6e>
  403e84:	6863      	ldr	r3, [r4, #4]
  403e86:	f023 0303 	bic.w	r3, r3, #3
  403e8a:	1b9a      	subs	r2, r3, r6
  403e8c:	2a0f      	cmp	r2, #15
  403e8e:	ddf3      	ble.n	403e78 <_malloc_r+0x54>
  403e90:	4670      	mov	r0, lr
  403e92:	693c      	ldr	r4, [r7, #16]
  403e94:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 40417c <_malloc_r+0x358>
  403e98:	4574      	cmp	r4, lr
  403e9a:	f000 81ab 	beq.w	4041f4 <_malloc_r+0x3d0>
  403e9e:	6863      	ldr	r3, [r4, #4]
  403ea0:	f023 0303 	bic.w	r3, r3, #3
  403ea4:	1b9a      	subs	r2, r3, r6
  403ea6:	2a0f      	cmp	r2, #15
  403ea8:	f300 8190 	bgt.w	4041cc <_malloc_r+0x3a8>
  403eac:	2a00      	cmp	r2, #0
  403eae:	f8c7 e014 	str.w	lr, [r7, #20]
  403eb2:	f8c7 e010 	str.w	lr, [r7, #16]
  403eb6:	f280 809d 	bge.w	403ff4 <_malloc_r+0x1d0>
  403eba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403ebe:	f080 8161 	bcs.w	404184 <_malloc_r+0x360>
  403ec2:	08db      	lsrs	r3, r3, #3
  403ec4:	f103 0c01 	add.w	ip, r3, #1
  403ec8:	1099      	asrs	r1, r3, #2
  403eca:	687a      	ldr	r2, [r7, #4]
  403ecc:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  403ed0:	f8c4 8008 	str.w	r8, [r4, #8]
  403ed4:	2301      	movs	r3, #1
  403ed6:	408b      	lsls	r3, r1
  403ed8:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  403edc:	4313      	orrs	r3, r2
  403ede:	3908      	subs	r1, #8
  403ee0:	60e1      	str	r1, [r4, #12]
  403ee2:	607b      	str	r3, [r7, #4]
  403ee4:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  403ee8:	f8c8 400c 	str.w	r4, [r8, #12]
  403eec:	1082      	asrs	r2, r0, #2
  403eee:	2401      	movs	r4, #1
  403ef0:	4094      	lsls	r4, r2
  403ef2:	429c      	cmp	r4, r3
  403ef4:	f200 808b 	bhi.w	40400e <_malloc_r+0x1ea>
  403ef8:	421c      	tst	r4, r3
  403efa:	d106      	bne.n	403f0a <_malloc_r+0xe6>
  403efc:	f020 0003 	bic.w	r0, r0, #3
  403f00:	0064      	lsls	r4, r4, #1
  403f02:	421c      	tst	r4, r3
  403f04:	f100 0004 	add.w	r0, r0, #4
  403f08:	d0fa      	beq.n	403f00 <_malloc_r+0xdc>
  403f0a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  403f0e:	46cc      	mov	ip, r9
  403f10:	4680      	mov	r8, r0
  403f12:	f8dc 300c 	ldr.w	r3, [ip, #12]
  403f16:	459c      	cmp	ip, r3
  403f18:	d107      	bne.n	403f2a <_malloc_r+0x106>
  403f1a:	e16d      	b.n	4041f8 <_malloc_r+0x3d4>
  403f1c:	2a00      	cmp	r2, #0
  403f1e:	f280 817b 	bge.w	404218 <_malloc_r+0x3f4>
  403f22:	68db      	ldr	r3, [r3, #12]
  403f24:	459c      	cmp	ip, r3
  403f26:	f000 8167 	beq.w	4041f8 <_malloc_r+0x3d4>
  403f2a:	6859      	ldr	r1, [r3, #4]
  403f2c:	f021 0103 	bic.w	r1, r1, #3
  403f30:	1b8a      	subs	r2, r1, r6
  403f32:	2a0f      	cmp	r2, #15
  403f34:	ddf2      	ble.n	403f1c <_malloc_r+0xf8>
  403f36:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  403f3a:	f8d3 8008 	ldr.w	r8, [r3, #8]
  403f3e:	9300      	str	r3, [sp, #0]
  403f40:	199c      	adds	r4, r3, r6
  403f42:	4628      	mov	r0, r5
  403f44:	f046 0601 	orr.w	r6, r6, #1
  403f48:	f042 0501 	orr.w	r5, r2, #1
  403f4c:	605e      	str	r6, [r3, #4]
  403f4e:	f8c8 c00c 	str.w	ip, [r8, #12]
  403f52:	f8cc 8008 	str.w	r8, [ip, #8]
  403f56:	617c      	str	r4, [r7, #20]
  403f58:	613c      	str	r4, [r7, #16]
  403f5a:	f8c4 e00c 	str.w	lr, [r4, #12]
  403f5e:	f8c4 e008 	str.w	lr, [r4, #8]
  403f62:	6065      	str	r5, [r4, #4]
  403f64:	505a      	str	r2, [r3, r1]
  403f66:	f000 fb73 	bl	404650 <__malloc_unlock>
  403f6a:	9b00      	ldr	r3, [sp, #0]
  403f6c:	f103 0408 	add.w	r4, r3, #8
  403f70:	e01e      	b.n	403fb0 <_malloc_r+0x18c>
  403f72:	2910      	cmp	r1, #16
  403f74:	d820      	bhi.n	403fb8 <_malloc_r+0x194>
  403f76:	f000 fb69 	bl	40464c <__malloc_lock>
  403f7a:	2610      	movs	r6, #16
  403f7c:	2318      	movs	r3, #24
  403f7e:	2002      	movs	r0, #2
  403f80:	4f79      	ldr	r7, [pc, #484]	; (404168 <_malloc_r+0x344>)
  403f82:	443b      	add	r3, r7
  403f84:	f1a3 0208 	sub.w	r2, r3, #8
  403f88:	685c      	ldr	r4, [r3, #4]
  403f8a:	4294      	cmp	r4, r2
  403f8c:	f000 813d 	beq.w	40420a <_malloc_r+0x3e6>
  403f90:	6863      	ldr	r3, [r4, #4]
  403f92:	68e1      	ldr	r1, [r4, #12]
  403f94:	68a6      	ldr	r6, [r4, #8]
  403f96:	f023 0303 	bic.w	r3, r3, #3
  403f9a:	4423      	add	r3, r4
  403f9c:	4628      	mov	r0, r5
  403f9e:	685a      	ldr	r2, [r3, #4]
  403fa0:	60f1      	str	r1, [r6, #12]
  403fa2:	f042 0201 	orr.w	r2, r2, #1
  403fa6:	608e      	str	r6, [r1, #8]
  403fa8:	605a      	str	r2, [r3, #4]
  403faa:	f000 fb51 	bl	404650 <__malloc_unlock>
  403fae:	3408      	adds	r4, #8
  403fb0:	4620      	mov	r0, r4
  403fb2:	b003      	add	sp, #12
  403fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403fb8:	2400      	movs	r4, #0
  403fba:	230c      	movs	r3, #12
  403fbc:	4620      	mov	r0, r4
  403fbe:	602b      	str	r3, [r5, #0]
  403fc0:	b003      	add	sp, #12
  403fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403fc6:	2040      	movs	r0, #64	; 0x40
  403fc8:	f44f 7300 	mov.w	r3, #512	; 0x200
  403fcc:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  403fd0:	e74a      	b.n	403e68 <_malloc_r+0x44>
  403fd2:	4423      	add	r3, r4
  403fd4:	68e1      	ldr	r1, [r4, #12]
  403fd6:	685a      	ldr	r2, [r3, #4]
  403fd8:	68a6      	ldr	r6, [r4, #8]
  403fda:	f042 0201 	orr.w	r2, r2, #1
  403fde:	60f1      	str	r1, [r6, #12]
  403fe0:	4628      	mov	r0, r5
  403fe2:	608e      	str	r6, [r1, #8]
  403fe4:	605a      	str	r2, [r3, #4]
  403fe6:	f000 fb33 	bl	404650 <__malloc_unlock>
  403fea:	3408      	adds	r4, #8
  403fec:	4620      	mov	r0, r4
  403fee:	b003      	add	sp, #12
  403ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403ff4:	4423      	add	r3, r4
  403ff6:	4628      	mov	r0, r5
  403ff8:	685a      	ldr	r2, [r3, #4]
  403ffa:	f042 0201 	orr.w	r2, r2, #1
  403ffe:	605a      	str	r2, [r3, #4]
  404000:	f000 fb26 	bl	404650 <__malloc_unlock>
  404004:	3408      	adds	r4, #8
  404006:	4620      	mov	r0, r4
  404008:	b003      	add	sp, #12
  40400a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40400e:	68bc      	ldr	r4, [r7, #8]
  404010:	6863      	ldr	r3, [r4, #4]
  404012:	f023 0803 	bic.w	r8, r3, #3
  404016:	45b0      	cmp	r8, r6
  404018:	d304      	bcc.n	404024 <_malloc_r+0x200>
  40401a:	eba8 0306 	sub.w	r3, r8, r6
  40401e:	2b0f      	cmp	r3, #15
  404020:	f300 8085 	bgt.w	40412e <_malloc_r+0x30a>
  404024:	f8df 9158 	ldr.w	r9, [pc, #344]	; 404180 <_malloc_r+0x35c>
  404028:	4b50      	ldr	r3, [pc, #320]	; (40416c <_malloc_r+0x348>)
  40402a:	f8d9 2000 	ldr.w	r2, [r9]
  40402e:	681b      	ldr	r3, [r3, #0]
  404030:	3201      	adds	r2, #1
  404032:	4433      	add	r3, r6
  404034:	eb04 0a08 	add.w	sl, r4, r8
  404038:	f000 8155 	beq.w	4042e6 <_malloc_r+0x4c2>
  40403c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  404040:	330f      	adds	r3, #15
  404042:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  404046:	f02b 0b0f 	bic.w	fp, fp, #15
  40404a:	4659      	mov	r1, fp
  40404c:	4628      	mov	r0, r5
  40404e:	f000 fca7 	bl	4049a0 <_sbrk_r>
  404052:	1c41      	adds	r1, r0, #1
  404054:	4602      	mov	r2, r0
  404056:	f000 80fc 	beq.w	404252 <_malloc_r+0x42e>
  40405a:	4582      	cmp	sl, r0
  40405c:	f200 80f7 	bhi.w	40424e <_malloc_r+0x42a>
  404060:	4b43      	ldr	r3, [pc, #268]	; (404170 <_malloc_r+0x34c>)
  404062:	6819      	ldr	r1, [r3, #0]
  404064:	4459      	add	r1, fp
  404066:	6019      	str	r1, [r3, #0]
  404068:	f000 814d 	beq.w	404306 <_malloc_r+0x4e2>
  40406c:	f8d9 0000 	ldr.w	r0, [r9]
  404070:	3001      	adds	r0, #1
  404072:	bf1b      	ittet	ne
  404074:	eba2 0a0a 	subne.w	sl, r2, sl
  404078:	4451      	addne	r1, sl
  40407a:	f8c9 2000 	streq.w	r2, [r9]
  40407e:	6019      	strne	r1, [r3, #0]
  404080:	f012 0107 	ands.w	r1, r2, #7
  404084:	f000 8115 	beq.w	4042b2 <_malloc_r+0x48e>
  404088:	f1c1 0008 	rsb	r0, r1, #8
  40408c:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  404090:	4402      	add	r2, r0
  404092:	3108      	adds	r1, #8
  404094:	eb02 090b 	add.w	r9, r2, fp
  404098:	f3c9 090b 	ubfx	r9, r9, #0, #12
  40409c:	eba1 0909 	sub.w	r9, r1, r9
  4040a0:	4649      	mov	r1, r9
  4040a2:	4628      	mov	r0, r5
  4040a4:	9301      	str	r3, [sp, #4]
  4040a6:	9200      	str	r2, [sp, #0]
  4040a8:	f000 fc7a 	bl	4049a0 <_sbrk_r>
  4040ac:	1c43      	adds	r3, r0, #1
  4040ae:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4040b2:	f000 8143 	beq.w	40433c <_malloc_r+0x518>
  4040b6:	1a80      	subs	r0, r0, r2
  4040b8:	4448      	add	r0, r9
  4040ba:	f040 0001 	orr.w	r0, r0, #1
  4040be:	6819      	ldr	r1, [r3, #0]
  4040c0:	60ba      	str	r2, [r7, #8]
  4040c2:	4449      	add	r1, r9
  4040c4:	42bc      	cmp	r4, r7
  4040c6:	6050      	str	r0, [r2, #4]
  4040c8:	6019      	str	r1, [r3, #0]
  4040ca:	d017      	beq.n	4040fc <_malloc_r+0x2d8>
  4040cc:	f1b8 0f0f 	cmp.w	r8, #15
  4040d0:	f240 80fb 	bls.w	4042ca <_malloc_r+0x4a6>
  4040d4:	6860      	ldr	r0, [r4, #4]
  4040d6:	f1a8 020c 	sub.w	r2, r8, #12
  4040da:	f022 0207 	bic.w	r2, r2, #7
  4040de:	eb04 0e02 	add.w	lr, r4, r2
  4040e2:	f000 0001 	and.w	r0, r0, #1
  4040e6:	f04f 0c05 	mov.w	ip, #5
  4040ea:	4310      	orrs	r0, r2
  4040ec:	2a0f      	cmp	r2, #15
  4040ee:	6060      	str	r0, [r4, #4]
  4040f0:	f8ce c004 	str.w	ip, [lr, #4]
  4040f4:	f8ce c008 	str.w	ip, [lr, #8]
  4040f8:	f200 8117 	bhi.w	40432a <_malloc_r+0x506>
  4040fc:	4b1d      	ldr	r3, [pc, #116]	; (404174 <_malloc_r+0x350>)
  4040fe:	68bc      	ldr	r4, [r7, #8]
  404100:	681a      	ldr	r2, [r3, #0]
  404102:	4291      	cmp	r1, r2
  404104:	bf88      	it	hi
  404106:	6019      	strhi	r1, [r3, #0]
  404108:	4b1b      	ldr	r3, [pc, #108]	; (404178 <_malloc_r+0x354>)
  40410a:	681a      	ldr	r2, [r3, #0]
  40410c:	4291      	cmp	r1, r2
  40410e:	6862      	ldr	r2, [r4, #4]
  404110:	bf88      	it	hi
  404112:	6019      	strhi	r1, [r3, #0]
  404114:	f022 0203 	bic.w	r2, r2, #3
  404118:	4296      	cmp	r6, r2
  40411a:	eba2 0306 	sub.w	r3, r2, r6
  40411e:	d801      	bhi.n	404124 <_malloc_r+0x300>
  404120:	2b0f      	cmp	r3, #15
  404122:	dc04      	bgt.n	40412e <_malloc_r+0x30a>
  404124:	4628      	mov	r0, r5
  404126:	f000 fa93 	bl	404650 <__malloc_unlock>
  40412a:	2400      	movs	r4, #0
  40412c:	e740      	b.n	403fb0 <_malloc_r+0x18c>
  40412e:	19a2      	adds	r2, r4, r6
  404130:	f043 0301 	orr.w	r3, r3, #1
  404134:	f046 0601 	orr.w	r6, r6, #1
  404138:	6066      	str	r6, [r4, #4]
  40413a:	4628      	mov	r0, r5
  40413c:	60ba      	str	r2, [r7, #8]
  40413e:	6053      	str	r3, [r2, #4]
  404140:	f000 fa86 	bl	404650 <__malloc_unlock>
  404144:	3408      	adds	r4, #8
  404146:	4620      	mov	r0, r4
  404148:	b003      	add	sp, #12
  40414a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40414e:	2b14      	cmp	r3, #20
  404150:	d971      	bls.n	404236 <_malloc_r+0x412>
  404152:	2b54      	cmp	r3, #84	; 0x54
  404154:	f200 80a3 	bhi.w	40429e <_malloc_r+0x47a>
  404158:	0b33      	lsrs	r3, r6, #12
  40415a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40415e:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  404162:	00c3      	lsls	r3, r0, #3
  404164:	e680      	b.n	403e68 <_malloc_r+0x44>
  404166:	bf00      	nop
  404168:	204005ac 	.word	0x204005ac
  40416c:	20400a88 	.word	0x20400a88
  404170:	20400a58 	.word	0x20400a58
  404174:	20400a80 	.word	0x20400a80
  404178:	20400a84 	.word	0x20400a84
  40417c:	204005b4 	.word	0x204005b4
  404180:	204009b4 	.word	0x204009b4
  404184:	0a5a      	lsrs	r2, r3, #9
  404186:	2a04      	cmp	r2, #4
  404188:	d95b      	bls.n	404242 <_malloc_r+0x41e>
  40418a:	2a14      	cmp	r2, #20
  40418c:	f200 80ae 	bhi.w	4042ec <_malloc_r+0x4c8>
  404190:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  404194:	00c9      	lsls	r1, r1, #3
  404196:	325b      	adds	r2, #91	; 0x5b
  404198:	eb07 0c01 	add.w	ip, r7, r1
  40419c:	5879      	ldr	r1, [r7, r1]
  40419e:	f1ac 0c08 	sub.w	ip, ip, #8
  4041a2:	458c      	cmp	ip, r1
  4041a4:	f000 8088 	beq.w	4042b8 <_malloc_r+0x494>
  4041a8:	684a      	ldr	r2, [r1, #4]
  4041aa:	f022 0203 	bic.w	r2, r2, #3
  4041ae:	4293      	cmp	r3, r2
  4041b0:	d273      	bcs.n	40429a <_malloc_r+0x476>
  4041b2:	6889      	ldr	r1, [r1, #8]
  4041b4:	458c      	cmp	ip, r1
  4041b6:	d1f7      	bne.n	4041a8 <_malloc_r+0x384>
  4041b8:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4041bc:	687b      	ldr	r3, [r7, #4]
  4041be:	60e2      	str	r2, [r4, #12]
  4041c0:	f8c4 c008 	str.w	ip, [r4, #8]
  4041c4:	6094      	str	r4, [r2, #8]
  4041c6:	f8cc 400c 	str.w	r4, [ip, #12]
  4041ca:	e68f      	b.n	403eec <_malloc_r+0xc8>
  4041cc:	19a1      	adds	r1, r4, r6
  4041ce:	f046 0c01 	orr.w	ip, r6, #1
  4041d2:	f042 0601 	orr.w	r6, r2, #1
  4041d6:	f8c4 c004 	str.w	ip, [r4, #4]
  4041da:	4628      	mov	r0, r5
  4041dc:	6179      	str	r1, [r7, #20]
  4041de:	6139      	str	r1, [r7, #16]
  4041e0:	f8c1 e00c 	str.w	lr, [r1, #12]
  4041e4:	f8c1 e008 	str.w	lr, [r1, #8]
  4041e8:	604e      	str	r6, [r1, #4]
  4041ea:	50e2      	str	r2, [r4, r3]
  4041ec:	f000 fa30 	bl	404650 <__malloc_unlock>
  4041f0:	3408      	adds	r4, #8
  4041f2:	e6dd      	b.n	403fb0 <_malloc_r+0x18c>
  4041f4:	687b      	ldr	r3, [r7, #4]
  4041f6:	e679      	b.n	403eec <_malloc_r+0xc8>
  4041f8:	f108 0801 	add.w	r8, r8, #1
  4041fc:	f018 0f03 	tst.w	r8, #3
  404200:	f10c 0c08 	add.w	ip, ip, #8
  404204:	f47f ae85 	bne.w	403f12 <_malloc_r+0xee>
  404208:	e02d      	b.n	404266 <_malloc_r+0x442>
  40420a:	68dc      	ldr	r4, [r3, #12]
  40420c:	42a3      	cmp	r3, r4
  40420e:	bf08      	it	eq
  404210:	3002      	addeq	r0, #2
  404212:	f43f ae3e 	beq.w	403e92 <_malloc_r+0x6e>
  404216:	e6bb      	b.n	403f90 <_malloc_r+0x16c>
  404218:	4419      	add	r1, r3
  40421a:	461c      	mov	r4, r3
  40421c:	684a      	ldr	r2, [r1, #4]
  40421e:	68db      	ldr	r3, [r3, #12]
  404220:	f854 6f08 	ldr.w	r6, [r4, #8]!
  404224:	f042 0201 	orr.w	r2, r2, #1
  404228:	604a      	str	r2, [r1, #4]
  40422a:	4628      	mov	r0, r5
  40422c:	60f3      	str	r3, [r6, #12]
  40422e:	609e      	str	r6, [r3, #8]
  404230:	f000 fa0e 	bl	404650 <__malloc_unlock>
  404234:	e6bc      	b.n	403fb0 <_malloc_r+0x18c>
  404236:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40423a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40423e:	00c3      	lsls	r3, r0, #3
  404240:	e612      	b.n	403e68 <_malloc_r+0x44>
  404242:	099a      	lsrs	r2, r3, #6
  404244:	f102 0139 	add.w	r1, r2, #57	; 0x39
  404248:	00c9      	lsls	r1, r1, #3
  40424a:	3238      	adds	r2, #56	; 0x38
  40424c:	e7a4      	b.n	404198 <_malloc_r+0x374>
  40424e:	42bc      	cmp	r4, r7
  404250:	d054      	beq.n	4042fc <_malloc_r+0x4d8>
  404252:	68bc      	ldr	r4, [r7, #8]
  404254:	6862      	ldr	r2, [r4, #4]
  404256:	f022 0203 	bic.w	r2, r2, #3
  40425a:	e75d      	b.n	404118 <_malloc_r+0x2f4>
  40425c:	f859 3908 	ldr.w	r3, [r9], #-8
  404260:	4599      	cmp	r9, r3
  404262:	f040 8086 	bne.w	404372 <_malloc_r+0x54e>
  404266:	f010 0f03 	tst.w	r0, #3
  40426a:	f100 30ff 	add.w	r0, r0, #4294967295
  40426e:	d1f5      	bne.n	40425c <_malloc_r+0x438>
  404270:	687b      	ldr	r3, [r7, #4]
  404272:	ea23 0304 	bic.w	r3, r3, r4
  404276:	607b      	str	r3, [r7, #4]
  404278:	0064      	lsls	r4, r4, #1
  40427a:	429c      	cmp	r4, r3
  40427c:	f63f aec7 	bhi.w	40400e <_malloc_r+0x1ea>
  404280:	2c00      	cmp	r4, #0
  404282:	f43f aec4 	beq.w	40400e <_malloc_r+0x1ea>
  404286:	421c      	tst	r4, r3
  404288:	4640      	mov	r0, r8
  40428a:	f47f ae3e 	bne.w	403f0a <_malloc_r+0xe6>
  40428e:	0064      	lsls	r4, r4, #1
  404290:	421c      	tst	r4, r3
  404292:	f100 0004 	add.w	r0, r0, #4
  404296:	d0fa      	beq.n	40428e <_malloc_r+0x46a>
  404298:	e637      	b.n	403f0a <_malloc_r+0xe6>
  40429a:	468c      	mov	ip, r1
  40429c:	e78c      	b.n	4041b8 <_malloc_r+0x394>
  40429e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4042a2:	d815      	bhi.n	4042d0 <_malloc_r+0x4ac>
  4042a4:	0bf3      	lsrs	r3, r6, #15
  4042a6:	f103 0078 	add.w	r0, r3, #120	; 0x78
  4042aa:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4042ae:	00c3      	lsls	r3, r0, #3
  4042b0:	e5da      	b.n	403e68 <_malloc_r+0x44>
  4042b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4042b6:	e6ed      	b.n	404094 <_malloc_r+0x270>
  4042b8:	687b      	ldr	r3, [r7, #4]
  4042ba:	1092      	asrs	r2, r2, #2
  4042bc:	2101      	movs	r1, #1
  4042be:	fa01 f202 	lsl.w	r2, r1, r2
  4042c2:	4313      	orrs	r3, r2
  4042c4:	607b      	str	r3, [r7, #4]
  4042c6:	4662      	mov	r2, ip
  4042c8:	e779      	b.n	4041be <_malloc_r+0x39a>
  4042ca:	2301      	movs	r3, #1
  4042cc:	6053      	str	r3, [r2, #4]
  4042ce:	e729      	b.n	404124 <_malloc_r+0x300>
  4042d0:	f240 5254 	movw	r2, #1364	; 0x554
  4042d4:	4293      	cmp	r3, r2
  4042d6:	d822      	bhi.n	40431e <_malloc_r+0x4fa>
  4042d8:	0cb3      	lsrs	r3, r6, #18
  4042da:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  4042de:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  4042e2:	00c3      	lsls	r3, r0, #3
  4042e4:	e5c0      	b.n	403e68 <_malloc_r+0x44>
  4042e6:	f103 0b10 	add.w	fp, r3, #16
  4042ea:	e6ae      	b.n	40404a <_malloc_r+0x226>
  4042ec:	2a54      	cmp	r2, #84	; 0x54
  4042ee:	d829      	bhi.n	404344 <_malloc_r+0x520>
  4042f0:	0b1a      	lsrs	r2, r3, #12
  4042f2:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4042f6:	00c9      	lsls	r1, r1, #3
  4042f8:	326e      	adds	r2, #110	; 0x6e
  4042fa:	e74d      	b.n	404198 <_malloc_r+0x374>
  4042fc:	4b20      	ldr	r3, [pc, #128]	; (404380 <_malloc_r+0x55c>)
  4042fe:	6819      	ldr	r1, [r3, #0]
  404300:	4459      	add	r1, fp
  404302:	6019      	str	r1, [r3, #0]
  404304:	e6b2      	b.n	40406c <_malloc_r+0x248>
  404306:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40430a:	2800      	cmp	r0, #0
  40430c:	f47f aeae 	bne.w	40406c <_malloc_r+0x248>
  404310:	eb08 030b 	add.w	r3, r8, fp
  404314:	68ba      	ldr	r2, [r7, #8]
  404316:	f043 0301 	orr.w	r3, r3, #1
  40431a:	6053      	str	r3, [r2, #4]
  40431c:	e6ee      	b.n	4040fc <_malloc_r+0x2d8>
  40431e:	207f      	movs	r0, #127	; 0x7f
  404320:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  404324:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  404328:	e59e      	b.n	403e68 <_malloc_r+0x44>
  40432a:	f104 0108 	add.w	r1, r4, #8
  40432e:	4628      	mov	r0, r5
  404330:	9300      	str	r3, [sp, #0]
  404332:	f7ff fa67 	bl	403804 <_free_r>
  404336:	9b00      	ldr	r3, [sp, #0]
  404338:	6819      	ldr	r1, [r3, #0]
  40433a:	e6df      	b.n	4040fc <_malloc_r+0x2d8>
  40433c:	2001      	movs	r0, #1
  40433e:	f04f 0900 	mov.w	r9, #0
  404342:	e6bc      	b.n	4040be <_malloc_r+0x29a>
  404344:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404348:	d805      	bhi.n	404356 <_malloc_r+0x532>
  40434a:	0bda      	lsrs	r2, r3, #15
  40434c:	f102 0178 	add.w	r1, r2, #120	; 0x78
  404350:	00c9      	lsls	r1, r1, #3
  404352:	3277      	adds	r2, #119	; 0x77
  404354:	e720      	b.n	404198 <_malloc_r+0x374>
  404356:	f240 5154 	movw	r1, #1364	; 0x554
  40435a:	428a      	cmp	r2, r1
  40435c:	d805      	bhi.n	40436a <_malloc_r+0x546>
  40435e:	0c9a      	lsrs	r2, r3, #18
  404360:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  404364:	00c9      	lsls	r1, r1, #3
  404366:	327c      	adds	r2, #124	; 0x7c
  404368:	e716      	b.n	404198 <_malloc_r+0x374>
  40436a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40436e:	227e      	movs	r2, #126	; 0x7e
  404370:	e712      	b.n	404198 <_malloc_r+0x374>
  404372:	687b      	ldr	r3, [r7, #4]
  404374:	e780      	b.n	404278 <_malloc_r+0x454>
  404376:	08f0      	lsrs	r0, r6, #3
  404378:	f106 0308 	add.w	r3, r6, #8
  40437c:	e600      	b.n	403f80 <_malloc_r+0x15c>
  40437e:	bf00      	nop
  404380:	20400a58 	.word	0x20400a58

00404384 <__ascii_mbtowc>:
  404384:	b082      	sub	sp, #8
  404386:	b149      	cbz	r1, 40439c <__ascii_mbtowc+0x18>
  404388:	b15a      	cbz	r2, 4043a2 <__ascii_mbtowc+0x1e>
  40438a:	b16b      	cbz	r3, 4043a8 <__ascii_mbtowc+0x24>
  40438c:	7813      	ldrb	r3, [r2, #0]
  40438e:	600b      	str	r3, [r1, #0]
  404390:	7812      	ldrb	r2, [r2, #0]
  404392:	1c10      	adds	r0, r2, #0
  404394:	bf18      	it	ne
  404396:	2001      	movne	r0, #1
  404398:	b002      	add	sp, #8
  40439a:	4770      	bx	lr
  40439c:	a901      	add	r1, sp, #4
  40439e:	2a00      	cmp	r2, #0
  4043a0:	d1f3      	bne.n	40438a <__ascii_mbtowc+0x6>
  4043a2:	4610      	mov	r0, r2
  4043a4:	b002      	add	sp, #8
  4043a6:	4770      	bx	lr
  4043a8:	f06f 0001 	mvn.w	r0, #1
  4043ac:	e7f4      	b.n	404398 <__ascii_mbtowc+0x14>
  4043ae:	bf00      	nop

004043b0 <memchr>:
  4043b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4043b4:	2a10      	cmp	r2, #16
  4043b6:	db2b      	blt.n	404410 <memchr+0x60>
  4043b8:	f010 0f07 	tst.w	r0, #7
  4043bc:	d008      	beq.n	4043d0 <memchr+0x20>
  4043be:	f810 3b01 	ldrb.w	r3, [r0], #1
  4043c2:	3a01      	subs	r2, #1
  4043c4:	428b      	cmp	r3, r1
  4043c6:	d02d      	beq.n	404424 <memchr+0x74>
  4043c8:	f010 0f07 	tst.w	r0, #7
  4043cc:	b342      	cbz	r2, 404420 <memchr+0x70>
  4043ce:	d1f6      	bne.n	4043be <memchr+0xe>
  4043d0:	b4f0      	push	{r4, r5, r6, r7}
  4043d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  4043d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4043da:	f022 0407 	bic.w	r4, r2, #7
  4043de:	f07f 0700 	mvns.w	r7, #0
  4043e2:	2300      	movs	r3, #0
  4043e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4043e8:	3c08      	subs	r4, #8
  4043ea:	ea85 0501 	eor.w	r5, r5, r1
  4043ee:	ea86 0601 	eor.w	r6, r6, r1
  4043f2:	fa85 f547 	uadd8	r5, r5, r7
  4043f6:	faa3 f587 	sel	r5, r3, r7
  4043fa:	fa86 f647 	uadd8	r6, r6, r7
  4043fe:	faa5 f687 	sel	r6, r5, r7
  404402:	b98e      	cbnz	r6, 404428 <memchr+0x78>
  404404:	d1ee      	bne.n	4043e4 <memchr+0x34>
  404406:	bcf0      	pop	{r4, r5, r6, r7}
  404408:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40440c:	f002 0207 	and.w	r2, r2, #7
  404410:	b132      	cbz	r2, 404420 <memchr+0x70>
  404412:	f810 3b01 	ldrb.w	r3, [r0], #1
  404416:	3a01      	subs	r2, #1
  404418:	ea83 0301 	eor.w	r3, r3, r1
  40441c:	b113      	cbz	r3, 404424 <memchr+0x74>
  40441e:	d1f8      	bne.n	404412 <memchr+0x62>
  404420:	2000      	movs	r0, #0
  404422:	4770      	bx	lr
  404424:	3801      	subs	r0, #1
  404426:	4770      	bx	lr
  404428:	2d00      	cmp	r5, #0
  40442a:	bf06      	itte	eq
  40442c:	4635      	moveq	r5, r6
  40442e:	3803      	subeq	r0, #3
  404430:	3807      	subne	r0, #7
  404432:	f015 0f01 	tst.w	r5, #1
  404436:	d107      	bne.n	404448 <memchr+0x98>
  404438:	3001      	adds	r0, #1
  40443a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40443e:	bf02      	ittt	eq
  404440:	3001      	addeq	r0, #1
  404442:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  404446:	3001      	addeq	r0, #1
  404448:	bcf0      	pop	{r4, r5, r6, r7}
  40444a:	3801      	subs	r0, #1
  40444c:	4770      	bx	lr
  40444e:	bf00      	nop

00404450 <memcpy>:
  404450:	4684      	mov	ip, r0
  404452:	ea41 0300 	orr.w	r3, r1, r0
  404456:	f013 0303 	ands.w	r3, r3, #3
  40445a:	d16d      	bne.n	404538 <memcpy+0xe8>
  40445c:	3a40      	subs	r2, #64	; 0x40
  40445e:	d341      	bcc.n	4044e4 <memcpy+0x94>
  404460:	f851 3b04 	ldr.w	r3, [r1], #4
  404464:	f840 3b04 	str.w	r3, [r0], #4
  404468:	f851 3b04 	ldr.w	r3, [r1], #4
  40446c:	f840 3b04 	str.w	r3, [r0], #4
  404470:	f851 3b04 	ldr.w	r3, [r1], #4
  404474:	f840 3b04 	str.w	r3, [r0], #4
  404478:	f851 3b04 	ldr.w	r3, [r1], #4
  40447c:	f840 3b04 	str.w	r3, [r0], #4
  404480:	f851 3b04 	ldr.w	r3, [r1], #4
  404484:	f840 3b04 	str.w	r3, [r0], #4
  404488:	f851 3b04 	ldr.w	r3, [r1], #4
  40448c:	f840 3b04 	str.w	r3, [r0], #4
  404490:	f851 3b04 	ldr.w	r3, [r1], #4
  404494:	f840 3b04 	str.w	r3, [r0], #4
  404498:	f851 3b04 	ldr.w	r3, [r1], #4
  40449c:	f840 3b04 	str.w	r3, [r0], #4
  4044a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4044a4:	f840 3b04 	str.w	r3, [r0], #4
  4044a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4044ac:	f840 3b04 	str.w	r3, [r0], #4
  4044b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4044b4:	f840 3b04 	str.w	r3, [r0], #4
  4044b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4044bc:	f840 3b04 	str.w	r3, [r0], #4
  4044c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4044c4:	f840 3b04 	str.w	r3, [r0], #4
  4044c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4044cc:	f840 3b04 	str.w	r3, [r0], #4
  4044d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4044d4:	f840 3b04 	str.w	r3, [r0], #4
  4044d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4044dc:	f840 3b04 	str.w	r3, [r0], #4
  4044e0:	3a40      	subs	r2, #64	; 0x40
  4044e2:	d2bd      	bcs.n	404460 <memcpy+0x10>
  4044e4:	3230      	adds	r2, #48	; 0x30
  4044e6:	d311      	bcc.n	40450c <memcpy+0xbc>
  4044e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4044ec:	f840 3b04 	str.w	r3, [r0], #4
  4044f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4044f4:	f840 3b04 	str.w	r3, [r0], #4
  4044f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4044fc:	f840 3b04 	str.w	r3, [r0], #4
  404500:	f851 3b04 	ldr.w	r3, [r1], #4
  404504:	f840 3b04 	str.w	r3, [r0], #4
  404508:	3a10      	subs	r2, #16
  40450a:	d2ed      	bcs.n	4044e8 <memcpy+0x98>
  40450c:	320c      	adds	r2, #12
  40450e:	d305      	bcc.n	40451c <memcpy+0xcc>
  404510:	f851 3b04 	ldr.w	r3, [r1], #4
  404514:	f840 3b04 	str.w	r3, [r0], #4
  404518:	3a04      	subs	r2, #4
  40451a:	d2f9      	bcs.n	404510 <memcpy+0xc0>
  40451c:	3204      	adds	r2, #4
  40451e:	d008      	beq.n	404532 <memcpy+0xe2>
  404520:	07d2      	lsls	r2, r2, #31
  404522:	bf1c      	itt	ne
  404524:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404528:	f800 3b01 	strbne.w	r3, [r0], #1
  40452c:	d301      	bcc.n	404532 <memcpy+0xe2>
  40452e:	880b      	ldrh	r3, [r1, #0]
  404530:	8003      	strh	r3, [r0, #0]
  404532:	4660      	mov	r0, ip
  404534:	4770      	bx	lr
  404536:	bf00      	nop
  404538:	2a08      	cmp	r2, #8
  40453a:	d313      	bcc.n	404564 <memcpy+0x114>
  40453c:	078b      	lsls	r3, r1, #30
  40453e:	d08d      	beq.n	40445c <memcpy+0xc>
  404540:	f010 0303 	ands.w	r3, r0, #3
  404544:	d08a      	beq.n	40445c <memcpy+0xc>
  404546:	f1c3 0304 	rsb	r3, r3, #4
  40454a:	1ad2      	subs	r2, r2, r3
  40454c:	07db      	lsls	r3, r3, #31
  40454e:	bf1c      	itt	ne
  404550:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404554:	f800 3b01 	strbne.w	r3, [r0], #1
  404558:	d380      	bcc.n	40445c <memcpy+0xc>
  40455a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40455e:	f820 3b02 	strh.w	r3, [r0], #2
  404562:	e77b      	b.n	40445c <memcpy+0xc>
  404564:	3a04      	subs	r2, #4
  404566:	d3d9      	bcc.n	40451c <memcpy+0xcc>
  404568:	3a01      	subs	r2, #1
  40456a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40456e:	f800 3b01 	strb.w	r3, [r0], #1
  404572:	d2f9      	bcs.n	404568 <memcpy+0x118>
  404574:	780b      	ldrb	r3, [r1, #0]
  404576:	7003      	strb	r3, [r0, #0]
  404578:	784b      	ldrb	r3, [r1, #1]
  40457a:	7043      	strb	r3, [r0, #1]
  40457c:	788b      	ldrb	r3, [r1, #2]
  40457e:	7083      	strb	r3, [r0, #2]
  404580:	4660      	mov	r0, ip
  404582:	4770      	bx	lr

00404584 <memmove>:
  404584:	4288      	cmp	r0, r1
  404586:	b5f0      	push	{r4, r5, r6, r7, lr}
  404588:	d90d      	bls.n	4045a6 <memmove+0x22>
  40458a:	188b      	adds	r3, r1, r2
  40458c:	4298      	cmp	r0, r3
  40458e:	d20a      	bcs.n	4045a6 <memmove+0x22>
  404590:	1884      	adds	r4, r0, r2
  404592:	2a00      	cmp	r2, #0
  404594:	d051      	beq.n	40463a <memmove+0xb6>
  404596:	4622      	mov	r2, r4
  404598:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40459c:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4045a0:	4299      	cmp	r1, r3
  4045a2:	d1f9      	bne.n	404598 <memmove+0x14>
  4045a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4045a6:	2a0f      	cmp	r2, #15
  4045a8:	d948      	bls.n	40463c <memmove+0xb8>
  4045aa:	ea41 0300 	orr.w	r3, r1, r0
  4045ae:	079b      	lsls	r3, r3, #30
  4045b0:	d146      	bne.n	404640 <memmove+0xbc>
  4045b2:	f100 0410 	add.w	r4, r0, #16
  4045b6:	f101 0310 	add.w	r3, r1, #16
  4045ba:	4615      	mov	r5, r2
  4045bc:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4045c0:	f844 6c10 	str.w	r6, [r4, #-16]
  4045c4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  4045c8:	f844 6c0c 	str.w	r6, [r4, #-12]
  4045cc:	f853 6c08 	ldr.w	r6, [r3, #-8]
  4045d0:	f844 6c08 	str.w	r6, [r4, #-8]
  4045d4:	3d10      	subs	r5, #16
  4045d6:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4045da:	f844 6c04 	str.w	r6, [r4, #-4]
  4045de:	2d0f      	cmp	r5, #15
  4045e0:	f103 0310 	add.w	r3, r3, #16
  4045e4:	f104 0410 	add.w	r4, r4, #16
  4045e8:	d8e8      	bhi.n	4045bc <memmove+0x38>
  4045ea:	f1a2 0310 	sub.w	r3, r2, #16
  4045ee:	f023 030f 	bic.w	r3, r3, #15
  4045f2:	f002 0e0f 	and.w	lr, r2, #15
  4045f6:	3310      	adds	r3, #16
  4045f8:	f1be 0f03 	cmp.w	lr, #3
  4045fc:	4419      	add	r1, r3
  4045fe:	4403      	add	r3, r0
  404600:	d921      	bls.n	404646 <memmove+0xc2>
  404602:	1f1e      	subs	r6, r3, #4
  404604:	460d      	mov	r5, r1
  404606:	4674      	mov	r4, lr
  404608:	3c04      	subs	r4, #4
  40460a:	f855 7b04 	ldr.w	r7, [r5], #4
  40460e:	f846 7f04 	str.w	r7, [r6, #4]!
  404612:	2c03      	cmp	r4, #3
  404614:	d8f8      	bhi.n	404608 <memmove+0x84>
  404616:	f1ae 0404 	sub.w	r4, lr, #4
  40461a:	f024 0403 	bic.w	r4, r4, #3
  40461e:	3404      	adds	r4, #4
  404620:	4421      	add	r1, r4
  404622:	4423      	add	r3, r4
  404624:	f002 0203 	and.w	r2, r2, #3
  404628:	b162      	cbz	r2, 404644 <memmove+0xc0>
  40462a:	3b01      	subs	r3, #1
  40462c:	440a      	add	r2, r1
  40462e:	f811 4b01 	ldrb.w	r4, [r1], #1
  404632:	f803 4f01 	strb.w	r4, [r3, #1]!
  404636:	428a      	cmp	r2, r1
  404638:	d1f9      	bne.n	40462e <memmove+0xaa>
  40463a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40463c:	4603      	mov	r3, r0
  40463e:	e7f3      	b.n	404628 <memmove+0xa4>
  404640:	4603      	mov	r3, r0
  404642:	e7f2      	b.n	40462a <memmove+0xa6>
  404644:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404646:	4672      	mov	r2, lr
  404648:	e7ee      	b.n	404628 <memmove+0xa4>
  40464a:	bf00      	nop

0040464c <__malloc_lock>:
  40464c:	4770      	bx	lr
  40464e:	bf00      	nop

00404650 <__malloc_unlock>:
  404650:	4770      	bx	lr
  404652:	bf00      	nop

00404654 <_realloc_r>:
  404654:	2900      	cmp	r1, #0
  404656:	f000 8095 	beq.w	404784 <_realloc_r+0x130>
  40465a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40465e:	460d      	mov	r5, r1
  404660:	4616      	mov	r6, r2
  404662:	b083      	sub	sp, #12
  404664:	4680      	mov	r8, r0
  404666:	f106 070b 	add.w	r7, r6, #11
  40466a:	f7ff ffef 	bl	40464c <__malloc_lock>
  40466e:	f855 ec04 	ldr.w	lr, [r5, #-4]
  404672:	2f16      	cmp	r7, #22
  404674:	f02e 0403 	bic.w	r4, lr, #3
  404678:	f1a5 0908 	sub.w	r9, r5, #8
  40467c:	d83c      	bhi.n	4046f8 <_realloc_r+0xa4>
  40467e:	2210      	movs	r2, #16
  404680:	4617      	mov	r7, r2
  404682:	42be      	cmp	r6, r7
  404684:	d83d      	bhi.n	404702 <_realloc_r+0xae>
  404686:	4294      	cmp	r4, r2
  404688:	da43      	bge.n	404712 <_realloc_r+0xbe>
  40468a:	4bc4      	ldr	r3, [pc, #784]	; (40499c <_realloc_r+0x348>)
  40468c:	6899      	ldr	r1, [r3, #8]
  40468e:	eb09 0004 	add.w	r0, r9, r4
  404692:	4288      	cmp	r0, r1
  404694:	f000 80b4 	beq.w	404800 <_realloc_r+0x1ac>
  404698:	6843      	ldr	r3, [r0, #4]
  40469a:	f023 0101 	bic.w	r1, r3, #1
  40469e:	4401      	add	r1, r0
  4046a0:	6849      	ldr	r1, [r1, #4]
  4046a2:	07c9      	lsls	r1, r1, #31
  4046a4:	d54c      	bpl.n	404740 <_realloc_r+0xec>
  4046a6:	f01e 0f01 	tst.w	lr, #1
  4046aa:	f000 809b 	beq.w	4047e4 <_realloc_r+0x190>
  4046ae:	4631      	mov	r1, r6
  4046b0:	4640      	mov	r0, r8
  4046b2:	f7ff fbb7 	bl	403e24 <_malloc_r>
  4046b6:	4606      	mov	r6, r0
  4046b8:	2800      	cmp	r0, #0
  4046ba:	d03a      	beq.n	404732 <_realloc_r+0xde>
  4046bc:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4046c0:	f023 0301 	bic.w	r3, r3, #1
  4046c4:	444b      	add	r3, r9
  4046c6:	f1a0 0208 	sub.w	r2, r0, #8
  4046ca:	429a      	cmp	r2, r3
  4046cc:	f000 8121 	beq.w	404912 <_realloc_r+0x2be>
  4046d0:	1f22      	subs	r2, r4, #4
  4046d2:	2a24      	cmp	r2, #36	; 0x24
  4046d4:	f200 8107 	bhi.w	4048e6 <_realloc_r+0x292>
  4046d8:	2a13      	cmp	r2, #19
  4046da:	f200 80db 	bhi.w	404894 <_realloc_r+0x240>
  4046de:	4603      	mov	r3, r0
  4046e0:	462a      	mov	r2, r5
  4046e2:	6811      	ldr	r1, [r2, #0]
  4046e4:	6019      	str	r1, [r3, #0]
  4046e6:	6851      	ldr	r1, [r2, #4]
  4046e8:	6059      	str	r1, [r3, #4]
  4046ea:	6892      	ldr	r2, [r2, #8]
  4046ec:	609a      	str	r2, [r3, #8]
  4046ee:	4629      	mov	r1, r5
  4046f0:	4640      	mov	r0, r8
  4046f2:	f7ff f887 	bl	403804 <_free_r>
  4046f6:	e01c      	b.n	404732 <_realloc_r+0xde>
  4046f8:	f027 0707 	bic.w	r7, r7, #7
  4046fc:	2f00      	cmp	r7, #0
  4046fe:	463a      	mov	r2, r7
  404700:	dabf      	bge.n	404682 <_realloc_r+0x2e>
  404702:	2600      	movs	r6, #0
  404704:	230c      	movs	r3, #12
  404706:	4630      	mov	r0, r6
  404708:	f8c8 3000 	str.w	r3, [r8]
  40470c:	b003      	add	sp, #12
  40470e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404712:	462e      	mov	r6, r5
  404714:	1be3      	subs	r3, r4, r7
  404716:	2b0f      	cmp	r3, #15
  404718:	d81e      	bhi.n	404758 <_realloc_r+0x104>
  40471a:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40471e:	f003 0301 	and.w	r3, r3, #1
  404722:	4323      	orrs	r3, r4
  404724:	444c      	add	r4, r9
  404726:	f8c9 3004 	str.w	r3, [r9, #4]
  40472a:	6863      	ldr	r3, [r4, #4]
  40472c:	f043 0301 	orr.w	r3, r3, #1
  404730:	6063      	str	r3, [r4, #4]
  404732:	4640      	mov	r0, r8
  404734:	f7ff ff8c 	bl	404650 <__malloc_unlock>
  404738:	4630      	mov	r0, r6
  40473a:	b003      	add	sp, #12
  40473c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404740:	f023 0303 	bic.w	r3, r3, #3
  404744:	18e1      	adds	r1, r4, r3
  404746:	4291      	cmp	r1, r2
  404748:	db1f      	blt.n	40478a <_realloc_r+0x136>
  40474a:	68c3      	ldr	r3, [r0, #12]
  40474c:	6882      	ldr	r2, [r0, #8]
  40474e:	462e      	mov	r6, r5
  404750:	60d3      	str	r3, [r2, #12]
  404752:	460c      	mov	r4, r1
  404754:	609a      	str	r2, [r3, #8]
  404756:	e7dd      	b.n	404714 <_realloc_r+0xc0>
  404758:	f8d9 2004 	ldr.w	r2, [r9, #4]
  40475c:	eb09 0107 	add.w	r1, r9, r7
  404760:	f002 0201 	and.w	r2, r2, #1
  404764:	444c      	add	r4, r9
  404766:	f043 0301 	orr.w	r3, r3, #1
  40476a:	4317      	orrs	r7, r2
  40476c:	f8c9 7004 	str.w	r7, [r9, #4]
  404770:	604b      	str	r3, [r1, #4]
  404772:	6863      	ldr	r3, [r4, #4]
  404774:	f043 0301 	orr.w	r3, r3, #1
  404778:	3108      	adds	r1, #8
  40477a:	6063      	str	r3, [r4, #4]
  40477c:	4640      	mov	r0, r8
  40477e:	f7ff f841 	bl	403804 <_free_r>
  404782:	e7d6      	b.n	404732 <_realloc_r+0xde>
  404784:	4611      	mov	r1, r2
  404786:	f7ff bb4d 	b.w	403e24 <_malloc_r>
  40478a:	f01e 0f01 	tst.w	lr, #1
  40478e:	d18e      	bne.n	4046ae <_realloc_r+0x5a>
  404790:	f855 1c08 	ldr.w	r1, [r5, #-8]
  404794:	eba9 0a01 	sub.w	sl, r9, r1
  404798:	f8da 1004 	ldr.w	r1, [sl, #4]
  40479c:	f021 0103 	bic.w	r1, r1, #3
  4047a0:	440b      	add	r3, r1
  4047a2:	4423      	add	r3, r4
  4047a4:	4293      	cmp	r3, r2
  4047a6:	db25      	blt.n	4047f4 <_realloc_r+0x1a0>
  4047a8:	68c2      	ldr	r2, [r0, #12]
  4047aa:	6881      	ldr	r1, [r0, #8]
  4047ac:	4656      	mov	r6, sl
  4047ae:	60ca      	str	r2, [r1, #12]
  4047b0:	6091      	str	r1, [r2, #8]
  4047b2:	f8da 100c 	ldr.w	r1, [sl, #12]
  4047b6:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4047ba:	1f22      	subs	r2, r4, #4
  4047bc:	2a24      	cmp	r2, #36	; 0x24
  4047be:	60c1      	str	r1, [r0, #12]
  4047c0:	6088      	str	r0, [r1, #8]
  4047c2:	f200 8094 	bhi.w	4048ee <_realloc_r+0x29a>
  4047c6:	2a13      	cmp	r2, #19
  4047c8:	d96f      	bls.n	4048aa <_realloc_r+0x256>
  4047ca:	6829      	ldr	r1, [r5, #0]
  4047cc:	f8ca 1008 	str.w	r1, [sl, #8]
  4047d0:	6869      	ldr	r1, [r5, #4]
  4047d2:	f8ca 100c 	str.w	r1, [sl, #12]
  4047d6:	2a1b      	cmp	r2, #27
  4047d8:	f200 80a2 	bhi.w	404920 <_realloc_r+0x2cc>
  4047dc:	3508      	adds	r5, #8
  4047de:	f10a 0210 	add.w	r2, sl, #16
  4047e2:	e063      	b.n	4048ac <_realloc_r+0x258>
  4047e4:	f855 3c08 	ldr.w	r3, [r5, #-8]
  4047e8:	eba9 0a03 	sub.w	sl, r9, r3
  4047ec:	f8da 1004 	ldr.w	r1, [sl, #4]
  4047f0:	f021 0103 	bic.w	r1, r1, #3
  4047f4:	1863      	adds	r3, r4, r1
  4047f6:	4293      	cmp	r3, r2
  4047f8:	f6ff af59 	blt.w	4046ae <_realloc_r+0x5a>
  4047fc:	4656      	mov	r6, sl
  4047fe:	e7d8      	b.n	4047b2 <_realloc_r+0x15e>
  404800:	6841      	ldr	r1, [r0, #4]
  404802:	f021 0b03 	bic.w	fp, r1, #3
  404806:	44a3      	add	fp, r4
  404808:	f107 0010 	add.w	r0, r7, #16
  40480c:	4583      	cmp	fp, r0
  40480e:	da56      	bge.n	4048be <_realloc_r+0x26a>
  404810:	f01e 0f01 	tst.w	lr, #1
  404814:	f47f af4b 	bne.w	4046ae <_realloc_r+0x5a>
  404818:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40481c:	eba9 0a01 	sub.w	sl, r9, r1
  404820:	f8da 1004 	ldr.w	r1, [sl, #4]
  404824:	f021 0103 	bic.w	r1, r1, #3
  404828:	448b      	add	fp, r1
  40482a:	4558      	cmp	r0, fp
  40482c:	dce2      	bgt.n	4047f4 <_realloc_r+0x1a0>
  40482e:	4656      	mov	r6, sl
  404830:	f8da 100c 	ldr.w	r1, [sl, #12]
  404834:	f856 0f08 	ldr.w	r0, [r6, #8]!
  404838:	1f22      	subs	r2, r4, #4
  40483a:	2a24      	cmp	r2, #36	; 0x24
  40483c:	60c1      	str	r1, [r0, #12]
  40483e:	6088      	str	r0, [r1, #8]
  404840:	f200 808f 	bhi.w	404962 <_realloc_r+0x30e>
  404844:	2a13      	cmp	r2, #19
  404846:	f240 808a 	bls.w	40495e <_realloc_r+0x30a>
  40484a:	6829      	ldr	r1, [r5, #0]
  40484c:	f8ca 1008 	str.w	r1, [sl, #8]
  404850:	6869      	ldr	r1, [r5, #4]
  404852:	f8ca 100c 	str.w	r1, [sl, #12]
  404856:	2a1b      	cmp	r2, #27
  404858:	f200 808a 	bhi.w	404970 <_realloc_r+0x31c>
  40485c:	3508      	adds	r5, #8
  40485e:	f10a 0210 	add.w	r2, sl, #16
  404862:	6829      	ldr	r1, [r5, #0]
  404864:	6011      	str	r1, [r2, #0]
  404866:	6869      	ldr	r1, [r5, #4]
  404868:	6051      	str	r1, [r2, #4]
  40486a:	68a9      	ldr	r1, [r5, #8]
  40486c:	6091      	str	r1, [r2, #8]
  40486e:	eb0a 0107 	add.w	r1, sl, r7
  404872:	ebab 0207 	sub.w	r2, fp, r7
  404876:	f042 0201 	orr.w	r2, r2, #1
  40487a:	6099      	str	r1, [r3, #8]
  40487c:	604a      	str	r2, [r1, #4]
  40487e:	f8da 3004 	ldr.w	r3, [sl, #4]
  404882:	f003 0301 	and.w	r3, r3, #1
  404886:	431f      	orrs	r7, r3
  404888:	4640      	mov	r0, r8
  40488a:	f8ca 7004 	str.w	r7, [sl, #4]
  40488e:	f7ff fedf 	bl	404650 <__malloc_unlock>
  404892:	e751      	b.n	404738 <_realloc_r+0xe4>
  404894:	682b      	ldr	r3, [r5, #0]
  404896:	6003      	str	r3, [r0, #0]
  404898:	686b      	ldr	r3, [r5, #4]
  40489a:	6043      	str	r3, [r0, #4]
  40489c:	2a1b      	cmp	r2, #27
  40489e:	d82d      	bhi.n	4048fc <_realloc_r+0x2a8>
  4048a0:	f100 0308 	add.w	r3, r0, #8
  4048a4:	f105 0208 	add.w	r2, r5, #8
  4048a8:	e71b      	b.n	4046e2 <_realloc_r+0x8e>
  4048aa:	4632      	mov	r2, r6
  4048ac:	6829      	ldr	r1, [r5, #0]
  4048ae:	6011      	str	r1, [r2, #0]
  4048b0:	6869      	ldr	r1, [r5, #4]
  4048b2:	6051      	str	r1, [r2, #4]
  4048b4:	68a9      	ldr	r1, [r5, #8]
  4048b6:	6091      	str	r1, [r2, #8]
  4048b8:	461c      	mov	r4, r3
  4048ba:	46d1      	mov	r9, sl
  4048bc:	e72a      	b.n	404714 <_realloc_r+0xc0>
  4048be:	eb09 0107 	add.w	r1, r9, r7
  4048c2:	ebab 0b07 	sub.w	fp, fp, r7
  4048c6:	f04b 0201 	orr.w	r2, fp, #1
  4048ca:	6099      	str	r1, [r3, #8]
  4048cc:	604a      	str	r2, [r1, #4]
  4048ce:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4048d2:	f003 0301 	and.w	r3, r3, #1
  4048d6:	431f      	orrs	r7, r3
  4048d8:	4640      	mov	r0, r8
  4048da:	f845 7c04 	str.w	r7, [r5, #-4]
  4048de:	f7ff feb7 	bl	404650 <__malloc_unlock>
  4048e2:	462e      	mov	r6, r5
  4048e4:	e728      	b.n	404738 <_realloc_r+0xe4>
  4048e6:	4629      	mov	r1, r5
  4048e8:	f7ff fe4c 	bl	404584 <memmove>
  4048ec:	e6ff      	b.n	4046ee <_realloc_r+0x9a>
  4048ee:	4629      	mov	r1, r5
  4048f0:	4630      	mov	r0, r6
  4048f2:	461c      	mov	r4, r3
  4048f4:	46d1      	mov	r9, sl
  4048f6:	f7ff fe45 	bl	404584 <memmove>
  4048fa:	e70b      	b.n	404714 <_realloc_r+0xc0>
  4048fc:	68ab      	ldr	r3, [r5, #8]
  4048fe:	6083      	str	r3, [r0, #8]
  404900:	68eb      	ldr	r3, [r5, #12]
  404902:	60c3      	str	r3, [r0, #12]
  404904:	2a24      	cmp	r2, #36	; 0x24
  404906:	d017      	beq.n	404938 <_realloc_r+0x2e4>
  404908:	f100 0310 	add.w	r3, r0, #16
  40490c:	f105 0210 	add.w	r2, r5, #16
  404910:	e6e7      	b.n	4046e2 <_realloc_r+0x8e>
  404912:	f850 3c04 	ldr.w	r3, [r0, #-4]
  404916:	f023 0303 	bic.w	r3, r3, #3
  40491a:	441c      	add	r4, r3
  40491c:	462e      	mov	r6, r5
  40491e:	e6f9      	b.n	404714 <_realloc_r+0xc0>
  404920:	68a9      	ldr	r1, [r5, #8]
  404922:	f8ca 1010 	str.w	r1, [sl, #16]
  404926:	68e9      	ldr	r1, [r5, #12]
  404928:	f8ca 1014 	str.w	r1, [sl, #20]
  40492c:	2a24      	cmp	r2, #36	; 0x24
  40492e:	d00c      	beq.n	40494a <_realloc_r+0x2f6>
  404930:	3510      	adds	r5, #16
  404932:	f10a 0218 	add.w	r2, sl, #24
  404936:	e7b9      	b.n	4048ac <_realloc_r+0x258>
  404938:	692b      	ldr	r3, [r5, #16]
  40493a:	6103      	str	r3, [r0, #16]
  40493c:	696b      	ldr	r3, [r5, #20]
  40493e:	6143      	str	r3, [r0, #20]
  404940:	f105 0218 	add.w	r2, r5, #24
  404944:	f100 0318 	add.w	r3, r0, #24
  404948:	e6cb      	b.n	4046e2 <_realloc_r+0x8e>
  40494a:	692a      	ldr	r2, [r5, #16]
  40494c:	f8ca 2018 	str.w	r2, [sl, #24]
  404950:	696a      	ldr	r2, [r5, #20]
  404952:	f8ca 201c 	str.w	r2, [sl, #28]
  404956:	3518      	adds	r5, #24
  404958:	f10a 0220 	add.w	r2, sl, #32
  40495c:	e7a6      	b.n	4048ac <_realloc_r+0x258>
  40495e:	4632      	mov	r2, r6
  404960:	e77f      	b.n	404862 <_realloc_r+0x20e>
  404962:	4629      	mov	r1, r5
  404964:	4630      	mov	r0, r6
  404966:	9301      	str	r3, [sp, #4]
  404968:	f7ff fe0c 	bl	404584 <memmove>
  40496c:	9b01      	ldr	r3, [sp, #4]
  40496e:	e77e      	b.n	40486e <_realloc_r+0x21a>
  404970:	68a9      	ldr	r1, [r5, #8]
  404972:	f8ca 1010 	str.w	r1, [sl, #16]
  404976:	68e9      	ldr	r1, [r5, #12]
  404978:	f8ca 1014 	str.w	r1, [sl, #20]
  40497c:	2a24      	cmp	r2, #36	; 0x24
  40497e:	d003      	beq.n	404988 <_realloc_r+0x334>
  404980:	3510      	adds	r5, #16
  404982:	f10a 0218 	add.w	r2, sl, #24
  404986:	e76c      	b.n	404862 <_realloc_r+0x20e>
  404988:	692a      	ldr	r2, [r5, #16]
  40498a:	f8ca 2018 	str.w	r2, [sl, #24]
  40498e:	696a      	ldr	r2, [r5, #20]
  404990:	f8ca 201c 	str.w	r2, [sl, #28]
  404994:	3518      	adds	r5, #24
  404996:	f10a 0220 	add.w	r2, sl, #32
  40499a:	e762      	b.n	404862 <_realloc_r+0x20e>
  40499c:	204005ac 	.word	0x204005ac

004049a0 <_sbrk_r>:
  4049a0:	b538      	push	{r3, r4, r5, lr}
  4049a2:	4c07      	ldr	r4, [pc, #28]	; (4049c0 <_sbrk_r+0x20>)
  4049a4:	2300      	movs	r3, #0
  4049a6:	4605      	mov	r5, r0
  4049a8:	4608      	mov	r0, r1
  4049aa:	6023      	str	r3, [r4, #0]
  4049ac:	f7fc ffce 	bl	40194c <_sbrk>
  4049b0:	1c43      	adds	r3, r0, #1
  4049b2:	d000      	beq.n	4049b6 <_sbrk_r+0x16>
  4049b4:	bd38      	pop	{r3, r4, r5, pc}
  4049b6:	6823      	ldr	r3, [r4, #0]
  4049b8:	2b00      	cmp	r3, #0
  4049ba:	d0fb      	beq.n	4049b4 <_sbrk_r+0x14>
  4049bc:	602b      	str	r3, [r5, #0]
  4049be:	bd38      	pop	{r3, r4, r5, pc}
  4049c0:	20400a98 	.word	0x20400a98

004049c4 <__sread>:
  4049c4:	b510      	push	{r4, lr}
  4049c6:	460c      	mov	r4, r1
  4049c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4049cc:	f000 f9c4 	bl	404d58 <_read_r>
  4049d0:	2800      	cmp	r0, #0
  4049d2:	db03      	blt.n	4049dc <__sread+0x18>
  4049d4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4049d6:	4403      	add	r3, r0
  4049d8:	6523      	str	r3, [r4, #80]	; 0x50
  4049da:	bd10      	pop	{r4, pc}
  4049dc:	89a3      	ldrh	r3, [r4, #12]
  4049de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4049e2:	81a3      	strh	r3, [r4, #12]
  4049e4:	bd10      	pop	{r4, pc}
  4049e6:	bf00      	nop

004049e8 <__swrite>:
  4049e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4049ec:	4616      	mov	r6, r2
  4049ee:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  4049f2:	461f      	mov	r7, r3
  4049f4:	05d3      	lsls	r3, r2, #23
  4049f6:	460c      	mov	r4, r1
  4049f8:	4605      	mov	r5, r0
  4049fa:	d507      	bpl.n	404a0c <__swrite+0x24>
  4049fc:	2200      	movs	r2, #0
  4049fe:	2302      	movs	r3, #2
  404a00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404a04:	f000 f992 	bl	404d2c <_lseek_r>
  404a08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404a0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  404a10:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  404a14:	81a2      	strh	r2, [r4, #12]
  404a16:	463b      	mov	r3, r7
  404a18:	4632      	mov	r2, r6
  404a1a:	4628      	mov	r0, r5
  404a1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404a20:	f000 b8a4 	b.w	404b6c <_write_r>

00404a24 <__sseek>:
  404a24:	b510      	push	{r4, lr}
  404a26:	460c      	mov	r4, r1
  404a28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404a2c:	f000 f97e 	bl	404d2c <_lseek_r>
  404a30:	89a3      	ldrh	r3, [r4, #12]
  404a32:	1c42      	adds	r2, r0, #1
  404a34:	bf0e      	itee	eq
  404a36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  404a3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  404a3e:	6520      	strne	r0, [r4, #80]	; 0x50
  404a40:	81a3      	strh	r3, [r4, #12]
  404a42:	bd10      	pop	{r4, pc}

00404a44 <__sclose>:
  404a44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404a48:	f000 b8f8 	b.w	404c3c <_close_r>

00404a4c <__swbuf_r>:
  404a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404a4e:	460d      	mov	r5, r1
  404a50:	4614      	mov	r4, r2
  404a52:	4606      	mov	r6, r0
  404a54:	b110      	cbz	r0, 404a5c <__swbuf_r+0x10>
  404a56:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404a58:	2b00      	cmp	r3, #0
  404a5a:	d04b      	beq.n	404af4 <__swbuf_r+0xa8>
  404a5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404a60:	69a3      	ldr	r3, [r4, #24]
  404a62:	60a3      	str	r3, [r4, #8]
  404a64:	b291      	uxth	r1, r2
  404a66:	0708      	lsls	r0, r1, #28
  404a68:	d539      	bpl.n	404ade <__swbuf_r+0x92>
  404a6a:	6923      	ldr	r3, [r4, #16]
  404a6c:	2b00      	cmp	r3, #0
  404a6e:	d036      	beq.n	404ade <__swbuf_r+0x92>
  404a70:	b2ed      	uxtb	r5, r5
  404a72:	0489      	lsls	r1, r1, #18
  404a74:	462f      	mov	r7, r5
  404a76:	d515      	bpl.n	404aa4 <__swbuf_r+0x58>
  404a78:	6822      	ldr	r2, [r4, #0]
  404a7a:	6961      	ldr	r1, [r4, #20]
  404a7c:	1ad3      	subs	r3, r2, r3
  404a7e:	428b      	cmp	r3, r1
  404a80:	da1c      	bge.n	404abc <__swbuf_r+0x70>
  404a82:	3301      	adds	r3, #1
  404a84:	68a1      	ldr	r1, [r4, #8]
  404a86:	1c50      	adds	r0, r2, #1
  404a88:	3901      	subs	r1, #1
  404a8a:	60a1      	str	r1, [r4, #8]
  404a8c:	6020      	str	r0, [r4, #0]
  404a8e:	7015      	strb	r5, [r2, #0]
  404a90:	6962      	ldr	r2, [r4, #20]
  404a92:	429a      	cmp	r2, r3
  404a94:	d01a      	beq.n	404acc <__swbuf_r+0x80>
  404a96:	89a3      	ldrh	r3, [r4, #12]
  404a98:	07db      	lsls	r3, r3, #31
  404a9a:	d501      	bpl.n	404aa0 <__swbuf_r+0x54>
  404a9c:	2d0a      	cmp	r5, #10
  404a9e:	d015      	beq.n	404acc <__swbuf_r+0x80>
  404aa0:	4638      	mov	r0, r7
  404aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404aa4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  404aa6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  404aaa:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  404aae:	81a2      	strh	r2, [r4, #12]
  404ab0:	6822      	ldr	r2, [r4, #0]
  404ab2:	6661      	str	r1, [r4, #100]	; 0x64
  404ab4:	6961      	ldr	r1, [r4, #20]
  404ab6:	1ad3      	subs	r3, r2, r3
  404ab8:	428b      	cmp	r3, r1
  404aba:	dbe2      	blt.n	404a82 <__swbuf_r+0x36>
  404abc:	4621      	mov	r1, r4
  404abe:	4630      	mov	r0, r6
  404ac0:	f7fe fd36 	bl	403530 <_fflush_r>
  404ac4:	b940      	cbnz	r0, 404ad8 <__swbuf_r+0x8c>
  404ac6:	6822      	ldr	r2, [r4, #0]
  404ac8:	2301      	movs	r3, #1
  404aca:	e7db      	b.n	404a84 <__swbuf_r+0x38>
  404acc:	4621      	mov	r1, r4
  404ace:	4630      	mov	r0, r6
  404ad0:	f7fe fd2e 	bl	403530 <_fflush_r>
  404ad4:	2800      	cmp	r0, #0
  404ad6:	d0e3      	beq.n	404aa0 <__swbuf_r+0x54>
  404ad8:	f04f 37ff 	mov.w	r7, #4294967295
  404adc:	e7e0      	b.n	404aa0 <__swbuf_r+0x54>
  404ade:	4621      	mov	r1, r4
  404ae0:	4630      	mov	r0, r6
  404ae2:	f7fe fc11 	bl	403308 <__swsetup_r>
  404ae6:	2800      	cmp	r0, #0
  404ae8:	d1f6      	bne.n	404ad8 <__swbuf_r+0x8c>
  404aea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404aee:	6923      	ldr	r3, [r4, #16]
  404af0:	b291      	uxth	r1, r2
  404af2:	e7bd      	b.n	404a70 <__swbuf_r+0x24>
  404af4:	f7fe fdb0 	bl	403658 <__sinit>
  404af8:	e7b0      	b.n	404a5c <__swbuf_r+0x10>
  404afa:	bf00      	nop

00404afc <_wcrtomb_r>:
  404afc:	b5f0      	push	{r4, r5, r6, r7, lr}
  404afe:	4606      	mov	r6, r0
  404b00:	b085      	sub	sp, #20
  404b02:	461f      	mov	r7, r3
  404b04:	b189      	cbz	r1, 404b2a <_wcrtomb_r+0x2e>
  404b06:	4c10      	ldr	r4, [pc, #64]	; (404b48 <_wcrtomb_r+0x4c>)
  404b08:	4d10      	ldr	r5, [pc, #64]	; (404b4c <_wcrtomb_r+0x50>)
  404b0a:	6824      	ldr	r4, [r4, #0]
  404b0c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  404b0e:	2c00      	cmp	r4, #0
  404b10:	bf08      	it	eq
  404b12:	462c      	moveq	r4, r5
  404b14:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  404b18:	47a0      	blx	r4
  404b1a:	1c43      	adds	r3, r0, #1
  404b1c:	d103      	bne.n	404b26 <_wcrtomb_r+0x2a>
  404b1e:	2200      	movs	r2, #0
  404b20:	238a      	movs	r3, #138	; 0x8a
  404b22:	603a      	str	r2, [r7, #0]
  404b24:	6033      	str	r3, [r6, #0]
  404b26:	b005      	add	sp, #20
  404b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404b2a:	460c      	mov	r4, r1
  404b2c:	4906      	ldr	r1, [pc, #24]	; (404b48 <_wcrtomb_r+0x4c>)
  404b2e:	4a07      	ldr	r2, [pc, #28]	; (404b4c <_wcrtomb_r+0x50>)
  404b30:	6809      	ldr	r1, [r1, #0]
  404b32:	6b49      	ldr	r1, [r1, #52]	; 0x34
  404b34:	2900      	cmp	r1, #0
  404b36:	bf08      	it	eq
  404b38:	4611      	moveq	r1, r2
  404b3a:	4622      	mov	r2, r4
  404b3c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  404b40:	a901      	add	r1, sp, #4
  404b42:	47a0      	blx	r4
  404b44:	e7e9      	b.n	404b1a <_wcrtomb_r+0x1e>
  404b46:	bf00      	nop
  404b48:	20400010 	.word	0x20400010
  404b4c:	20400440 	.word	0x20400440

00404b50 <__ascii_wctomb>:
  404b50:	b121      	cbz	r1, 404b5c <__ascii_wctomb+0xc>
  404b52:	2aff      	cmp	r2, #255	; 0xff
  404b54:	d804      	bhi.n	404b60 <__ascii_wctomb+0x10>
  404b56:	700a      	strb	r2, [r1, #0]
  404b58:	2001      	movs	r0, #1
  404b5a:	4770      	bx	lr
  404b5c:	4608      	mov	r0, r1
  404b5e:	4770      	bx	lr
  404b60:	238a      	movs	r3, #138	; 0x8a
  404b62:	6003      	str	r3, [r0, #0]
  404b64:	f04f 30ff 	mov.w	r0, #4294967295
  404b68:	4770      	bx	lr
  404b6a:	bf00      	nop

00404b6c <_write_r>:
  404b6c:	b570      	push	{r4, r5, r6, lr}
  404b6e:	460d      	mov	r5, r1
  404b70:	4c08      	ldr	r4, [pc, #32]	; (404b94 <_write_r+0x28>)
  404b72:	4611      	mov	r1, r2
  404b74:	4606      	mov	r6, r0
  404b76:	461a      	mov	r2, r3
  404b78:	4628      	mov	r0, r5
  404b7a:	2300      	movs	r3, #0
  404b7c:	6023      	str	r3, [r4, #0]
  404b7e:	f7fb fcfd 	bl	40057c <_write>
  404b82:	1c43      	adds	r3, r0, #1
  404b84:	d000      	beq.n	404b88 <_write_r+0x1c>
  404b86:	bd70      	pop	{r4, r5, r6, pc}
  404b88:	6823      	ldr	r3, [r4, #0]
  404b8a:	2b00      	cmp	r3, #0
  404b8c:	d0fb      	beq.n	404b86 <_write_r+0x1a>
  404b8e:	6033      	str	r3, [r6, #0]
  404b90:	bd70      	pop	{r4, r5, r6, pc}
  404b92:	bf00      	nop
  404b94:	20400a98 	.word	0x20400a98

00404b98 <__register_exitproc>:
  404b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404b9c:	4c25      	ldr	r4, [pc, #148]	; (404c34 <__register_exitproc+0x9c>)
  404b9e:	6825      	ldr	r5, [r4, #0]
  404ba0:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  404ba4:	4606      	mov	r6, r0
  404ba6:	4688      	mov	r8, r1
  404ba8:	4692      	mov	sl, r2
  404baa:	4699      	mov	r9, r3
  404bac:	b3c4      	cbz	r4, 404c20 <__register_exitproc+0x88>
  404bae:	6860      	ldr	r0, [r4, #4]
  404bb0:	281f      	cmp	r0, #31
  404bb2:	dc17      	bgt.n	404be4 <__register_exitproc+0x4c>
  404bb4:	1c43      	adds	r3, r0, #1
  404bb6:	b176      	cbz	r6, 404bd6 <__register_exitproc+0x3e>
  404bb8:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  404bbc:	2201      	movs	r2, #1
  404bbe:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  404bc2:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  404bc6:	4082      	lsls	r2, r0
  404bc8:	4311      	orrs	r1, r2
  404bca:	2e02      	cmp	r6, #2
  404bcc:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  404bd0:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  404bd4:	d01e      	beq.n	404c14 <__register_exitproc+0x7c>
  404bd6:	3002      	adds	r0, #2
  404bd8:	6063      	str	r3, [r4, #4]
  404bda:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  404bde:	2000      	movs	r0, #0
  404be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404be4:	4b14      	ldr	r3, [pc, #80]	; (404c38 <__register_exitproc+0xa0>)
  404be6:	b303      	cbz	r3, 404c2a <__register_exitproc+0x92>
  404be8:	f44f 70c8 	mov.w	r0, #400	; 0x190
  404bec:	f7ff f912 	bl	403e14 <malloc>
  404bf0:	4604      	mov	r4, r0
  404bf2:	b1d0      	cbz	r0, 404c2a <__register_exitproc+0x92>
  404bf4:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  404bf8:	2700      	movs	r7, #0
  404bfa:	e880 0088 	stmia.w	r0, {r3, r7}
  404bfe:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  404c02:	4638      	mov	r0, r7
  404c04:	2301      	movs	r3, #1
  404c06:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  404c0a:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  404c0e:	2e00      	cmp	r6, #0
  404c10:	d0e1      	beq.n	404bd6 <__register_exitproc+0x3e>
  404c12:	e7d1      	b.n	404bb8 <__register_exitproc+0x20>
  404c14:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  404c18:	430a      	orrs	r2, r1
  404c1a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  404c1e:	e7da      	b.n	404bd6 <__register_exitproc+0x3e>
  404c20:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  404c24:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  404c28:	e7c1      	b.n	404bae <__register_exitproc+0x16>
  404c2a:	f04f 30ff 	mov.w	r0, #4294967295
  404c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404c32:	bf00      	nop
  404c34:	004051bc 	.word	0x004051bc
  404c38:	00403e15 	.word	0x00403e15

00404c3c <_close_r>:
  404c3c:	b538      	push	{r3, r4, r5, lr}
  404c3e:	4c07      	ldr	r4, [pc, #28]	; (404c5c <_close_r+0x20>)
  404c40:	2300      	movs	r3, #0
  404c42:	4605      	mov	r5, r0
  404c44:	4608      	mov	r0, r1
  404c46:	6023      	str	r3, [r4, #0]
  404c48:	f7fc feac 	bl	4019a4 <_close>
  404c4c:	1c43      	adds	r3, r0, #1
  404c4e:	d000      	beq.n	404c52 <_close_r+0x16>
  404c50:	bd38      	pop	{r3, r4, r5, pc}
  404c52:	6823      	ldr	r3, [r4, #0]
  404c54:	2b00      	cmp	r3, #0
  404c56:	d0fb      	beq.n	404c50 <_close_r+0x14>
  404c58:	602b      	str	r3, [r5, #0]
  404c5a:	bd38      	pop	{r3, r4, r5, pc}
  404c5c:	20400a98 	.word	0x20400a98

00404c60 <_fclose_r>:
  404c60:	b570      	push	{r4, r5, r6, lr}
  404c62:	b139      	cbz	r1, 404c74 <_fclose_r+0x14>
  404c64:	4605      	mov	r5, r0
  404c66:	460c      	mov	r4, r1
  404c68:	b108      	cbz	r0, 404c6e <_fclose_r+0xe>
  404c6a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404c6c:	b383      	cbz	r3, 404cd0 <_fclose_r+0x70>
  404c6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404c72:	b913      	cbnz	r3, 404c7a <_fclose_r+0x1a>
  404c74:	2600      	movs	r6, #0
  404c76:	4630      	mov	r0, r6
  404c78:	bd70      	pop	{r4, r5, r6, pc}
  404c7a:	4621      	mov	r1, r4
  404c7c:	4628      	mov	r0, r5
  404c7e:	f7fe fbb7 	bl	4033f0 <__sflush_r>
  404c82:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  404c84:	4606      	mov	r6, r0
  404c86:	b133      	cbz	r3, 404c96 <_fclose_r+0x36>
  404c88:	69e1      	ldr	r1, [r4, #28]
  404c8a:	4628      	mov	r0, r5
  404c8c:	4798      	blx	r3
  404c8e:	2800      	cmp	r0, #0
  404c90:	bfb8      	it	lt
  404c92:	f04f 36ff 	movlt.w	r6, #4294967295
  404c96:	89a3      	ldrh	r3, [r4, #12]
  404c98:	061b      	lsls	r3, r3, #24
  404c9a:	d41c      	bmi.n	404cd6 <_fclose_r+0x76>
  404c9c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404c9e:	b141      	cbz	r1, 404cb2 <_fclose_r+0x52>
  404ca0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404ca4:	4299      	cmp	r1, r3
  404ca6:	d002      	beq.n	404cae <_fclose_r+0x4e>
  404ca8:	4628      	mov	r0, r5
  404caa:	f7fe fdab 	bl	403804 <_free_r>
  404cae:	2300      	movs	r3, #0
  404cb0:	6323      	str	r3, [r4, #48]	; 0x30
  404cb2:	6c61      	ldr	r1, [r4, #68]	; 0x44
  404cb4:	b121      	cbz	r1, 404cc0 <_fclose_r+0x60>
  404cb6:	4628      	mov	r0, r5
  404cb8:	f7fe fda4 	bl	403804 <_free_r>
  404cbc:	2300      	movs	r3, #0
  404cbe:	6463      	str	r3, [r4, #68]	; 0x44
  404cc0:	f7fe fcd0 	bl	403664 <__sfp_lock_acquire>
  404cc4:	2300      	movs	r3, #0
  404cc6:	81a3      	strh	r3, [r4, #12]
  404cc8:	f7fe fcce 	bl	403668 <__sfp_lock_release>
  404ccc:	4630      	mov	r0, r6
  404cce:	bd70      	pop	{r4, r5, r6, pc}
  404cd0:	f7fe fcc2 	bl	403658 <__sinit>
  404cd4:	e7cb      	b.n	404c6e <_fclose_r+0xe>
  404cd6:	6921      	ldr	r1, [r4, #16]
  404cd8:	4628      	mov	r0, r5
  404cda:	f7fe fd93 	bl	403804 <_free_r>
  404cde:	e7dd      	b.n	404c9c <_fclose_r+0x3c>

00404ce0 <_fstat_r>:
  404ce0:	b538      	push	{r3, r4, r5, lr}
  404ce2:	460b      	mov	r3, r1
  404ce4:	4c07      	ldr	r4, [pc, #28]	; (404d04 <_fstat_r+0x24>)
  404ce6:	4605      	mov	r5, r0
  404ce8:	4611      	mov	r1, r2
  404cea:	4618      	mov	r0, r3
  404cec:	2300      	movs	r3, #0
  404cee:	6023      	str	r3, [r4, #0]
  404cf0:	f7fc fe64 	bl	4019bc <_fstat>
  404cf4:	1c43      	adds	r3, r0, #1
  404cf6:	d000      	beq.n	404cfa <_fstat_r+0x1a>
  404cf8:	bd38      	pop	{r3, r4, r5, pc}
  404cfa:	6823      	ldr	r3, [r4, #0]
  404cfc:	2b00      	cmp	r3, #0
  404cfe:	d0fb      	beq.n	404cf8 <_fstat_r+0x18>
  404d00:	602b      	str	r3, [r5, #0]
  404d02:	bd38      	pop	{r3, r4, r5, pc}
  404d04:	20400a98 	.word	0x20400a98

00404d08 <_isatty_r>:
  404d08:	b538      	push	{r3, r4, r5, lr}
  404d0a:	4c07      	ldr	r4, [pc, #28]	; (404d28 <_isatty_r+0x20>)
  404d0c:	2300      	movs	r3, #0
  404d0e:	4605      	mov	r5, r0
  404d10:	4608      	mov	r0, r1
  404d12:	6023      	str	r3, [r4, #0]
  404d14:	f7fc fe62 	bl	4019dc <_isatty>
  404d18:	1c43      	adds	r3, r0, #1
  404d1a:	d000      	beq.n	404d1e <_isatty_r+0x16>
  404d1c:	bd38      	pop	{r3, r4, r5, pc}
  404d1e:	6823      	ldr	r3, [r4, #0]
  404d20:	2b00      	cmp	r3, #0
  404d22:	d0fb      	beq.n	404d1c <_isatty_r+0x14>
  404d24:	602b      	str	r3, [r5, #0]
  404d26:	bd38      	pop	{r3, r4, r5, pc}
  404d28:	20400a98 	.word	0x20400a98

00404d2c <_lseek_r>:
  404d2c:	b570      	push	{r4, r5, r6, lr}
  404d2e:	460d      	mov	r5, r1
  404d30:	4c08      	ldr	r4, [pc, #32]	; (404d54 <_lseek_r+0x28>)
  404d32:	4611      	mov	r1, r2
  404d34:	4606      	mov	r6, r0
  404d36:	461a      	mov	r2, r3
  404d38:	4628      	mov	r0, r5
  404d3a:	2300      	movs	r3, #0
  404d3c:	6023      	str	r3, [r4, #0]
  404d3e:	f7fc fe58 	bl	4019f2 <_lseek>
  404d42:	1c43      	adds	r3, r0, #1
  404d44:	d000      	beq.n	404d48 <_lseek_r+0x1c>
  404d46:	bd70      	pop	{r4, r5, r6, pc}
  404d48:	6823      	ldr	r3, [r4, #0]
  404d4a:	2b00      	cmp	r3, #0
  404d4c:	d0fb      	beq.n	404d46 <_lseek_r+0x1a>
  404d4e:	6033      	str	r3, [r6, #0]
  404d50:	bd70      	pop	{r4, r5, r6, pc}
  404d52:	bf00      	nop
  404d54:	20400a98 	.word	0x20400a98

00404d58 <_read_r>:
  404d58:	b570      	push	{r4, r5, r6, lr}
  404d5a:	460d      	mov	r5, r1
  404d5c:	4c08      	ldr	r4, [pc, #32]	; (404d80 <_read_r+0x28>)
  404d5e:	4611      	mov	r1, r2
  404d60:	4606      	mov	r6, r0
  404d62:	461a      	mov	r2, r3
  404d64:	4628      	mov	r0, r5
  404d66:	2300      	movs	r3, #0
  404d68:	6023      	str	r3, [r4, #0]
  404d6a:	f7fb fbdd 	bl	400528 <_read>
  404d6e:	1c43      	adds	r3, r0, #1
  404d70:	d000      	beq.n	404d74 <_read_r+0x1c>
  404d72:	bd70      	pop	{r4, r5, r6, pc}
  404d74:	6823      	ldr	r3, [r4, #0]
  404d76:	2b00      	cmp	r3, #0
  404d78:	d0fb      	beq.n	404d72 <_read_r+0x1a>
  404d7a:	6033      	str	r3, [r6, #0]
  404d7c:	bd70      	pop	{r4, r5, r6, pc}
  404d7e:	bf00      	nop
  404d80:	20400a98 	.word	0x20400a98

00404d84 <__aeabi_uldivmod>:
  404d84:	b953      	cbnz	r3, 404d9c <__aeabi_uldivmod+0x18>
  404d86:	b94a      	cbnz	r2, 404d9c <__aeabi_uldivmod+0x18>
  404d88:	2900      	cmp	r1, #0
  404d8a:	bf08      	it	eq
  404d8c:	2800      	cmpeq	r0, #0
  404d8e:	bf1c      	itt	ne
  404d90:	f04f 31ff 	movne.w	r1, #4294967295
  404d94:	f04f 30ff 	movne.w	r0, #4294967295
  404d98:	f000 b97a 	b.w	405090 <__aeabi_idiv0>
  404d9c:	f1ad 0c08 	sub.w	ip, sp, #8
  404da0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  404da4:	f000 f806 	bl	404db4 <__udivmoddi4>
  404da8:	f8dd e004 	ldr.w	lr, [sp, #4]
  404dac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404db0:	b004      	add	sp, #16
  404db2:	4770      	bx	lr

00404db4 <__udivmoddi4>:
  404db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404db8:	468c      	mov	ip, r1
  404dba:	460d      	mov	r5, r1
  404dbc:	4604      	mov	r4, r0
  404dbe:	9e08      	ldr	r6, [sp, #32]
  404dc0:	2b00      	cmp	r3, #0
  404dc2:	d151      	bne.n	404e68 <__udivmoddi4+0xb4>
  404dc4:	428a      	cmp	r2, r1
  404dc6:	4617      	mov	r7, r2
  404dc8:	d96d      	bls.n	404ea6 <__udivmoddi4+0xf2>
  404dca:	fab2 fe82 	clz	lr, r2
  404dce:	f1be 0f00 	cmp.w	lr, #0
  404dd2:	d00b      	beq.n	404dec <__udivmoddi4+0x38>
  404dd4:	f1ce 0c20 	rsb	ip, lr, #32
  404dd8:	fa01 f50e 	lsl.w	r5, r1, lr
  404ddc:	fa20 fc0c 	lsr.w	ip, r0, ip
  404de0:	fa02 f70e 	lsl.w	r7, r2, lr
  404de4:	ea4c 0c05 	orr.w	ip, ip, r5
  404de8:	fa00 f40e 	lsl.w	r4, r0, lr
  404dec:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  404df0:	0c25      	lsrs	r5, r4, #16
  404df2:	fbbc f8fa 	udiv	r8, ip, sl
  404df6:	fa1f f987 	uxth.w	r9, r7
  404dfa:	fb0a cc18 	mls	ip, sl, r8, ip
  404dfe:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  404e02:	fb08 f309 	mul.w	r3, r8, r9
  404e06:	42ab      	cmp	r3, r5
  404e08:	d90a      	bls.n	404e20 <__udivmoddi4+0x6c>
  404e0a:	19ed      	adds	r5, r5, r7
  404e0c:	f108 32ff 	add.w	r2, r8, #4294967295
  404e10:	f080 8123 	bcs.w	40505a <__udivmoddi4+0x2a6>
  404e14:	42ab      	cmp	r3, r5
  404e16:	f240 8120 	bls.w	40505a <__udivmoddi4+0x2a6>
  404e1a:	f1a8 0802 	sub.w	r8, r8, #2
  404e1e:	443d      	add	r5, r7
  404e20:	1aed      	subs	r5, r5, r3
  404e22:	b2a4      	uxth	r4, r4
  404e24:	fbb5 f0fa 	udiv	r0, r5, sl
  404e28:	fb0a 5510 	mls	r5, sl, r0, r5
  404e2c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  404e30:	fb00 f909 	mul.w	r9, r0, r9
  404e34:	45a1      	cmp	r9, r4
  404e36:	d909      	bls.n	404e4c <__udivmoddi4+0x98>
  404e38:	19e4      	adds	r4, r4, r7
  404e3a:	f100 33ff 	add.w	r3, r0, #4294967295
  404e3e:	f080 810a 	bcs.w	405056 <__udivmoddi4+0x2a2>
  404e42:	45a1      	cmp	r9, r4
  404e44:	f240 8107 	bls.w	405056 <__udivmoddi4+0x2a2>
  404e48:	3802      	subs	r0, #2
  404e4a:	443c      	add	r4, r7
  404e4c:	eba4 0409 	sub.w	r4, r4, r9
  404e50:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  404e54:	2100      	movs	r1, #0
  404e56:	2e00      	cmp	r6, #0
  404e58:	d061      	beq.n	404f1e <__udivmoddi4+0x16a>
  404e5a:	fa24 f40e 	lsr.w	r4, r4, lr
  404e5e:	2300      	movs	r3, #0
  404e60:	6034      	str	r4, [r6, #0]
  404e62:	6073      	str	r3, [r6, #4]
  404e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404e68:	428b      	cmp	r3, r1
  404e6a:	d907      	bls.n	404e7c <__udivmoddi4+0xc8>
  404e6c:	2e00      	cmp	r6, #0
  404e6e:	d054      	beq.n	404f1a <__udivmoddi4+0x166>
  404e70:	2100      	movs	r1, #0
  404e72:	e886 0021 	stmia.w	r6, {r0, r5}
  404e76:	4608      	mov	r0, r1
  404e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404e7c:	fab3 f183 	clz	r1, r3
  404e80:	2900      	cmp	r1, #0
  404e82:	f040 808e 	bne.w	404fa2 <__udivmoddi4+0x1ee>
  404e86:	42ab      	cmp	r3, r5
  404e88:	d302      	bcc.n	404e90 <__udivmoddi4+0xdc>
  404e8a:	4282      	cmp	r2, r0
  404e8c:	f200 80fa 	bhi.w	405084 <__udivmoddi4+0x2d0>
  404e90:	1a84      	subs	r4, r0, r2
  404e92:	eb65 0503 	sbc.w	r5, r5, r3
  404e96:	2001      	movs	r0, #1
  404e98:	46ac      	mov	ip, r5
  404e9a:	2e00      	cmp	r6, #0
  404e9c:	d03f      	beq.n	404f1e <__udivmoddi4+0x16a>
  404e9e:	e886 1010 	stmia.w	r6, {r4, ip}
  404ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404ea6:	b912      	cbnz	r2, 404eae <__udivmoddi4+0xfa>
  404ea8:	2701      	movs	r7, #1
  404eaa:	fbb7 f7f2 	udiv	r7, r7, r2
  404eae:	fab7 fe87 	clz	lr, r7
  404eb2:	f1be 0f00 	cmp.w	lr, #0
  404eb6:	d134      	bne.n	404f22 <__udivmoddi4+0x16e>
  404eb8:	1beb      	subs	r3, r5, r7
  404eba:	0c3a      	lsrs	r2, r7, #16
  404ebc:	fa1f fc87 	uxth.w	ip, r7
  404ec0:	2101      	movs	r1, #1
  404ec2:	fbb3 f8f2 	udiv	r8, r3, r2
  404ec6:	0c25      	lsrs	r5, r4, #16
  404ec8:	fb02 3318 	mls	r3, r2, r8, r3
  404ecc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  404ed0:	fb0c f308 	mul.w	r3, ip, r8
  404ed4:	42ab      	cmp	r3, r5
  404ed6:	d907      	bls.n	404ee8 <__udivmoddi4+0x134>
  404ed8:	19ed      	adds	r5, r5, r7
  404eda:	f108 30ff 	add.w	r0, r8, #4294967295
  404ede:	d202      	bcs.n	404ee6 <__udivmoddi4+0x132>
  404ee0:	42ab      	cmp	r3, r5
  404ee2:	f200 80d1 	bhi.w	405088 <__udivmoddi4+0x2d4>
  404ee6:	4680      	mov	r8, r0
  404ee8:	1aed      	subs	r5, r5, r3
  404eea:	b2a3      	uxth	r3, r4
  404eec:	fbb5 f0f2 	udiv	r0, r5, r2
  404ef0:	fb02 5510 	mls	r5, r2, r0, r5
  404ef4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  404ef8:	fb0c fc00 	mul.w	ip, ip, r0
  404efc:	45a4      	cmp	ip, r4
  404efe:	d907      	bls.n	404f10 <__udivmoddi4+0x15c>
  404f00:	19e4      	adds	r4, r4, r7
  404f02:	f100 33ff 	add.w	r3, r0, #4294967295
  404f06:	d202      	bcs.n	404f0e <__udivmoddi4+0x15a>
  404f08:	45a4      	cmp	ip, r4
  404f0a:	f200 80b8 	bhi.w	40507e <__udivmoddi4+0x2ca>
  404f0e:	4618      	mov	r0, r3
  404f10:	eba4 040c 	sub.w	r4, r4, ip
  404f14:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  404f18:	e79d      	b.n	404e56 <__udivmoddi4+0xa2>
  404f1a:	4631      	mov	r1, r6
  404f1c:	4630      	mov	r0, r6
  404f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404f22:	f1ce 0420 	rsb	r4, lr, #32
  404f26:	fa05 f30e 	lsl.w	r3, r5, lr
  404f2a:	fa07 f70e 	lsl.w	r7, r7, lr
  404f2e:	fa20 f804 	lsr.w	r8, r0, r4
  404f32:	0c3a      	lsrs	r2, r7, #16
  404f34:	fa25 f404 	lsr.w	r4, r5, r4
  404f38:	ea48 0803 	orr.w	r8, r8, r3
  404f3c:	fbb4 f1f2 	udiv	r1, r4, r2
  404f40:	ea4f 4518 	mov.w	r5, r8, lsr #16
  404f44:	fb02 4411 	mls	r4, r2, r1, r4
  404f48:	fa1f fc87 	uxth.w	ip, r7
  404f4c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  404f50:	fb01 f30c 	mul.w	r3, r1, ip
  404f54:	42ab      	cmp	r3, r5
  404f56:	fa00 f40e 	lsl.w	r4, r0, lr
  404f5a:	d909      	bls.n	404f70 <__udivmoddi4+0x1bc>
  404f5c:	19ed      	adds	r5, r5, r7
  404f5e:	f101 30ff 	add.w	r0, r1, #4294967295
  404f62:	f080 808a 	bcs.w	40507a <__udivmoddi4+0x2c6>
  404f66:	42ab      	cmp	r3, r5
  404f68:	f240 8087 	bls.w	40507a <__udivmoddi4+0x2c6>
  404f6c:	3902      	subs	r1, #2
  404f6e:	443d      	add	r5, r7
  404f70:	1aeb      	subs	r3, r5, r3
  404f72:	fa1f f588 	uxth.w	r5, r8
  404f76:	fbb3 f0f2 	udiv	r0, r3, r2
  404f7a:	fb02 3310 	mls	r3, r2, r0, r3
  404f7e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  404f82:	fb00 f30c 	mul.w	r3, r0, ip
  404f86:	42ab      	cmp	r3, r5
  404f88:	d907      	bls.n	404f9a <__udivmoddi4+0x1e6>
  404f8a:	19ed      	adds	r5, r5, r7
  404f8c:	f100 38ff 	add.w	r8, r0, #4294967295
  404f90:	d26f      	bcs.n	405072 <__udivmoddi4+0x2be>
  404f92:	42ab      	cmp	r3, r5
  404f94:	d96d      	bls.n	405072 <__udivmoddi4+0x2be>
  404f96:	3802      	subs	r0, #2
  404f98:	443d      	add	r5, r7
  404f9a:	1aeb      	subs	r3, r5, r3
  404f9c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  404fa0:	e78f      	b.n	404ec2 <__udivmoddi4+0x10e>
  404fa2:	f1c1 0720 	rsb	r7, r1, #32
  404fa6:	fa22 f807 	lsr.w	r8, r2, r7
  404faa:	408b      	lsls	r3, r1
  404fac:	fa05 f401 	lsl.w	r4, r5, r1
  404fb0:	ea48 0303 	orr.w	r3, r8, r3
  404fb4:	fa20 fe07 	lsr.w	lr, r0, r7
  404fb8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  404fbc:	40fd      	lsrs	r5, r7
  404fbe:	ea4e 0e04 	orr.w	lr, lr, r4
  404fc2:	fbb5 f9fc 	udiv	r9, r5, ip
  404fc6:	ea4f 441e 	mov.w	r4, lr, lsr #16
  404fca:	fb0c 5519 	mls	r5, ip, r9, r5
  404fce:	fa1f f883 	uxth.w	r8, r3
  404fd2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  404fd6:	fb09 f408 	mul.w	r4, r9, r8
  404fda:	42ac      	cmp	r4, r5
  404fdc:	fa02 f201 	lsl.w	r2, r2, r1
  404fe0:	fa00 fa01 	lsl.w	sl, r0, r1
  404fe4:	d908      	bls.n	404ff8 <__udivmoddi4+0x244>
  404fe6:	18ed      	adds	r5, r5, r3
  404fe8:	f109 30ff 	add.w	r0, r9, #4294967295
  404fec:	d243      	bcs.n	405076 <__udivmoddi4+0x2c2>
  404fee:	42ac      	cmp	r4, r5
  404ff0:	d941      	bls.n	405076 <__udivmoddi4+0x2c2>
  404ff2:	f1a9 0902 	sub.w	r9, r9, #2
  404ff6:	441d      	add	r5, r3
  404ff8:	1b2d      	subs	r5, r5, r4
  404ffa:	fa1f fe8e 	uxth.w	lr, lr
  404ffe:	fbb5 f0fc 	udiv	r0, r5, ip
  405002:	fb0c 5510 	mls	r5, ip, r0, r5
  405006:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40500a:	fb00 f808 	mul.w	r8, r0, r8
  40500e:	45a0      	cmp	r8, r4
  405010:	d907      	bls.n	405022 <__udivmoddi4+0x26e>
  405012:	18e4      	adds	r4, r4, r3
  405014:	f100 35ff 	add.w	r5, r0, #4294967295
  405018:	d229      	bcs.n	40506e <__udivmoddi4+0x2ba>
  40501a:	45a0      	cmp	r8, r4
  40501c:	d927      	bls.n	40506e <__udivmoddi4+0x2ba>
  40501e:	3802      	subs	r0, #2
  405020:	441c      	add	r4, r3
  405022:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  405026:	eba4 0408 	sub.w	r4, r4, r8
  40502a:	fba0 8902 	umull	r8, r9, r0, r2
  40502e:	454c      	cmp	r4, r9
  405030:	46c6      	mov	lr, r8
  405032:	464d      	mov	r5, r9
  405034:	d315      	bcc.n	405062 <__udivmoddi4+0x2ae>
  405036:	d012      	beq.n	40505e <__udivmoddi4+0x2aa>
  405038:	b156      	cbz	r6, 405050 <__udivmoddi4+0x29c>
  40503a:	ebba 030e 	subs.w	r3, sl, lr
  40503e:	eb64 0405 	sbc.w	r4, r4, r5
  405042:	fa04 f707 	lsl.w	r7, r4, r7
  405046:	40cb      	lsrs	r3, r1
  405048:	431f      	orrs	r7, r3
  40504a:	40cc      	lsrs	r4, r1
  40504c:	6037      	str	r7, [r6, #0]
  40504e:	6074      	str	r4, [r6, #4]
  405050:	2100      	movs	r1, #0
  405052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405056:	4618      	mov	r0, r3
  405058:	e6f8      	b.n	404e4c <__udivmoddi4+0x98>
  40505a:	4690      	mov	r8, r2
  40505c:	e6e0      	b.n	404e20 <__udivmoddi4+0x6c>
  40505e:	45c2      	cmp	sl, r8
  405060:	d2ea      	bcs.n	405038 <__udivmoddi4+0x284>
  405062:	ebb8 0e02 	subs.w	lr, r8, r2
  405066:	eb69 0503 	sbc.w	r5, r9, r3
  40506a:	3801      	subs	r0, #1
  40506c:	e7e4      	b.n	405038 <__udivmoddi4+0x284>
  40506e:	4628      	mov	r0, r5
  405070:	e7d7      	b.n	405022 <__udivmoddi4+0x26e>
  405072:	4640      	mov	r0, r8
  405074:	e791      	b.n	404f9a <__udivmoddi4+0x1e6>
  405076:	4681      	mov	r9, r0
  405078:	e7be      	b.n	404ff8 <__udivmoddi4+0x244>
  40507a:	4601      	mov	r1, r0
  40507c:	e778      	b.n	404f70 <__udivmoddi4+0x1bc>
  40507e:	3802      	subs	r0, #2
  405080:	443c      	add	r4, r7
  405082:	e745      	b.n	404f10 <__udivmoddi4+0x15c>
  405084:	4608      	mov	r0, r1
  405086:	e708      	b.n	404e9a <__udivmoddi4+0xe6>
  405088:	f1a8 0802 	sub.w	r8, r8, #2
  40508c:	443d      	add	r5, r7
  40508e:	e72b      	b.n	404ee8 <__udivmoddi4+0x134>

00405090 <__aeabi_idiv0>:
  405090:	4770      	bx	lr
  405092:	bf00      	nop
  405094:	0001c200 	.word	0x0001c200
  405098:	000000c0 	.word	0x000000c0
  40509c:	00000800 	.word	0x00000800
  4050a0:	00000000 	.word	0x00000000
  4050a4:	47202d2d 	.word	0x47202d2d
  4050a8:	69747465 	.word	0x69747465
  4050ac:	5320676e 	.word	0x5320676e
  4050b0:	74726174 	.word	0x74726174
  4050b4:	45206465 	.word	0x45206465
  4050b8:	706d6178 	.word	0x706d6178
  4050bc:	2d20656c 	.word	0x2d20656c
  4050c0:	2d0a0d2d 	.word	0x2d0a0d2d
  4050c4:	4153202d 	.word	0x4153202d
  4050c8:	3037454d 	.word	0x3037454d
  4050cc:	4c50582d 	.word	0x4c50582d
  4050d0:	2d2d2044 	.word	0x2d2d2044
  4050d4:	2d2d0a0d 	.word	0x2d2d0a0d
  4050d8:	6d6f4320 	.word	0x6d6f4320
  4050dc:	656c6970 	.word	0x656c6970
  4050e0:	4d203a64 	.word	0x4d203a64
  4050e4:	32207961 	.word	0x32207961
  4050e8:	30322032 	.word	0x30322032
  4050ec:	31203731 	.word	0x31203731
  4050f0:	38303a36 	.word	0x38303a36
  4050f4:	2039353a 	.word	0x2039353a
  4050f8:	000d2d2d 	.word	0x000d2d2d
  4050fc:	00006425 	.word	0x00006425
  405100:	666e6f43 	.word	0x666e6f43
  405104:	72756769 	.word	0x72756769
  405108:	79732065 	.word	0x79732065
  40510c:	6d657473 	.word	0x6d657473
  405110:	63697420 	.word	0x63697420
  405114:	6f74206b 	.word	0x6f74206b
  405118:	74656720 	.word	0x74656720
  40511c:	736d3120 	.word	0x736d3120
  405120:	63697420 	.word	0x63697420
  405124:	6570206b 	.word	0x6570206b
  405128:	646f6972 	.word	0x646f6972
  40512c:	00000d2e 	.word	0x00000d2e
  405130:	202d462d 	.word	0x202d462d
  405134:	74737953 	.word	0x74737953
  405138:	206b6369 	.word	0x206b6369
  40513c:	666e6f63 	.word	0x666e6f63
  405140:	72756769 	.word	0x72756769
  405144:	6f697461 	.word	0x6f697461
  405148:	7265206e 	.word	0x7265206e
  40514c:	0d726f72 	.word	0x0d726f72
  405150:	00000000 	.word	0x00000000
  405154:	666e6f43 	.word	0x666e6f43
  405158:	72756769 	.word	0x72756769
  40515c:	75622065 	.word	0x75622065
  405160:	6e6f7474 	.word	0x6e6f7474
  405164:	69772073 	.word	0x69772073
  405168:	64206874 	.word	0x64206874
  40516c:	756f6265 	.word	0x756f6265
  405170:	6e69636e 	.word	0x6e69636e
  405174:	000d2e67 	.word	0x000d2e67
  405178:	3044454c 	.word	0x3044454c
  40517c:	65792820 	.word	0x65792820
  405180:	776f6c6c 	.word	0x776f6c6c
  405184:	00000029 	.word	0x00000029
  405188:	00305753 	.word	0x00305753
  40518c:	73657250 	.word	0x73657250
  405190:	73252073 	.word	0x73252073
  405194:	206f7420 	.word	0x206f7420
  405198:	72617453 	.word	0x72617453
  40519c:	74532f74 	.word	0x74532f74
  4051a0:	7420706f 	.word	0x7420706f
  4051a4:	25206568 	.word	0x25206568
  4051a8:	6c622073 	.word	0x6c622073
  4051ac:	696b6e69 	.word	0x696b6e69
  4051b0:	0d2e676e 	.word	0x0d2e676e
  4051b4:	0000000a 	.word	0x0000000a
  4051b8:	00002031 	.word	0x00002031

004051bc <_global_impure_ptr>:
  4051bc:	20400018 0000000a 33323130 37363534     ..@ ....01234567
  4051cc:	42413938 46454443 00000000 33323130     89ABCDEF....0123
  4051dc:	37363534 62613938 66656463 00000000     456789abcdef....
  4051ec:	6c756e28 0000296c                       (null)..

004051f4 <blanks.7202>:
  4051f4:	20202020 20202020 20202020 20202020                     

00405204 <zeroes.7203>:
  405204:	30303030 30303030 30303030 30303030     0000000000000000
  405214:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00405224 <_ctype_>:
  405224:	20202000 20202020 28282020 20282828     .         ((((( 
  405234:	20202020 20202020 20202020 20202020                     
  405244:	10108820 10101010 10101010 10101010      ...............
  405254:	04040410 04040404 10040404 10101010     ................
  405264:	41411010 41414141 01010101 01010101     ..AAAAAA........
  405274:	01010101 01010101 01010101 10101010     ................
  405284:	42421010 42424242 02020202 02020202     ..BBBBBB........
  405294:	02020202 02020202 02020202 10101010     ................
  4052a4:	00000020 00000000 00000000 00000000      ...............
	...

00405328 <_init>:
  405328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40532a:	bf00      	nop
  40532c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40532e:	bc08      	pop	{r3}
  405330:	469e      	mov	lr, r3
  405332:	4770      	bx	lr

00405334 <__init_array_start>:
  405334:	004033d1 	.word	0x004033d1

00405338 <__frame_dummy_init_array_entry>:
  405338:	00400165                                e.@.

0040533c <_fini>:
  40533c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40533e:	bf00      	nop
  405340:	bcf8      	pop	{r3, r4, r5, r6, r7}
  405342:	bc08      	pop	{r3}
  405344:	469e      	mov	lr, r3
  405346:	4770      	bx	lr

00405348 <__fini_array_start>:
  405348:	00400141 	.word	0x00400141
