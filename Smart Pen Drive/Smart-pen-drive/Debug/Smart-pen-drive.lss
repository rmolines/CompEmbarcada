
Smart-pen-drive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000ee2c  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040ee2c  0040ee2c  0001ee2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009f4  20400000  0040ee34  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000018dc  204009f4  0040f828  000209f4  2**2
                  ALLOC
  4 .stack        00002000  204022d0  00411104  000209f4  2**0
                  ALLOC
  5 .heap         00000200  204042d0  00413104  000209f4  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209f4  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020a22  2**0
                  CONTENTS, READONLY
  8 .debug_info   00038f8c  00000000  00000000  00020a7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00007410  00000000  00000000  00059a07  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001800a  00000000  00000000  00060e17  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001620  00000000  00000000  00078e21  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001a48  00000000  00000000  0007a441  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002ac6f  00000000  00000000  0007be89  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001e18e  00000000  00000000  000a6af8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009acfd  00000000  00000000  000c4c86  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004d98  00000000  00000000  0015f984  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	d0 42 40 20 31 69 40 00 2f 69 40 00 2f 69 40 00     .B@ 1i@./i@./i@.
  400010:	2f 69 40 00 2f 69 40 00 2f 69 40 00 00 00 00 00     /i@./i@./i@.....
	...
  40002c:	2f 69 40 00 2f 69 40 00 00 00 00 00 2f 69 40 00     /i@./i@...../i@.
  40003c:	2f 69 40 00 2f 69 40 00 2f 69 40 00 2f 69 40 00     /i@./i@./i@./i@.
  40004c:	2f 69 40 00 2f 69 40 00 2f 69 40 00 2f 69 40 00     /i@./i@./i@./i@.
  40005c:	2f 69 40 00 2f 69 40 00 00 00 00 00 49 64 40 00     /i@./i@.....Id@.
  40006c:	5d 64 40 00 71 64 40 00 2f 69 40 00 2f 69 40 00     ]d@.qd@./i@./i@.
  40007c:	2f 69 40 00 85 64 40 00 99 64 40 00 2f 69 40 00     /i@..d@..d@./i@.
  40008c:	2f 69 40 00 2f 69 40 00 2f 69 40 00 2f 69 40 00     /i@./i@./i@./i@.
  40009c:	2f 69 40 00 2f 69 40 00 2f 69 40 00 2f 69 40 00     /i@./i@./i@./i@.
  4000ac:	2f 69 40 00 2f 69 40 00 2f 69 40 00 2f 69 40 00     /i@./i@./i@./i@.
  4000bc:	2f 69 40 00 2f 69 40 00 2f 69 40 00 2f 69 40 00     /i@./i@./i@./i@.
  4000cc:	2f 69 40 00 00 00 00 00 2f 69 40 00 00 00 00 00     /i@...../i@.....
  4000dc:	2f 69 40 00 2f 69 40 00 2f 69 40 00 2f 69 40 00     /i@./i@./i@./i@.
  4000ec:	2f 69 40 00 2f 69 40 00 2f 69 40 00 2f 69 40 00     /i@./i@./i@./i@.
  4000fc:	2f 69 40 00 2f 69 40 00 2f 69 40 00 2f 69 40 00     /i@./i@./i@./i@.
  40010c:	2f 69 40 00 2f 69 40 00 00 00 00 00 00 00 00 00     /i@./i@.........
  40011c:	00 00 00 00 2f 69 40 00 2f 69 40 00 2f 69 40 00     ..../i@./i@./i@.
  40012c:	2f 69 40 00 2f 69 40 00 00 00 00 00 2f 69 40 00     /i@./i@...../i@.
  40013c:	2f 69 40 00                                         /i@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009f4 	.word	0x204009f4
  40015c:	00000000 	.word	0x00000000
  400160:	0040ee34 	.word	0x0040ee34

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	0040ee34 	.word	0x0040ee34
  4001a0:	204009f8 	.word	0x204009f8
  4001a4:	0040ee34 	.word	0x0040ee34
  4001a8:	00000000 	.word	0x00000000

004001ac <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
  4001ac:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
  4001ae:	4b07      	ldr	r3, [pc, #28]	; (4001cc <sd_mmc_configure_slot+0x20>)
  4001b0:	6819      	ldr	r1, [r3, #0]
  4001b2:	f891 3022 	ldrb.w	r3, [r1, #34]	; 0x22
  4001b6:	3300      	adds	r3, #0
  4001b8:	bf18      	it	ne
  4001ba:	2301      	movne	r3, #1
  4001bc:	7c4a      	ldrb	r2, [r1, #17]
  4001be:	6809      	ldr	r1, [r1, #0]
  4001c0:	4803      	ldr	r0, [pc, #12]	; (4001d0 <sd_mmc_configure_slot+0x24>)
  4001c2:	7800      	ldrb	r0, [r0, #0]
  4001c4:	4c03      	ldr	r4, [pc, #12]	; (4001d4 <sd_mmc_configure_slot+0x28>)
  4001c6:	47a0      	blx	r4
  4001c8:	bd10      	pop	{r4, pc}
  4001ca:	bf00      	nop
  4001cc:	20400a10 	.word	0x20400a10
  4001d0:	20400a19 	.word	0x20400a19
  4001d4:	00401191 	.word	0x00401191

004001d8 <sd_mmc_select_slot>:
	if (slot >= SD_MMC_MEM_CNT) {
  4001d8:	b108      	cbz	r0, 4001de <sd_mmc_select_slot+0x6>
		return SD_MMC_ERR_SLOT;
  4001da:	2004      	movs	r0, #4
  4001dc:	4770      	bx	lr
	if (ioport_get_pin_level(sd_mmc_cards[slot].cd_gpio)
  4001de:	4b32      	ldr	r3, [pc, #200]	; (4002a8 <sd_mmc_select_slot+0xd0>)
  4001e0:	689a      	ldr	r2, [r3, #8]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4001e2:	4b32      	ldr	r3, [pc, #200]	; (4002ac <sd_mmc_select_slot+0xd4>)
  4001e4:	eb03 1352 	add.w	r3, r3, r2, lsr #5
  4001e8:	025b      	lsls	r3, r3, #9
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4001ea:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
	return 1U << (pin & 0x1F);
  4001ec:	f002 021f 	and.w	r2, r2, #31
  4001f0:	2301      	movs	r3, #1
  4001f2:	fa03 f202 	lsl.w	r2, r3, r2
  4001f6:	420a      	tst	r2, r1
  4001f8:	d010      	beq.n	40021c <sd_mmc_select_slot+0x44>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
  4001fa:	4b2b      	ldr	r3, [pc, #172]	; (4002a8 <sd_mmc_select_slot+0xd0>)
  4001fc:	7b9b      	ldrb	r3, [r3, #14]
  4001fe:	2b01      	cmp	r3, #1
  400200:	d004      	beq.n	40020c <sd_mmc_select_slot+0x34>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  400202:	2204      	movs	r2, #4
  400204:	4b28      	ldr	r3, [pc, #160]	; (4002a8 <sd_mmc_select_slot+0xd0>)
  400206:	739a      	strb	r2, [r3, #14]
		return SD_MMC_ERR_NO_CARD;
  400208:	2002      	movs	r0, #2
  40020a:	4770      	bx	lr
	if (sd_mmc_sam_systick_used) {
  40020c:	4b28      	ldr	r3, [pc, #160]	; (4002b0 <sd_mmc_select_slot+0xd8>)
  40020e:	781b      	ldrb	r3, [r3, #0]
  400210:	2b00      	cmp	r3, #0
  400212:	d0f6      	beq.n	400202 <sd_mmc_select_slot+0x2a>
		SysTick->CTRL = 0;
  400214:	2200      	movs	r2, #0
  400216:	4b27      	ldr	r3, [pc, #156]	; (4002b4 <sd_mmc_select_slot+0xdc>)
  400218:	601a      	str	r2, [r3, #0]
  40021a:	e7f2      	b.n	400202 <sd_mmc_select_slot+0x2a>
{
  40021c:	b510      	push	{r4, lr}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
  40021e:	4b22      	ldr	r3, [pc, #136]	; (4002a8 <sd_mmc_select_slot+0xd0>)
  400220:	7b9b      	ldrb	r3, [r3, #14]
  400222:	2b04      	cmp	r3, #4
  400224:	d005      	beq.n	400232 <sd_mmc_select_slot+0x5a>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
  400226:	2b01      	cmp	r3, #1
  400228:	d019      	beq.n	40025e <sd_mmc_select_slot+0x86>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
  40022a:	2b03      	cmp	r3, #3
  40022c:	d12c      	bne.n	400288 <sd_mmc_select_slot+0xb0>
		return SD_MMC_ERR_UNUSABLE;
  40022e:	2003      	movs	r0, #3
  400230:	bd10      	pop	{r4, pc}
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
  400232:	2201      	movs	r2, #1
  400234:	4b1c      	ldr	r3, [pc, #112]	; (4002a8 <sd_mmc_select_slot+0xd0>)
  400236:	739a      	strb	r2, [r3, #14]
	if (!SysTick->CTRL) {
  400238:	4b1e      	ldr	r3, [pc, #120]	; (4002b4 <sd_mmc_select_slot+0xdc>)
  40023a:	681b      	ldr	r3, [r3, #0]
  40023c:	b93b      	cbnz	r3, 40024e <sd_mmc_select_slot+0x76>
		sd_mmc_sam_systick_used = true;
  40023e:	4b1c      	ldr	r3, [pc, #112]	; (4002b0 <sd_mmc_select_slot+0xd8>)
  400240:	701a      	strb	r2, [r3, #0]
		SysTick->LOAD = (sysclk_get_cpu_hz() / (8 * 1000))
  400242:	4b1c      	ldr	r3, [pc, #112]	; (4002b4 <sd_mmc_select_slot+0xdc>)
  400244:	491c      	ldr	r1, [pc, #112]	; (4002b8 <sd_mmc_select_slot+0xe0>)
  400246:	6059      	str	r1, [r3, #4]
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
  400248:	601a      	str	r2, [r3, #0]
		return SD_MMC_ERR_NO_CARD;
  40024a:	2002      	movs	r0, #2
  40024c:	bd10      	pop	{r4, pc}
		sd_mmc_sam_systick_used = false;
  40024e:	2200      	movs	r2, #0
  400250:	4b17      	ldr	r3, [pc, #92]	; (4002b0 <sd_mmc_select_slot+0xd8>)
  400252:	701a      	strb	r2, [r3, #0]
		delay_ms(SD_MMC_DEBOUNCE_TIMEOUT);
  400254:	4819      	ldr	r0, [pc, #100]	; (4002bc <sd_mmc_select_slot+0xe4>)
  400256:	4b1a      	ldr	r3, [pc, #104]	; (4002c0 <sd_mmc_select_slot+0xe8>)
  400258:	4798      	blx	r3
		return SD_MMC_ERR_NO_CARD;
  40025a:	2002      	movs	r0, #2
  40025c:	bd10      	pop	{r4, pc}
	if (!sd_mmc_sam_systick_used) {
  40025e:	4b14      	ldr	r3, [pc, #80]	; (4002b0 <sd_mmc_select_slot+0xd8>)
  400260:	781b      	ldrb	r3, [r3, #0]
  400262:	b13b      	cbz	r3, 400274 <sd_mmc_select_slot+0x9c>
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
  400264:	4b13      	ldr	r3, [pc, #76]	; (4002b4 <sd_mmc_select_slot+0xdc>)
  400266:	681b      	ldr	r3, [r3, #0]
  400268:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  40026c:	d01a      	beq.n	4002a4 <sd_mmc_select_slot+0xcc>
		SysTick->CTRL = 0;
  40026e:	2200      	movs	r2, #0
  400270:	4b10      	ldr	r3, [pc, #64]	; (4002b4 <sd_mmc_select_slot+0xdc>)
  400272:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
  400274:	4b0c      	ldr	r3, [pc, #48]	; (4002a8 <sd_mmc_select_slot+0xd0>)
  400276:	2202      	movs	r2, #2
  400278:	739a      	strb	r2, [r3, #14]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
  40027a:	4a12      	ldr	r2, [pc, #72]	; (4002c4 <sd_mmc_select_slot+0xec>)
  40027c:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
  40027e:	2201      	movs	r2, #1
  400280:	745a      	strb	r2, [r3, #17]
		sd_mmc_cards[slot].high_speed = 0;
  400282:	2200      	movs	r2, #0
  400284:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_slot_sel = slot;
  400288:	2200      	movs	r2, #0
  40028a:	4b0f      	ldr	r3, [pc, #60]	; (4002c8 <sd_mmc_select_slot+0xf0>)
  40028c:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
  40028e:	4c06      	ldr	r4, [pc, #24]	; (4002a8 <sd_mmc_select_slot+0xd0>)
  400290:	4b0e      	ldr	r3, [pc, #56]	; (4002cc <sd_mmc_select_slot+0xf4>)
  400292:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
  400294:	4b0e      	ldr	r3, [pc, #56]	; (4002d0 <sd_mmc_select_slot+0xf8>)
  400296:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
  400298:	7ba0      	ldrb	r0, [r4, #14]
  40029a:	2802      	cmp	r0, #2
  40029c:	bf14      	ite	ne
  40029e:	2000      	movne	r0, #0
  4002a0:	2001      	moveq	r0, #1
  4002a2:	bd10      	pop	{r4, pc}
			return SD_MMC_ERR_NO_CARD;
  4002a4:	2002      	movs	r0, #2
  4002a6:	bd10      	pop	{r4, pc}
  4002a8:	2040000c 	.word	0x2040000c
  4002ac:	00200707 	.word	0x00200707
  4002b0:	20400a18 	.word	0x20400a18
  4002b4:	e000e010 	.word	0xe000e010
  4002b8:	023c3460 	.word	0x023c3460
  4002bc:	0303af6b 	.word	0x0303af6b
  4002c0:	20400001 	.word	0x20400001
  4002c4:	00061a80 	.word	0x00061a80
  4002c8:	20400a19 	.word	0x20400a19
  4002cc:	20400a10 	.word	0x20400a10
  4002d0:	004001ad 	.word	0x004001ad

004002d4 <sdio_cmd52>:
{
  4002d4:	b538      	push	{r3, r4, r5, lr}
  4002d6:	9c04      	ldr	r4, [sp, #16]
		| ((uint32_t)reg_addr << SDIO_CMD52_REG_ADRR))) {
  4002d8:	0252      	lsls	r2, r2, #9
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
  4002da:	ea42 62c3 	orr.w	r2, r2, r3, lsl #27
  4002de:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
  4002e2:	ea42 72c0 	orr.w	r2, r2, r0, lsl #31
		((uint32_t)*io_data << SDIO_CMD52_WR_DATA)
  4002e6:	7821      	ldrb	r1, [r4, #0]
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
  4002e8:	4311      	orrs	r1, r2
  4002ea:	f241 3034 	movw	r0, #4916	; 0x1334
  4002ee:	4b05      	ldr	r3, [pc, #20]	; (400304 <sdio_cmd52+0x30>)
  4002f0:	4798      	blx	r3
  4002f2:	4605      	mov	r5, r0
  4002f4:	b908      	cbnz	r0, 4002fa <sdio_cmd52+0x26>
}
  4002f6:	4628      	mov	r0, r5
  4002f8:	bd38      	pop	{r3, r4, r5, pc}
	*io_data = driver_get_response() & 0xFF;
  4002fa:	4b03      	ldr	r3, [pc, #12]	; (400308 <sdio_cmd52+0x34>)
  4002fc:	4798      	blx	r3
  4002fe:	7020      	strb	r0, [r4, #0]
	return true;
  400300:	e7f9      	b.n	4002f6 <sdio_cmd52+0x22>
  400302:	bf00      	nop
  400304:	00401279 	.word	0x00401279
  400308:	0040129d 	.word	0x0040129d

0040030c <sd_mmc_cmd9_mci>:
{
  40030c:	b510      	push	{r4, lr}
	if (!driver_send_cmd(SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
  40030e:	4b09      	ldr	r3, [pc, #36]	; (400334 <sd_mmc_cmd9_mci+0x28>)
  400310:	681b      	ldr	r3, [r3, #0]
  400312:	8999      	ldrh	r1, [r3, #12]
  400314:	0409      	lsls	r1, r1, #16
  400316:	f641 3009 	movw	r0, #6921	; 0x1b09
  40031a:	4b07      	ldr	r3, [pc, #28]	; (400338 <sd_mmc_cmd9_mci+0x2c>)
  40031c:	4798      	blx	r3
  40031e:	4604      	mov	r4, r0
  400320:	b908      	cbnz	r0, 400326 <sd_mmc_cmd9_mci+0x1a>
}
  400322:	4620      	mov	r0, r4
  400324:	bd10      	pop	{r4, pc}
	driver_get_response_128(sd_mmc_card->csd);
  400326:	4b03      	ldr	r3, [pc, #12]	; (400334 <sd_mmc_cmd9_mci+0x28>)
  400328:	6818      	ldr	r0, [r3, #0]
  40032a:	3012      	adds	r0, #18
  40032c:	4b03      	ldr	r3, [pc, #12]	; (40033c <sd_mmc_cmd9_mci+0x30>)
  40032e:	4798      	blx	r3
	return true;
  400330:	e7f7      	b.n	400322 <sd_mmc_cmd9_mci+0x16>
  400332:	bf00      	nop
  400334:	20400a10 	.word	0x20400a10
  400338:	00401279 	.word	0x00401279
  40033c:	004012a5 	.word	0x004012a5

00400340 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
  400340:	b508      	push	{r3, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
  400342:	4b04      	ldr	r3, [pc, #16]	; (400354 <sd_mmc_deselect_slot+0x14>)
  400344:	781b      	ldrb	r3, [r3, #0]
  400346:	b103      	cbz	r3, 40034a <sd_mmc_deselect_slot+0xa>
  400348:	bd08      	pop	{r3, pc}
		driver_deselect_device(sd_mmc_slot_sel);
  40034a:	2000      	movs	r0, #0
  40034c:	4b02      	ldr	r3, [pc, #8]	; (400358 <sd_mmc_deselect_slot+0x18>)
  40034e:	4798      	blx	r3
	}
}
  400350:	e7fa      	b.n	400348 <sd_mmc_deselect_slot+0x8>
  400352:	bf00      	nop
  400354:	20400a19 	.word	0x20400a19
  400358:	00401255 	.word	0x00401255

0040035c <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
  40035c:	b508      	push	{r3, lr}
	//! Enable the PMC clock for the card detect pins
#if (defined SD_MMC_0_CD_GPIO) && (SAM) && (!SAM4L)
# include "pmc.h"
# define SD_MMC_ENABLE_CD_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_CD_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_CD_PIN, ~)
  40035e:	2010      	movs	r0, #16
  400360:	4b05      	ldr	r3, [pc, #20]	; (400378 <sd_mmc_init+0x1c>)
  400362:	4798      	blx	r3
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  400364:	2204      	movs	r2, #4
  400366:	4b05      	ldr	r3, [pc, #20]	; (40037c <sd_mmc_init+0x20>)
  400368:	739a      	strb	r2, [r3, #14]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
  40036a:	22ff      	movs	r2, #255	; 0xff
  40036c:	4b04      	ldr	r3, [pc, #16]	; (400380 <sd_mmc_init+0x24>)
  40036e:	701a      	strb	r2, [r3, #0]
	driver_init();
  400370:	4b04      	ldr	r3, [pc, #16]	; (400384 <sd_mmc_init+0x28>)
  400372:	4798      	blx	r3
  400374:	bd08      	pop	{r3, pc}
  400376:	bf00      	nop
  400378:	00406651 	.word	0x00406651
  40037c:	2040000c 	.word	0x2040000c
  400380:	20400a19 	.word	0x20400a19
  400384:	00401155 	.word	0x00401155

00400388 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
  400388:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40038c:	b095      	sub	sp, #84	; 0x54
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
  40038e:	4ba7      	ldr	r3, [pc, #668]	; (40062c <sd_mmc_check+0x2a4>)
  400390:	4798      	blx	r3
  400392:	4604      	mov	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
  400394:	2801      	cmp	r0, #1
  400396:	d005      	beq.n	4003a4 <sd_mmc_check+0x1c>
		sd_mmc_deselect_slot();
  400398:	4ba5      	ldr	r3, [pc, #660]	; (400630 <sd_mmc_check+0x2a8>)
  40039a:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
  40039c:	4620      	mov	r0, r4
  40039e:	b015      	add	sp, #84	; 0x54
  4003a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t data = 0x08;
  4003a4:	ae14      	add	r6, sp, #80	; 0x50
  4003a6:	2308      	movs	r3, #8
  4003a8:	f806 3d45 	strb.w	r3, [r6, #-69]!
	sd_mmc_card->type = CARD_TYPE_SD;
  4003ac:	4ba1      	ldr	r3, [pc, #644]	; (400634 <sd_mmc_check+0x2ac>)
  4003ae:	681b      	ldr	r3, [r3, #0]
  4003b0:	2701      	movs	r7, #1
  4003b2:	73df      	strb	r7, [r3, #15]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
  4003b4:	2500      	movs	r5, #0
  4003b6:	741d      	strb	r5, [r3, #16]
	sd_mmc_card->rca = 0;
  4003b8:	819d      	strh	r5, [r3, #12]
	driver_send_clock();
  4003ba:	4b9f      	ldr	r3, [pc, #636]	; (400638 <sd_mmc_check+0x2b0>)
  4003bc:	4798      	blx	r3
	sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA,SDIO_CCCR_IOA, 0, &data);
  4003be:	9600      	str	r6, [sp, #0]
  4003c0:	462b      	mov	r3, r5
  4003c2:	2206      	movs	r2, #6
  4003c4:	4629      	mov	r1, r5
  4003c6:	4638      	mov	r0, r7
  4003c8:	4e9c      	ldr	r6, [pc, #624]	; (40063c <sd_mmc_check+0x2b4>)
  4003ca:	47b0      	blx	r6
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  4003cc:	4629      	mov	r1, r5
  4003ce:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  4003d2:	4b9b      	ldr	r3, [pc, #620]	; (400640 <sd_mmc_check+0x2b8>)
  4003d4:	4798      	blx	r3
  4003d6:	b930      	cbnz	r0, 4003e6 <sd_mmc_check+0x5e>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
  4003d8:	4b96      	ldr	r3, [pc, #600]	; (400634 <sd_mmc_check+0x2ac>)
  4003da:	681b      	ldr	r3, [r3, #0]
  4003dc:	2403      	movs	r4, #3
  4003de:	739c      	strb	r4, [r3, #14]
	sd_mmc_deselect_slot();
  4003e0:	4b93      	ldr	r3, [pc, #588]	; (400630 <sd_mmc_check+0x2a8>)
  4003e2:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
  4003e4:	e7da      	b.n	40039c <sd_mmc_check+0x14>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
  4003e6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
  4003ea:	f245 5008 	movw	r0, #21768	; 0x5508
  4003ee:	4b94      	ldr	r3, [pc, #592]	; (400640 <sd_mmc_check+0x2b8>)
  4003f0:	4798      	blx	r3
  4003f2:	2800      	cmp	r0, #0
  4003f4:	f040 8093 	bne.w	40051e <sd_mmc_check+0x196>
	*v2 = 0;
  4003f8:	f04f 0900 	mov.w	r9, #0
	if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND, 0)) {
  4003fc:	2100      	movs	r1, #0
  4003fe:	f244 5005 	movw	r0, #17669	; 0x4505
  400402:	4b8f      	ldr	r3, [pc, #572]	; (400640 <sd_mmc_check+0x2b8>)
  400404:	4798      	blx	r3
  400406:	2800      	cmp	r0, #0
  400408:	f040 8097 	bne.w	40053a <sd_mmc_check+0x1b2>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  40040c:	4b89      	ldr	r3, [pc, #548]	; (400634 <sd_mmc_check+0x2ac>)
  40040e:	681b      	ldr	r3, [r3, #0]
  400410:	7bdb      	ldrb	r3, [r3, #15]
  400412:	f013 0f01 	tst.w	r3, #1
  400416:	f040 80b5 	bne.w	400584 <sd_mmc_check+0x1fc>
	if (!driver_send_cmd(SD_CMD3_SEND_RELATIVE_ADDR, 0)) {
  40041a:	2100      	movs	r1, #0
  40041c:	f245 1003 	movw	r0, #20739	; 0x5103
  400420:	4b87      	ldr	r3, [pc, #540]	; (400640 <sd_mmc_check+0x2b8>)
  400422:	4798      	blx	r3
  400424:	2800      	cmp	r0, #0
  400426:	d0d7      	beq.n	4003d8 <sd_mmc_check+0x50>
	sd_mmc_card->rca = (driver_get_response() >> 16) & 0xFFFF;
  400428:	4d82      	ldr	r5, [pc, #520]	; (400634 <sd_mmc_check+0x2ac>)
  40042a:	682e      	ldr	r6, [r5, #0]
  40042c:	4b85      	ldr	r3, [pc, #532]	; (400644 <sd_mmc_check+0x2bc>)
  40042e:	4798      	blx	r3
  400430:	0c00      	lsrs	r0, r0, #16
  400432:	81b0      	strh	r0, [r6, #12]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400434:	682b      	ldr	r3, [r5, #0]
  400436:	7bdb      	ldrb	r3, [r3, #15]
  400438:	f013 0f01 	tst.w	r3, #1
  40043c:	d034      	beq.n	4004a8 <sd_mmc_check+0x120>
		if (!sd_mmc_cmd9_mci()) {
  40043e:	4b82      	ldr	r3, [pc, #520]	; (400648 <sd_mmc_check+0x2c0>)
  400440:	4798      	blx	r3
  400442:	2800      	cmp	r0, #0
  400444:	d0c8      	beq.n	4003d8 <sd_mmc_check+0x50>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
  400446:	682b      	ldr	r3, [r5, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400448:	7d5a      	ldrb	r2, [r3, #21]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
  40044a:	f3c2 00c3 	ubfx	r0, r2, #3, #4
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  40044e:	f002 0207 	and.w	r2, r2, #7
	sd_mmc_card->clock = unit * mul * 1000;
  400452:	497e      	ldr	r1, [pc, #504]	; (40064c <sd_mmc_check+0x2c4>)
  400454:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  400458:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  40045c:	fb02 f201 	mul.w	r2, r2, r1
  400460:	497b      	ldr	r1, [pc, #492]	; (400650 <sd_mmc_check+0x2c8>)
  400462:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  400466:	fb02 f201 	mul.w	r2, r2, r1
  40046a:	601a      	str	r2, [r3, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
  40046c:	7c9a      	ldrb	r2, [r3, #18]
  40046e:	0992      	lsrs	r2, r2, #6
  400470:	f040 820c 	bne.w	40088c <sd_mmc_check+0x504>
  400474:	7e99      	ldrb	r1, [r3, #26]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400476:	7e58      	ldrb	r0, [r3, #25]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400478:	7e1a      	ldrb	r2, [r3, #24]
  40047a:	0292      	lsls	r2, r2, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  40047c:	ea42 0280 	orr.w	r2, r2, r0, lsl #2
  400480:	ea42 12a1 	orr.w	r2, r2, r1, asr #6
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400484:	7f18      	ldrb	r0, [r3, #28]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400486:	7ed9      	ldrb	r1, [r3, #27]
  400488:	0049      	lsls	r1, r1, #1
  40048a:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
	}
	value &=  ((uint32_t)1 << size) - 1;
  40048e:	f3c2 020b 	ubfx	r2, r2, #0, #12
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  400492:	3201      	adds	r2, #1
  400494:	f001 0107 	and.w	r1, r1, #7
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  400498:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  40049a:	408a      	lsls	r2, r1
  40049c:	7dd9      	ldrb	r1, [r3, #23]
  40049e:	f001 010f 	and.w	r1, r1, #15
		sd_mmc_card->capacity = blocknr *
  4004a2:	408a      	lsls	r2, r1
				/ 1024;
  4004a4:	0a92      	lsrs	r2, r2, #10
		sd_mmc_card->capacity = blocknr *
  4004a6:	605a      	str	r2, [r3, #4]
			(uint32_t)sd_mmc_card->rca << 16)) {
  4004a8:	4b62      	ldr	r3, [pc, #392]	; (400634 <sd_mmc_check+0x2ac>)
  4004aa:	681b      	ldr	r3, [r3, #0]
  4004ac:	8999      	ldrh	r1, [r3, #12]
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  4004ae:	0409      	lsls	r1, r1, #16
  4004b0:	f243 1007 	movw	r0, #12551	; 0x3107
  4004b4:	4b62      	ldr	r3, [pc, #392]	; (400640 <sd_mmc_check+0x2b8>)
  4004b6:	4798      	blx	r3
  4004b8:	2800      	cmp	r0, #0
  4004ba:	d08d      	beq.n	4003d8 <sd_mmc_check+0x50>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  4004bc:	4b5d      	ldr	r3, [pc, #372]	; (400634 <sd_mmc_check+0x2ac>)
  4004be:	681b      	ldr	r3, [r3, #0]
  4004c0:	7bda      	ldrb	r2, [r3, #15]
  4004c2:	f012 0f01 	tst.w	r2, #1
  4004c6:	f040 81ee 	bne.w	4008a6 <sd_mmc_check+0x51e>
	if (IS_SDIO()) {
  4004ca:	4b5a      	ldr	r3, [pc, #360]	; (400634 <sd_mmc_check+0x2ac>)
  4004cc:	681b      	ldr	r3, [r3, #0]
  4004ce:	7bdb      	ldrb	r3, [r3, #15]
  4004d0:	f013 0f04 	tst.w	r3, #4
  4004d4:	f000 829d 	beq.w	400a12 <sd_mmc_check+0x68a>
  4004d8:	2509      	movs	r5, #9
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_old, 0, &addr_cis[i]);
  4004da:	2700      	movs	r7, #0
  4004dc:	4e57      	ldr	r6, [pc, #348]	; (40063c <sd_mmc_check+0x2b4>)
  4004de:	f1a5 0309 	sub.w	r3, r5, #9
  4004e2:	aa03      	add	r2, sp, #12
  4004e4:	4413      	add	r3, r2
  4004e6:	9300      	str	r3, [sp, #0]
  4004e8:	463b      	mov	r3, r7
  4004ea:	462a      	mov	r2, r5
  4004ec:	4639      	mov	r1, r7
  4004ee:	4638      	mov	r0, r7
  4004f0:	47b0      	blx	r6
		addr_old++;
  4004f2:	3501      	adds	r5, #1
	for(i = 0; i < 4; i++) {
  4004f4:	2d0d      	cmp	r5, #13
  4004f6:	d1f2      	bne.n	4004de <sd_mmc_check+0x156>
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + \
  4004f8:	f89d 300d 	ldrb.w	r3, [sp, #13]
  4004fc:	f89d 900c 	ldrb.w	r9, [sp, #12]
  400500:	eb09 2903 	add.w	r9, r9, r3, lsl #8
				(addr_cis[2] << 16) + (addr_cis[3] << 24);
  400504:	f89d 300e 	ldrb.w	r3, [sp, #14]
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + \
  400508:	eb09 4903 	add.w	r9, r9, r3, lsl #16
				(addr_cis[2] << 16) + (addr_cis[3] << 24);
  40050c:	f89d 300f 	ldrb.w	r3, [sp, #15]
  400510:	eb09 6903 	add.w	r9, r9, r3, lsl #24
	addr_new = addr_old;
  400514:	464e      	mov	r6, r9
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  400516:	f04f 0800 	mov.w	r8, #0
  40051a:	4f48      	ldr	r7, [pc, #288]	; (40063c <sd_mmc_check+0x2b4>)
  40051c:	e23a      	b.n	400994 <sd_mmc_check+0x60c>
	resp = driver_get_response();
  40051e:	4b49      	ldr	r3, [pc, #292]	; (400644 <sd_mmc_check+0x2bc>)
  400520:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
  400522:	f1b0 3fff 	cmp.w	r0, #4294967295
  400526:	f000 834a 	beq.w	400bbe <sd_mmc_check+0x836>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
  40052a:	f3c0 000b 	ubfx	r0, r0, #0, #12
  40052e:	f5b0 7fd5 	cmp.w	r0, #426	; 0x1aa
  400532:	f47f af51 	bne.w	4003d8 <sd_mmc_check+0x50>
	*v2 = 1;
  400536:	46b9      	mov	r9, r7
  400538:	e760      	b.n	4003fc <sd_mmc_check+0x74>
	resp = driver_get_response();
  40053a:	4b42      	ldr	r3, [pc, #264]	; (400644 <sd_mmc_check+0x2bc>)
  40053c:	4798      	blx	r3
	if ((resp & OCR_SDIO_NF) == 0) {
  40053e:	f010 4fe0 	tst.w	r0, #1879048192	; 0x70000000
  400542:	f43f af63 	beq.w	40040c <sd_mmc_check+0x84>
  400546:	f241 3589 	movw	r5, #5001	; 0x1389
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
  40054a:	f244 5805 	movw	r8, #17669	; 0x4505
  40054e:	4e3c      	ldr	r6, [pc, #240]	; (400640 <sd_mmc_check+0x2b8>)
		resp = driver_get_response();
  400550:	4f3c      	ldr	r7, [pc, #240]	; (400644 <sd_mmc_check+0x2bc>)
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
  400552:	f400 11fc 	and.w	r1, r0, #2064384	; 0x1f8000
  400556:	4640      	mov	r0, r8
  400558:	47b0      	blx	r6
  40055a:	2800      	cmp	r0, #0
  40055c:	f43f af3c 	beq.w	4003d8 <sd_mmc_check+0x50>
		resp = driver_get_response();
  400560:	47b8      	blx	r7
		if ((resp & OCR_POWER_UP_BUSY) == OCR_POWER_UP_BUSY) {
  400562:	2800      	cmp	r0, #0
  400564:	db02      	blt.n	40056c <sd_mmc_check+0x1e4>
		if (cmd5_retry-- == 0) {
  400566:	3d01      	subs	r5, #1
  400568:	d1f3      	bne.n	400552 <sd_mmc_check+0x1ca>
  40056a:	e735      	b.n	4003d8 <sd_mmc_check+0x50>
	if ((resp & OCR_SDIO_MP) > 0) {
  40056c:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
  400570:	d104      	bne.n	40057c <sd_mmc_check+0x1f4>
		sd_mmc_card->type = CARD_TYPE_SDIO;
  400572:	4b30      	ldr	r3, [pc, #192]	; (400634 <sd_mmc_check+0x2ac>)
  400574:	681b      	ldr	r3, [r3, #0]
  400576:	2204      	movs	r2, #4
  400578:	73da      	strb	r2, [r3, #15]
  40057a:	e74e      	b.n	40041a <sd_mmc_check+0x92>
		sd_mmc_card->type = CARD_TYPE_SD_COMBO;
  40057c:	4b2d      	ldr	r3, [pc, #180]	; (400634 <sd_mmc_check+0x2ac>)
  40057e:	681b      	ldr	r3, [r3, #0]
  400580:	2205      	movs	r2, #5
  400582:	73da      	strb	r2, [r3, #15]
  400584:	f1b9 0f00 	cmp.w	r9, #0
  400588:	4f32      	ldr	r7, [pc, #200]	; (400654 <sd_mmc_check+0x2cc>)
  40058a:	bf14      	ite	ne
  40058c:	46b9      	movne	r9, r7
  40058e:	f44f 19fc 	moveq.w	r9, #2064384	; 0x1f8000
	if ((resp & OCR_SDIO_NF) == 0) {
  400592:	f640 0535 	movw	r5, #2101	; 0x835
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  400596:	f04f 0800 	mov.w	r8, #0
  40059a:	4e29      	ldr	r6, [pc, #164]	; (400640 <sd_mmc_check+0x2b8>)
		resp = driver_get_response();
  40059c:	4f29      	ldr	r7, [pc, #164]	; (400644 <sd_mmc_check+0x2bc>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  40059e:	4641      	mov	r1, r8
  4005a0:	f241 1037 	movw	r0, #4407	; 0x1137
  4005a4:	47b0      	blx	r6
  4005a6:	b148      	cbz	r0, 4005bc <sd_mmc_check+0x234>
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
  4005a8:	4649      	mov	r1, r9
  4005aa:	f244 5029 	movw	r0, #17705	; 0x4529
  4005ae:	47b0      	blx	r6
  4005b0:	b120      	cbz	r0, 4005bc <sd_mmc_check+0x234>
		resp = driver_get_response();
  4005b2:	47b8      	blx	r7
		if (resp & OCR_POWER_UP_BUSY) {
  4005b4:	2800      	cmp	r0, #0
  4005b6:	db20      	blt.n	4005fa <sd_mmc_check+0x272>
		if (retry-- == 0) {
  4005b8:	3d01      	subs	r5, #1
  4005ba:	d1f0      	bne.n	40059e <sd_mmc_check+0x216>
			sd_mmc_card->type = CARD_TYPE_MMC;
  4005bc:	4b1d      	ldr	r3, [pc, #116]	; (400634 <sd_mmc_check+0x2ac>)
  4005be:	681b      	ldr	r3, [r3, #0]
  4005c0:	2202      	movs	r2, #2
  4005c2:	73da      	strb	r2, [r3, #15]
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  4005c4:	2100      	movs	r1, #0
  4005c6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  4005ca:	4b1d      	ldr	r3, [pc, #116]	; (400640 <sd_mmc_check+0x2b8>)
  4005cc:	4798      	blx	r3
  4005ce:	2800      	cmp	r0, #0
  4005d0:	f43f af02 	beq.w	4003d8 <sd_mmc_check+0x50>
  4005d4:	f241 0569 	movw	r5, #4201	; 0x1069
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  4005d8:	f8df 8078 	ldr.w	r8, [pc, #120]	; 400654 <sd_mmc_check+0x2cc>
  4005dc:	4e18      	ldr	r6, [pc, #96]	; (400640 <sd_mmc_check+0x2b8>)
		resp = driver_get_response();
  4005de:	4f19      	ldr	r7, [pc, #100]	; (400644 <sd_mmc_check+0x2bc>)
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  4005e0:	4641      	mov	r1, r8
  4005e2:	f244 5001 	movw	r0, #17665	; 0x4501
  4005e6:	47b0      	blx	r6
  4005e8:	2800      	cmp	r0, #0
  4005ea:	f43f aef5 	beq.w	4003d8 <sd_mmc_check+0x50>
		resp = driver_get_response();
  4005ee:	47b8      	blx	r7
		if (resp & OCR_POWER_UP_BUSY) {
  4005f0:	2800      	cmp	r0, #0
  4005f2:	db31      	blt.n	400658 <sd_mmc_check+0x2d0>
		if (retry-- == 0) {
  4005f4:	3d01      	subs	r5, #1
  4005f6:	d1f3      	bne.n	4005e0 <sd_mmc_check+0x258>
  4005f8:	e6ee      	b.n	4003d8 <sd_mmc_check+0x50>
			if ((resp & OCR_CCS) != 0) {
  4005fa:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
  4005fe:	d005      	beq.n	40060c <sd_mmc_check+0x284>
				sd_mmc_card->type |= CARD_TYPE_HC;
  400600:	4b0c      	ldr	r3, [pc, #48]	; (400634 <sd_mmc_check+0x2ac>)
  400602:	681a      	ldr	r2, [r3, #0]
  400604:	7bd3      	ldrb	r3, [r2, #15]
  400606:	f043 0308 	orr.w	r3, r3, #8
  40060a:	73d3      	strb	r3, [r2, #15]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  40060c:	4b09      	ldr	r3, [pc, #36]	; (400634 <sd_mmc_check+0x2ac>)
  40060e:	681b      	ldr	r3, [r3, #0]
  400610:	7bdb      	ldrb	r3, [r3, #15]
  400612:	f013 0f01 	tst.w	r3, #1
  400616:	f43f af00 	beq.w	40041a <sd_mmc_check+0x92>
		if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  40061a:	2100      	movs	r1, #0
  40061c:	f645 3002 	movw	r0, #23298	; 0x5b02
  400620:	4b07      	ldr	r3, [pc, #28]	; (400640 <sd_mmc_check+0x2b8>)
  400622:	4798      	blx	r3
  400624:	2800      	cmp	r0, #0
  400626:	f47f aef8 	bne.w	40041a <sd_mmc_check+0x92>
  40062a:	e6d5      	b.n	4003d8 <sd_mmc_check+0x50>
  40062c:	004001d9 	.word	0x004001d9
  400630:	00400341 	.word	0x00400341
  400634:	20400a10 	.word	0x20400a10
  400638:	00401257 	.word	0x00401257
  40063c:	004002d5 	.word	0x004002d5
  400640:	00401279 	.word	0x00401279
  400644:	0040129d 	.word	0x0040129d
  400648:	0040030d 	.word	0x0040030d
  40064c:	0040d5a4 	.word	0x0040d5a4
  400650:	0040d5c0 	.word	0x0040d5c0
  400654:	401f8000 	.word	0x401f8000
			if ((resp & OCR_ACCESS_MODE_MASK)
  400658:	f000 40c0 	and.w	r0, r0, #1610612736	; 0x60000000
  40065c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  400660:	d027      	beq.n	4006b2 <sd_mmc_check+0x32a>
	if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  400662:	2100      	movs	r1, #0
  400664:	f645 3002 	movw	r0, #23298	; 0x5b02
  400668:	4ba5      	ldr	r3, [pc, #660]	; (400900 <sd_mmc_check+0x578>)
  40066a:	4798      	blx	r3
  40066c:	2800      	cmp	r0, #0
  40066e:	f43f aeb3 	beq.w	4003d8 <sd_mmc_check+0x50>
	sd_mmc_card->rca = 1;
  400672:	4ba4      	ldr	r3, [pc, #656]	; (400904 <sd_mmc_check+0x57c>)
  400674:	681b      	ldr	r3, [r3, #0]
  400676:	2201      	movs	r2, #1
  400678:	819a      	strh	r2, [r3, #12]
	if (!driver_send_cmd(MMC_CMD3_SET_RELATIVE_ADDR,
  40067a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  40067e:	f241 1003 	movw	r0, #4355	; 0x1103
  400682:	4b9f      	ldr	r3, [pc, #636]	; (400900 <sd_mmc_check+0x578>)
  400684:	4798      	blx	r3
  400686:	2800      	cmp	r0, #0
  400688:	f43f aea6 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (!sd_mmc_cmd9_mci()) {
  40068c:	4b9e      	ldr	r3, [pc, #632]	; (400908 <sd_mmc_check+0x580>)
  40068e:	4798      	blx	r3
  400690:	2800      	cmp	r0, #0
  400692:	f43f aea1 	beq.w	4003d8 <sd_mmc_check+0x50>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
  400696:	4b9b      	ldr	r3, [pc, #620]	; (400904 <sd_mmc_check+0x57c>)
  400698:	681a      	ldr	r2, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  40069a:	7c93      	ldrb	r3, [r2, #18]
	value &=  ((uint32_t)1 << size) - 1;
  40069c:	f3c3 0383 	ubfx	r3, r3, #2, #4
  4006a0:	3b01      	subs	r3, #1
  4006a2:	2b03      	cmp	r3, #3
  4006a4:	d80c      	bhi.n	4006c0 <sd_mmc_check+0x338>
  4006a6:	e8df f013 	tbh	[pc, r3, lsl #1]
  4006aa:	00cd      	.short	0x00cd
  4006ac:	00d300d0 	.word	0x00d300d0
  4006b0:	00d6      	.short	0x00d6
				sd_mmc_card->type |= CARD_TYPE_HC;
  4006b2:	4b94      	ldr	r3, [pc, #592]	; (400904 <sd_mmc_check+0x57c>)
  4006b4:	681a      	ldr	r2, [r3, #0]
  4006b6:	7bd3      	ldrb	r3, [r2, #15]
  4006b8:	f043 0308 	orr.w	r3, r3, #8
  4006bc:	73d3      	strb	r3, [r2, #15]
  4006be:	e7d0      	b.n	400662 <sd_mmc_check+0x2da>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
  4006c0:	2312      	movs	r3, #18
  4006c2:	7413      	strb	r3, [r2, #16]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4006c4:	7d53      	ldrb	r3, [r2, #21]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
  4006c6:	f3c3 00c3 	ubfx	r0, r3, #3, #4
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  4006ca:	f003 0307 	and.w	r3, r3, #7
	sd_mmc_card->clock = unit * mul * 1000;
  4006ce:	498f      	ldr	r1, [pc, #572]	; (40090c <sd_mmc_check+0x584>)
  4006d0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  4006d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  4006d8:	fb03 f301 	mul.w	r3, r3, r1
  4006dc:	498c      	ldr	r1, [pc, #560]	; (400910 <sd_mmc_check+0x588>)
  4006de:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  4006e2:	fb03 f301 	mul.w	r3, r3, r1
  4006e6:	6013      	str	r3, [r2, #0]
  4006e8:	7e91      	ldrb	r1, [r2, #26]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  4006ea:	7e50      	ldrb	r0, [r2, #25]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4006ec:	7e13      	ldrb	r3, [r2, #24]
  4006ee:	029b      	lsls	r3, r3, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4006f0:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
  4006f4:	ea43 13a1 	orr.w	r3, r3, r1, asr #6
	value &=  ((uint32_t)1 << size) - 1;
  4006f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
  4006fc:	f640 71ff 	movw	r1, #4095	; 0xfff
  400700:	428b      	cmp	r3, r1
  400702:	d00f      	beq.n	400724 <sd_mmc_check+0x39c>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400704:	7f10      	ldrb	r0, [r2, #28]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400706:	7ed1      	ldrb	r1, [r2, #27]
  400708:	0049      	lsls	r1, r1, #1
  40070a:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  40070e:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
  400710:	f001 0107 	and.w	r1, r1, #7
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  400714:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  400716:	408b      	lsls	r3, r1
  400718:	7dd1      	ldrb	r1, [r2, #23]
  40071a:	f001 010f 	and.w	r1, r1, #15
		sd_mmc_card->capacity = blocknr *
  40071e:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
  400720:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
  400722:	6053      	str	r3, [r2, #4]
			(uint32_t)sd_mmc_card->rca << 16)) {
  400724:	8991      	ldrh	r1, [r2, #12]
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  400726:	0409      	lsls	r1, r1, #16
  400728:	f243 1007 	movw	r0, #12551	; 0x3107
  40072c:	4b74      	ldr	r3, [pc, #464]	; (400900 <sd_mmc_check+0x578>)
  40072e:	4798      	blx	r3
  400730:	2800      	cmp	r0, #0
  400732:	f43f ae51 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
  400736:	4b73      	ldr	r3, [pc, #460]	; (400904 <sd_mmc_check+0x57c>)
  400738:	681b      	ldr	r3, [r3, #0]
  40073a:	7c1b      	ldrb	r3, [r3, #16]
  40073c:	2b3f      	cmp	r3, #63	; 0x3f
  40073e:	f240 8097 	bls.w	400870 <sd_mmc_check+0x4e8>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
  400742:	2100      	movs	r1, #0
  400744:	9100      	str	r1, [sp, #0]
  400746:	2301      	movs	r3, #1
  400748:	f44f 7200 	mov.w	r2, #512	; 0x200
  40074c:	4871      	ldr	r0, [pc, #452]	; (400914 <sd_mmc_check+0x58c>)
  40074e:	4d72      	ldr	r5, [pc, #456]	; (400918 <sd_mmc_check+0x590>)
  400750:	47a8      	blx	r5
  400752:	2800      	cmp	r0, #0
  400754:	f43f ae40 	beq.w	4003d8 <sd_mmc_check+0x50>
  400758:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
  40075a:	4e70      	ldr	r6, [pc, #448]	; (40091c <sd_mmc_check+0x594>)
  40075c:	a803      	add	r0, sp, #12
  40075e:	47b0      	blx	r6
  400760:	2800      	cmp	r0, #0
  400762:	f43f ae39 	beq.w	4003d8 <sd_mmc_check+0x50>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
  400766:	3501      	adds	r5, #1
  400768:	b2ad      	uxth	r5, r5
  40076a:	2d32      	cmp	r5, #50	; 0x32
  40076c:	d1f6      	bne.n	40075c <sd_mmc_check+0x3d4>
			& MMC_CTYPE_52MHZ;
  40076e:	9e03      	ldr	r6, [sp, #12]
  400770:	f006 0602 	and.w	r6, r6, #2
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
  400774:	4b63      	ldr	r3, [pc, #396]	; (400904 <sd_mmc_check+0x57c>)
  400776:	681b      	ldr	r3, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400778:	7e9a      	ldrb	r2, [r3, #26]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  40077a:	7e59      	ldrb	r1, [r3, #25]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  40077c:	7e1b      	ldrb	r3, [r3, #24]
  40077e:	029b      	lsls	r3, r3, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400780:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
  400784:	ea43 13a2 	orr.w	r3, r3, r2, asr #6
	value &=  ((uint32_t)1 << size) - 1;
  400788:	f3c3 030b 	ubfx	r3, r3, #0, #12
  40078c:	f640 72ff 	movw	r2, #4095	; 0xfff
  400790:	4293      	cmp	r3, r2
  400792:	d10e      	bne.n	4007b2 <sd_mmc_check+0x42a>
			if (!driver_read_word(&sec_count)) {
  400794:	4f61      	ldr	r7, [pc, #388]	; (40091c <sd_mmc_check+0x594>)
  400796:	a804      	add	r0, sp, #16
  400798:	47b8      	blx	r7
  40079a:	2800      	cmp	r0, #0
  40079c:	f43f ae1c 	beq.w	4003d8 <sd_mmc_check+0x50>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
  4007a0:	3501      	adds	r5, #1
  4007a2:	b2ad      	uxth	r5, r5
  4007a4:	2d35      	cmp	r5, #53	; 0x35
  4007a6:	d9f6      	bls.n	400796 <sd_mmc_check+0x40e>
		sd_mmc_card->capacity = sec_count / 2;
  4007a8:	4b56      	ldr	r3, [pc, #344]	; (400904 <sd_mmc_check+0x57c>)
  4007aa:	681a      	ldr	r2, [r3, #0]
  4007ac:	9b04      	ldr	r3, [sp, #16]
  4007ae:	085b      	lsrs	r3, r3, #1
  4007b0:	6053      	str	r3, [r2, #4]
		if (!driver_read_word(&sec_count)) {
  4007b2:	4f5a      	ldr	r7, [pc, #360]	; (40091c <sd_mmc_check+0x594>)
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  4007b4:	2d7f      	cmp	r5, #127	; 0x7f
  4007b6:	d951      	bls.n	40085c <sd_mmc_check+0x4d4>
		if (4 <= driver_get_bus_width(sd_mmc_slot_sel)) {
  4007b8:	4b59      	ldr	r3, [pc, #356]	; (400920 <sd_mmc_check+0x598>)
  4007ba:	7818      	ldrb	r0, [r3, #0]
  4007bc:	4b59      	ldr	r3, [pc, #356]	; (400924 <sd_mmc_check+0x59c>)
  4007be:	4798      	blx	r3
  4007c0:	2803      	cmp	r0, #3
  4007c2:	d91d      	bls.n	400800 <sd_mmc_check+0x478>
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
  4007c4:	4b56      	ldr	r3, [pc, #344]	; (400920 <sd_mmc_check+0x598>)
  4007c6:	7818      	ldrb	r0, [r3, #0]
  4007c8:	4b56      	ldr	r3, [pc, #344]	; (400924 <sd_mmc_check+0x59c>)
  4007ca:	4798      	blx	r3
  4007cc:	4605      	mov	r5, r0
	switch (bus_width) {
  4007ce:	2804      	cmp	r0, #4
  4007d0:	d04c      	beq.n	40086c <sd_mmc_check+0x4e4>
		arg = MMC_CMD6_ACCESS_SET_BITS
  4007d2:	4b55      	ldr	r3, [pc, #340]	; (400928 <sd_mmc_check+0x5a0>)
  4007d4:	4955      	ldr	r1, [pc, #340]	; (40092c <sd_mmc_check+0x5a4>)
  4007d6:	2808      	cmp	r0, #8
  4007d8:	bf18      	it	ne
  4007da:	4619      	movne	r1, r3
	if (!driver_send_cmd(MMC_CMD6_SWITCH, arg)) {
  4007dc:	f243 1006 	movw	r0, #12550	; 0x3106
  4007e0:	4b47      	ldr	r3, [pc, #284]	; (400900 <sd_mmc_check+0x578>)
  4007e2:	4798      	blx	r3
  4007e4:	2800      	cmp	r0, #0
  4007e6:	f43f adf7 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  4007ea:	4b51      	ldr	r3, [pc, #324]	; (400930 <sd_mmc_check+0x5a8>)
  4007ec:	4798      	blx	r3
  4007ee:	f010 0f80 	tst.w	r0, #128	; 0x80
  4007f2:	f47f adf1 	bne.w	4003d8 <sd_mmc_check+0x50>
	sd_mmc_card->bus_width = bus_width;
  4007f6:	4b43      	ldr	r3, [pc, #268]	; (400904 <sd_mmc_check+0x57c>)
  4007f8:	681b      	ldr	r3, [r3, #0]
  4007fa:	745d      	strb	r5, [r3, #17]
			sd_mmc_configure_slot();
  4007fc:	4b4d      	ldr	r3, [pc, #308]	; (400934 <sd_mmc_check+0x5ac>)
  4007fe:	4798      	blx	r3
		if (driver_is_high_speed_capable() && b_authorize_high_speed) {
  400800:	4b4d      	ldr	r3, [pc, #308]	; (400938 <sd_mmc_check+0x5b0>)
  400802:	4798      	blx	r3
  400804:	b1be      	cbz	r6, 400836 <sd_mmc_check+0x4ae>
  400806:	b1b0      	cbz	r0, 400836 <sd_mmc_check+0x4ae>
	if (!driver_send_cmd(MMC_CMD6_SWITCH,
  400808:	494c      	ldr	r1, [pc, #304]	; (40093c <sd_mmc_check+0x5b4>)
  40080a:	f243 1006 	movw	r0, #12550	; 0x3106
  40080e:	4b3c      	ldr	r3, [pc, #240]	; (400900 <sd_mmc_check+0x578>)
  400810:	4798      	blx	r3
  400812:	2800      	cmp	r0, #0
  400814:	f43f ade0 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  400818:	4b45      	ldr	r3, [pc, #276]	; (400930 <sd_mmc_check+0x5a8>)
  40081a:	4798      	blx	r3
  40081c:	f010 0f80 	tst.w	r0, #128	; 0x80
  400820:	f47f adda 	bne.w	4003d8 <sd_mmc_check+0x50>
	sd_mmc_card->high_speed = 1;
  400824:	4b37      	ldr	r3, [pc, #220]	; (400904 <sd_mmc_check+0x57c>)
  400826:	681b      	ldr	r3, [r3, #0]
  400828:	2201      	movs	r2, #1
  40082a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_card->clock = 52000000lu;
  40082e:	4a44      	ldr	r2, [pc, #272]	; (400940 <sd_mmc_check+0x5b8>)
  400830:	601a      	str	r2, [r3, #0]
			sd_mmc_configure_slot();
  400832:	4b40      	ldr	r3, [pc, #256]	; (400934 <sd_mmc_check+0x5ac>)
  400834:	4798      	blx	r3
		arg = MMC_CMD6_ACCESS_SET_BITS
  400836:	250a      	movs	r5, #10
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  400838:	f44f 7800 	mov.w	r8, #512	; 0x200
  40083c:	f241 1710 	movw	r7, #4368	; 0x1110
  400840:	4e2f      	ldr	r6, [pc, #188]	; (400900 <sd_mmc_check+0x578>)
  400842:	e01d      	b.n	400880 <sd_mmc_check+0x4f8>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
  400844:	2314      	movs	r3, #20
  400846:	7413      	strb	r3, [r2, #16]
  400848:	e73c      	b.n	4006c4 <sd_mmc_check+0x33c>
		sd_mmc_card->version = CARD_VER_MMC_2_2;
  40084a:	2322      	movs	r3, #34	; 0x22
  40084c:	7413      	strb	r3, [r2, #16]
  40084e:	e739      	b.n	4006c4 <sd_mmc_check+0x33c>
		sd_mmc_card->version = CARD_VER_MMC_3;
  400850:	2330      	movs	r3, #48	; 0x30
  400852:	7413      	strb	r3, [r2, #16]
  400854:	e736      	b.n	4006c4 <sd_mmc_check+0x33c>
		sd_mmc_card->version = CARD_VER_MMC_4;
  400856:	2340      	movs	r3, #64	; 0x40
  400858:	7413      	strb	r3, [r2, #16]
  40085a:	e733      	b.n	4006c4 <sd_mmc_check+0x33c>
		if (!driver_read_word(&sec_count)) {
  40085c:	a804      	add	r0, sp, #16
  40085e:	47b8      	blx	r7
  400860:	2800      	cmp	r0, #0
  400862:	f43f adb9 	beq.w	4003d8 <sd_mmc_check+0x50>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  400866:	3501      	adds	r5, #1
  400868:	b2ad      	uxth	r5, r5
  40086a:	e7a3      	b.n	4007b4 <sd_mmc_check+0x42c>
		arg = MMC_CMD6_ACCESS_SET_BITS
  40086c:	4935      	ldr	r1, [pc, #212]	; (400944 <sd_mmc_check+0x5bc>)
  40086e:	e7b5      	b.n	4007dc <sd_mmc_check+0x454>
		sd_mmc_configure_slot();
  400870:	4b30      	ldr	r3, [pc, #192]	; (400934 <sd_mmc_check+0x5ac>)
  400872:	4798      	blx	r3
  400874:	e7df      	b.n	400836 <sd_mmc_check+0x4ae>
  400876:	3d01      	subs	r5, #1
	while (retry--) {
  400878:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  40087c:	f43f adac 	beq.w	4003d8 <sd_mmc_check+0x50>
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  400880:	4641      	mov	r1, r8
  400882:	4638      	mov	r0, r7
  400884:	47b0      	blx	r6
  400886:	2800      	cmp	r0, #0
  400888:	d0f5      	beq.n	400876 <sd_mmc_check+0x4ee>
  40088a:	e10e      	b.n	400aaa <sd_mmc_check+0x722>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  40088c:	7ed9      	ldrb	r1, [r3, #27]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  40088e:	7e98      	ldrb	r0, [r3, #26]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400890:	7e5a      	ldrb	r2, [r3, #25]
  400892:	0412      	lsls	r2, r2, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400894:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  400898:	430a      	orrs	r2, r1
	value &=  ((uint32_t)1 << size) - 1;
  40089a:	f3c2 0215 	ubfx	r2, r2, #0, #22
				* 512;
  40089e:	3201      	adds	r2, #1
  4008a0:	0252      	lsls	r2, r2, #9
		sd_mmc_card->capacity =
  4008a2:	605a      	str	r2, [r3, #4]
  4008a4:	e600      	b.n	4004a8 <sd_mmc_check+0x120>
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  4008a6:	8999      	ldrh	r1, [r3, #12]
  4008a8:	0409      	lsls	r1, r1, #16
  4008aa:	f241 1037 	movw	r0, #4407	; 0x1137
  4008ae:	4b14      	ldr	r3, [pc, #80]	; (400900 <sd_mmc_check+0x578>)
  4008b0:	4798      	blx	r3
  4008b2:	2800      	cmp	r0, #0
  4008b4:	f43f ad90 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
  4008b8:	2301      	movs	r3, #1
  4008ba:	9300      	str	r3, [sp, #0]
  4008bc:	2208      	movs	r2, #8
  4008be:	2100      	movs	r1, #0
  4008c0:	4821      	ldr	r0, [pc, #132]	; (400948 <sd_mmc_check+0x5c0>)
  4008c2:	4d15      	ldr	r5, [pc, #84]	; (400918 <sd_mmc_check+0x590>)
  4008c4:	47a8      	blx	r5
  4008c6:	2800      	cmp	r0, #0
  4008c8:	f43f ad86 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (!driver_start_read_blocks(scr, 1)) {
  4008cc:	2101      	movs	r1, #1
  4008ce:	a804      	add	r0, sp, #16
  4008d0:	4b1e      	ldr	r3, [pc, #120]	; (40094c <sd_mmc_check+0x5c4>)
  4008d2:	4798      	blx	r3
  4008d4:	2800      	cmp	r0, #0
  4008d6:	f43f ad7f 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (!driver_wait_end_of_read_blocks()) {
  4008da:	4b1d      	ldr	r3, [pc, #116]	; (400950 <sd_mmc_check+0x5c8>)
  4008dc:	4798      	blx	r3
  4008de:	2800      	cmp	r0, #0
  4008e0:	f43f ad7a 	beq.w	4003d8 <sd_mmc_check+0x50>
	switch (SD_SCR_SD_SPEC(scr)) {
  4008e4:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4008e8:	f003 030f 	and.w	r3, r3, #15
  4008ec:	2b01      	cmp	r3, #1
  4008ee:	d036      	beq.n	40095e <sd_mmc_check+0x5d6>
  4008f0:	b383      	cbz	r3, 400954 <sd_mmc_check+0x5cc>
  4008f2:	2b02      	cmp	r3, #2
  4008f4:	d038      	beq.n	400968 <sd_mmc_check+0x5e0>
		sd_mmc_card->version = CARD_VER_SD_1_0;
  4008f6:	4b03      	ldr	r3, [pc, #12]	; (400904 <sd_mmc_check+0x57c>)
  4008f8:	681b      	ldr	r3, [r3, #0]
  4008fa:	2210      	movs	r2, #16
  4008fc:	741a      	strb	r2, [r3, #16]
  4008fe:	e5e4      	b.n	4004ca <sd_mmc_check+0x142>
  400900:	00401279 	.word	0x00401279
  400904:	20400a10 	.word	0x20400a10
  400908:	0040030d 	.word	0x0040030d
  40090c:	0040d5a4 	.word	0x0040d5a4
  400910:	0040d564 	.word	0x0040d564
  400914:	00081108 	.word	0x00081108
  400918:	004012d5 	.word	0x004012d5
  40091c:	0040139d 	.word	0x0040139d
  400920:	20400a19 	.word	0x20400a19
  400924:	00401181 	.word	0x00401181
  400928:	01b70000 	.word	0x01b70000
  40092c:	01b70200 	.word	0x01b70200
  400930:	0040129d 	.word	0x0040129d
  400934:	004001ad 	.word	0x004001ad
  400938:	0040118b 	.word	0x0040118b
  40093c:	03b90100 	.word	0x03b90100
  400940:	03197500 	.word	0x03197500
  400944:	01b70100 	.word	0x01b70100
  400948:	00081133 	.word	0x00081133
  40094c:	00401411 	.word	0x00401411
  400950:	004014dd 	.word	0x004014dd
		sd_mmc_card->version = CARD_VER_SD_1_0;
  400954:	4b9b      	ldr	r3, [pc, #620]	; (400bc4 <sd_mmc_check+0x83c>)
  400956:	681b      	ldr	r3, [r3, #0]
  400958:	2210      	movs	r2, #16
  40095a:	741a      	strb	r2, [r3, #16]
  40095c:	e5b5      	b.n	4004ca <sd_mmc_check+0x142>
		sd_mmc_card->version = CARD_VER_SD_1_10;
  40095e:	4b99      	ldr	r3, [pc, #612]	; (400bc4 <sd_mmc_check+0x83c>)
  400960:	681b      	ldr	r3, [r3, #0]
  400962:	221a      	movs	r2, #26
  400964:	741a      	strb	r2, [r3, #16]
  400966:	e5b0      	b.n	4004ca <sd_mmc_check+0x142>
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
  400968:	f89d 3012 	ldrb.w	r3, [sp, #18]
  40096c:	09db      	lsrs	r3, r3, #7
			sd_mmc_card->version = CARD_VER_SD_3_0;
  40096e:	4b95      	ldr	r3, [pc, #596]	; (400bc4 <sd_mmc_check+0x83c>)
  400970:	681b      	ldr	r3, [r3, #0]
  400972:	bf14      	ite	ne
  400974:	2230      	movne	r2, #48	; 0x30
			sd_mmc_card->version = CARD_VER_SD_2_0;
  400976:	2220      	moveq	r2, #32
  400978:	741a      	strb	r2, [r3, #16]
  40097a:	e5a6      	b.n	4004ca <sd_mmc_check+0x142>
		if (buf[1] == 0) {
  40097c:	f89d 3011 	ldrb.w	r3, [sp, #17]
  400980:	2b00      	cmp	r3, #0
  400982:	f43f ad29 	beq.w	4003d8 <sd_mmc_check+0x50>
		addr_new += buf[1]-1;
  400986:	3302      	adds	r3, #2
  400988:	441e      	add	r6, r3
		if (addr_new > (addr_old + 256)) {
  40098a:	f509 7380 	add.w	r3, r9, #256	; 0x100
  40098e:	429e      	cmp	r6, r3
  400990:	f63f ad22 	bhi.w	4003d8 <sd_mmc_check+0x50>
	addr_new = addr_old;
  400994:	2500      	movs	r5, #0
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  400996:	ab04      	add	r3, sp, #16
  400998:	442b      	add	r3, r5
  40099a:	9300      	str	r3, [sp, #0]
  40099c:	4643      	mov	r3, r8
  40099e:	1972      	adds	r2, r6, r5
  4009a0:	4641      	mov	r1, r8
  4009a2:	4640      	mov	r0, r8
  4009a4:	47b8      	blx	r7
  4009a6:	3501      	adds	r5, #1
		for(i=0; i<3; i++) {
  4009a8:	2d03      	cmp	r5, #3
  4009aa:	d1f4      	bne.n	400996 <sd_mmc_check+0x60e>
		if (buf[0] == SDIO_CISTPL_END) {
  4009ac:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4009b0:	2bff      	cmp	r3, #255	; 0xff
  4009b2:	f43f ad11 	beq.w	4003d8 <sd_mmc_check+0x50>
		if (buf[0] == SDIO_CISTPL_FUNCE && buf[2] == 0x00) {
  4009b6:	2b22      	cmp	r3, #34	; 0x22
  4009b8:	d1e0      	bne.n	40097c <sd_mmc_check+0x5f4>
  4009ba:	f89d 3012 	ldrb.w	r3, [sp, #18]
  4009be:	2b00      	cmp	r3, #0
  4009c0:	d1dc      	bne.n	40097c <sd_mmc_check+0x5f4>
  4009c2:	ad04      	add	r5, sp, #16
  4009c4:	f106 0906 	add.w	r9, r6, #6
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  4009c8:	f04f 0800 	mov.w	r8, #0
  4009cc:	4f7e      	ldr	r7, [pc, #504]	; (400bc8 <sd_mmc_check+0x840>)
  4009ce:	9500      	str	r5, [sp, #0]
  4009d0:	4643      	mov	r3, r8
  4009d2:	4632      	mov	r2, r6
  4009d4:	4641      	mov	r1, r8
  4009d6:	4640      	mov	r0, r8
  4009d8:	47b8      	blx	r7
		addr_new++;
  4009da:	3601      	adds	r6, #1
  4009dc:	3501      	adds	r5, #1
	for(i = 0; i < 6; i++) {
  4009de:	454e      	cmp	r6, r9
  4009e0:	d1f5      	bne.n	4009ce <sd_mmc_check+0x646>
	tplfe_max_tran_speed = buf[5];
  4009e2:	f89d 3015 	ldrb.w	r3, [sp, #21]
  4009e6:	2b32      	cmp	r3, #50	; 0x32
  4009e8:	bf28      	it	cs
  4009ea:	2332      	movcs	r3, #50	; 0x32
	sd_mmc_card->clock = unit * mul * 1000;
  4009ec:	4a75      	ldr	r2, [pc, #468]	; (400bc4 <sd_mmc_check+0x83c>)
  4009ee:	6812      	ldr	r2, [r2, #0]
	mul = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
  4009f0:	f3c3 00c3 	ubfx	r0, r3, #3, #4
	unit = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
  4009f4:	f003 0307 	and.w	r3, r3, #7
	sd_mmc_card->clock = unit * mul * 1000;
  4009f8:	4974      	ldr	r1, [pc, #464]	; (400bcc <sd_mmc_check+0x844>)
  4009fa:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  4009fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  400a02:	fb03 f301 	mul.w	r3, r3, r1
  400a06:	4972      	ldr	r1, [pc, #456]	; (400bd0 <sd_mmc_check+0x848>)
  400a08:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  400a0c:	fb03 f301 	mul.w	r3, r3, r1
  400a10:	6013      	str	r3, [r2, #0]
	if ((4 <= driver_get_bus_width(sd_mmc_slot_sel))) {
  400a12:	4b70      	ldr	r3, [pc, #448]	; (400bd4 <sd_mmc_check+0x84c>)
  400a14:	7818      	ldrb	r0, [r3, #0]
  400a16:	4b70      	ldr	r3, [pc, #448]	; (400bd8 <sd_mmc_check+0x850>)
  400a18:	4798      	blx	r3
  400a1a:	2803      	cmp	r0, #3
  400a1c:	d922      	bls.n	400a64 <sd_mmc_check+0x6dc>
		if (IS_SDIO()) {
  400a1e:	4b69      	ldr	r3, [pc, #420]	; (400bc4 <sd_mmc_check+0x83c>)
  400a20:	681b      	ldr	r3, [r3, #0]
  400a22:	7bdb      	ldrb	r3, [r3, #15]
  400a24:	f013 0f04 	tst.w	r3, #4
  400a28:	d146      	bne.n	400ab8 <sd_mmc_check+0x730>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  400a2a:	4b66      	ldr	r3, [pc, #408]	; (400bc4 <sd_mmc_check+0x83c>)
  400a2c:	681b      	ldr	r3, [r3, #0]
  400a2e:	7bda      	ldrb	r2, [r3, #15]
  400a30:	f012 0f01 	tst.w	r2, #1
  400a34:	d014      	beq.n	400a60 <sd_mmc_check+0x6d8>
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  400a36:	8999      	ldrh	r1, [r3, #12]
  400a38:	0409      	lsls	r1, r1, #16
  400a3a:	f241 1037 	movw	r0, #4407	; 0x1137
  400a3e:	4b67      	ldr	r3, [pc, #412]	; (400bdc <sd_mmc_check+0x854>)
  400a40:	4798      	blx	r3
  400a42:	2800      	cmp	r0, #0
  400a44:	f43f acc8 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (!driver_send_cmd(SD_ACMD6_SET_BUS_WIDTH, 0x2)) {
  400a48:	2102      	movs	r1, #2
  400a4a:	f241 1006 	movw	r0, #4358	; 0x1106
  400a4e:	4b63      	ldr	r3, [pc, #396]	; (400bdc <sd_mmc_check+0x854>)
  400a50:	4798      	blx	r3
  400a52:	2800      	cmp	r0, #0
  400a54:	f43f acc0 	beq.w	4003d8 <sd_mmc_check+0x50>
	sd_mmc_card->bus_width = 4;
  400a58:	4b5a      	ldr	r3, [pc, #360]	; (400bc4 <sd_mmc_check+0x83c>)
  400a5a:	681b      	ldr	r3, [r3, #0]
  400a5c:	2204      	movs	r2, #4
  400a5e:	745a      	strb	r2, [r3, #17]
		sd_mmc_configure_slot();
  400a60:	4b5f      	ldr	r3, [pc, #380]	; (400be0 <sd_mmc_check+0x858>)
  400a62:	4798      	blx	r3
	if (driver_is_high_speed_capable()) {
  400a64:	4b5f      	ldr	r3, [pc, #380]	; (400be4 <sd_mmc_check+0x85c>)
  400a66:	4798      	blx	r3
  400a68:	b180      	cbz	r0, 400a8c <sd_mmc_check+0x704>
		if (IS_SDIO()) {
  400a6a:	4b56      	ldr	r3, [pc, #344]	; (400bc4 <sd_mmc_check+0x83c>)
  400a6c:	681b      	ldr	r3, [r3, #0]
  400a6e:	7bdb      	ldrb	r3, [r3, #15]
  400a70:	f013 0f04 	tst.w	r3, #4
  400a74:	d141      	bne.n	400afa <sd_mmc_check+0x772>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  400a76:	4b53      	ldr	r3, [pc, #332]	; (400bc4 <sd_mmc_check+0x83c>)
  400a78:	681b      	ldr	r3, [r3, #0]
  400a7a:	7bda      	ldrb	r2, [r3, #15]
  400a7c:	f012 0f01 	tst.w	r2, #1
  400a80:	d002      	beq.n	400a88 <sd_mmc_check+0x700>
			if (sd_mmc_card->version > CARD_VER_SD_1_0) {
  400a82:	7c1b      	ldrb	r3, [r3, #16]
  400a84:	2b10      	cmp	r3, #16
  400a86:	d85e      	bhi.n	400b46 <sd_mmc_check+0x7be>
		sd_mmc_configure_slot();
  400a88:	4b55      	ldr	r3, [pc, #340]	; (400be0 <sd_mmc_check+0x858>)
  400a8a:	4798      	blx	r3
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400a8c:	4b4d      	ldr	r3, [pc, #308]	; (400bc4 <sd_mmc_check+0x83c>)
  400a8e:	681b      	ldr	r3, [r3, #0]
  400a90:	7bdb      	ldrb	r3, [r3, #15]
  400a92:	f013 0f01 	tst.w	r3, #1
  400a96:	d008      	beq.n	400aaa <sd_mmc_check+0x722>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  400a98:	f44f 7100 	mov.w	r1, #512	; 0x200
  400a9c:	f241 1010 	movw	r0, #4368	; 0x1110
  400aa0:	4b4e      	ldr	r3, [pc, #312]	; (400bdc <sd_mmc_check+0x854>)
  400aa2:	4798      	blx	r3
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
  400aa4:	2800      	cmp	r0, #0
  400aa6:	f43f ac97 	beq.w	4003d8 <sd_mmc_check+0x50>
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
  400aaa:	4b46      	ldr	r3, [pc, #280]	; (400bc4 <sd_mmc_check+0x83c>)
  400aac:	681b      	ldr	r3, [r3, #0]
  400aae:	2200      	movs	r2, #0
  400ab0:	739a      	strb	r2, [r3, #14]
		sd_mmc_deselect_slot();
  400ab2:	4b4d      	ldr	r3, [pc, #308]	; (400be8 <sd_mmc_check+0x860>)
  400ab4:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
  400ab6:	e471      	b.n	40039c <sd_mmc_check+0x14>
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_CAP,
  400ab8:	ab04      	add	r3, sp, #16
  400aba:	9300      	str	r3, [sp, #0]
  400abc:	2300      	movs	r3, #0
  400abe:	2208      	movs	r2, #8
  400ac0:	4619      	mov	r1, r3
  400ac2:	4618      	mov	r0, r3
  400ac4:	4d40      	ldr	r5, [pc, #256]	; (400bc8 <sd_mmc_check+0x840>)
  400ac6:	47a8      	blx	r5
  400ac8:	2800      	cmp	r0, #0
  400aca:	f43f ac85 	beq.w	4003d8 <sd_mmc_check+0x50>
	if ((u8_value & SDIO_CAP_4BLS) != SDIO_CAP_4BLS) {
  400ace:	f99d 3010 	ldrsb.w	r3, [sp, #16]
  400ad2:	2b00      	cmp	r3, #0
  400ad4:	daa9      	bge.n	400a2a <sd_mmc_check+0x6a2>
	u8_value = SDIO_BUSWIDTH_4B;
  400ad6:	ab14      	add	r3, sp, #80	; 0x50
  400ad8:	2202      	movs	r2, #2
  400ada:	f803 2d40 	strb.w	r2, [r3, #-64]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_BUS_CTRL,
  400ade:	9300      	str	r3, [sp, #0]
  400ae0:	2301      	movs	r3, #1
  400ae2:	2207      	movs	r2, #7
  400ae4:	2100      	movs	r1, #0
  400ae6:	4618      	mov	r0, r3
  400ae8:	47a8      	blx	r5
  400aea:	2800      	cmp	r0, #0
  400aec:	f43f ac74 	beq.w	4003d8 <sd_mmc_check+0x50>
	sd_mmc_card->bus_width = 4;
  400af0:	4b34      	ldr	r3, [pc, #208]	; (400bc4 <sd_mmc_check+0x83c>)
  400af2:	681b      	ldr	r3, [r3, #0]
  400af4:	2204      	movs	r2, #4
  400af6:	745a      	strb	r2, [r3, #17]
  400af8:	e797      	b.n	400a2a <sd_mmc_check+0x6a2>
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_HS, 0, &u8_value)) {
  400afa:	ab04      	add	r3, sp, #16
  400afc:	9300      	str	r3, [sp, #0]
  400afe:	2300      	movs	r3, #0
  400b00:	2213      	movs	r2, #19
  400b02:	4619      	mov	r1, r3
  400b04:	4618      	mov	r0, r3
  400b06:	4d30      	ldr	r5, [pc, #192]	; (400bc8 <sd_mmc_check+0x840>)
  400b08:	47a8      	blx	r5
  400b0a:	2800      	cmp	r0, #0
  400b0c:	f43f ac64 	beq.w	4003d8 <sd_mmc_check+0x50>
	if ((u8_value & SDIO_SHS) != SDIO_SHS) {
  400b10:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400b14:	f013 0f01 	tst.w	r3, #1
  400b18:	d0ad      	beq.n	400a76 <sd_mmc_check+0x6ee>
	u8_value = SDIO_EHS;
  400b1a:	ab14      	add	r3, sp, #80	; 0x50
  400b1c:	2202      	movs	r2, #2
  400b1e:	f803 2d40 	strb.w	r2, [r3, #-64]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_HS,
  400b22:	9300      	str	r3, [sp, #0]
  400b24:	2301      	movs	r3, #1
  400b26:	2213      	movs	r2, #19
  400b28:	2100      	movs	r1, #0
  400b2a:	4618      	mov	r0, r3
  400b2c:	47a8      	blx	r5
  400b2e:	2800      	cmp	r0, #0
  400b30:	f43f ac52 	beq.w	4003d8 <sd_mmc_check+0x50>
	sd_mmc_card->high_speed = 1;
  400b34:	4b23      	ldr	r3, [pc, #140]	; (400bc4 <sd_mmc_check+0x83c>)
  400b36:	681b      	ldr	r3, [r3, #0]
  400b38:	2201      	movs	r2, #1
  400b3a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_card->clock *= 2;
  400b3e:	681a      	ldr	r2, [r3, #0]
  400b40:	0052      	lsls	r2, r2, #1
  400b42:	601a      	str	r2, [r3, #0]
  400b44:	e797      	b.n	400a76 <sd_mmc_check+0x6ee>
	uint8_t switch_status[SD_SW_STATUS_BSIZE] = {0};
  400b46:	2540      	movs	r5, #64	; 0x40
  400b48:	462a      	mov	r2, r5
  400b4a:	2100      	movs	r1, #0
  400b4c:	a804      	add	r0, sp, #16
  400b4e:	4b27      	ldr	r3, [pc, #156]	; (400bec <sd_mmc_check+0x864>)
  400b50:	4798      	blx	r3
	if (!driver_adtc_start(SD_CMD6_SWITCH_FUNC,
  400b52:	2301      	movs	r3, #1
  400b54:	9300      	str	r3, [sp, #0]
  400b56:	462a      	mov	r2, r5
  400b58:	4925      	ldr	r1, [pc, #148]	; (400bf0 <sd_mmc_check+0x868>)
  400b5a:	4826      	ldr	r0, [pc, #152]	; (400bf4 <sd_mmc_check+0x86c>)
  400b5c:	4d26      	ldr	r5, [pc, #152]	; (400bf8 <sd_mmc_check+0x870>)
  400b5e:	47a8      	blx	r5
  400b60:	2800      	cmp	r0, #0
  400b62:	f43f ac39 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (!driver_start_read_blocks(switch_status, 1)) {
  400b66:	2101      	movs	r1, #1
  400b68:	a804      	add	r0, sp, #16
  400b6a:	4b24      	ldr	r3, [pc, #144]	; (400bfc <sd_mmc_check+0x874>)
  400b6c:	4798      	blx	r3
  400b6e:	2800      	cmp	r0, #0
  400b70:	f43f ac32 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (!driver_wait_end_of_read_blocks()) {
  400b74:	4b22      	ldr	r3, [pc, #136]	; (400c00 <sd_mmc_check+0x878>)
  400b76:	4798      	blx	r3
  400b78:	2800      	cmp	r0, #0
  400b7a:	f43f ac2d 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  400b7e:	4b21      	ldr	r3, [pc, #132]	; (400c04 <sd_mmc_check+0x87c>)
  400b80:	4798      	blx	r3
  400b82:	f010 0f80 	tst.w	r0, #128	; 0x80
  400b86:	f47f ac27 	bne.w	4003d8 <sd_mmc_check+0x50>
	if (SD_SW_STATUS_FUN_GRP1_RC(switch_status)
  400b8a:	f89d 3020 	ldrb.w	r3, [sp, #32]
  400b8e:	f003 030f 	and.w	r3, r3, #15
  400b92:	2b0f      	cmp	r3, #15
  400b94:	f43f af78 	beq.w	400a88 <sd_mmc_check+0x700>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400b98:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400b9c:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
	if (SD_SW_STATUS_FUN_GRP1_BUSY(switch_status)) {
  400ba0:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
  400ba4:	f47f ac18 	bne.w	4003d8 <sd_mmc_check+0x50>
	driver_send_clock();
  400ba8:	4b17      	ldr	r3, [pc, #92]	; (400c08 <sd_mmc_check+0x880>)
  400baa:	4798      	blx	r3
	sd_mmc_card->high_speed = 1;
  400bac:	4b05      	ldr	r3, [pc, #20]	; (400bc4 <sd_mmc_check+0x83c>)
  400bae:	681b      	ldr	r3, [r3, #0]
  400bb0:	2201      	movs	r2, #1
  400bb2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_card->clock *= 2;
  400bb6:	681a      	ldr	r2, [r3, #0]
  400bb8:	0052      	lsls	r2, r2, #1
  400bba:	601a      	str	r2, [r3, #0]
  400bbc:	e764      	b.n	400a88 <sd_mmc_check+0x700>
	*v2 = 0;
  400bbe:	f04f 0900 	mov.w	r9, #0
  400bc2:	e41b      	b.n	4003fc <sd_mmc_check+0x74>
  400bc4:	20400a10 	.word	0x20400a10
  400bc8:	004002d5 	.word	0x004002d5
  400bcc:	0040d5a4 	.word	0x0040d5a4
  400bd0:	0040d5c0 	.word	0x0040d5c0
  400bd4:	20400a19 	.word	0x20400a19
  400bd8:	00401181 	.word	0x00401181
  400bdc:	00401279 	.word	0x00401279
  400be0:	004001ad 	.word	0x004001ad
  400be4:	0040118b 	.word	0x0040118b
  400be8:	00400341 	.word	0x00400341
  400bec:	004079ed 	.word	0x004079ed
  400bf0:	80ffff01 	.word	0x80ffff01
  400bf4:	00081106 	.word	0x00081106
  400bf8:	004012d5 	.word	0x004012d5
  400bfc:	00401411 	.word	0x00401411
  400c00:	004014dd 	.word	0x004014dd
  400c04:	0040129d 	.word	0x0040129d
  400c08:	00401257 	.word	0x00401257

00400c0c <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
  400c0c:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  400c0e:	4b05      	ldr	r3, [pc, #20]	; (400c24 <sd_mmc_get_type+0x18>)
  400c10:	4798      	blx	r3
  400c12:	b108      	cbz	r0, 400c18 <sd_mmc_get_type+0xc>
		return CARD_TYPE_UNKNOWN;
  400c14:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
  400c16:	bd08      	pop	{r3, pc}
	sd_mmc_deselect_slot();
  400c18:	4b03      	ldr	r3, [pc, #12]	; (400c28 <sd_mmc_get_type+0x1c>)
  400c1a:	4798      	blx	r3
	return sd_mmc_card->type;
  400c1c:	4b03      	ldr	r3, [pc, #12]	; (400c2c <sd_mmc_get_type+0x20>)
  400c1e:	681b      	ldr	r3, [r3, #0]
  400c20:	7bd8      	ldrb	r0, [r3, #15]
  400c22:	bd08      	pop	{r3, pc}
  400c24:	004001d9 	.word	0x004001d9
  400c28:	00400341 	.word	0x00400341
  400c2c:	20400a10 	.word	0x20400a10

00400c30 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
  400c30:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  400c32:	4b05      	ldr	r3, [pc, #20]	; (400c48 <sd_mmc_get_capacity+0x18>)
  400c34:	4798      	blx	r3
  400c36:	b108      	cbz	r0, 400c3c <sd_mmc_get_capacity+0xc>
		return 0;
  400c38:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
  400c3a:	bd08      	pop	{r3, pc}
	sd_mmc_deselect_slot();
  400c3c:	4b03      	ldr	r3, [pc, #12]	; (400c4c <sd_mmc_get_capacity+0x1c>)
  400c3e:	4798      	blx	r3
	return sd_mmc_card->capacity;
  400c40:	4b03      	ldr	r3, [pc, #12]	; (400c50 <sd_mmc_get_capacity+0x20>)
  400c42:	681b      	ldr	r3, [r3, #0]
  400c44:	6858      	ldr	r0, [r3, #4]
  400c46:	bd08      	pop	{r3, pc}
  400c48:	004001d9 	.word	0x004001d9
  400c4c:	00400341 	.word	0x00400341
  400c50:	20400a10 	.word	0x20400a10

00400c54 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
  400c54:	2000      	movs	r0, #0
  400c56:	4770      	bx	lr

00400c58 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  400c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400c5c:	b082      	sub	sp, #8
  400c5e:	468a      	mov	sl, r1
  400c60:	4691      	mov	r9, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  400c62:	4b26      	ldr	r3, [pc, #152]	; (400cfc <sd_mmc_init_read_blocks+0xa4>)
  400c64:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
  400c66:	4680      	mov	r8, r0
  400c68:	b118      	cbz	r0, 400c72 <sd_mmc_init_read_blocks+0x1a>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
  400c6a:	4640      	mov	r0, r8
  400c6c:	b002      	add	sp, #8
  400c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400c72:	4c23      	ldr	r4, [pc, #140]	; (400d00 <sd_mmc_init_read_blocks+0xa8>)
					(uint32_t)sd_mmc_card->rca << 16)) {
  400c74:	4e23      	ldr	r6, [pc, #140]	; (400d04 <sd_mmc_init_read_blocks+0xac>)
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
  400c76:	4d24      	ldr	r5, [pc, #144]	; (400d08 <sd_mmc_init_read_blocks+0xb0>)
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
  400c78:	4f24      	ldr	r7, [pc, #144]	; (400d0c <sd_mmc_init_read_blocks+0xb4>)
					(uint32_t)sd_mmc_card->rca << 16)) {
  400c7a:	6833      	ldr	r3, [r6, #0]
  400c7c:	8999      	ldrh	r1, [r3, #12]
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
  400c7e:	0409      	lsls	r1, r1, #16
  400c80:	f241 100d 	movw	r0, #4365	; 0x110d
  400c84:	47a8      	blx	r5
  400c86:	b128      	cbz	r0, 400c94 <sd_mmc_init_read_blocks+0x3c>
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
  400c88:	47b8      	blx	r7
  400c8a:	f410 7f80 	tst.w	r0, #256	; 0x100
  400c8e:	d117      	bne.n	400cc0 <sd_mmc_init_read_blocks+0x68>
		if (nec_timeout-- == 0) {
  400c90:	3c01      	subs	r4, #1
  400c92:	d1f2      	bne.n	400c7a <sd_mmc_init_read_blocks+0x22>
		sd_mmc_deselect_slot();
  400c94:	4b1e      	ldr	r3, [pc, #120]	; (400d10 <sd_mmc_init_read_blocks+0xb8>)
  400c96:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  400c98:	f04f 0805 	mov.w	r8, #5
  400c9c:	e7e5      	b.n	400c6a <sd_mmc_init_read_blocks+0x12>
		resp = driver_get_response();
  400c9e:	4b1b      	ldr	r3, [pc, #108]	; (400d0c <sd_mmc_init_read_blocks+0xb4>)
  400ca0:	4798      	blx	r3
		if (resp & CARD_STATUS_ERR_RD_WR) {
  400ca2:	4b1c      	ldr	r3, [pc, #112]	; (400d14 <sd_mmc_init_read_blocks+0xbc>)
  400ca4:	4003      	ands	r3, r0
  400ca6:	b933      	cbnz	r3, 400cb6 <sd_mmc_init_read_blocks+0x5e>
	sd_mmc_nb_block_remaining = nb_block;
  400ca8:	4b1b      	ldr	r3, [pc, #108]	; (400d18 <sd_mmc_init_read_blocks+0xc0>)
  400caa:	f8a3 9000 	strh.w	r9, [r3]
	sd_mmc_nb_block_to_tranfer = nb_block;
  400cae:	4b1b      	ldr	r3, [pc, #108]	; (400d1c <sd_mmc_init_read_blocks+0xc4>)
  400cb0:	f8a3 9000 	strh.w	r9, [r3]
	return SD_MMC_OK;
  400cb4:	e7d9      	b.n	400c6a <sd_mmc_init_read_blocks+0x12>
			sd_mmc_deselect_slot();
  400cb6:	4b16      	ldr	r3, [pc, #88]	; (400d10 <sd_mmc_init_read_blocks+0xb8>)
  400cb8:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  400cba:	f04f 0805 	mov.w	r8, #5
  400cbe:	e7d4      	b.n	400c6a <sd_mmc_init_read_blocks+0x12>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
  400cc0:	4b17      	ldr	r3, [pc, #92]	; (400d20 <sd_mmc_init_read_blocks+0xc8>)
  400cc2:	4818      	ldr	r0, [pc, #96]	; (400d24 <sd_mmc_init_read_blocks+0xcc>)
  400cc4:	f1b9 0f01 	cmp.w	r9, #1
  400cc8:	bf98      	it	ls
  400cca:	4618      	movls	r0, r3
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  400ccc:	4b0d      	ldr	r3, [pc, #52]	; (400d04 <sd_mmc_init_read_blocks+0xac>)
  400cce:	681b      	ldr	r3, [r3, #0]
  400cd0:	7bdb      	ldrb	r3, [r3, #15]
  400cd2:	f013 0f08 	tst.w	r3, #8
  400cd6:	d101      	bne.n	400cdc <sd_mmc_init_read_blocks+0x84>
		arg = (start * SD_MMC_BLOCK_SIZE);
  400cd8:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  400cdc:	2301      	movs	r3, #1
  400cde:	9300      	str	r3, [sp, #0]
  400ce0:	464b      	mov	r3, r9
  400ce2:	f44f 7200 	mov.w	r2, #512	; 0x200
  400ce6:	4651      	mov	r1, sl
  400ce8:	4c0f      	ldr	r4, [pc, #60]	; (400d28 <sd_mmc_init_read_blocks+0xd0>)
  400cea:	47a0      	blx	r4
  400cec:	2800      	cmp	r0, #0
  400cee:	d1d6      	bne.n	400c9e <sd_mmc_init_read_blocks+0x46>
		sd_mmc_deselect_slot();
  400cf0:	4b07      	ldr	r3, [pc, #28]	; (400d10 <sd_mmc_init_read_blocks+0xb8>)
  400cf2:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  400cf4:	f04f 0805 	mov.w	r8, #5
  400cf8:	e7b7      	b.n	400c6a <sd_mmc_init_read_blocks+0x12>
  400cfa:	bf00      	nop
  400cfc:	004001d9 	.word	0x004001d9
  400d00:	00030d41 	.word	0x00030d41
  400d04:	20400a10 	.word	0x20400a10
  400d08:	00401279 	.word	0x00401279
  400d0c:	0040129d 	.word	0x0040129d
  400d10:	00400341 	.word	0x00400341
  400d14:	e4580000 	.word	0xe4580000
  400d18:	20400a14 	.word	0x20400a14
  400d1c:	20400a16 	.word	0x20400a16
  400d20:	00081111 	.word	0x00081111
  400d24:	00101112 	.word	0x00101112
  400d28:	004012d5 	.word	0x004012d5

00400d2c <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
  400d2c:	b510      	push	{r4, lr}
  400d2e:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
  400d30:	4b06      	ldr	r3, [pc, #24]	; (400d4c <sd_mmc_start_read_blocks+0x20>)
  400d32:	4798      	blx	r3
  400d34:	b920      	cbnz	r0, 400d40 <sd_mmc_start_read_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
  400d36:	2200      	movs	r2, #0
  400d38:	4b05      	ldr	r3, [pc, #20]	; (400d50 <sd_mmc_start_read_blocks+0x24>)
  400d3a:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
  400d3c:	2005      	movs	r0, #5
  400d3e:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
  400d40:	4a03      	ldr	r2, [pc, #12]	; (400d50 <sd_mmc_start_read_blocks+0x24>)
  400d42:	8813      	ldrh	r3, [r2, #0]
  400d44:	1b1c      	subs	r4, r3, r4
  400d46:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
  400d48:	2000      	movs	r0, #0
}
  400d4a:	bd10      	pop	{r4, pc}
  400d4c:	00401411 	.word	0x00401411
  400d50:	20400a14 	.word	0x20400a14

00400d54 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
  400d54:	b510      	push	{r4, lr}
  400d56:	4604      	mov	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
  400d58:	4b13      	ldr	r3, [pc, #76]	; (400da8 <sd_mmc_wait_end_of_read_blocks+0x54>)
  400d5a:	4798      	blx	r3
  400d5c:	b908      	cbnz	r0, 400d62 <sd_mmc_wait_end_of_read_blocks+0xe>
		return SD_MMC_ERR_COMM;
  400d5e:	2005      	movs	r0, #5
  400d60:	bd10      	pop	{r4, pc}
	}
	if (abort) {
  400d62:	b184      	cbz	r4, 400d86 <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
  400d64:	2200      	movs	r2, #0
  400d66:	4b11      	ldr	r3, [pc, #68]	; (400dac <sd_mmc_wait_end_of_read_blocks+0x58>)
  400d68:	801a      	strh	r2, [r3, #0]
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
  400d6a:	4b11      	ldr	r3, [pc, #68]	; (400db0 <sd_mmc_wait_end_of_read_blocks+0x5c>)
  400d6c:	881b      	ldrh	r3, [r3, #0]
  400d6e:	2b01      	cmp	r3, #1
  400d70:	d00f      	beq.n	400d92 <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
  400d72:	2100      	movs	r1, #0
  400d74:	f243 100c 	movw	r0, #12556	; 0x310c
  400d78:	4b0e      	ldr	r3, [pc, #56]	; (400db4 <sd_mmc_wait_end_of_read_blocks+0x60>)
  400d7a:	4798      	blx	r3
  400d7c:	b168      	cbz	r0, 400d9a <sd_mmc_wait_end_of_read_blocks+0x46>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
  400d7e:	4b0e      	ldr	r3, [pc, #56]	; (400db8 <sd_mmc_wait_end_of_read_blocks+0x64>)
  400d80:	4798      	blx	r3
	return SD_MMC_OK;
  400d82:	2000      	movs	r0, #0
  400d84:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
  400d86:	4b09      	ldr	r3, [pc, #36]	; (400dac <sd_mmc_wait_end_of_read_blocks+0x58>)
  400d88:	881b      	ldrh	r3, [r3, #0]
  400d8a:	2b00      	cmp	r3, #0
  400d8c:	d0ed      	beq.n	400d6a <sd_mmc_wait_end_of_read_blocks+0x16>
		return SD_MMC_OK;
  400d8e:	2000      	movs	r0, #0
}
  400d90:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
  400d92:	4b09      	ldr	r3, [pc, #36]	; (400db8 <sd_mmc_wait_end_of_read_blocks+0x64>)
  400d94:	4798      	blx	r3
		return SD_MMC_OK;
  400d96:	2000      	movs	r0, #0
  400d98:	bd10      	pop	{r4, pc}
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
  400d9a:	2100      	movs	r1, #0
  400d9c:	f243 100c 	movw	r0, #12556	; 0x310c
  400da0:	4b04      	ldr	r3, [pc, #16]	; (400db4 <sd_mmc_wait_end_of_read_blocks+0x60>)
  400da2:	4798      	blx	r3
  400da4:	e7eb      	b.n	400d7e <sd_mmc_wait_end_of_read_blocks+0x2a>
  400da6:	bf00      	nop
  400da8:	004014dd 	.word	0x004014dd
  400dac:	20400a14 	.word	0x20400a14
  400db0:	20400a16 	.word	0x20400a16
  400db4:	00401279 	.word	0x00401279
  400db8:	00400341 	.word	0x00400341

00400dbc <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  400dbc:	b570      	push	{r4, r5, r6, lr}
  400dbe:	b082      	sub	sp, #8
  400dc0:	460e      	mov	r6, r1
  400dc2:	4615      	mov	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  400dc4:	4b16      	ldr	r3, [pc, #88]	; (400e20 <sd_mmc_init_write_blocks+0x64>)
  400dc6:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
  400dc8:	4604      	mov	r4, r0
  400dca:	b9b8      	cbnz	r0, 400dfc <sd_mmc_init_write_blocks+0x40>
	}

	if (nb_block > 1) {
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
  400dcc:	4b15      	ldr	r3, [pc, #84]	; (400e24 <sd_mmc_init_write_blocks+0x68>)
  400dce:	4816      	ldr	r0, [pc, #88]	; (400e28 <sd_mmc_init_write_blocks+0x6c>)
  400dd0:	2d01      	cmp	r5, #1
  400dd2:	bf98      	it	ls
  400dd4:	4618      	movls	r0, r3
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  400dd6:	4b15      	ldr	r3, [pc, #84]	; (400e2c <sd_mmc_init_write_blocks+0x70>)
  400dd8:	681b      	ldr	r3, [r3, #0]
  400dda:	7bdb      	ldrb	r3, [r3, #15]
  400ddc:	f013 0f08 	tst.w	r3, #8
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
  400de0:	bf08      	it	eq
  400de2:	0276      	lsleq	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  400de4:	2301      	movs	r3, #1
  400de6:	9300      	str	r3, [sp, #0]
  400de8:	462b      	mov	r3, r5
  400dea:	f44f 7200 	mov.w	r2, #512	; 0x200
  400dee:	4631      	mov	r1, r6
  400df0:	4e0f      	ldr	r6, [pc, #60]	; (400e30 <sd_mmc_init_write_blocks+0x74>)
  400df2:	47b0      	blx	r6
  400df4:	b928      	cbnz	r0, 400e02 <sd_mmc_init_write_blocks+0x46>
		sd_mmc_deselect_slot();
  400df6:	4b0f      	ldr	r3, [pc, #60]	; (400e34 <sd_mmc_init_write_blocks+0x78>)
  400df8:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  400dfa:	2405      	movs	r4, #5
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
  400dfc:	4620      	mov	r0, r4
  400dfe:	b002      	add	sp, #8
  400e00:	bd70      	pop	{r4, r5, r6, pc}
		resp = driver_get_response();
  400e02:	4b0d      	ldr	r3, [pc, #52]	; (400e38 <sd_mmc_init_write_blocks+0x7c>)
  400e04:	4798      	blx	r3
		if (resp & CARD_STATUS_ERR_RD_WR) {
  400e06:	4b0d      	ldr	r3, [pc, #52]	; (400e3c <sd_mmc_init_write_blocks+0x80>)
  400e08:	4003      	ands	r3, r0
  400e0a:	b923      	cbnz	r3, 400e16 <sd_mmc_init_write_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
  400e0c:	4b0c      	ldr	r3, [pc, #48]	; (400e40 <sd_mmc_init_write_blocks+0x84>)
  400e0e:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
  400e10:	4b0c      	ldr	r3, [pc, #48]	; (400e44 <sd_mmc_init_write_blocks+0x88>)
  400e12:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
  400e14:	e7f2      	b.n	400dfc <sd_mmc_init_write_blocks+0x40>
			sd_mmc_deselect_slot();
  400e16:	4b07      	ldr	r3, [pc, #28]	; (400e34 <sd_mmc_init_write_blocks+0x78>)
  400e18:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  400e1a:	2405      	movs	r4, #5
  400e1c:	e7ee      	b.n	400dfc <sd_mmc_init_write_blocks+0x40>
  400e1e:	bf00      	nop
  400e20:	004001d9 	.word	0x004001d9
  400e24:	00089118 	.word	0x00089118
  400e28:	00109119 	.word	0x00109119
  400e2c:	20400a10 	.word	0x20400a10
  400e30:	004012d5 	.word	0x004012d5
  400e34:	00400341 	.word	0x00400341
  400e38:	0040129d 	.word	0x0040129d
  400e3c:	e4580000 	.word	0xe4580000
  400e40:	20400a14 	.word	0x20400a14
  400e44:	20400a16 	.word	0x20400a16

00400e48 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
  400e48:	b510      	push	{r4, lr}
  400e4a:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
  400e4c:	4b06      	ldr	r3, [pc, #24]	; (400e68 <sd_mmc_start_write_blocks+0x20>)
  400e4e:	4798      	blx	r3
  400e50:	b920      	cbnz	r0, 400e5c <sd_mmc_start_write_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
  400e52:	2200      	movs	r2, #0
  400e54:	4b05      	ldr	r3, [pc, #20]	; (400e6c <sd_mmc_start_write_blocks+0x24>)
  400e56:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
  400e58:	2005      	movs	r0, #5
  400e5a:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
  400e5c:	4a03      	ldr	r2, [pc, #12]	; (400e6c <sd_mmc_start_write_blocks+0x24>)
  400e5e:	8813      	ldrh	r3, [r2, #0]
  400e60:	1b1c      	subs	r4, r3, r4
  400e62:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
  400e64:	2000      	movs	r0, #0
}
  400e66:	bd10      	pop	{r4, pc}
  400e68:	00401541 	.word	0x00401541
  400e6c:	20400a14 	.word	0x20400a14

00400e70 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
  400e70:	b510      	push	{r4, lr}
  400e72:	4604      	mov	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
  400e74:	4b12      	ldr	r3, [pc, #72]	; (400ec0 <sd_mmc_wait_end_of_write_blocks+0x50>)
  400e76:	4798      	blx	r3
  400e78:	b908      	cbnz	r0, 400e7e <sd_mmc_wait_end_of_write_blocks+0xe>
		return SD_MMC_ERR_COMM;
  400e7a:	2005      	movs	r0, #5
  400e7c:	bd10      	pop	{r4, pc}
	}
	if (abort) {
  400e7e:	b184      	cbz	r4, 400ea2 <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
  400e80:	2200      	movs	r2, #0
  400e82:	4b10      	ldr	r3, [pc, #64]	; (400ec4 <sd_mmc_wait_end_of_write_blocks+0x54>)
  400e84:	801a      	strh	r2, [r3, #0]
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
  400e86:	4b10      	ldr	r3, [pc, #64]	; (400ec8 <sd_mmc_wait_end_of_write_blocks+0x58>)
  400e88:	881b      	ldrh	r3, [r3, #0]
  400e8a:	2b01      	cmp	r3, #1
  400e8c:	d00f      	beq.n	400eae <sd_mmc_wait_end_of_write_blocks+0x3e>
	}

	if (sd_mmc_is_mci()) {
		// Note: SPI multiblock writes terminate using a special
		// token, not a STOP_TRANSMISSION request.
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
  400e8e:	2100      	movs	r1, #0
  400e90:	f243 100c 	movw	r0, #12556	; 0x310c
  400e94:	4b0d      	ldr	r3, [pc, #52]	; (400ecc <sd_mmc_wait_end_of_write_blocks+0x5c>)
  400e96:	4798      	blx	r3
  400e98:	b968      	cbnz	r0, 400eb6 <sd_mmc_wait_end_of_write_blocks+0x46>
			sd_mmc_deselect_slot();
  400e9a:	4b0d      	ldr	r3, [pc, #52]	; (400ed0 <sd_mmc_wait_end_of_write_blocks+0x60>)
  400e9c:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  400e9e:	2005      	movs	r0, #5
  400ea0:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
  400ea2:	4b08      	ldr	r3, [pc, #32]	; (400ec4 <sd_mmc_wait_end_of_write_blocks+0x54>)
  400ea4:	881b      	ldrh	r3, [r3, #0]
  400ea6:	2b00      	cmp	r3, #0
  400ea8:	d0ed      	beq.n	400e86 <sd_mmc_wait_end_of_write_blocks+0x16>
		return SD_MMC_OK;
  400eaa:	2000      	movs	r0, #0
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
  400eac:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
  400eae:	4b08      	ldr	r3, [pc, #32]	; (400ed0 <sd_mmc_wait_end_of_write_blocks+0x60>)
  400eb0:	4798      	blx	r3
		return SD_MMC_OK;
  400eb2:	2000      	movs	r0, #0
  400eb4:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
  400eb6:	4b06      	ldr	r3, [pc, #24]	; (400ed0 <sd_mmc_wait_end_of_write_blocks+0x60>)
  400eb8:	4798      	blx	r3
	return SD_MMC_OK;
  400eba:	2000      	movs	r0, #0
  400ebc:	bd10      	pop	{r4, pc}
  400ebe:	bf00      	nop
  400ec0:	0040160d 	.word	0x0040160d
  400ec4:	20400a14 	.word	0x20400a14
  400ec8:	20400a16 	.word	0x20400a16
  400ecc:	00401279 	.word	0x00401279
  400ed0:	00400341 	.word	0x00400341

00400ed4 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
  400ed4:	b510      	push	{r4, lr}
  400ed6:	4604      	mov	r4, r0
	switch (sd_mmc_check(slot))
  400ed8:	4b0f      	ldr	r3, [pc, #60]	; (400f18 <sd_mmc_test_unit_ready+0x44>)
  400eda:	4798      	blx	r3
  400edc:	2801      	cmp	r0, #1
  400ede:	d018      	beq.n	400f12 <sd_mmc_test_unit_ready+0x3e>
  400ee0:	b118      	cbz	r0, 400eea <sd_mmc_test_unit_ready+0x16>
  400ee2:	2802      	cmp	r0, #2
  400ee4:	d010      	beq.n	400f08 <sd_mmc_test_unit_ready+0x34>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
  400ee6:	2001      	movs	r0, #1
  400ee8:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
  400eea:	4b0c      	ldr	r3, [pc, #48]	; (400f1c <sd_mmc_test_unit_ready+0x48>)
  400eec:	5d1b      	ldrb	r3, [r3, r4]
  400eee:	b10b      	cbz	r3, 400ef4 <sd_mmc_test_unit_ready+0x20>
			return CTRL_NO_PRESENT;
  400ef0:	2002      	movs	r0, #2
	}
}
  400ef2:	bd10      	pop	{r4, pc}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
  400ef4:	4620      	mov	r0, r4
  400ef6:	4b0a      	ldr	r3, [pc, #40]	; (400f20 <sd_mmc_test_unit_ready+0x4c>)
  400ef8:	4798      	blx	r3
  400efa:	f000 0003 	and.w	r0, r0, #3
		return CTRL_NO_PRESENT;
  400efe:	2800      	cmp	r0, #0
  400f00:	bf14      	ite	ne
  400f02:	2000      	movne	r0, #0
  400f04:	2002      	moveq	r0, #2
  400f06:	bd10      	pop	{r4, pc}
		sd_mmc_ejected[slot] = false;
  400f08:	2200      	movs	r2, #0
  400f0a:	4b04      	ldr	r3, [pc, #16]	; (400f1c <sd_mmc_test_unit_ready+0x48>)
  400f0c:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
  400f0e:	2002      	movs	r0, #2
  400f10:	bd10      	pop	{r4, pc}
		return CTRL_BUSY;
  400f12:	2003      	movs	r0, #3
  400f14:	bd10      	pop	{r4, pc}
  400f16:	bf00      	nop
  400f18:	00400389 	.word	0x00400389
  400f1c:	20400a1c 	.word	0x20400a1c
  400f20:	00400c0d 	.word	0x00400c0d

00400f24 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
  400f24:	b508      	push	{r3, lr}
	return sd_mmc_test_unit_ready(0);
  400f26:	2000      	movs	r0, #0
  400f28:	4b01      	ldr	r3, [pc, #4]	; (400f30 <sd_mmc_test_unit_ready_0+0xc>)
  400f2a:	4798      	blx	r3
}
  400f2c:	bd08      	pop	{r3, pc}
  400f2e:	bf00      	nop
  400f30:	00400ed5 	.word	0x00400ed5

00400f34 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
  400f34:	b538      	push	{r3, r4, r5, lr}
  400f36:	4604      	mov	r4, r0
  400f38:	460d      	mov	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
  400f3a:	4b04      	ldr	r3, [pc, #16]	; (400f4c <sd_mmc_read_capacity+0x18>)
  400f3c:	4798      	blx	r3
  400f3e:	0040      	lsls	r0, r0, #1
  400f40:	3801      	subs	r0, #1
  400f42:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
  400f44:	4620      	mov	r0, r4
  400f46:	4b02      	ldr	r3, [pc, #8]	; (400f50 <sd_mmc_read_capacity+0x1c>)
  400f48:	4798      	blx	r3
}
  400f4a:	bd38      	pop	{r3, r4, r5, pc}
  400f4c:	00400c31 	.word	0x00400c31
  400f50:	00400ed5 	.word	0x00400ed5

00400f54 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
  400f54:	b508      	push	{r3, lr}
	return sd_mmc_read_capacity(0, nb_sector);
  400f56:	4601      	mov	r1, r0
  400f58:	2000      	movs	r0, #0
  400f5a:	4b01      	ldr	r3, [pc, #4]	; (400f60 <sd_mmc_read_capacity_0+0xc>)
  400f5c:	4798      	blx	r3
}
  400f5e:	bd08      	pop	{r3, pc}
  400f60:	00400f35 	.word	0x00400f35

00400f64 <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
  400f64:	b508      	push	{r3, lr}
	return sd_mmc_is_write_protected(slot);
  400f66:	2000      	movs	r0, #0
  400f68:	4b01      	ldr	r3, [pc, #4]	; (400f70 <sd_mmc_wr_protect_0+0xc>)
  400f6a:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
  400f6c:	bd08      	pop	{r3, pc}
  400f6e:	bf00      	nop
  400f70:	00400c55 	.word	0x00400c55

00400f74 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
  400f74:	b510      	push	{r4, lr}
  400f76:	4614      	mov	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
  400f78:	2201      	movs	r2, #1
  400f7a:	4b0a      	ldr	r3, [pc, #40]	; (400fa4 <sd_mmc_mem_2_ram+0x30>)
  400f7c:	4798      	blx	r3
  400f7e:	b120      	cbz	r0, 400f8a <sd_mmc_mem_2_ram+0x16>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
  400f80:	2802      	cmp	r0, #2
  400f82:	bf0c      	ite	eq
  400f84:	2002      	moveq	r0, #2
  400f86:	2001      	movne	r0, #1
  400f88:	bd10      	pop	{r4, pc}
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
  400f8a:	2101      	movs	r1, #1
  400f8c:	4620      	mov	r0, r4
  400f8e:	4b06      	ldr	r3, [pc, #24]	; (400fa8 <sd_mmc_mem_2_ram+0x34>)
  400f90:	4798      	blx	r3
  400f92:	b108      	cbz	r0, 400f98 <sd_mmc_mem_2_ram+0x24>
		return CTRL_FAIL;
  400f94:	2001      	movs	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
  400f96:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
  400f98:	4b04      	ldr	r3, [pc, #16]	; (400fac <sd_mmc_mem_2_ram+0x38>)
  400f9a:	4798      	blx	r3
		return CTRL_NO_PRESENT;
  400f9c:	3000      	adds	r0, #0
  400f9e:	bf18      	it	ne
  400fa0:	2001      	movne	r0, #1
  400fa2:	bd10      	pop	{r4, pc}
  400fa4:	00400c59 	.word	0x00400c59
  400fa8:	00400d2d 	.word	0x00400d2d
  400fac:	00400d55 	.word	0x00400d55

00400fb0 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
  400fb0:	b508      	push	{r3, lr}
	return sd_mmc_mem_2_ram(0, addr, ram);
  400fb2:	460a      	mov	r2, r1
  400fb4:	4601      	mov	r1, r0
  400fb6:	2000      	movs	r0, #0
  400fb8:	4b01      	ldr	r3, [pc, #4]	; (400fc0 <sd_mmc_mem_2_ram_0+0x10>)
  400fba:	4798      	blx	r3
}
  400fbc:	bd08      	pop	{r3, pc}
  400fbe:	bf00      	nop
  400fc0:	00400f75 	.word	0x00400f75

00400fc4 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
  400fc4:	b510      	push	{r4, lr}
  400fc6:	4614      	mov	r4, r2
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
  400fc8:	2201      	movs	r2, #1
  400fca:	4b0a      	ldr	r3, [pc, #40]	; (400ff4 <sd_mmc_ram_2_mem+0x30>)
  400fcc:	4798      	blx	r3
  400fce:	b120      	cbz	r0, 400fda <sd_mmc_ram_2_mem+0x16>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
  400fd0:	2802      	cmp	r0, #2
  400fd2:	bf0c      	ite	eq
  400fd4:	2002      	moveq	r0, #2
  400fd6:	2001      	movne	r0, #1
  400fd8:	bd10      	pop	{r4, pc}
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
  400fda:	2101      	movs	r1, #1
  400fdc:	4620      	mov	r0, r4
  400fde:	4b06      	ldr	r3, [pc, #24]	; (400ff8 <sd_mmc_ram_2_mem+0x34>)
  400fe0:	4798      	blx	r3
  400fe2:	b108      	cbz	r0, 400fe8 <sd_mmc_ram_2_mem+0x24>
		return CTRL_FAIL;
  400fe4:	2001      	movs	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
  400fe6:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
  400fe8:	4b04      	ldr	r3, [pc, #16]	; (400ffc <sd_mmc_ram_2_mem+0x38>)
  400fea:	4798      	blx	r3
		return CTRL_NO_PRESENT;
  400fec:	3000      	adds	r0, #0
  400fee:	bf18      	it	ne
  400ff0:	2001      	movne	r0, #1
  400ff2:	bd10      	pop	{r4, pc}
  400ff4:	00400dbd 	.word	0x00400dbd
  400ff8:	00400e49 	.word	0x00400e49
  400ffc:	00400e71 	.word	0x00400e71

00401000 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
  401000:	b508      	push	{r3, lr}
	return sd_mmc_ram_2_mem(0, addr, ram);
  401002:	460a      	mov	r2, r1
  401004:	4601      	mov	r1, r0
  401006:	2000      	movs	r0, #0
  401008:	4b01      	ldr	r3, [pc, #4]	; (401010 <sd_mmc_ram_2_mem_0+0x10>)
  40100a:	4798      	blx	r3
}
  40100c:	bd08      	pop	{r3, pc}
  40100e:	bf00      	nop
  401010:	00400fc5 	.word	0x00400fc5

00401014 <mem_test_unit_ready>:
{
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
  401014:	b108      	cbz	r0, 40101a <mem_test_unit_ready+0x6>
  401016:	2001      	movs	r0, #1
  401018:	4770      	bx	lr
{
  40101a:	b508      	push	{r3, lr}
  status =
  40101c:	4b01      	ldr	r3, [pc, #4]	; (401024 <mem_test_unit_ready+0x10>)
  40101e:	4798      	blx	r3
  401020:	bd08      	pop	{r3, pc}
  401022:	bf00      	nop
  401024:	00400f25 	.word	0x00400f25

00401028 <mem_read_capacity>:
{
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
  401028:	b108      	cbz	r0, 40102e <mem_read_capacity+0x6>
  40102a:	2001      	movs	r0, #1
  40102c:	4770      	bx	lr
{
  40102e:	b508      	push	{r3, lr}
  401030:	4608      	mov	r0, r1
  status =
  401032:	4b01      	ldr	r3, [pc, #4]	; (401038 <mem_read_capacity+0x10>)
  401034:	4798      	blx	r3
  401036:	bd08      	pop	{r3, pc}
  401038:	00400f55 	.word	0x00400f55

0040103c <mem_sector_size>:
#endif

  Ctrl_access_unlock();

  return sector_size;
}
  40103c:	fab0 f080 	clz	r0, r0
  401040:	0940      	lsrs	r0, r0, #5
  401042:	4770      	bx	lr

00401044 <mem_wr_protect>:

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
  401044:	b108      	cbz	r0, 40104a <mem_wr_protect+0x6>
  401046:	2001      	movs	r0, #1
  401048:	4770      	bx	lr
{
  40104a:	b508      	push	{r3, lr}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
  40104c:	4b01      	ldr	r3, [pc, #4]	; (401054 <mem_wr_protect+0x10>)
  40104e:	4798      	blx	r3
  401050:	bd08      	pop	{r3, pc}
  401052:	bf00      	nop
  401054:	00400f65 	.word	0x00400f65

00401058 <memory_2_ram>:
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
  401058:	b108      	cbz	r0, 40105e <memory_2_ram+0x6>
  40105a:	2001      	movs	r0, #1
  40105c:	4770      	bx	lr
{
  40105e:	b508      	push	{r3, lr}
  401060:	4608      	mov	r0, r1
  status =
  401062:	4611      	mov	r1, r2
  401064:	4b01      	ldr	r3, [pc, #4]	; (40106c <memory_2_ram+0x14>)
  401066:	4798      	blx	r3
  401068:	bd08      	pop	{r3, pc}
  40106a:	bf00      	nop
  40106c:	00400fb1 	.word	0x00400fb1

00401070 <ram_2_memory>:
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
  401070:	b108      	cbz	r0, 401076 <ram_2_memory+0x6>
  401072:	2001      	movs	r0, #1
  401074:	4770      	bx	lr
{
  401076:	b508      	push	{r3, lr}
  401078:	4608      	mov	r0, r1
  status =
  40107a:	4611      	mov	r1, r2
  40107c:	4b01      	ldr	r3, [pc, #4]	; (401084 <ram_2_memory+0x14>)
  40107e:	4798      	blx	r3
  401080:	bd08      	pop	{r3, pc}
  401082:	bf00      	nop
  401084:	00401001 	.word	0x00401001

00401088 <hsmci_reset>:

/**
 * \brief Reset the HSMCI interface
 */
static void hsmci_reset(void)
{
  401088:	b470      	push	{r4, r5, r6}
	uint32_t mr = HSMCI->HSMCI_MR;
  40108a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40108e:	685d      	ldr	r5, [r3, #4]
	uint32_t dtor = HSMCI->HSMCI_DTOR;
  401090:	689c      	ldr	r4, [r3, #8]
	uint32_t sdcr = HSMCI->HSMCI_SDCR;
  401092:	68d8      	ldr	r0, [r3, #12]
	uint32_t cstor = HSMCI->HSMCI_CSTOR;
  401094:	69d9      	ldr	r1, [r3, #28]
	uint32_t cfg = HSMCI->HSMCI_CFG;
  401096:	6d5a      	ldr	r2, [r3, #84]	; 0x54
	HSMCI->HSMCI_CR = HSMCI_CR_SWRST;
  401098:	2680      	movs	r6, #128	; 0x80
  40109a:	601e      	str	r6, [r3, #0]
	HSMCI->HSMCI_MR = mr;
  40109c:	605d      	str	r5, [r3, #4]
	HSMCI->HSMCI_DTOR = dtor;
  40109e:	609c      	str	r4, [r3, #8]
	HSMCI->HSMCI_SDCR = sdcr;
  4010a0:	60d8      	str	r0, [r3, #12]
	HSMCI->HSMCI_CSTOR = cstor;
  4010a2:	61d9      	str	r1, [r3, #28]
	HSMCI->HSMCI_CFG = cfg;
  4010a4:	655a      	str	r2, [r3, #84]	; 0x54
#ifdef HSMCI_SR_DMADONE
	HSMCI->HSMCI_DMA = 0;
#endif
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	HSMCI->HSMCI_DMA = 0;
  4010a6:	2200      	movs	r2, #0
  4010a8:	651a      	str	r2, [r3, #80]	; 0x50
#endif
#endif
	// Enable the HSMCI
	HSMCI->HSMCI_CR = HSMCI_CR_PWSEN | HSMCI_CR_MCIEN;
  4010aa:	2205      	movs	r2, #5
  4010ac:	601a      	str	r2, [r3, #0]
}
  4010ae:	bc70      	pop	{r4, r5, r6}
  4010b0:	4770      	bx	lr
	...

004010b4 <hsmci_send_cmd_execute>:
 *
 * \return true if success, otherwise false
 */
static bool hsmci_send_cmd_execute(uint32_t cmdr, sdmmc_cmd_def_t cmd,
		uint32_t arg)
{
  4010b4:	b508      	push	{r3, lr}
	uint32_t sr;

	cmdr |= HSMCI_CMDR_CMDNB(cmd) | HSMCI_CMDR_SPCMD_STD;
  4010b6:	f001 033f 	and.w	r3, r1, #63	; 0x3f
  4010ba:	4318      	orrs	r0, r3
	if (cmd & SDMMC_RESP_PRESENT) {
  4010bc:	f411 7f80 	tst.w	r1, #256	; 0x100
  4010c0:	d004      	beq.n	4010cc <hsmci_send_cmd_execute+0x18>
		cmdr |= HSMCI_CMDR_MAXLAT;
		if (cmd & SDMMC_RESP_136) {
  4010c2:	f411 6f00 	tst.w	r1, #2048	; 0x800
  4010c6:	d00e      	beq.n	4010e6 <hsmci_send_cmd_execute+0x32>
			cmdr |= HSMCI_CMDR_RSPTYP_136_BIT;
  4010c8:	f440 5084 	orr.w	r0, r0, #4224	; 0x1080
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
		} else {
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
		}
	}
	if (cmd & SDMMC_CMD_OPENDRAIN) {
  4010cc:	f411 4f80 	tst.w	r1, #16384	; 0x4000
		cmdr |= HSMCI_CMDR_OPDCMD_OPENDRAIN;
  4010d0:	bf18      	it	ne
  4010d2:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	}

	// Write argument
	HSMCI->HSMCI_ARGR = arg;
  4010d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4010da:	611a      	str	r2, [r3, #16]
	// Write and start command
	HSMCI->HSMCI_CMDR = cmdr;
  4010dc:	6158      	str	r0, [r3, #20]

	// Wait end of command
	do {
		sr = HSMCI->HSMCI_SR;
  4010de:	4618      	mov	r0, r3
		if (cmd & SDMMC_RESP_CRC) {
  4010e0:	f401 5280 	and.w	r2, r1, #4096	; 0x1000
  4010e4:	e00d      	b.n	401102 <hsmci_send_cmd_execute+0x4e>
		} else if (cmd & SDMMC_RESP_BUSY) {
  4010e6:	f411 5f00 	tst.w	r1, #8192	; 0x2000
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
  4010ea:	bf14      	ite	ne
  4010ec:	f440 5086 	orrne.w	r0, r0, #4288	; 0x10c0
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
  4010f0:	f440 5082 	orreq.w	r0, r0, #4160	; 0x1040
  4010f4:	e7ea      	b.n	4010cc <hsmci_send_cmd_execute+0x18>
						__func__, cmd, sr);
				hsmci_reset();
				return false;
			}
		} else {
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  4010f6:	f413 0f1b 	tst.w	r3, #10158080	; 0x9b0000
  4010fa:	d10c      	bne.n	401116 <hsmci_send_cmd_execute+0x62>
						__func__, cmd, sr);
				hsmci_reset();
				return false;
			}
		}
	} while (!(sr & HSMCI_SR_CMDRDY));
  4010fc:	f013 0f01 	tst.w	r3, #1
  401100:	d10d      	bne.n	40111e <hsmci_send_cmd_execute+0x6a>
		sr = HSMCI->HSMCI_SR;
  401102:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (cmd & SDMMC_RESP_CRC) {
  401104:	2a00      	cmp	r2, #0
  401106:	d0f6      	beq.n	4010f6 <hsmci_send_cmd_execute+0x42>
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  401108:	f413 0f1f 	tst.w	r3, #10420224	; 0x9f0000
  40110c:	d0f6      	beq.n	4010fc <hsmci_send_cmd_execute+0x48>
				hsmci_reset();
  40110e:	4b10      	ldr	r3, [pc, #64]	; (401150 <hsmci_send_cmd_execute+0x9c>)
  401110:	4798      	blx	r3
				return false;
  401112:	2000      	movs	r0, #0
  401114:	bd08      	pop	{r3, pc}
				hsmci_reset();
  401116:	4b0e      	ldr	r3, [pc, #56]	; (401150 <hsmci_send_cmd_execute+0x9c>)
  401118:	4798      	blx	r3
				return false;
  40111a:	2000      	movs	r0, #0
  40111c:	bd08      	pop	{r3, pc}

	if (cmd & SDMMC_RESP_BUSY) {
  40111e:	f411 5f00 	tst.w	r1, #8192	; 0x2000
  401122:	d103      	bne.n	40112c <hsmci_send_cmd_execute+0x78>
		if (!hsmci_wait_busy()) {
			return false;
		}
	}
	return true;
  401124:	2001      	movs	r0, #1
  401126:	bd08      	pop	{r3, pc}
	return true;
  401128:	2001      	movs	r0, #1
  40112a:	bd08      	pop	{r3, pc}
		sr = HSMCI->HSMCI_SR;
  40112c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  401132:	f04f 32ff 	mov.w	r2, #4294967295
  401136:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	} while (!((sr & HSMCI_SR_NOTBUSY) && ((sr & HSMCI_SR_DTIP) == 0)));
  40113a:	f003 0330 	and.w	r3, r3, #48	; 0x30
  40113e:	2b20      	cmp	r3, #32
  401140:	d0f2      	beq.n	401128 <hsmci_send_cmd_execute+0x74>
		sr = HSMCI->HSMCI_SR;
  401142:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (busy_wait-- == 0) {
  401144:	3a01      	subs	r2, #1
  401146:	d1f8      	bne.n	40113a <hsmci_send_cmd_execute+0x86>
			hsmci_reset();
  401148:	4b01      	ldr	r3, [pc, #4]	; (401150 <hsmci_send_cmd_execute+0x9c>)
  40114a:	4798      	blx	r3
			return false;
  40114c:	2000      	movs	r0, #0
  40114e:	bd08      	pop	{r3, pc}
  401150:	00401089 	.word	0x00401089

00401154 <hsmci_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void hsmci_init(void)
{
  401154:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(ID_HSMCI);
  401156:	2012      	movs	r0, #18
  401158:	4c08      	ldr	r4, [pc, #32]	; (40117c <hsmci_init+0x28>)
  40115a:	47a0      	blx	r4
#endif

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	// Enable clock for DMA controller
	pmc_enable_periph_clk(ID_XDMAC);
  40115c:	203a      	movs	r0, #58	; 0x3a
  40115e:	47a0      	blx	r4
#endif
#endif

	// Set the Data Timeout Register to 2 Mega Cycles
	HSMCI->HSMCI_DTOR = HSMCI_DTOR_DTOMUL_1048576 | HSMCI_DTOR_DTOCYC(2);
  401160:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401164:	2272      	movs	r2, #114	; 0x72
  401166:	609a      	str	r2, [r3, #8]
	// Set Completion Signal Timeout to 2 Mega Cycles
	HSMCI->HSMCI_CSTOR = HSMCI_CSTOR_CSTOMUL_1048576 | HSMCI_CSTOR_CSTOCYC(2);
  401168:	61da      	str	r2, [r3, #28]
	// Set Configuration Register
	HSMCI->HSMCI_CFG = HSMCI_CFG_FIFOMODE | HSMCI_CFG_FERRCTRL;
  40116a:	2211      	movs	r2, #17
  40116c:	655a      	str	r2, [r3, #84]	; 0x54
	// Set power saving to maximum value
	HSMCI->HSMCI_MR = HSMCI_MR_PWSDIV_Msk;
  40116e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  401172:	605a      	str	r2, [r3, #4]

	// Enable the HSMCI and the Power Saving
	HSMCI->HSMCI_CR = HSMCI_CR_MCIEN | HSMCI_CR_PWSEN;
  401174:	2205      	movs	r2, #5
  401176:	601a      	str	r2, [r3, #0]
  401178:	bd10      	pop	{r4, pc}
  40117a:	bf00      	nop
  40117c:	00406651 	.word	0x00406651

00401180 <hsmci_get_bus_width>:
}

uint8_t hsmci_get_bus_width(uint8_t slot)
{
	switch (slot) {
  401180:	2800      	cmp	r0, #0
		return SD_MMC_HSMCI_SLOT_1_SIZE;
#endif
	default:
		return 0; // Slot number wrong
	}
}
  401182:	bf0c      	ite	eq
  401184:	2004      	moveq	r0, #4
  401186:	2000      	movne	r0, #0
  401188:	4770      	bx	lr

0040118a <hsmci_is_high_speed_capable>:

bool hsmci_is_high_speed_capable(void)
{
	return true;
}
  40118a:	2001      	movs	r0, #1
  40118c:	4770      	bx	lr
	...

00401190 <hsmci_select_device>:
void hsmci_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width, bool high_speed)
{
	uint32_t hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;

	if (high_speed) {
  401190:	b37b      	cbz	r3, 4011f2 <hsmci_select_device+0x62>
		HSMCI->HSMCI_CFG |= HSMCI_CFG_HSMODE;
  401192:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  401196:	6d43      	ldr	r3, [r0, #84]	; 0x54
  401198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  40119c:	6543      	str	r3, [r0, #84]	; 0x54
	if ((speed * 2) < mck) {
  40119e:	4b2b      	ldr	r3, [pc, #172]	; (40124c <hsmci_select_device+0xbc>)
  4011a0:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
  4011a4:	d337      	bcc.n	401216 <hsmci_select_device+0x86>
{
  4011a6:	b410      	push	{r4}
		div = (mck / speed) - 2;
  4011a8:	4829      	ldr	r0, [pc, #164]	; (401250 <hsmci_select_device+0xc0>)
  4011aa:	fbb0 f3f1 	udiv	r3, r0, r1
		if (mck % speed) {
  4011ae:	fb01 0113 	mls	r1, r1, r3, r0
  4011b2:	bb29      	cbnz	r1, 401200 <hsmci_select_device+0x70>
		div = (mck / speed) - 2;
  4011b4:	3b02      	subs	r3, #2
	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
  4011b6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4011ba:	6848      	ldr	r0, [r1, #4]
  4011bc:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
  4011c0:	6048      	str	r0, [r1, #4]
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
  4011c2:	684c      	ldr	r4, [r1, #4]
  4011c4:	f3c3 0047 	ubfx	r0, r3, #1, #8
  4011c8:	4320      	orrs	r0, r4
  4011ca:	6048      	str	r0, [r1, #4]
	if (clkodd) {
  4011cc:	f013 0f01 	tst.w	r3, #1
  4011d0:	d018      	beq.n	401204 <hsmci_select_device+0x74>
		HSMCI->HSMCI_MR |= HSMCI_MR_CLKODD;
  4011d2:	684b      	ldr	r3, [r1, #4]
  4011d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4011d8:	604b      	str	r3, [r1, #4]
#endif
	default:
		Assert(false); // Slot number wrong
	}

	switch (bus_width) {
  4011da:	2a04      	cmp	r2, #4
  4011dc:	d019      	beq.n	401212 <hsmci_select_device+0x82>
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
  4011de:	2a08      	cmp	r2, #8
  4011e0:	bf0c      	ite	eq
  4011e2:	22c0      	moveq	r2, #192	; 0xc0
  4011e4:	2200      	movne	r2, #0
		break;

	default:
		Assert(false); // Bus width wrong
	}
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
  4011e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4011ea:	60da      	str	r2, [r3, #12]
}
  4011ec:	f85d 4b04 	ldr.w	r4, [sp], #4
  4011f0:	4770      	bx	lr
		HSMCI->HSMCI_CFG &= ~HSMCI_CFG_HSMODE;
  4011f2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  4011f6:	6d43      	ldr	r3, [r0, #84]	; 0x54
  4011f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  4011fc:	6543      	str	r3, [r0, #84]	; 0x54
  4011fe:	e7ce      	b.n	40119e <hsmci_select_device+0xe>
			div++;
  401200:	3b01      	subs	r3, #1
  401202:	e7d8      	b.n	4011b6 <hsmci_select_device+0x26>
		HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKODD;
  401204:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401208:	684b      	ldr	r3, [r1, #4]
  40120a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  40120e:	604b      	str	r3, [r1, #4]
  401210:	e7e3      	b.n	4011da <hsmci_select_device+0x4a>
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_4;
  401212:	2280      	movs	r2, #128	; 0x80
  401214:	e7e7      	b.n	4011e6 <hsmci_select_device+0x56>
	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
  401216:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40121a:	6859      	ldr	r1, [r3, #4]
  40121c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
  401220:	6059      	str	r1, [r3, #4]
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
  401222:	6859      	ldr	r1, [r3, #4]
  401224:	6059      	str	r1, [r3, #4]
		HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKODD;
  401226:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40122a:	684b      	ldr	r3, [r1, #4]
  40122c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  401230:	604b      	str	r3, [r1, #4]
	switch (bus_width) {
  401232:	2a04      	cmp	r2, #4
  401234:	d007      	beq.n	401246 <hsmci_select_device+0xb6>
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
  401236:	2a08      	cmp	r2, #8
  401238:	bf0c      	ite	eq
  40123a:	22c0      	moveq	r2, #192	; 0xc0
  40123c:	2200      	movne	r2, #0
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
  40123e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401242:	60da      	str	r2, [r3, #12]
  401244:	4770      	bx	lr
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_4;
  401246:	2280      	movs	r2, #128	; 0x80
  401248:	e7f9      	b.n	40123e <hsmci_select_device+0xae>
  40124a:	bf00      	nop
  40124c:	08f0d17f 	.word	0x08f0d17f
  401250:	08f0d180 	.word	0x08f0d180

00401254 <hsmci_deselect_device>:

void hsmci_deselect_device(uint8_t slot)
{
  401254:	4770      	bx	lr

00401256 <hsmci_send_clock>:
}

void hsmci_send_clock(void)
{
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  401256:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40125a:	685a      	ldr	r2, [r3, #4]
  40125c:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  401260:	605a      	str	r2, [r3, #4]
	// Write argument
	HSMCI->HSMCI_ARGR = 0;
  401262:	2200      	movs	r2, #0
  401264:	611a      	str	r2, [r3, #16]
	// Write and start initialization command
	HSMCI->HSMCI_CMDR = HSMCI_CMDR_RSPTYP_NORESP
  401266:	f44f 6210 	mov.w	r2, #2304	; 0x900
  40126a:	615a      	str	r2, [r3, #20]
			| HSMCI_CMDR_SPCMD_INIT
			| HSMCI_CMDR_OPDCMD_OPENDRAIN;
	// Wait end of initialization command
	while (!(HSMCI->HSMCI_SR & HSMCI_SR_CMDRDY));
  40126c:	461a      	mov	r2, r3
  40126e:	6c13      	ldr	r3, [r2, #64]	; 0x40
  401270:	f013 0f01 	tst.w	r3, #1
  401274:	d0fb      	beq.n	40126e <hsmci_send_clock+0x18>
}
  401276:	4770      	bx	lr

00401278 <hsmci_send_cmd>:

bool hsmci_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
  401278:	b510      	push	{r4, lr}
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  40127a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40127e:	685a      	ldr	r2, [r3, #4]
  401280:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  401284:	605a      	str	r2, [r3, #4]
	HSMCI->HSMCI_MR &= ~HSMCI_MR_PDCMODE;
#endif
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	// Disable DMA for HSMCI
	HSMCI->HSMCI_DMA = 0;
  401286:	2400      	movs	r4, #0
  401288:	651c      	str	r4, [r3, #80]	; 0x50
#endif
#endif
	HSMCI->HSMCI_BLKR = 0;
  40128a:	619c      	str	r4, [r3, #24]
	return hsmci_send_cmd_execute(0, cmd, arg);
  40128c:	460a      	mov	r2, r1
  40128e:	4601      	mov	r1, r0
  401290:	4620      	mov	r0, r4
  401292:	4b01      	ldr	r3, [pc, #4]	; (401298 <hsmci_send_cmd+0x20>)
  401294:	4798      	blx	r3
}
  401296:	bd10      	pop	{r4, pc}
  401298:	004010b5 	.word	0x004010b5

0040129c <hsmci_get_response>:

uint32_t hsmci_get_response(void)
{
	return HSMCI->HSMCI_RSPR[0];
  40129c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4012a0:	6a18      	ldr	r0, [r3, #32]
}
  4012a2:	4770      	bx	lr

004012a4 <hsmci_get_response_128>:

void hsmci_get_response_128(uint8_t* response)
{
  4012a4:	b410      	push	{r4}
  4012a6:	1d03      	adds	r3, r0, #4
  4012a8:	3014      	adds	r0, #20
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
  4012aa:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  4012ae:	6a22      	ldr	r2, [r4, #32]
		*response = (response_32 >> 24) & 0xFF;
  4012b0:	0e11      	lsrs	r1, r2, #24
  4012b2:	f803 1c04 	strb.w	r1, [r3, #-4]
		response++;
		*response = (response_32 >> 16) & 0xFF;
  4012b6:	0c11      	lsrs	r1, r2, #16
  4012b8:	f803 1c03 	strb.w	r1, [r3, #-3]
		response++;
		*response = (response_32 >>  8) & 0xFF;
  4012bc:	0a11      	lsrs	r1, r2, #8
  4012be:	f803 1c02 	strb.w	r1, [r3, #-2]
		response++;
		*response = (response_32 >>  0) & 0xFF;
  4012c2:	f803 2c01 	strb.w	r2, [r3, #-1]
  4012c6:	3304      	adds	r3, #4
	for (uint8_t i = 0; i < 4; i++) {
  4012c8:	4283      	cmp	r3, r0
  4012ca:	d1f0      	bne.n	4012ae <hsmci_get_response_128+0xa>
		response++;
	}
}
  4012cc:	f85d 4b04 	ldr.w	r4, [sp], #4
  4012d0:	4770      	bx	lr
	...

004012d4 <hsmci_adtc_start>:

bool hsmci_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg, uint16_t block_size, uint16_t nb_block, bool access_block)
{
  4012d4:	b570      	push	{r4, r5, r6, lr}
  4012d6:	f89d 4010 	ldrb.w	r4, [sp, #16]
	}
#endif

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	if (access_block) {
  4012da:	b384      	cbz	r4, 40133e <hsmci_adtc_start+0x6a>
		// Enable DMA for HSMCI
		HSMCI->HSMCI_DMA = HSMCI_DMA_DMAEN;
  4012dc:	f44f 7580 	mov.w	r5, #256	; 0x100
  4012e0:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  4012e4:	6525      	str	r5, [r4, #80]	; 0x50
#endif
#endif
	// Enabling Read/Write Proof allows to stop the HSMCI Clock during
	// read/write  access if the internal FIFO is full.
	// This will guarantee data integrity, not bandwidth.
	HSMCI->HSMCI_MR |= HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF;
  4012e6:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  4012ea:	686c      	ldr	r4, [r5, #4]
  4012ec:	f444 54c0 	orr.w	r4, r4, #6144	; 0x1800
  4012f0:	606c      	str	r4, [r5, #4]
	// Force byte transfer if needed
	if (block_size & 0x3) {
  4012f2:	f012 0f03 	tst.w	r2, #3
  4012f6:	d027      	beq.n	401348 <hsmci_adtc_start+0x74>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  4012f8:	686c      	ldr	r4, [r5, #4]
  4012fa:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  4012fe:	606c      	str	r4, [r5, #4]
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
	}

	if (cmd & SDMMC_CMD_WRITE) {
  401300:	f400 4400 	and.w	r4, r0, #32768	; 0x8000
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_WRITE;
	} else {
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_READ;
  401304:	2c00      	cmp	r4, #0
  401306:	bf14      	ite	ne
  401308:	f44f 3480 	movne.w	r4, #65536	; 0x10000
  40130c:	f44f 24a0 	moveq.w	r4, #327680	; 0x50000
	}

	if (cmd & SDMMC_CMD_SDIO_BYTE) {
  401310:	f410 3f80 	tst.w	r0, #65536	; 0x10000
  401314:	d11f      	bne.n	401356 <hsmci_adtc_start+0x82>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
			// Value 0 corresponds to a 512-byte transfer
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
	} else {
		HSMCI->HSMCI_BLKR = (block_size << HSMCI_BLKR_BLKLEN_Pos) |
  401316:	ea43 4502 	orr.w	r5, r3, r2, lsl #16
  40131a:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  40131e:	61b5      	str	r5, [r6, #24]
				(nb_block << HSMCI_BLKR_BCNT_Pos);
		if (cmd & SDMMC_CMD_SDIO_BLOCK) {
  401320:	f410 3f00 	tst.w	r0, #131072	; 0x20000
  401324:	d12b      	bne.n	40137e <hsmci_adtc_start+0xaa>
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
		} else if (cmd & SDMMC_CMD_STREAM) {
  401326:	f410 2f80 	tst.w	r0, #262144	; 0x40000
  40132a:	d12b      	bne.n	401384 <hsmci_adtc_start+0xb0>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
		} else if (cmd & SDMMC_CMD_SINGLE_BLOCK) {
  40132c:	f410 2f00 	tst.w	r0, #524288	; 0x80000
  401330:	d118      	bne.n	401364 <hsmci_adtc_start+0x90>
			cmdr |= HSMCI_CMDR_TRTYP_SINGLE;
		} else if (cmd & SDMMC_CMD_MULTI_BLOCK) {
  401332:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
			cmdr |= HSMCI_CMDR_TRTYP_MULTIPLE;
  401336:	bf18      	it	ne
  401338:	f444 2400 	orrne.w	r4, r4, #524288	; 0x80000
  40133c:	e012      	b.n	401364 <hsmci_adtc_start+0x90>
		HSMCI->HSMCI_DMA = 0;
  40133e:	2500      	movs	r5, #0
  401340:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  401344:	6525      	str	r5, [r4, #80]	; 0x50
  401346:	e7ce      	b.n	4012e6 <hsmci_adtc_start+0x12>
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  401348:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  40134c:	686c      	ldr	r4, [r5, #4]
  40134e:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  401352:	606c      	str	r4, [r5, #4]
  401354:	e7d4      	b.n	401300 <hsmci_adtc_start+0x2c>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
  401356:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
  40135a:	f3c2 0508 	ubfx	r5, r2, #0, #9
  40135e:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  401362:	61b5      	str	r5, [r6, #24]
		} else {
			Assert(false); // Incorrect flags
		}
	}
	hsmci_transfert_pos = 0;
  401364:	2600      	movs	r6, #0
  401366:	4d09      	ldr	r5, [pc, #36]	; (40138c <hsmci_adtc_start+0xb8>)
  401368:	602e      	str	r6, [r5, #0]
	hsmci_block_size = block_size;
  40136a:	4d09      	ldr	r5, [pc, #36]	; (401390 <hsmci_adtc_start+0xbc>)
  40136c:	802a      	strh	r2, [r5, #0]
	hsmci_nb_block = nb_block;
  40136e:	4a09      	ldr	r2, [pc, #36]	; (401394 <hsmci_adtc_start+0xc0>)
  401370:	8013      	strh	r3, [r2, #0]

	return hsmci_send_cmd_execute(cmdr, cmd, arg);
  401372:	460a      	mov	r2, r1
  401374:	4601      	mov	r1, r0
  401376:	4620      	mov	r0, r4
  401378:	4b07      	ldr	r3, [pc, #28]	; (401398 <hsmci_adtc_start+0xc4>)
  40137a:	4798      	blx	r3
}
  40137c:	bd70      	pop	{r4, r5, r6, pc}
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
  40137e:	f444 1420 	orr.w	r4, r4, #2621440	; 0x280000
  401382:	e7ef      	b.n	401364 <hsmci_adtc_start+0x90>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
  401384:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  401388:	e7ec      	b.n	401364 <hsmci_adtc_start+0x90>
  40138a:	bf00      	nop
  40138c:	20400a24 	.word	0x20400a24
  401390:	20400a1e 	.word	0x20400a1e
  401394:	20400a20 	.word	0x20400a20
  401398:	004010b5 	.word	0x004010b5

0040139c <hsmci_read_word>:
{
	return hsmci_send_cmd_execute(HSMCI_CMDR_TRCMD_STOP_DATA, cmd, arg);
}

bool hsmci_read_word(uint32_t* value)
{
  40139c:	b508      	push	{r3, lr}

	Assert(((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos);

	// Wait data available
	do {
		sr = HSMCI->HSMCI_SR;
  40139e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4013a2:	4a16      	ldr	r2, [pc, #88]	; (4013fc <hsmci_read_word+0x60>)
		sr = HSMCI->HSMCI_SR;
  4013a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4013a6:	4213      	tst	r3, r2
  4013a8:	d11d      	bne.n	4013e6 <hsmci_read_word+0x4a>
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_RXRDY));
  4013aa:	f013 0f02 	tst.w	r3, #2
  4013ae:	d0f9      	beq.n	4013a4 <hsmci_read_word+0x8>

	// Read data
	*value = HSMCI->HSMCI_RDR;
  4013b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4013b6:	6003      	str	r3, [r0, #0]
	hsmci_transfert_pos += 4;
  4013b8:	4a11      	ldr	r2, [pc, #68]	; (401400 <hsmci_read_word+0x64>)
  4013ba:	6813      	ldr	r3, [r2, #0]
  4013bc:	3304      	adds	r3, #4
  4013be:	6013      	str	r3, [r2, #0]
	if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  4013c0:	4a10      	ldr	r2, [pc, #64]	; (401404 <hsmci_read_word+0x68>)
  4013c2:	8811      	ldrh	r1, [r2, #0]
  4013c4:	4a10      	ldr	r2, [pc, #64]	; (401408 <hsmci_read_word+0x6c>)
  4013c6:	8812      	ldrh	r2, [r2, #0]
  4013c8:	fb02 f201 	mul.w	r2, r2, r1
  4013cc:	4293      	cmp	r3, r2
  4013ce:	d312      	bcc.n	4013f6 <hsmci_read_word+0x5a>
	}

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
  4013d0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4013d4:	4a09      	ldr	r2, [pc, #36]	; (4013fc <hsmci_read_word+0x60>)
		sr = HSMCI->HSMCI_SR;
  4013d6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4013d8:	4213      	tst	r3, r2
  4013da:	d108      	bne.n	4013ee <hsmci_read_word+0x52>
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  4013dc:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  4013e0:	d0f9      	beq.n	4013d6 <hsmci_read_word+0x3a>
	return true;
  4013e2:	2001      	movs	r0, #1
  4013e4:	bd08      	pop	{r3, pc}
			hsmci_reset();
  4013e6:	4b09      	ldr	r3, [pc, #36]	; (40140c <hsmci_read_word+0x70>)
  4013e8:	4798      	blx	r3
			return false;
  4013ea:	2000      	movs	r0, #0
  4013ec:	bd08      	pop	{r3, pc}
			hsmci_reset();
  4013ee:	4b07      	ldr	r3, [pc, #28]	; (40140c <hsmci_read_word+0x70>)
  4013f0:	4798      	blx	r3
			return false;
  4013f2:	2000      	movs	r0, #0
  4013f4:	bd08      	pop	{r3, pc}
		return true;
  4013f6:	2001      	movs	r0, #1
}
  4013f8:	bd08      	pop	{r3, pc}
  4013fa:	bf00      	nop
  4013fc:	c0600000 	.word	0xc0600000
  401400:	20400a24 	.word	0x20400a24
  401404:	20400a1e 	.word	0x20400a1e
  401408:	20400a20 	.word	0x20400a20
  40140c:	00401089 	.word	0x00401089

00401410 <hsmci_start_read_blocks>:
#endif // HSMCI_MR_PDCMODE

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
bool hsmci_start_read_blocks(void *dest, uint16_t nb_block)
{
  401410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401414:	b088      	sub	sp, #32
  401416:	4604      	mov	r4, r0
  401418:	460d      	mov	r5, r1
	xdmac_channel_config_t p_cfg = {0, 0, 0, 0, 0, 0, 0, 0};
  40141a:	2220      	movs	r2, #32
  40141c:	2100      	movs	r1, #0
  40141e:	4668      	mov	r0, sp
  401420:	4b26      	ldr	r3, [pc, #152]	; (4014bc <hsmci_start_read_blocks+0xac>)
  401422:	4798      	blx	r3
 */
static inline void xdmac_channel_disable(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  401424:	4826      	ldr	r0, [pc, #152]	; (4014c0 <hsmci_start_read_blocks+0xb0>)
  401426:	2301      	movs	r3, #1
  401428:	6203      	str	r3, [r0, #32]
	Assert(nb_block);
	Assert(dest);

	xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);

	nb_data = nb_block * hsmci_block_size;
  40142a:	4b26      	ldr	r3, [pc, #152]	; (4014c4 <hsmci_start_read_blocks+0xb4>)
  40142c:	881b      	ldrh	r3, [r3, #0]
  40142e:	fb05 f503 	mul.w	r5, r5, r3

	p_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  401432:	4b25      	ldr	r3, [pc, #148]	; (4014c8 <hsmci_start_read_blocks+0xb8>)
  401434:	9303      	str	r3, [sp, #12]
					| XDMAC_CC_SIF_AHB_IF1
					| XDMAC_CC_DIF_AHB_IF0
					| XDMAC_CC_SAM_FIXED_AM
					| XDMAC_CC_DAM_INCREMENTED_AM
					| XDMAC_CC_PERID(CONF_HSMCI_XDMAC_CHANNEL);
	p_cfg.mbr_ubc = nb_data / 4;
  401436:	08ab      	lsrs	r3, r5, #2
  401438:	9300      	str	r3, [sp, #0]
	p_cfg.mbr_sa = (uint32_t)&(HSMCI->HSMCI_FIFO[0]);
  40143a:	4b24      	ldr	r3, [pc, #144]	; (4014cc <hsmci_start_read_blocks+0xbc>)
  40143c:	9301      	str	r3, [sp, #4]
	p_cfg.mbr_da = (uint32_t)dest;
  40143e:	9402      	str	r4, [sp, #8]
	xdmac_configure_transfer(XDMAC, CONF_HSMCI_XDMAC_CHANNEL, &p_cfg);
  401440:	466a      	mov	r2, sp
  401442:	2100      	movs	r1, #0
  401444:	4b22      	ldr	r3, [pc, #136]	; (4014d0 <hsmci_start_read_blocks+0xc0>)
  401446:	4798      	blx	r3
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  401448:	4b22      	ldr	r3, [pc, #136]	; (4014d4 <hsmci_start_read_blocks+0xc4>)
  40144a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  40144e:	f3c3 374e 	ubfx	r7, r3, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  401452:	f003 0007 	and.w	r0, r3, #7
  401456:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  401458:	f3c3 0ec9 	ubfx	lr, r3, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  40145c:	fabe fc8e 	clz	ip, lr
    wshift  = __CLZ(ways) & 0x1f;
  401460:	f00c 0c1f 	and.w	ip, ip, #31
  __ASM volatile ("dsb");
  401464:	f3bf 8f4f 	dsb	sy
  401468:	f04f 34ff 	mov.w	r4, #4294967295
  40146c:	fa04 f800 	lsl.w	r8, r4, r0
  401470:	fa07 f000 	lsl.w	r0, r7, r0
  401474:	fa04 f40c 	lsl.w	r4, r4, ip
  401478:	fa0e fc0c 	lsl.w	ip, lr, ip

    do {                                    // clean & invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCCISW = sw;
  40147c:	4e15      	ldr	r6, [pc, #84]	; (4014d4 <hsmci_start_read_blocks+0xc4>)
         int32_t tmpways = ways;
  40147e:	4672      	mov	r2, lr
  401480:	4663      	mov	r3, ip
              sw = ((tmpways << wshift) | (sets << sshift));
  401482:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCCISW = sw;
  401486:	f8c6 1274 	str.w	r1, [r6, #628]	; 0x274
            } while(tmpways--);
  40148a:	3a01      	subs	r2, #1
  40148c:	4423      	add	r3, r4
  40148e:	f1b2 3fff 	cmp.w	r2, #4294967295
  401492:	d1f6      	bne.n	401482 <hsmci_start_read_blocks+0x72>
        } while(sets--);
  401494:	3f01      	subs	r7, #1
  401496:	4440      	add	r0, r8
  401498:	f1b7 3fff 	cmp.w	r7, #4294967295
  40149c:	d1ef      	bne.n	40147e <hsmci_start_read_blocks+0x6e>
  40149e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4014a2:	f3bf 8f6f 	isb	sy
	xdmac->XDMAC_GE = (XDMAC_GE_EN0 << channel_num);
  4014a6:	2001      	movs	r0, #1
  4014a8:	4b05      	ldr	r3, [pc, #20]	; (4014c0 <hsmci_start_read_blocks+0xb0>)
  4014aa:	61d8      	str	r0, [r3, #28]
	xdmac_channel_enable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
	hsmci_transfert_pos += nb_data;
  4014ac:	4a0a      	ldr	r2, [pc, #40]	; (4014d8 <hsmci_start_read_blocks+0xc8>)
  4014ae:	6813      	ldr	r3, [r2, #0]
  4014b0:	442b      	add	r3, r5
  4014b2:	6013      	str	r3, [r2, #0]
	return true;
}
  4014b4:	b008      	add	sp, #32
  4014b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4014ba:	bf00      	nop
  4014bc:	004079ed 	.word	0x004079ed
  4014c0:	40078000 	.word	0x40078000
  4014c4:	20400a1e 	.word	0x20400a1e
  4014c8:	00043001 	.word	0x00043001
  4014cc:	40000200 	.word	0x40000200
  4014d0:	0040173d 	.word	0x0040173d
  4014d4:	e000ed00 	.word	0xe000ed00
  4014d8:	20400a24 	.word	0x20400a24

004014dc <hsmci_wait_end_of_read_blocks>:

bool hsmci_wait_end_of_read_blocks(void)
{
  4014dc:	b570      	push	{r4, r5, r6, lr}
			hsmci_reset();
			// Disable XDMAC
			xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			return false;
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  4014de:	4b12      	ldr	r3, [pc, #72]	; (401528 <hsmci_wait_end_of_read_blocks+0x4c>)
  4014e0:	881b      	ldrh	r3, [r3, #0]
  4014e2:	4a12      	ldr	r2, [pc, #72]	; (40152c <hsmci_wait_end_of_read_blocks+0x50>)
  4014e4:	8812      	ldrh	r2, [r2, #0]
  4014e6:	fb02 f203 	mul.w	r2, r2, r3
  4014ea:	4b11      	ldr	r3, [pc, #68]	; (401530 <hsmci_wait_end_of_read_blocks+0x54>)
  4014ec:	681c      	ldr	r4, [r3, #0]
		sr = HSMCI->HSMCI_SR;
  4014ee:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4014f2:	4910      	ldr	r1, [pc, #64]	; (401534 <hsmci_wait_end_of_read_blocks+0x58>)
 */
static inline uint32_t xdmac_channel_get_interrupt_status(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  4014f4:	4e10      	ldr	r6, [pc, #64]	; (401538 <hsmci_wait_end_of_read_blocks+0x5c>)
  4014f6:	e009      	b.n	40150c <hsmci_wait_end_of_read_blocks+0x30>
			hsmci_reset();
  4014f8:	4b10      	ldr	r3, [pc, #64]	; (40153c <hsmci_wait_end_of_read_blocks+0x60>)
  4014fa:	4798      	blx	r3
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  4014fc:	2201      	movs	r2, #1
  4014fe:	4b0e      	ldr	r3, [pc, #56]	; (401538 <hsmci_wait_end_of_read_blocks+0x5c>)
  401500:	621a      	str	r2, [r3, #32]
			return false;
  401502:	2000      	movs	r0, #0
  401504:	bd70      	pop	{r4, r5, r6, pc}
			dma_sr = xdmac_channel_get_interrupt_status(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			if (dma_sr & XDMAC_CIS_BIS) {
				return true;
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  401506:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  40150a:	d10a      	bne.n	401522 <hsmci_wait_end_of_read_blocks+0x46>
		sr = HSMCI->HSMCI_SR;
  40150c:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  40150e:	420b      	tst	r3, r1
  401510:	d1f2      	bne.n	4014f8 <hsmci_wait_end_of_read_blocks+0x1c>
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  401512:	42a2      	cmp	r2, r4
  401514:	d9f7      	bls.n	401506 <hsmci_wait_end_of_read_blocks+0x2a>
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  401516:	6df5      	ldr	r5, [r6, #92]	; 0x5c
			if (dma_sr & XDMAC_CIS_BIS) {
  401518:	f015 0f01 	tst.w	r5, #1
  40151c:	d0f3      	beq.n	401506 <hsmci_wait_end_of_read_blocks+0x2a>
				return true;
  40151e:	2001      	movs	r0, #1
	return true;
}
  401520:	bd70      	pop	{r4, r5, r6, pc}
	return true;
  401522:	2001      	movs	r0, #1
  401524:	bd70      	pop	{r4, r5, r6, pc}
  401526:	bf00      	nop
  401528:	20400a1e 	.word	0x20400a1e
  40152c:	20400a20 	.word	0x20400a20
  401530:	20400a24 	.word	0x20400a24
  401534:	c0600000 	.word	0xc0600000
  401538:	40078000 	.word	0x40078000
  40153c:	00401089 	.word	0x00401089

00401540 <hsmci_start_write_blocks>:

bool hsmci_start_write_blocks(const void *src, uint16_t nb_block)
{
  401540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401544:	b088      	sub	sp, #32
  401546:	4604      	mov	r4, r0
  401548:	460d      	mov	r5, r1
	xdmac_channel_config_t p_cfg = {0, 0, 0, 0, 0, 0, 0, 0};
  40154a:	2220      	movs	r2, #32
  40154c:	2100      	movs	r1, #0
  40154e:	4668      	mov	r0, sp
  401550:	4b26      	ldr	r3, [pc, #152]	; (4015ec <hsmci_start_write_blocks+0xac>)
  401552:	4798      	blx	r3
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  401554:	4826      	ldr	r0, [pc, #152]	; (4015f0 <hsmci_start_write_blocks+0xb0>)
  401556:	2301      	movs	r3, #1
  401558:	6203      	str	r3, [r0, #32]
	Assert(nb_block);
	Assert(dest);

	xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);

	nb_data = nb_block * hsmci_block_size;
  40155a:	4b26      	ldr	r3, [pc, #152]	; (4015f4 <hsmci_start_write_blocks+0xb4>)
  40155c:	881b      	ldrh	r3, [r3, #0]
  40155e:	fb05 f503 	mul.w	r5, r5, r3

	p_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  401562:	4b25      	ldr	r3, [pc, #148]	; (4015f8 <hsmci_start_write_blocks+0xb8>)
  401564:	9303      	str	r3, [sp, #12]
					| XDMAC_CC_SIF_AHB_IF0
					| XDMAC_CC_DIF_AHB_IF1
					| XDMAC_CC_SAM_INCREMENTED_AM
					| XDMAC_CC_DAM_FIXED_AM
					| XDMAC_CC_PERID(CONF_HSMCI_XDMAC_CHANNEL);
	p_cfg.mbr_ubc = nb_data / 4;
  401566:	08ab      	lsrs	r3, r5, #2
  401568:	9300      	str	r3, [sp, #0]
	p_cfg.mbr_sa = (uint32_t)src;
  40156a:	9401      	str	r4, [sp, #4]
	p_cfg.mbr_da = (uint32_t)&(HSMCI->HSMCI_FIFO[0]);
  40156c:	4b23      	ldr	r3, [pc, #140]	; (4015fc <hsmci_start_write_blocks+0xbc>)
  40156e:	9302      	str	r3, [sp, #8]
	xdmac_configure_transfer(XDMAC, CONF_HSMCI_XDMAC_CHANNEL, &p_cfg);
  401570:	466a      	mov	r2, sp
  401572:	2100      	movs	r1, #0
  401574:	4b22      	ldr	r3, [pc, #136]	; (401600 <hsmci_start_write_blocks+0xc0>)
  401576:	4798      	blx	r3
    ccsidr  = SCB->CCSIDR;
  401578:	4b22      	ldr	r3, [pc, #136]	; (401604 <hsmci_start_write_blocks+0xc4>)
  40157a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  40157e:	f3c3 374e 	ubfx	r7, r3, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  401582:	f003 0007 	and.w	r0, r3, #7
  401586:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  401588:	f3c3 0ec9 	ubfx	lr, r3, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  40158c:	fabe fc8e 	clz	ip, lr
    wshift  = __CLZ(ways) & 0x1f;
  401590:	f00c 0c1f 	and.w	ip, ip, #31
  __ASM volatile ("dsb");
  401594:	f3bf 8f4f 	dsb	sy
  401598:	f04f 34ff 	mov.w	r4, #4294967295
  40159c:	fa04 f800 	lsl.w	r8, r4, r0
  4015a0:	fa07 f000 	lsl.w	r0, r7, r0
  4015a4:	fa04 f40c 	lsl.w	r4, r4, ip
  4015a8:	fa0e fc0c 	lsl.w	ip, lr, ip
              SCB->DCCISW = sw;
  4015ac:	4e15      	ldr	r6, [pc, #84]	; (401604 <hsmci_start_write_blocks+0xc4>)
         int32_t tmpways = ways;
  4015ae:	4672      	mov	r2, lr
  4015b0:	4663      	mov	r3, ip
              sw = ((tmpways << wshift) | (sets << sshift));
  4015b2:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCCISW = sw;
  4015b6:	f8c6 1274 	str.w	r1, [r6, #628]	; 0x274
            } while(tmpways--);
  4015ba:	3a01      	subs	r2, #1
  4015bc:	4423      	add	r3, r4
  4015be:	f1b2 3fff 	cmp.w	r2, #4294967295
  4015c2:	d1f6      	bne.n	4015b2 <hsmci_start_write_blocks+0x72>
        } while(sets--);
  4015c4:	3f01      	subs	r7, #1
  4015c6:	4440      	add	r0, r8
  4015c8:	f1b7 3fff 	cmp.w	r7, #4294967295
  4015cc:	d1ef      	bne.n	4015ae <hsmci_start_write_blocks+0x6e>
  4015ce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4015d2:	f3bf 8f6f 	isb	sy
	xdmac->XDMAC_GE = (XDMAC_GE_EN0 << channel_num);
  4015d6:	2001      	movs	r0, #1
  4015d8:	4b05      	ldr	r3, [pc, #20]	; (4015f0 <hsmci_start_write_blocks+0xb0>)
  4015da:	61d8      	str	r0, [r3, #28]
	xdmac_channel_enable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
	hsmci_transfert_pos += nb_data;
  4015dc:	4a0a      	ldr	r2, [pc, #40]	; (401608 <hsmci_start_write_blocks+0xc8>)
  4015de:	6813      	ldr	r3, [r2, #0]
  4015e0:	442b      	add	r3, r5
  4015e2:	6013      	str	r3, [r2, #0]
	return true;
}
  4015e4:	b008      	add	sp, #32
  4015e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4015ea:	bf00      	nop
  4015ec:	004079ed 	.word	0x004079ed
  4015f0:	40078000 	.word	0x40078000
  4015f4:	20400a1e 	.word	0x20400a1e
  4015f8:	00015011 	.word	0x00015011
  4015fc:	40000200 	.word	0x40000200
  401600:	0040173d 	.word	0x0040173d
  401604:	e000ed00 	.word	0xe000ed00
  401608:	20400a24 	.word	0x20400a24

0040160c <hsmci_wait_end_of_write_blocks>:

bool hsmci_wait_end_of_write_blocks(void)
{
  40160c:	b570      	push	{r4, r5, r6, lr}
			hsmci_reset();
			// Disable XDMAC
			xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			return false;
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  40160e:	4b12      	ldr	r3, [pc, #72]	; (401658 <hsmci_wait_end_of_write_blocks+0x4c>)
  401610:	881b      	ldrh	r3, [r3, #0]
  401612:	4a12      	ldr	r2, [pc, #72]	; (40165c <hsmci_wait_end_of_write_blocks+0x50>)
  401614:	8812      	ldrh	r2, [r2, #0]
  401616:	fb02 f203 	mul.w	r2, r2, r3
  40161a:	4b11      	ldr	r3, [pc, #68]	; (401660 <hsmci_wait_end_of_write_blocks+0x54>)
  40161c:	681c      	ldr	r4, [r3, #0]
		sr = HSMCI->HSMCI_SR;
  40161e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  401622:	4910      	ldr	r1, [pc, #64]	; (401664 <hsmci_wait_end_of_write_blocks+0x58>)
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  401624:	4e10      	ldr	r6, [pc, #64]	; (401668 <hsmci_wait_end_of_write_blocks+0x5c>)
  401626:	e009      	b.n	40163c <hsmci_wait_end_of_write_blocks+0x30>
			hsmci_reset();
  401628:	4b10      	ldr	r3, [pc, #64]	; (40166c <hsmci_wait_end_of_write_blocks+0x60>)
  40162a:	4798      	blx	r3
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  40162c:	2201      	movs	r2, #1
  40162e:	4b0e      	ldr	r3, [pc, #56]	; (401668 <hsmci_wait_end_of_write_blocks+0x5c>)
  401630:	621a      	str	r2, [r3, #32]
			return false;
  401632:	2000      	movs	r0, #0
  401634:	bd70      	pop	{r4, r5, r6, pc}
			dma_sr = xdmac_channel_get_interrupt_status(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			if (dma_sr & XDMAC_CIS_BIS) {
				return true;
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  401636:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  40163a:	d10a      	bne.n	401652 <hsmci_wait_end_of_write_blocks+0x46>
		sr = HSMCI->HSMCI_SR;
  40163c:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  40163e:	420b      	tst	r3, r1
  401640:	d1f2      	bne.n	401628 <hsmci_wait_end_of_write_blocks+0x1c>
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  401642:	42a2      	cmp	r2, r4
  401644:	d9f7      	bls.n	401636 <hsmci_wait_end_of_write_blocks+0x2a>
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  401646:	6df5      	ldr	r5, [r6, #92]	; 0x5c
			if (dma_sr & XDMAC_CIS_BIS) {
  401648:	f015 0f01 	tst.w	r5, #1
  40164c:	d0f3      	beq.n	401636 <hsmci_wait_end_of_write_blocks+0x2a>
				return true;
  40164e:	2001      	movs	r0, #1

	return true;
}
  401650:	bd70      	pop	{r4, r5, r6, pc}
	return true;
  401652:	2001      	movs	r0, #1
  401654:	bd70      	pop	{r4, r5, r6, pc}
  401656:	bf00      	nop
  401658:	20400a1e 	.word	0x20400a1e
  40165c:	20400a20 	.word	0x20400a20
  401660:	20400a24 	.word	0x20400a24
  401664:	c0600000 	.word	0xc0600000
  401668:	40078000 	.word	0x40078000
  40166c:	00401089 	.word	0x00401089

00401670 <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  401670:	b430      	push	{r4, r5}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  401672:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  401674:	6884      	ldr	r4, [r0, #8]
  401676:	42a5      	cmp	r5, r4
  401678:	d003      	beq.n	401682 <rtc_get_time+0x12>
		ul_time = p_rtc->RTC_TIMR;
  40167a:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  40167c:	6884      	ldr	r4, [r0, #8]
  40167e:	42ac      	cmp	r4, r5
  401680:	d1fb      	bne.n	40167a <rtc_get_time+0xa>
	}

	/* Hour */
	if (pul_hour) {
  401682:	b161      	cbz	r1, 40169e <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  401684:	f3c4 5001 	ubfx	r0, r4, #20, #2
  401688:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  40168c:	f3c4 4003 	ubfx	r0, r4, #16, #4
  401690:	eb00 0045 	add.w	r0, r0, r5, lsl #1

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  401694:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
			*pul_hour += 12;
  401698:	bf18      	it	ne
  40169a:	300c      	addne	r0, #12
  40169c:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  40169e:	b142      	cbz	r2, 4016b2 <rtc_get_time+0x42>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  4016a0:	f3c4 3102 	ubfx	r1, r4, #12, #3
  4016a4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  4016a8:	f3c4 2003 	ubfx	r0, r4, #8, #4
  4016ac:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  4016b0:	6011      	str	r1, [r2, #0]
	}

	/* Second */
	if (pul_second) {
  4016b2:	b143      	cbz	r3, 4016c6 <rtc_get_time+0x56>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4016b4:	f3c4 1202 	ubfx	r2, r4, #4, #3
  4016b8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4016bc:	f004 040f 	and.w	r4, r4, #15
  4016c0:	eb04 0442 	add.w	r4, r4, r2, lsl #1
  4016c4:	601c      	str	r4, [r3, #0]
	}
}
  4016c6:	bc30      	pop	{r4, r5}
  4016c8:	4770      	bx	lr

004016ca <rtc_get_date>:
 * \param pul_day Current day.
 * \param pul_week Current day in current week.
 */
void rtc_get_date(Rtc *p_rtc, uint32_t *pul_year, uint32_t *pul_month,
		uint32_t *pul_day, uint32_t *pul_week)
{
  4016ca:	b4f0      	push	{r4, r5, r6, r7}
  4016cc:	9e04      	ldr	r6, [sp, #16]
	uint32_t ul_date;
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
  4016ce:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  4016d0:	68c4      	ldr	r4, [r0, #12]
  4016d2:	42a5      	cmp	r5, r4
  4016d4:	d003      	beq.n	4016de <rtc_get_date+0x14>
		ul_date = p_rtc->RTC_CALR;
  4016d6:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  4016d8:	68c4      	ldr	r4, [r0, #12]
  4016da:	42ac      	cmp	r4, r5
  4016dc:	d1fb      	bne.n	4016d6 <rtc_get_date+0xc>
	}

	/* Retrieve year */
	if (pul_year) {
  4016de:	b199      	cbz	r1, 401708 <rtc_get_date+0x3e>
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4016e0:	f3c4 3003 	ubfx	r0, r4, #12, #4
  4016e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4016e8:	f3c4 2703 	ubfx	r7, r4, #8, #4
  4016ec:	eb07 0740 	add.w	r7, r7, r0, lsl #1
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4016f0:	f3c4 1002 	ubfx	r0, r4, #4, #3
  4016f4:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  4016f8:	f004 000f 	and.w	r0, r4, #15
  4016fc:	eb00 0045 	add.w	r0, r0, r5, lsl #1
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  401700:	2564      	movs	r5, #100	; 0x64
  401702:	fb05 7000 	mla	r0, r5, r0, r7
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  401706:	6008      	str	r0, [r1, #0]
	}

	/* Retrieve month */
	if (pul_month) {
  401708:	b142      	cbz	r2, 40171c <rtc_get_date+0x52>
		ul_temp = (ul_date & RTC_CALR_MONTH_Msk) >> RTC_CALR_MONTH_Pos;
		*pul_month = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40170a:	f3c4 5000 	ubfx	r0, r4, #20, #1
  40170e:	0081      	lsls	r1, r0, #2
  401710:	4408      	add	r0, r1
  401712:	f3c4 4103 	ubfx	r1, r4, #16, #4
  401716:	eb01 0140 	add.w	r1, r1, r0, lsl #1
  40171a:	6011      	str	r1, [r2, #0]
	}

	/* Retrieve day */
	if (pul_day) {
  40171c:	b143      	cbz	r3, 401730 <rtc_get_date+0x66>
		ul_temp = (ul_date & RTC_CALR_DATE_Msk) >> RTC_CALR_DATE_Pos;
		*pul_day = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40171e:	f3c4 7201 	ubfx	r2, r4, #28, #2
  401722:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  401726:	f3c4 6103 	ubfx	r1, r4, #24, #4
  40172a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
  40172e:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve week */
	if (pul_week) {
  401730:	b116      	cbz	r6, 401738 <rtc_get_date+0x6e>
		*pul_week = ((ul_date & RTC_CALR_DAY_Msk) >> RTC_CALR_DAY_Pos);
  401732:	f3c4 5442 	ubfx	r4, r4, #21, #3
  401736:	6034      	str	r4, [r6, #0]
	}
}
  401738:	bcf0      	pop	{r4, r5, r6, r7}
  40173a:	4770      	bx	lr

0040173c <xdmac_configure_transfer>:
  40173c:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  401740:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	Assert(cfg);
	
	xdmac_channel_get_interrupt_status( xdmac, channel_num);
	xdmac_channel_set_source_addr(xdmac, channel_num, cfg->mbr_sa);
  401742:	6853      	ldr	r3, [r2, #4]
 */
static inline void xdmac_channel_set_source_addr(Xdmac *xdmac, uint32_t channel_num, uint32_t src_addr)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSA = src_addr;
  401744:	660b      	str	r3, [r1, #96]	; 0x60
	xdmac_channel_set_destination_addr(xdmac, channel_num, cfg->mbr_da);
  401746:	6893      	ldr	r3, [r2, #8]
 */
static inline void xdmac_channel_set_destination_addr(Xdmac *xdmac, uint32_t channel_num, uint32_t dst_addr)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDA = dst_addr;
  401748:	664b      	str	r3, [r1, #100]	; 0x64
 */
static inline void xdmac_channel_set_microblock_control(Xdmac *xdmac, uint32_t channel_num, uint32_t ublen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CUBC = XDMAC_CUBC_UBLEN(ublen);
  40174a:	6813      	ldr	r3, [r2, #0]
  40174c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401750:	670b      	str	r3, [r1, #112]	; 0x70
 */
static inline void xdmac_channel_set_block_control(Xdmac *xdmac, uint32_t channel_num, uint32_t blen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CBC = XDMAC_CBC_BLEN(blen);
  401752:	6913      	ldr	r3, [r2, #16]
  401754:	f3c3 030b 	ubfx	r3, r3, #0, #12
  401758:	674b      	str	r3, [r1, #116]	; 0x74
	xdmac_channel_set_microblock_control(xdmac, channel_num, cfg->mbr_ubc);
	xdmac_channel_set_block_control(xdmac, channel_num, cfg->mbr_bc);
	xdmac_channel_set_datastride_mempattern(xdmac, channel_num, cfg->mbr_ds);
  40175a:	6953      	ldr	r3, [r2, #20]
 */
static inline void xdmac_channel_set_datastride_mempattern(Xdmac *xdmac, uint32_t channel_num, uint32_t dds_msp)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDS_MSP = dds_msp;
  40175c:	67cb      	str	r3, [r1, #124]	; 0x7c
static inline void xdmac_channel_set_source_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t subs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSUS = XDMAC_CSUS_SUBS(subs);
  40175e:	6993      	ldr	r3, [r2, #24]
  401760:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401764:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
static inline void xdmac_channel_set_destination_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t dubs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDUS = XDMAC_CDUS_DUBS(dubs);
  401768:	69d3      	ldr	r3, [r2, #28]
  40176a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  40176e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
	xdmac_channel_set_source_microblock_stride(xdmac, channel_num, cfg->mbr_sus);
	xdmac_channel_set_destination_microblock_stride(xdmac, channel_num, cfg->mbr_dus);
	xdmac_channel_set_config(xdmac, channel_num, cfg->mbr_cfg );
  401772:	68d3      	ldr	r3, [r2, #12]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CC = config;
  401774:	678b      	str	r3, [r1, #120]	; 0x78
  401776:	4770      	bx	lr

00401778 <disk_initialize>:
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
  401778:	2801      	cmp	r0, #1
  40177a:	d901      	bls.n	401780 <disk_initialize+0x8>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
  40177c:	2001      	movs	r0, #1
  40177e:	4770      	bx	lr
{
  401780:	b510      	push	{r4, lr}
  401782:	4604      	mov	r4, r0
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
		mem_status = mem_test_unit_ready(drv);
  401784:	4b0a      	ldr	r3, [pc, #40]	; (4017b0 <disk_initialize+0x38>)
  401786:	4798      	blx	r3
		if (CTRL_BUSY != mem_status) {
  401788:	2803      	cmp	r0, #3
  40178a:	d106      	bne.n	40179a <disk_initialize+0x22>
		mem_status = mem_test_unit_ready(drv);
  40178c:	4620      	mov	r0, r4
  40178e:	4b08      	ldr	r3, [pc, #32]	; (4017b0 <disk_initialize+0x38>)
  401790:	4798      	blx	r3
		if (CTRL_BUSY != mem_status) {
  401792:	2803      	cmp	r0, #3
  401794:	d101      	bne.n	40179a <disk_initialize+0x22>
			break;
		}
	}
	if (mem_status != CTRL_GOOD) {
		return STA_NOINIT;
  401796:	2001      	movs	r0, #1
  401798:	bd10      	pop	{r4, pc}
	if (mem_status != CTRL_GOOD) {
  40179a:	b938      	cbnz	r0, 4017ac <disk_initialize+0x34>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
  40179c:	4620      	mov	r0, r4
  40179e:	4b05      	ldr	r3, [pc, #20]	; (4017b4 <disk_initialize+0x3c>)
  4017a0:	4798      	blx	r3
  4017a2:	2800      	cmp	r0, #0
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
  4017a4:	bf14      	ite	ne
  4017a6:	2004      	movne	r0, #4
  4017a8:	2000      	moveq	r0, #0
  4017aa:	bd10      	pop	{r4, pc}
		return STA_NOINIT;
  4017ac:	2001      	movs	r0, #1
}
  4017ae:	bd10      	pop	{r4, pc}
  4017b0:	00401015 	.word	0x00401015
  4017b4:	00401045 	.word	0x00401045

004017b8 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
  4017b8:	b508      	push	{r3, lr}
	switch (mem_test_unit_ready(drv)) {
  4017ba:	4b05      	ldr	r3, [pc, #20]	; (4017d0 <disk_status+0x18>)
  4017bc:	4798      	blx	r3
  4017be:	b120      	cbz	r0, 4017ca <disk_status+0x12>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
	default:
		return STA_NOINIT;
  4017c0:	2802      	cmp	r0, #2
  4017c2:	bf0c      	ite	eq
  4017c4:	2003      	moveq	r0, #3
  4017c6:	2001      	movne	r0, #1
  4017c8:	bd08      	pop	{r3, pc}
		return 0;
  4017ca:	2000      	movs	r0, #0
	}
}
  4017cc:	bd08      	pop	{r3, pc}
  4017ce:	bf00      	nop
  4017d0:	00401015 	.word	0x00401015

004017d4 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
  4017d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4017d8:	b083      	sub	sp, #12
  4017da:	4680      	mov	r8, r0
  4017dc:	460d      	mov	r5, r1
  4017de:	4614      	mov	r4, r2
  4017e0:	461f      	mov	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
  4017e2:	4b15      	ldr	r3, [pc, #84]	; (401838 <disk_read+0x64>)
  4017e4:	4798      	blx	r3
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
  4017e6:	b918      	cbnz	r0, 4017f0 <disk_read+0x1c>
		return RES_ERROR;
  4017e8:	2001      	movs	r0, #1
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
  4017ea:	b003      	add	sp, #12
  4017ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4017f0:	4606      	mov	r6, r0
	mem_read_capacity(drv, &ul_last_sector_num);
  4017f2:	a901      	add	r1, sp, #4
  4017f4:	4640      	mov	r0, r8
  4017f6:	4b11      	ldr	r3, [pc, #68]	; (40183c <disk_read+0x68>)
  4017f8:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
  4017fa:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
  4017fc:	fb06 4207 	mla	r2, r6, r7, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
  401800:	9b01      	ldr	r3, [sp, #4]
  401802:	fb03 6306 	mla	r3, r3, r6, r6
	if ((sector + count * uc_sector_size) >
  401806:	429a      	cmp	r2, r3
  401808:	d901      	bls.n	40180e <disk_read+0x3a>
		return RES_PARERR;
  40180a:	2004      	movs	r0, #4
  40180c:	e7ed      	b.n	4017ea <disk_read+0x16>
	for (i = 0; i < count; i++) {
  40180e:	46ba      	mov	sl, r7
  401810:	b177      	cbz	r7, 401830 <disk_read+0x5c>
  401812:	0276      	lsls	r6, r6, #9
  401814:	2700      	movs	r7, #0
		if (memory_2_ram(drv, sector + uc_sector_size * i,
  401816:	f8df b028 	ldr.w	fp, [pc, #40]	; 401840 <disk_read+0x6c>
  40181a:	462a      	mov	r2, r5
  40181c:	4621      	mov	r1, r4
  40181e:	4640      	mov	r0, r8
  401820:	47d8      	blx	fp
  401822:	b938      	cbnz	r0, 401834 <disk_read+0x60>
	for (i = 0; i < count; i++) {
  401824:	3701      	adds	r7, #1
  401826:	444c      	add	r4, r9
  401828:	4435      	add	r5, r6
  40182a:	4557      	cmp	r7, sl
  40182c:	d1f5      	bne.n	40181a <disk_read+0x46>
  40182e:	e7dc      	b.n	4017ea <disk_read+0x16>
	return RES_OK;
  401830:	2000      	movs	r0, #0
  401832:	e7da      	b.n	4017ea <disk_read+0x16>
			return RES_ERROR;
  401834:	2001      	movs	r0, #1
  401836:	e7d8      	b.n	4017ea <disk_read+0x16>
  401838:	0040103d 	.word	0x0040103d
  40183c:	00401029 	.word	0x00401029
  401840:	00401059 	.word	0x00401059

00401844 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
  401844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401848:	b083      	sub	sp, #12
  40184a:	4680      	mov	r8, r0
  40184c:	460d      	mov	r5, r1
  40184e:	4614      	mov	r4, r2
  401850:	461f      	mov	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
  401852:	4b15      	ldr	r3, [pc, #84]	; (4018a8 <disk_write+0x64>)
  401854:	4798      	blx	r3
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
  401856:	b918      	cbnz	r0, 401860 <disk_write+0x1c>
		return RES_ERROR;
  401858:	2001      	movs	r0, #1
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
  40185a:	b003      	add	sp, #12
  40185c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401860:	4606      	mov	r6, r0
	mem_read_capacity(drv, &ul_last_sector_num);
  401862:	a901      	add	r1, sp, #4
  401864:	4640      	mov	r0, r8
  401866:	4b11      	ldr	r3, [pc, #68]	; (4018ac <disk_write+0x68>)
  401868:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
  40186a:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
  40186c:	fb06 4207 	mla	r2, r6, r7, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
  401870:	9b01      	ldr	r3, [sp, #4]
  401872:	fb03 6306 	mla	r3, r3, r6, r6
	if ((sector + count * uc_sector_size) >
  401876:	429a      	cmp	r2, r3
  401878:	d901      	bls.n	40187e <disk_write+0x3a>
		return RES_PARERR;
  40187a:	2004      	movs	r0, #4
  40187c:	e7ed      	b.n	40185a <disk_write+0x16>
	for (i = 0; i < count; i++) {
  40187e:	46ba      	mov	sl, r7
  401880:	b177      	cbz	r7, 4018a0 <disk_write+0x5c>
  401882:	0276      	lsls	r6, r6, #9
  401884:	2700      	movs	r7, #0
		if (ram_2_memory(drv, sector + uc_sector_size * i,
  401886:	f8df b028 	ldr.w	fp, [pc, #40]	; 4018b0 <disk_write+0x6c>
  40188a:	462a      	mov	r2, r5
  40188c:	4621      	mov	r1, r4
  40188e:	4640      	mov	r0, r8
  401890:	47d8      	blx	fp
  401892:	b938      	cbnz	r0, 4018a4 <disk_write+0x60>
	for (i = 0; i < count; i++) {
  401894:	3701      	adds	r7, #1
  401896:	444c      	add	r4, r9
  401898:	4435      	add	r5, r6
  40189a:	4557      	cmp	r7, sl
  40189c:	d1f5      	bne.n	40188a <disk_write+0x46>
  40189e:	e7dc      	b.n	40185a <disk_write+0x16>
	return RES_OK;
  4018a0:	2000      	movs	r0, #0
  4018a2:	e7da      	b.n	40185a <disk_write+0x16>
			return RES_ERROR;
  4018a4:	2001      	movs	r0, #1
  4018a6:	e7d8      	b.n	40185a <disk_write+0x16>
  4018a8:	0040103d 	.word	0x0040103d
  4018ac:	00401029 	.word	0x00401029
  4018b0:	00401071 	.word	0x00401071

004018b4 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
  4018b4:	b510      	push	{r4, lr}
  4018b6:	b082      	sub	sp, #8
  4018b8:	4614      	mov	r4, r2
	DRESULT res = RES_PARERR;

	switch (ctrl) {
  4018ba:	2903      	cmp	r1, #3
  4018bc:	d825      	bhi.n	40190a <disk_ioctl+0x56>
  4018be:	e8df f001 	tbb	[pc, r1]
  4018c2:	071d      	.short	0x071d
  4018c4:	020f      	.short	0x020f
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
  4018c6:	2301      	movs	r3, #1
  4018c8:	6013      	str	r3, [r2, #0]
		res = RES_OK;
  4018ca:	2000      	movs	r0, #0
	default:
		res = RES_PARERR;
	}

	return res;
}
  4018cc:	b002      	add	sp, #8
  4018ce:	bd10      	pop	{r4, pc}
		mem_read_capacity(drv, &ul_last_sector_num);
  4018d0:	a901      	add	r1, sp, #4
  4018d2:	4b11      	ldr	r3, [pc, #68]	; (401918 <disk_ioctl+0x64>)
  4018d4:	4798      	blx	r3
		*(DWORD *)buff = ul_last_sector_num + 1;
  4018d6:	9b01      	ldr	r3, [sp, #4]
  4018d8:	3301      	adds	r3, #1
  4018da:	6023      	str	r3, [r4, #0]
		res = RES_OK;
  4018dc:	2000      	movs	r0, #0
	break;
  4018de:	e7f5      	b.n	4018cc <disk_ioctl+0x18>
		uint8_t uc_sector_size = mem_sector_size(drv);
  4018e0:	4b0e      	ldr	r3, [pc, #56]	; (40191c <disk_ioctl+0x68>)
  4018e2:	4798      	blx	r3
		if ((uc_sector_size != SECTOR_SIZE_512) &&
  4018e4:	2808      	cmp	r0, #8
  4018e6:	d812      	bhi.n	40190e <disk_ioctl+0x5a>
  4018e8:	f44f 738b 	mov.w	r3, #278	; 0x116
  4018ec:	fa23 f000 	lsr.w	r0, r3, r0
				(uc_sector_size != SECTOR_SIZE_2048) &&
  4018f0:	f010 0f01 	tst.w	r0, #1
  4018f4:	d00d      	beq.n	401912 <disk_ioctl+0x5e>
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
  4018f6:	2000      	movs	r0, #0
  4018f8:	7020      	strb	r0, [r4, #0]
	break;
  4018fa:	e7e7      	b.n	4018cc <disk_ioctl+0x18>
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
  4018fc:	4b08      	ldr	r3, [pc, #32]	; (401920 <disk_ioctl+0x6c>)
  4018fe:	4798      	blx	r3
  401900:	2800      	cmp	r0, #0
			res = RES_NOTRDY;
  401902:	bf0c      	ite	eq
  401904:	2000      	moveq	r0, #0
  401906:	2003      	movne	r0, #3
  401908:	e7e0      	b.n	4018cc <disk_ioctl+0x18>
		res = RES_PARERR;
  40190a:	2004      	movs	r0, #4
  40190c:	e7de      	b.n	4018cc <disk_ioctl+0x18>
			return RES_ERROR;
  40190e:	2001      	movs	r0, #1
  401910:	e7dc      	b.n	4018cc <disk_ioctl+0x18>
  401912:	2001      	movs	r0, #1
  401914:	e7da      	b.n	4018cc <disk_ioctl+0x18>
  401916:	bf00      	nop
  401918:	00401029 	.word	0x00401029
  40191c:	0040103d 	.word	0x0040103d
  401920:	00401015 	.word	0x00401015

00401924 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
  401924:	b530      	push	{r4, r5, lr}
  401926:	b08b      	sub	sp, #44	; 0x2c
	uint32_t ul_time;
	uint32_t ul_hour, ul_minute, ul_second;
	uint32_t ul_year, ul_month, ul_day, ul_week;

	/* Retrieve date and time */
	rtc_get_time(RTC, &ul_hour, &ul_minute, &ul_second);
  401928:	4c11      	ldr	r4, [pc, #68]	; (401970 <get_fattime+0x4c>)
  40192a:	ab07      	add	r3, sp, #28
  40192c:	aa08      	add	r2, sp, #32
  40192e:	a909      	add	r1, sp, #36	; 0x24
  401930:	4620      	mov	r0, r4
  401932:	4d10      	ldr	r5, [pc, #64]	; (401974 <get_fattime+0x50>)
  401934:	47a8      	blx	r5
	rtc_get_date(RTC, &ul_year, &ul_month, &ul_day, &ul_week);
  401936:	ab03      	add	r3, sp, #12
  401938:	9300      	str	r3, [sp, #0]
  40193a:	ab04      	add	r3, sp, #16
  40193c:	aa05      	add	r2, sp, #20
  40193e:	a906      	add	r1, sp, #24
  401940:	4620      	mov	r0, r4
  401942:	4c0d      	ldr	r4, [pc, #52]	; (401978 <get_fattime+0x54>)
  401944:	47a0      	blx	r4

	ul_time = ((ul_year - 1980) << 25)
			| (ul_month << 21)
			| (ul_day << 16)
  401946:	9b04      	ldr	r3, [sp, #16]
  401948:	041b      	lsls	r3, r3, #16
	ul_time = ((ul_year - 1980) << 25)
  40194a:	9805      	ldr	r0, [sp, #20]
  40194c:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
  401950:	9809      	ldr	r0, [sp, #36]	; 0x24
  401952:	ea43 23c0 	orr.w	r3, r3, r0, lsl #11
  401956:	9808      	ldr	r0, [sp, #32]
  401958:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
  40195c:	9807      	ldr	r0, [sp, #28]
  40195e:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
  401962:	9806      	ldr	r0, [sp, #24]
  401964:	f2a0 70bc 	subw	r0, r0, #1980	; 0x7bc
			| (ul_hour << 11)
			| (ul_minute << 5)
			| ((ul_second >> 1) << 0);

	return ul_time;
}
  401968:	ea43 6040 	orr.w	r0, r3, r0, lsl #25
  40196c:	b00b      	add	sp, #44	; 0x2c
  40196e:	bd30      	pop	{r4, r5, pc}
  401970:	400e1860 	.word	0x400e1860
  401974:	00401671 	.word	0x00401671
  401978:	004016cb 	.word	0x004016cb

0040197c <mem_cpy>:
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
  40197c:	b13a      	cbz	r2, 40198e <mem_cpy+0x12>
  40197e:	3801      	subs	r0, #1
  401980:	188a      	adds	r2, r1, r2
		*d++ = *s++;
  401982:	f811 3b01 	ldrb.w	r3, [r1], #1
  401986:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (cnt--)
  40198a:	4291      	cmp	r1, r2
  40198c:	d1f9      	bne.n	401982 <mem_cpy+0x6>
  40198e:	4770      	bx	lr

00401990 <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
  401990:	b122      	cbz	r2, 40199c <mem_set+0xc>
  401992:	1882      	adds	r2, r0, r2
		*d++ = (BYTE)val;
  401994:	f800 1b01 	strb.w	r1, [r0], #1
	while (cnt--)
  401998:	4282      	cmp	r2, r0
  40199a:	d1fb      	bne.n	401994 <mem_set+0x4>
  40199c:	4770      	bx	lr

0040199e <clust2sect>:
static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
  40199e:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
  4019a0:	6983      	ldr	r3, [r0, #24]
  4019a2:	3b02      	subs	r3, #2
  4019a4:	4299      	cmp	r1, r3
  4019a6:	d204      	bcs.n	4019b2 <clust2sect+0x14>
	return clst * fs->csize + fs->database;
  4019a8:	7883      	ldrb	r3, [r0, #2]
  4019aa:	6a80      	ldr	r0, [r0, #40]	; 0x28
  4019ac:	fb01 0003 	mla	r0, r1, r3, r0
  4019b0:	4770      	bx	lr
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
  4019b2:	2000      	movs	r0, #0
}
  4019b4:	4770      	bx	lr

004019b6 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
  4019b6:	4602      	mov	r2, r0
  4019b8:	f100 010b 	add.w	r1, r0, #11
	BYTE sum = 0;
  4019bc:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
  4019be:	01c3      	lsls	r3, r0, #7
  4019c0:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
  4019c4:	f812 0b01 	ldrb.w	r0, [r2], #1
  4019c8:	fa50 f383 	uxtab	r3, r0, r3
  4019cc:	b2d8      	uxtb	r0, r3
  4019ce:	428a      	cmp	r2, r1
  4019d0:	d1f5      	bne.n	4019be <sum_sfn+0x8>
	return sum;
}
  4019d2:	4770      	bx	lr

004019d4 <validate>:
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
	if (!fs || !fs->fs_type || fs->id != id)
  4019d4:	b198      	cbz	r0, 4019fe <validate+0x2a>
{
  4019d6:	b508      	push	{r3, lr}
	if (!fs || !fs->fs_type || fs->id != id)
  4019d8:	7802      	ldrb	r2, [r0, #0]
  4019da:	b90a      	cbnz	r2, 4019e0 <validate+0xc>
		return FR_INVALID_OBJECT;
  4019dc:	2009      	movs	r0, #9
  4019de:	bd08      	pop	{r3, pc}
	if (!fs || !fs->fs_type || fs->id != id)
  4019e0:	88c2      	ldrh	r2, [r0, #6]
  4019e2:	428a      	cmp	r2, r1
  4019e4:	d001      	beq.n	4019ea <validate+0x16>
		return FR_INVALID_OBJECT;
  4019e6:	2009      	movs	r0, #9

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
  4019e8:	bd08      	pop	{r3, pc}
	if (disk_status(fs->drv) & STA_NOINIT)
  4019ea:	7840      	ldrb	r0, [r0, #1]
  4019ec:	4b05      	ldr	r3, [pc, #20]	; (401a04 <validate+0x30>)
  4019ee:	4798      	blx	r3
  4019f0:	f000 0001 	and.w	r0, r0, #1
	return FR_OK;
  4019f4:	2800      	cmp	r0, #0
  4019f6:	bf14      	ite	ne
  4019f8:	2003      	movne	r0, #3
  4019fa:	2000      	moveq	r0, #0
  4019fc:	bd08      	pop	{r3, pc}
		return FR_INVALID_OBJECT;
  4019fe:	2009      	movs	r0, #9
  401a00:	4770      	bx	lr
  401a02:	bf00      	nop
  401a04:	004017b9 	.word	0x004017b9

00401a08 <check_fs>:
{
  401a08:	b538      	push	{r3, r4, r5, lr}
  401a0a:	4604      	mov	r4, r0
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
  401a0c:	2301      	movs	r3, #1
  401a0e:	460a      	mov	r2, r1
  401a10:	f100 0130 	add.w	r1, r0, #48	; 0x30
  401a14:	7840      	ldrb	r0, [r0, #1]
  401a16:	4d1d      	ldr	r5, [pc, #116]	; (401a8c <check_fs+0x84>)
  401a18:	47a8      	blx	r5
  401a1a:	b108      	cbz	r0, 401a20 <check_fs+0x18>
		return 3;
  401a1c:	2003      	movs	r0, #3
  401a1e:	bd38      	pop	{r3, r4, r5, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
  401a20:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
  401a24:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
  401a28:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  401a2c:	b21b      	sxth	r3, r3
  401a2e:	4a18      	ldr	r2, [pc, #96]	; (401a90 <check_fs+0x88>)
  401a30:	4293      	cmp	r3, r2
  401a32:	d001      	beq.n	401a38 <check_fs+0x30>
		return 2;
  401a34:	2002      	movs	r0, #2
  401a36:	bd38      	pop	{r3, r4, r5, pc}
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
  401a38:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
  401a3c:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
  401a40:	041b      	lsls	r3, r3, #16
  401a42:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  401a46:	f894 2066 	ldrb.w	r2, [r4, #102]	; 0x66
  401a4a:	4313      	orrs	r3, r2
  401a4c:	f894 2067 	ldrb.w	r2, [r4, #103]	; 0x67
  401a50:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  401a54:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401a58:	4a0e      	ldr	r2, [pc, #56]	; (401a94 <check_fs+0x8c>)
  401a5a:	4293      	cmp	r3, r2
  401a5c:	d013      	beq.n	401a86 <check_fs+0x7e>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
  401a5e:	f894 3085 	ldrb.w	r3, [r4, #133]	; 0x85
  401a62:	f894 0084 	ldrb.w	r0, [r4, #132]	; 0x84
  401a66:	0400      	lsls	r0, r0, #16
  401a68:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
  401a6c:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
  401a70:	4318      	orrs	r0, r3
  401a72:	f894 3083 	ldrb.w	r3, [r4, #131]	; 0x83
  401a76:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  401a7a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return 3;
  401a7e:	1a80      	subs	r0, r0, r2
  401a80:	bf18      	it	ne
  401a82:	2001      	movne	r0, #1
  401a84:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
  401a86:	2000      	movs	r0, #0
}
  401a88:	bd38      	pop	{r3, r4, r5, pc}
  401a8a:	bf00      	nop
  401a8c:	004017d5 	.word	0x004017d5
  401a90:	ffffaa55 	.word	0xffffaa55
  401a94:	00544146 	.word	0x00544146

00401a98 <chk_mounted>:
{
  401a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const TCHAR *p = *path;
  401a9a:	6803      	ldr	r3, [r0, #0]
	vol = p[0] - '0';					/* Is there a drive number? */
  401a9c:	781c      	ldrb	r4, [r3, #0]
  401a9e:	3c30      	subs	r4, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
  401aa0:	2c09      	cmp	r4, #9
  401aa2:	d80a      	bhi.n	401aba <chk_mounted+0x22>
  401aa4:	785d      	ldrb	r5, [r3, #1]
  401aa6:	2d3a      	cmp	r5, #58	; 0x3a
  401aa8:	d001      	beq.n	401aae <chk_mounted+0x16>
  401aaa:	2400      	movs	r4, #0
  401aac:	e006      	b.n	401abc <chk_mounted+0x24>
		p += 2; *path = p;				/* Return pointer to the path name */
  401aae:	3302      	adds	r3, #2
  401ab0:	6003      	str	r3, [r0, #0]
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
  401ab2:	2c07      	cmp	r4, #7
  401ab4:	d902      	bls.n	401abc <chk_mounted+0x24>
		return FR_INVALID_DRIVE;
  401ab6:	200b      	movs	r0, #11
  401ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401aba:	2400      	movs	r4, #0
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
  401abc:	4bae      	ldr	r3, [pc, #696]	; (401d78 <chk_mounted+0x2e0>)
  401abe:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
  401ac2:	600d      	str	r5, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
  401ac4:	2d00      	cmp	r5, #0
  401ac6:	f000 813e 	beq.w	401d46 <chk_mounted+0x2ae>
  401aca:	4616      	mov	r6, r2
	if (fs->fs_type) {					/* If the logical drive has been mounted */
  401acc:	782b      	ldrb	r3, [r5, #0]
  401ace:	b17b      	cbz	r3, 401af0 <chk_mounted+0x58>
		stat = disk_status(fs->drv);
  401ad0:	7868      	ldrb	r0, [r5, #1]
  401ad2:	4baa      	ldr	r3, [pc, #680]	; (401d7c <chk_mounted+0x2e4>)
  401ad4:	4798      	blx	r3
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
  401ad6:	f010 0f01 	tst.w	r0, #1
  401ada:	d109      	bne.n	401af0 <chk_mounted+0x58>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
  401adc:	2e00      	cmp	r6, #0
  401ade:	f000 8134 	beq.w	401d4a <chk_mounted+0x2b2>
  401ae2:	f000 0004 	and.w	r0, r0, #4
				return FR_WRITE_PROTECTED;
  401ae6:	2800      	cmp	r0, #0
  401ae8:	bf0c      	ite	eq
  401aea:	2000      	moveq	r0, #0
  401aec:	200a      	movne	r0, #10
  401aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fs->fs_type = 0;					/* Clear the file system object */
  401af0:	2300      	movs	r3, #0
  401af2:	702b      	strb	r3, [r5, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
  401af4:	b2e0      	uxtb	r0, r4
  401af6:	7068      	strb	r0, [r5, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
  401af8:	4ba1      	ldr	r3, [pc, #644]	; (401d80 <chk_mounted+0x2e8>)
  401afa:	4798      	blx	r3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
  401afc:	f010 0f01 	tst.w	r0, #1
  401b00:	d001      	beq.n	401b06 <chk_mounted+0x6e>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
  401b02:	2003      	movs	r0, #3
  401b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
  401b06:	b126      	cbz	r6, 401b12 <chk_mounted+0x7a>
  401b08:	f010 0f04 	tst.w	r0, #4
  401b0c:	d001      	beq.n	401b12 <chk_mounted+0x7a>
		return FR_WRITE_PROTECTED;
  401b0e:	200a      	movs	r0, #10
  401b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
  401b12:	2100      	movs	r1, #0
  401b14:	4628      	mov	r0, r5
  401b16:	4b9b      	ldr	r3, [pc, #620]	; (401d84 <chk_mounted+0x2ec>)
  401b18:	4798      	blx	r3
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
  401b1a:	2801      	cmp	r0, #1
  401b1c:	d006      	beq.n	401b2c <chk_mounted+0x94>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
  401b1e:	2400      	movs	r4, #0
	if (fmt == 3) return FR_DISK_ERR;
  401b20:	2803      	cmp	r0, #3
  401b22:	f000 8114 	beq.w	401d4e <chk_mounted+0x2b6>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
  401b26:	b1c8      	cbz	r0, 401b5c <chk_mounted+0xc4>
  401b28:	200d      	movs	r0, #13
  401b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (tbl[4]) {						/* Is the partition existing? */
  401b2c:	f895 31f2 	ldrb.w	r3, [r5, #498]	; 0x1f2
  401b30:	b90b      	cbnz	r3, 401b36 <chk_mounted+0x9e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
  401b32:	200d      	movs	r0, #13
  401b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
  401b36:	f895 31f9 	ldrb.w	r3, [r5, #505]	; 0x1f9
  401b3a:	f895 41f8 	ldrb.w	r4, [r5, #504]	; 0x1f8
  401b3e:	0424      	lsls	r4, r4, #16
  401b40:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
  401b44:	f895 31f6 	ldrb.w	r3, [r5, #502]	; 0x1f6
  401b48:	431c      	orrs	r4, r3
  401b4a:	f895 31f7 	ldrb.w	r3, [r5, #503]	; 0x1f7
  401b4e:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
			fmt = check_fs(fs, bsect);		/* Check the partition */
  401b52:	4621      	mov	r1, r4
  401b54:	4628      	mov	r0, r5
  401b56:	4b8b      	ldr	r3, [pc, #556]	; (401d84 <chk_mounted+0x2ec>)
  401b58:	4798      	blx	r3
  401b5a:	e7e1      	b.n	401b20 <chk_mounted+0x88>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
  401b5c:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
  401b60:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
  401b64:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  401b68:	b21b      	sxth	r3, r3
  401b6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  401b6e:	d001      	beq.n	401b74 <chk_mounted+0xdc>
		return FR_NO_FILESYSTEM;
  401b70:	200d      	movs	r0, #13
  401b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
  401b74:	f895 3047 	ldrb.w	r3, [r5, #71]	; 0x47
  401b78:	f895 2046 	ldrb.w	r2, [r5, #70]	; 0x46
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
  401b7c:	ea52 2203 	orrs.w	r2, r2, r3, lsl #8
  401b80:	d10d      	bne.n	401b9e <chk_mounted+0x106>
  401b82:	f895 3057 	ldrb.w	r3, [r5, #87]	; 0x57
  401b86:	f895 2056 	ldrb.w	r2, [r5, #86]	; 0x56
  401b8a:	0412      	lsls	r2, r2, #16
  401b8c:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
  401b90:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
  401b94:	431a      	orrs	r2, r3
  401b96:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
  401b9a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	fs->fsize = fasize;
  401b9e:	61ea      	str	r2, [r5, #28]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
  401ba0:	f895 e040 	ldrb.w	lr, [r5, #64]	; 0x40
  401ba4:	f885 e003 	strb.w	lr, [r5, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
  401ba8:	f10e 33ff 	add.w	r3, lr, #4294967295
  401bac:	b2db      	uxtb	r3, r3
  401bae:	2b01      	cmp	r3, #1
  401bb0:	d901      	bls.n	401bb6 <chk_mounted+0x11e>
  401bb2:	200d      	movs	r0, #13
  401bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
  401bb6:	f895 603d 	ldrb.w	r6, [r5, #61]	; 0x3d
  401bba:	70ae      	strb	r6, [r5, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
  401bbc:	2e00      	cmp	r6, #0
  401bbe:	f000 80c8 	beq.w	401d52 <chk_mounted+0x2ba>
  401bc2:	1e73      	subs	r3, r6, #1
  401bc4:	4233      	tst	r3, r6
  401bc6:	d001      	beq.n	401bcc <chk_mounted+0x134>
  401bc8:	200d      	movs	r0, #13
  401bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
  401bcc:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
  401bd0:	f895 1041 	ldrb.w	r1, [r5, #65]	; 0x41
  401bd4:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
  401bd8:	8129      	strh	r1, [r5, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
  401bda:	f011 0f0f 	tst.w	r1, #15
  401bde:	f040 80ba 	bne.w	401d56 <chk_mounted+0x2be>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
  401be2:	f895 0044 	ldrb.w	r0, [r5, #68]	; 0x44
  401be6:	f895 3043 	ldrb.w	r3, [r5, #67]	; 0x43
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
  401bea:	ea53 2300 	orrs.w	r3, r3, r0, lsl #8
  401bee:	d10d      	bne.n	401c0c <chk_mounted+0x174>
  401bf0:	f895 0053 	ldrb.w	r0, [r5, #83]	; 0x53
  401bf4:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
  401bf8:	041b      	lsls	r3, r3, #16
  401bfa:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
  401bfe:	f895 0050 	ldrb.w	r0, [r5, #80]	; 0x50
  401c02:	4303      	orrs	r3, r0
  401c04:	f895 0051 	ldrb.w	r0, [r5, #81]	; 0x51
  401c08:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
  401c0c:	f895 003f 	ldrb.w	r0, [r5, #63]	; 0x3f
  401c10:	f895 703e 	ldrb.w	r7, [r5, #62]	; 0x3e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
  401c14:	ea57 2700 	orrs.w	r7, r7, r0, lsl #8
  401c18:	f000 809f 	beq.w	401d5a <chk_mounted+0x2c2>
	fasize *= b;										/* Number of sectors for FAT area */
  401c1c:	fb02 fe0e 	mul.w	lr, r2, lr
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
  401c20:	eb07 1011 	add.w	r0, r7, r1, lsr #4
  401c24:	4470      	add	r0, lr
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
  401c26:	4283      	cmp	r3, r0
  401c28:	f0c0 8099 	bcc.w	401d5e <chk_mounted+0x2c6>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
  401c2c:	1a1b      	subs	r3, r3, r0
  401c2e:	fbb3 f3f6 	udiv	r3, r3, r6
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
  401c32:	2b00      	cmp	r3, #0
  401c34:	f000 8095 	beq.w	401d62 <chk_mounted+0x2ca>
	fmt = FS_FAT12;
  401c38:	f640 76f5 	movw	r6, #4085	; 0xff5
  401c3c:	42b3      	cmp	r3, r6
  401c3e:	bf8c      	ite	hi
  401c40:	2602      	movhi	r6, #2
  401c42:	2601      	movls	r6, #1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
  401c44:	f64f 7cf5 	movw	ip, #65525	; 0xfff5
  401c48:	4563      	cmp	r3, ip
  401c4a:	f200 80a5 	bhi.w	401d98 <chk_mounted+0x300>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
  401c4e:	3302      	adds	r3, #2
  401c50:	61ab      	str	r3, [r5, #24]
	fs->database = bsect + sysect;						/* Data start sector */
  401c52:	4420      	add	r0, r4
  401c54:	62a8      	str	r0, [r5, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
  401c56:	443c      	add	r4, r7
  401c58:	622c      	str	r4, [r5, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
  401c5a:	2900      	cmp	r1, #0
  401c5c:	f000 8089 	beq.w	401d72 <chk_mounted+0x2da>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
  401c60:	4474      	add	r4, lr
  401c62:	626c      	str	r4, [r5, #36]	; 0x24
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
  401c64:	2e02      	cmp	r6, #2
  401c66:	d10b      	bne.n	401c80 <chk_mounted+0x1e8>
  401c68:	005b      	lsls	r3, r3, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
  401c6a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  401c6e:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
  401c72:	d37c      	bcc.n	401d6e <chk_mounted+0x2d6>
	fs->free_clust = 0xFFFFFFFF;
  401c74:	f04f 33ff 	mov.w	r3, #4294967295
  401c78:	612b      	str	r3, [r5, #16]
	fs->last_clust = 0;
  401c7a:	2300      	movs	r3, #0
  401c7c:	60eb      	str	r3, [r5, #12]
  401c7e:	e051      	b.n	401d24 <chk_mounted+0x28c>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
  401c80:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  401c84:	f003 0301 	and.w	r3, r3, #1
  401c88:	eb03 0351 	add.w	r3, r3, r1, lsr #1
  401c8c:	e7ed      	b.n	401c6a <chk_mounted+0x1d2>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
  401c8e:	f895 222f 	ldrb.w	r2, [r5, #559]	; 0x22f
  401c92:	f895 322e 	ldrb.w	r3, [r5, #558]	; 0x22e
  401c96:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
  401c9a:	b21b      	sxth	r3, r3
  401c9c:	4a3a      	ldr	r2, [pc, #232]	; (401d88 <chk_mounted+0x2f0>)
  401c9e:	4293      	cmp	r3, r2
  401ca0:	d14b      	bne.n	401d3a <chk_mounted+0x2a2>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  401ca2:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
  401ca6:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
  401caa:	041b      	lsls	r3, r3, #16
  401cac:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  401cb0:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
  401cb4:	4313      	orrs	r3, r2
  401cb6:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
  401cba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
  401cbe:	4a33      	ldr	r2, [pc, #204]	; (401d8c <chk_mounted+0x2f4>)
  401cc0:	4293      	cmp	r3, r2
  401cc2:	d13c      	bne.n	401d3e <chk_mounted+0x2a6>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
  401cc4:	f895 2217 	ldrb.w	r2, [r5, #535]	; 0x217
  401cc8:	f895 3216 	ldrb.w	r3, [r5, #534]	; 0x216
  401ccc:	041b      	lsls	r3, r3, #16
  401cce:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  401cd2:	f895 2214 	ldrb.w	r2, [r5, #532]	; 0x214
  401cd6:	4313      	orrs	r3, r2
  401cd8:	f895 2215 	ldrb.w	r2, [r5, #533]	; 0x215
  401cdc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  401ce0:	4a2b      	ldr	r2, [pc, #172]	; (401d90 <chk_mounted+0x2f8>)
  401ce2:	4293      	cmp	r3, r2
  401ce4:	d12d      	bne.n	401d42 <chk_mounted+0x2aa>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
  401ce6:	f895 221f 	ldrb.w	r2, [r5, #543]	; 0x21f
  401cea:	f895 321e 	ldrb.w	r3, [r5, #542]	; 0x21e
  401cee:	041b      	lsls	r3, r3, #16
  401cf0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  401cf4:	f895 221c 	ldrb.w	r2, [r5, #540]	; 0x21c
  401cf8:	4313      	orrs	r3, r2
  401cfa:	f895 221d 	ldrb.w	r2, [r5, #541]	; 0x21d
  401cfe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  401d02:	60eb      	str	r3, [r5, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
  401d04:	f895 221b 	ldrb.w	r2, [r5, #539]	; 0x21b
  401d08:	f895 321a 	ldrb.w	r3, [r5, #538]	; 0x21a
  401d0c:	041b      	lsls	r3, r3, #16
  401d0e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  401d12:	f895 2218 	ldrb.w	r2, [r5, #536]	; 0x218
  401d16:	4313      	orrs	r3, r2
  401d18:	f895 2219 	ldrb.w	r2, [r5, #537]	; 0x219
  401d1c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  401d20:	612b      	str	r3, [r5, #16]
  401d22:	2603      	movs	r6, #3
	fs->fs_type = fmt;		/* FAT sub-type */
  401d24:	702e      	strb	r6, [r5, #0]
	fs->id = ++Fsid;		/* File system mount ID */
  401d26:	4a1b      	ldr	r2, [pc, #108]	; (401d94 <chk_mounted+0x2fc>)
  401d28:	8813      	ldrh	r3, [r2, #0]
  401d2a:	3301      	adds	r3, #1
  401d2c:	b29b      	uxth	r3, r3
  401d2e:	8013      	strh	r3, [r2, #0]
  401d30:	80eb      	strh	r3, [r5, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
  401d32:	2000      	movs	r0, #0
  401d34:	62e8      	str	r0, [r5, #44]	; 0x2c
	fs->wflag = 0;
  401d36:	7128      	strb	r0, [r5, #4]
	return FR_OK;
  401d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401d3a:	2603      	movs	r6, #3
  401d3c:	e7f2      	b.n	401d24 <chk_mounted+0x28c>
  401d3e:	2603      	movs	r6, #3
  401d40:	e7f0      	b.n	401d24 <chk_mounted+0x28c>
  401d42:	2603      	movs	r6, #3
  401d44:	e7ee      	b.n	401d24 <chk_mounted+0x28c>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
  401d46:	200c      	movs	r0, #12
  401d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return FR_OK;				/* The file system object is valid */
  401d4a:	2000      	movs	r0, #0
  401d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (fmt == 3) return FR_DISK_ERR;
  401d4e:	2001      	movs	r0, #1
  401d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
  401d52:	200d      	movs	r0, #13
  401d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
  401d56:	200d      	movs	r0, #13
  401d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
  401d5a:	200d      	movs	r0, #13
  401d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
  401d5e:	200d      	movs	r0, #13
  401d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
  401d62:	200d      	movs	r0, #13
  401d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return FR_NO_FILESYSTEM;
  401d66:	200d      	movs	r0, #13
  401d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
  401d6a:	200d      	movs	r0, #13
  401d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return FR_NO_FILESYSTEM;
  401d6e:	200d      	movs	r0, #13
  401d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
  401d72:	200d      	movs	r0, #13
  401d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401d76:	bf00      	nop
  401d78:	20400a28 	.word	0x20400a28
  401d7c:	004017b9 	.word	0x004017b9
  401d80:	00401779 	.word	0x00401779
  401d84:	00401a09 	.word	0x00401a09
  401d88:	ffffaa55 	.word	0xffffaa55
  401d8c:	41615252 	.word	0x41615252
  401d90:	61417272 	.word	0x61417272
  401d94:	20400a48 	.word	0x20400a48
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
  401d98:	3302      	adds	r3, #2
  401d9a:	61ab      	str	r3, [r5, #24]
	fs->database = bsect + sysect;						/* Data start sector */
  401d9c:	4420      	add	r0, r4
  401d9e:	62a8      	str	r0, [r5, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
  401da0:	4427      	add	r7, r4
  401da2:	622f      	str	r7, [r5, #32]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
  401da4:	2900      	cmp	r1, #0
  401da6:	d1e0      	bne.n	401d6a <chk_mounted+0x2d2>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
  401da8:	f895 005f 	ldrb.w	r0, [r5, #95]	; 0x5f
  401dac:	f895 105e 	ldrb.w	r1, [r5, #94]	; 0x5e
  401db0:	0409      	lsls	r1, r1, #16
  401db2:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
  401db6:	f895 005c 	ldrb.w	r0, [r5, #92]	; 0x5c
  401dba:	4301      	orrs	r1, r0
  401dbc:	f895 005d 	ldrb.w	r0, [r5, #93]	; 0x5d
  401dc0:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
  401dc4:	6269      	str	r1, [r5, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
  401dc6:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
  401dc8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  401dcc:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
  401dd0:	d3c9      	bcc.n	401d66 <chk_mounted+0x2ce>
	fs->free_clust = 0xFFFFFFFF;
  401dd2:	f04f 33ff 	mov.w	r3, #4294967295
  401dd6:	612b      	str	r3, [r5, #16]
	fs->last_clust = 0;
  401dd8:	2300      	movs	r3, #0
  401dda:	60eb      	str	r3, [r5, #12]
	 	fs->fsi_flag = 0;
  401ddc:	716b      	strb	r3, [r5, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
  401dde:	f895 3061 	ldrb.w	r3, [r5, #97]	; 0x61
  401de2:	f895 2060 	ldrb.w	r2, [r5, #96]	; 0x60
  401de6:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  401dea:	4422      	add	r2, r4
  401dec:	616a      	str	r2, [r5, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
  401dee:	2301      	movs	r3, #1
  401df0:	f105 0130 	add.w	r1, r5, #48	; 0x30
  401df4:	7868      	ldrb	r0, [r5, #1]
  401df6:	4c03      	ldr	r4, [pc, #12]	; (401e04 <chk_mounted+0x36c>)
  401df8:	47a0      	blx	r4
  401dfa:	2800      	cmp	r0, #0
  401dfc:	f43f af47 	beq.w	401c8e <chk_mounted+0x1f6>
  401e00:	2603      	movs	r6, #3
  401e02:	e78f      	b.n	401d24 <chk_mounted+0x28c>
  401e04:	004017d5 	.word	0x004017d5

00401e08 <move_window>:
{
  401e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wsect = fs->winsect;
  401e0c:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
  401e0e:	428f      	cmp	r7, r1
  401e10:	d035      	beq.n	401e7e <move_window+0x76>
  401e12:	460e      	mov	r6, r1
  401e14:	4604      	mov	r4, r0
		if (fs->wflag) {	/* Write back dirty window if needed */
  401e16:	7903      	ldrb	r3, [r0, #4]
  401e18:	b91b      	cbnz	r3, 401e22 <move_window+0x1a>
		if (sector) {
  401e1a:	bb2e      	cbnz	r6, 401e68 <move_window+0x60>
	return FR_OK;
  401e1c:	2000      	movs	r0, #0
  401e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
  401e22:	f100 0830 	add.w	r8, r0, #48	; 0x30
  401e26:	2301      	movs	r3, #1
  401e28:	463a      	mov	r2, r7
  401e2a:	4641      	mov	r1, r8
  401e2c:	7840      	ldrb	r0, [r0, #1]
  401e2e:	4d18      	ldr	r5, [pc, #96]	; (401e90 <move_window+0x88>)
  401e30:	47a8      	blx	r5
  401e32:	bb38      	cbnz	r0, 401e84 <move_window+0x7c>
			fs->wflag = 0;
  401e34:	2300      	movs	r3, #0
  401e36:	7123      	strb	r3, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
  401e38:	6a23      	ldr	r3, [r4, #32]
  401e3a:	69e2      	ldr	r2, [r4, #28]
  401e3c:	4413      	add	r3, r2
  401e3e:	429f      	cmp	r7, r3
  401e40:	d2eb      	bcs.n	401e1a <move_window+0x12>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
  401e42:	78e5      	ldrb	r5, [r4, #3]
  401e44:	2d01      	cmp	r5, #1
  401e46:	d9e8      	bls.n	401e1a <move_window+0x12>
					disk_write(fs->drv, fs->win, wsect, 1);
  401e48:	f04f 0a01 	mov.w	sl, #1
  401e4c:	f8df 9040 	ldr.w	r9, [pc, #64]	; 401e90 <move_window+0x88>
					wsect += fs->fsize;
  401e50:	69e3      	ldr	r3, [r4, #28]
  401e52:	441f      	add	r7, r3
					disk_write(fs->drv, fs->win, wsect, 1);
  401e54:	4653      	mov	r3, sl
  401e56:	463a      	mov	r2, r7
  401e58:	4641      	mov	r1, r8
  401e5a:	7860      	ldrb	r0, [r4, #1]
  401e5c:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
  401e5e:	3d01      	subs	r5, #1
  401e60:	b2ed      	uxtb	r5, r5
  401e62:	2d01      	cmp	r5, #1
  401e64:	d1f4      	bne.n	401e50 <move_window+0x48>
  401e66:	e7d8      	b.n	401e1a <move_window+0x12>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
  401e68:	2301      	movs	r3, #1
  401e6a:	4632      	mov	r2, r6
  401e6c:	f104 0130 	add.w	r1, r4, #48	; 0x30
  401e70:	7860      	ldrb	r0, [r4, #1]
  401e72:	4d08      	ldr	r5, [pc, #32]	; (401e94 <move_window+0x8c>)
  401e74:	47a8      	blx	r5
  401e76:	b940      	cbnz	r0, 401e8a <move_window+0x82>
			fs->winsect = sector;
  401e78:	62e6      	str	r6, [r4, #44]	; 0x2c
  401e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return FR_OK;
  401e7e:	2000      	movs	r0, #0
  401e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return FR_DISK_ERR;
  401e84:	2001      	movs	r0, #1
  401e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return FR_DISK_ERR;
  401e8a:	2001      	movs	r0, #1
}
  401e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401e90:	00401845 	.word	0x00401845
  401e94:	004017d5 	.word	0x004017d5

00401e98 <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
  401e98:	2901      	cmp	r1, #1
  401e9a:	d96a      	bls.n	401f72 <get_fat+0xda>
{
  401e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
  401e9e:	6983      	ldr	r3, [r0, #24]
  401ea0:	4299      	cmp	r1, r3
  401ea2:	d268      	bcs.n	401f76 <get_fat+0xde>
  401ea4:	460c      	mov	r4, r1
  401ea6:	4606      	mov	r6, r0
	switch (fs->fs_type) {
  401ea8:	7803      	ldrb	r3, [r0, #0]
  401eaa:	2b02      	cmp	r3, #2
  401eac:	d02f      	beq.n	401f0e <get_fat+0x76>
  401eae:	2b03      	cmp	r3, #3
  401eb0:	d041      	beq.n	401f36 <get_fat+0x9e>
  401eb2:	2b01      	cmp	r3, #1
  401eb4:	d002      	beq.n	401ebc <get_fat+0x24>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  401eb6:	f04f 30ff 	mov.w	r0, #4294967295
  401eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		bc = (UINT)clst; bc += bc / 2;
  401ebc:	eb01 0751 	add.w	r7, r1, r1, lsr #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  401ec0:	6a01      	ldr	r1, [r0, #32]
  401ec2:	eb01 2157 	add.w	r1, r1, r7, lsr #9
  401ec6:	4b2d      	ldr	r3, [pc, #180]	; (401f7c <get_fat+0xe4>)
  401ec8:	4798      	blx	r3
  401eca:	b110      	cbz	r0, 401ed2 <get_fat+0x3a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  401ecc:	f04f 30ff 	mov.w	r0, #4294967295
  401ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wc = fs->win[bc % SS(fs)]; bc++;
  401ed2:	f3c7 0308 	ubfx	r3, r7, #0, #9
  401ed6:	4433      	add	r3, r6
  401ed8:	f893 5030 	ldrb.w	r5, [r3, #48]	; 0x30
  401edc:	3701      	adds	r7, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  401ede:	6a31      	ldr	r1, [r6, #32]
  401ee0:	eb01 2157 	add.w	r1, r1, r7, lsr #9
  401ee4:	4630      	mov	r0, r6
  401ee6:	4b25      	ldr	r3, [pc, #148]	; (401f7c <get_fat+0xe4>)
  401ee8:	4798      	blx	r3
  401eea:	b110      	cbz	r0, 401ef2 <get_fat+0x5a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  401eec:	f04f 30ff 	mov.w	r0, #4294967295
  401ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wc |= fs->win[bc % SS(fs)] << 8;
  401ef2:	f3c7 0708 	ubfx	r7, r7, #0, #9
  401ef6:	19f0      	adds	r0, r6, r7
  401ef8:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
  401efc:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
  401f00:	f014 0f01 	tst.w	r4, #1
  401f04:	bf14      	ite	ne
  401f06:	0900      	lsrne	r0, r0, #4
  401f08:	f3c0 000b 	ubfxeq	r0, r0, #0, #12
  401f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
  401f0e:	6a01      	ldr	r1, [r0, #32]
  401f10:	eb01 2114 	add.w	r1, r1, r4, lsr #8
  401f14:	4b19      	ldr	r3, [pc, #100]	; (401f7c <get_fat+0xe4>)
  401f16:	4798      	blx	r3
  401f18:	b110      	cbz	r0, 401f20 <get_fat+0x88>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  401f1a:	f04f 30ff 	mov.w	r0, #4294967295
  401f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p = &fs->win[clst * 2 % SS(fs)];
  401f20:	0060      	lsls	r0, r4, #1
  401f22:	f400 70ff 	and.w	r0, r0, #510	; 0x1fe
		return LD_WORD(p);
  401f26:	4430      	add	r0, r6
  401f28:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
  401f2c:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
  401f30:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  401f34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
  401f36:	6a01      	ldr	r1, [r0, #32]
  401f38:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
  401f3c:	4b0f      	ldr	r3, [pc, #60]	; (401f7c <get_fat+0xe4>)
  401f3e:	4798      	blx	r3
  401f40:	b110      	cbz	r0, 401f48 <get_fat+0xb0>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  401f42:	f04f 30ff 	mov.w	r0, #4294967295
}
  401f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p = &fs->win[clst * 4 % SS(fs)];
  401f48:	00a0      	lsls	r0, r4, #2
  401f4a:	f400 70fe 	and.w	r0, r0, #508	; 0x1fc
  401f4e:	f100 0230 	add.w	r2, r0, #48	; 0x30
  401f52:	4432      	add	r2, r6
		return LD_DWORD(p) & 0x0FFFFFFF;
  401f54:	78d1      	ldrb	r1, [r2, #3]
  401f56:	7893      	ldrb	r3, [r2, #2]
  401f58:	041b      	lsls	r3, r3, #16
  401f5a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
  401f5e:	4430      	add	r0, r6
  401f60:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
  401f64:	4318      	orrs	r0, r3
  401f66:	7853      	ldrb	r3, [r2, #1]
  401f68:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  401f6c:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  401f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
  401f72:	2001      	movs	r0, #1
  401f74:	4770      	bx	lr
  401f76:	2001      	movs	r0, #1
  401f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401f7a:	bf00      	nop
  401f7c:	00401e09 	.word	0x00401e09

00401f80 <dir_sdi>:
{
  401f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401f82:	4605      	mov	r5, r0
  401f84:	460c      	mov	r4, r1
	dj->index = idx;
  401f86:	80c1      	strh	r1, [r0, #6]
	clst = dj->sclust;
  401f88:	6881      	ldr	r1, [r0, #8]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
  401f8a:	2901      	cmp	r1, #1
  401f8c:	d03d      	beq.n	40200a <dir_sdi+0x8a>
  401f8e:	6803      	ldr	r3, [r0, #0]
  401f90:	699a      	ldr	r2, [r3, #24]
  401f92:	4291      	cmp	r1, r2
  401f94:	d301      	bcc.n	401f9a <dir_sdi+0x1a>
		return FR_INT_ERR;
  401f96:	2002      	movs	r0, #2
  401f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
  401f9a:	b961      	cbnz	r1, 401fb6 <dir_sdi+0x36>
  401f9c:	781a      	ldrb	r2, [r3, #0]
  401f9e:	2a03      	cmp	r2, #3
  401fa0:	d006      	beq.n	401fb0 <dir_sdi+0x30>
		dj->clust = clst;
  401fa2:	2200      	movs	r2, #0
  401fa4:	60ea      	str	r2, [r5, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
  401fa6:	891a      	ldrh	r2, [r3, #8]
  401fa8:	42a2      	cmp	r2, r4
  401faa:	d821      	bhi.n	401ff0 <dir_sdi+0x70>
			return FR_INT_ERR;
  401fac:	2002      	movs	r0, #2
  401fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		clst = dj->fs->dirbase;
  401fb0:	6a59      	ldr	r1, [r3, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
  401fb2:	2900      	cmp	r1, #0
  401fb4:	d0f5      	beq.n	401fa2 <dir_sdi+0x22>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
  401fb6:	789e      	ldrb	r6, [r3, #2]
  401fb8:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
  401fba:	42b4      	cmp	r4, r6
  401fbc:	d310      	bcc.n	401fe0 <dir_sdi+0x60>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
  401fbe:	4f17      	ldr	r7, [pc, #92]	; (40201c <dir_sdi+0x9c>)
  401fc0:	6828      	ldr	r0, [r5, #0]
  401fc2:	47b8      	blx	r7
  401fc4:	4601      	mov	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
  401fc6:	f1b0 3fff 	cmp.w	r0, #4294967295
  401fca:	d020      	beq.n	40200e <dir_sdi+0x8e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
  401fcc:	2801      	cmp	r0, #1
  401fce:	d920      	bls.n	402012 <dir_sdi+0x92>
  401fd0:	682b      	ldr	r3, [r5, #0]
  401fd2:	699b      	ldr	r3, [r3, #24]
  401fd4:	4298      	cmp	r0, r3
  401fd6:	d21e      	bcs.n	402016 <dir_sdi+0x96>
			idx -= ic;
  401fd8:	1ba4      	subs	r4, r4, r6
  401fda:	b2a4      	uxth	r4, r4
		while (idx >= ic) {	/* Follow cluster chain */
  401fdc:	42a6      	cmp	r6, r4
  401fde:	d9ef      	bls.n	401fc0 <dir_sdi+0x40>
		dj->clust = clst;
  401fe0:	60e9      	str	r1, [r5, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
  401fe2:	6828      	ldr	r0, [r5, #0]
  401fe4:	4b0e      	ldr	r3, [pc, #56]	; (402020 <dir_sdi+0xa0>)
  401fe6:	4798      	blx	r3
  401fe8:	eb00 1014 	add.w	r0, r0, r4, lsr #4
  401fec:	6128      	str	r0, [r5, #16]
  401fee:	e003      	b.n	401ff8 <dir_sdi+0x78>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
  401ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  401ff2:	eb03 1314 	add.w	r3, r3, r4, lsr #4
  401ff6:	612b      	str	r3, [r5, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
  401ff8:	682b      	ldr	r3, [r5, #0]
  401ffa:	3330      	adds	r3, #48	; 0x30
  401ffc:	f004 040f 	and.w	r4, r4, #15
  402000:	eb03 1444 	add.w	r4, r3, r4, lsl #5
  402004:	616c      	str	r4, [r5, #20]
	return FR_OK;	/* Seek succeeded */
  402006:	2000      	movs	r0, #0
  402008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return FR_INT_ERR;
  40200a:	2002      	movs	r0, #2
  40200c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
  40200e:	2001      	movs	r0, #1
  402010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return FR_INT_ERR;
  402012:	2002      	movs	r0, #2
  402014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402016:	2002      	movs	r0, #2
}
  402018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40201a:	bf00      	nop
  40201c:	00401e99 	.word	0x00401e99
  402020:	0040199f 	.word	0x0040199f

00402024 <put_fat>:
{
  402024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  402028:	2901      	cmp	r1, #1
  40202a:	f240 808f 	bls.w	40214c <put_fat+0x128>
  40202e:	6983      	ldr	r3, [r0, #24]
  402030:	4299      	cmp	r1, r3
  402032:	d301      	bcc.n	402038 <put_fat+0x14>
		res = FR_INT_ERR;
  402034:	2702      	movs	r7, #2
	return res;
  402036:	e08a      	b.n	40214e <put_fat+0x12a>
  402038:	4615      	mov	r5, r2
  40203a:	460c      	mov	r4, r1
  40203c:	4606      	mov	r6, r0
		switch (fs->fs_type) {
  40203e:	7803      	ldrb	r3, [r0, #0]
  402040:	2b02      	cmp	r3, #2
  402042:	d04e      	beq.n	4020e2 <put_fat+0xbe>
  402044:	2b03      	cmp	r3, #3
  402046:	d05f      	beq.n	402108 <put_fat+0xe4>
  402048:	2b01      	cmp	r3, #1
  40204a:	d003      	beq.n	402054 <put_fat+0x30>
			res = FR_INT_ERR;
  40204c:	2702      	movs	r7, #2
		fs->wflag = 1;
  40204e:	2301      	movs	r3, #1
  402050:	7133      	strb	r3, [r6, #4]
  402052:	e07c      	b.n	40214e <put_fat+0x12a>
			bc = clst; bc += bc / 2;
  402054:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  402058:	6a01      	ldr	r1, [r0, #32]
  40205a:	eb01 2158 	add.w	r1, r1, r8, lsr #9
  40205e:	4b3d      	ldr	r3, [pc, #244]	; (402154 <put_fat+0x130>)
  402060:	4798      	blx	r3
			if (res != FR_OK) break;
  402062:	4607      	mov	r7, r0
  402064:	2800      	cmp	r0, #0
  402066:	d1f2      	bne.n	40204e <put_fat+0x2a>
			p = &fs->win[bc % SS(fs)];
  402068:	f3c8 0308 	ubfx	r3, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
  40206c:	f014 0f01 	tst.w	r4, #1
  402070:	d01c      	beq.n	4020ac <put_fat+0x88>
  402072:	4433      	add	r3, r6
  402074:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
  402078:	f002 020f 	and.w	r2, r2, #15
  40207c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  402080:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			bc++;
  402084:	f108 0801 	add.w	r8, r8, #1
			fs->wflag = 1;
  402088:	2301      	movs	r3, #1
  40208a:	7133      	strb	r3, [r6, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  40208c:	6a31      	ldr	r1, [r6, #32]
  40208e:	eb01 2158 	add.w	r1, r1, r8, lsr #9
  402092:	4630      	mov	r0, r6
  402094:	4b2f      	ldr	r3, [pc, #188]	; (402154 <put_fat+0x130>)
  402096:	4798      	blx	r3
			if (res != FR_OK) break;
  402098:	2800      	cmp	r0, #0
  40209a:	d153      	bne.n	402144 <put_fat+0x120>
			p = &fs->win[bc % SS(fs)];
  40209c:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
  4020a0:	f3c5 1207 	ubfx	r2, r5, #4, #8
  4020a4:	44b0      	add	r8, r6
  4020a6:	f888 2030 	strb.w	r2, [r8, #48]	; 0x30
			break;
  4020aa:	e7d0      	b.n	40204e <put_fat+0x2a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
  4020ac:	4433      	add	r3, r6
  4020ae:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30
			bc++;
  4020b2:	f108 0801 	add.w	r8, r8, #1
			fs->wflag = 1;
  4020b6:	2301      	movs	r3, #1
  4020b8:	7133      	strb	r3, [r6, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  4020ba:	6a31      	ldr	r1, [r6, #32]
  4020bc:	eb01 2158 	add.w	r1, r1, r8, lsr #9
  4020c0:	4630      	mov	r0, r6
  4020c2:	4b24      	ldr	r3, [pc, #144]	; (402154 <put_fat+0x130>)
  4020c4:	4798      	blx	r3
			if (res != FR_OK) break;
  4020c6:	2800      	cmp	r0, #0
  4020c8:	d13e      	bne.n	402148 <put_fat+0x124>
			p = &fs->win[bc % SS(fs)];
  4020ca:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
  4020ce:	eb06 0308 	add.w	r3, r6, r8
  4020d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
  4020d6:	f023 030f 	bic.w	r3, r3, #15
  4020da:	f3c5 2203 	ubfx	r2, r5, #8, #4
  4020de:	431a      	orrs	r2, r3
  4020e0:	e7e0      	b.n	4020a4 <put_fat+0x80>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
  4020e2:	6a01      	ldr	r1, [r0, #32]
  4020e4:	eb01 2114 	add.w	r1, r1, r4, lsr #8
  4020e8:	4b1a      	ldr	r3, [pc, #104]	; (402154 <put_fat+0x130>)
  4020ea:	4798      	blx	r3
			if (res != FR_OK) break;
  4020ec:	4607      	mov	r7, r0
  4020ee:	2800      	cmp	r0, #0
  4020f0:	d1ad      	bne.n	40204e <put_fat+0x2a>
			p = &fs->win[clst * 2 % SS(fs)];
  4020f2:	0063      	lsls	r3, r4, #1
  4020f4:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
			ST_WORD(p, (WORD)val);
  4020f8:	4433      	add	r3, r6
  4020fa:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30
  4020fe:	f3c5 2207 	ubfx	r2, r5, #8, #8
  402102:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			break;
  402106:	e7a2      	b.n	40204e <put_fat+0x2a>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
  402108:	6a01      	ldr	r1, [r0, #32]
  40210a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
  40210e:	4b11      	ldr	r3, [pc, #68]	; (402154 <put_fat+0x130>)
  402110:	4798      	blx	r3
			if (res != FR_OK) break;
  402112:	4607      	mov	r7, r0
  402114:	2800      	cmp	r0, #0
  402116:	d19a      	bne.n	40204e <put_fat+0x2a>
			p = &fs->win[clst * 4 % SS(fs)];
  402118:	00a1      	lsls	r1, r4, #2
  40211a:	f401 71fe 	and.w	r1, r1, #508	; 0x1fc
  40211e:	f101 0330 	add.w	r3, r1, #48	; 0x30
  402122:	4433      	add	r3, r6
			val |= LD_DWORD(p) & 0xF0000000;
  402124:	78da      	ldrb	r2, [r3, #3]
  402126:	0612      	lsls	r2, r2, #24
  402128:	4431      	add	r1, r6
  40212a:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
  40212e:	432a      	orrs	r2, r5
			ST_DWORD(p, val);
  402130:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
  402134:	f3c2 2107 	ubfx	r1, r2, #8, #8
  402138:	7059      	strb	r1, [r3, #1]
  40213a:	0c11      	lsrs	r1, r2, #16
  40213c:	7099      	strb	r1, [r3, #2]
  40213e:	0e12      	lsrs	r2, r2, #24
  402140:	70da      	strb	r2, [r3, #3]
			break;
  402142:	e784      	b.n	40204e <put_fat+0x2a>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  402144:	4607      	mov	r7, r0
  402146:	e782      	b.n	40204e <put_fat+0x2a>
  402148:	4607      	mov	r7, r0
  40214a:	e780      	b.n	40204e <put_fat+0x2a>
		res = FR_INT_ERR;
  40214c:	2702      	movs	r7, #2
}
  40214e:	4638      	mov	r0, r7
  402150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402154:	00401e09 	.word	0x00401e09

00402158 <create_chain>:
{
  402158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40215c:	4605      	mov	r5, r0
	if (clst == 0) {		/* Create a new chain */
  40215e:	4688      	mov	r8, r1
  402160:	b941      	cbnz	r1, 402174 <create_chain+0x1c>
		scl = fs->last_clust;			/* Get suggested start point */
  402162:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
  402164:	b186      	cbz	r6, 402188 <create_chain+0x30>
  402166:	6983      	ldr	r3, [r0, #24]
  402168:	429e      	cmp	r6, r3
  40216a:	bf28      	it	cs
  40216c:	2601      	movcs	r6, #1
	ncl = scl;				/* Start cluster */
  40216e:	4634      	mov	r4, r6
		cs = get_fat(fs, ncl);			/* Get the cluster status */
  402170:	4f27      	ldr	r7, [pc, #156]	; (402210 <create_chain+0xb8>)
  402172:	e017      	b.n	4021a4 <create_chain+0x4c>
		cs = get_fat(fs, clst);			/* Check the cluster status */
  402174:	4b26      	ldr	r3, [pc, #152]	; (402210 <create_chain+0xb8>)
  402176:	4798      	blx	r3
  402178:	4603      	mov	r3, r0
		if (cs < 2) return 1;			/* It is an invalid cluster */
  40217a:	2801      	cmp	r0, #1
  40217c:	d93e      	bls.n	4021fc <create_chain+0xa4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
  40217e:	69aa      	ldr	r2, [r5, #24]
  402180:	4290      	cmp	r0, r2
  402182:	d340      	bcc.n	402206 <create_chain+0xae>
		scl = clst;
  402184:	4646      	mov	r6, r8
  402186:	e7f2      	b.n	40216e <create_chain+0x16>
		if (!scl || scl >= fs->n_fatent) scl = 1;
  402188:	2601      	movs	r6, #1
  40218a:	e7f0      	b.n	40216e <create_chain+0x16>
		cs = get_fat(fs, ncl);			/* Get the cluster status */
  40218c:	4621      	mov	r1, r4
  40218e:	4628      	mov	r0, r5
  402190:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
  402192:	4603      	mov	r3, r0
  402194:	b170      	cbz	r0, 4021b4 <create_chain+0x5c>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
  402196:	f1b0 3fff 	cmp.w	r0, #4294967295
  40219a:	d034      	beq.n	402206 <create_chain+0xae>
  40219c:	2801      	cmp	r0, #1
  40219e:	d032      	beq.n	402206 <create_chain+0xae>
		if (ncl == scl) return 0;		/* No free cluster */
  4021a0:	42b4      	cmp	r4, r6
  4021a2:	d02f      	beq.n	402204 <create_chain+0xac>
		ncl++;							/* Next cluster */
  4021a4:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
  4021a6:	69ab      	ldr	r3, [r5, #24]
  4021a8:	429c      	cmp	r4, r3
  4021aa:	d3ef      	bcc.n	40218c <create_chain+0x34>
			if (ncl > scl) return 0;	/* No free cluster */
  4021ac:	2e01      	cmp	r6, #1
  4021ae:	d927      	bls.n	402200 <create_chain+0xa8>
			ncl = 2;
  4021b0:	2402      	movs	r4, #2
  4021b2:	e7eb      	b.n	40218c <create_chain+0x34>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
  4021b4:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
  4021b8:	4621      	mov	r1, r4
  4021ba:	4628      	mov	r0, r5
  4021bc:	4b15      	ldr	r3, [pc, #84]	; (402214 <create_chain+0xbc>)
  4021be:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
  4021c0:	4603      	mov	r3, r0
  4021c2:	b910      	cbnz	r0, 4021ca <create_chain+0x72>
  4021c4:	f1b8 0f00 	cmp.w	r8, #0
  4021c8:	d10b      	bne.n	4021e2 <create_chain+0x8a>
	if (res == FR_OK) {
  4021ca:	b98b      	cbnz	r3, 4021f0 <create_chain+0x98>
		fs->last_clust = ncl;			/* Update FSINFO */
  4021cc:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
  4021ce:	692b      	ldr	r3, [r5, #16]
  4021d0:	f1b3 3fff 	cmp.w	r3, #4294967295
  4021d4:	d01a      	beq.n	40220c <create_chain+0xb4>
			fs->free_clust--;
  4021d6:	3b01      	subs	r3, #1
  4021d8:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
  4021da:	2301      	movs	r3, #1
  4021dc:	716b      	strb	r3, [r5, #5]
  4021de:	4623      	mov	r3, r4
  4021e0:	e011      	b.n	402206 <create_chain+0xae>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
  4021e2:	4622      	mov	r2, r4
  4021e4:	4641      	mov	r1, r8
  4021e6:	4628      	mov	r0, r5
  4021e8:	4b0a      	ldr	r3, [pc, #40]	; (402214 <create_chain+0xbc>)
  4021ea:	4798      	blx	r3
  4021ec:	4603      	mov	r3, r0
  4021ee:	e7ec      	b.n	4021ca <create_chain+0x72>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
  4021f0:	2b01      	cmp	r3, #1
  4021f2:	bf0c      	ite	eq
  4021f4:	f04f 33ff 	moveq.w	r3, #4294967295
  4021f8:	2301      	movne	r3, #1
  4021fa:	e004      	b.n	402206 <create_chain+0xae>
		if (cs < 2) return 1;			/* It is an invalid cluster */
  4021fc:	2301      	movs	r3, #1
  4021fe:	e002      	b.n	402206 <create_chain+0xae>
			if (ncl > scl) return 0;	/* No free cluster */
  402200:	2300      	movs	r3, #0
  402202:	e000      	b.n	402206 <create_chain+0xae>
		if (ncl == scl) return 0;		/* No free cluster */
  402204:	2300      	movs	r3, #0
}
  402206:	4618      	mov	r0, r3
  402208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40220c:	4623      	mov	r3, r4
  40220e:	e7fa      	b.n	402206 <create_chain+0xae>
  402210:	00401e99 	.word	0x00401e99
  402214:	00402025 	.word	0x00402025

00402218 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  402218:	2901      	cmp	r1, #1
  40221a:	d92e      	bls.n	40227a <remove_chain+0x62>
{
  40221c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402220:	4604      	mov	r4, r0
  402222:	460e      	mov	r6, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  402224:	6983      	ldr	r3, [r0, #24]
  402226:	4299      	cmp	r1, r3
  402228:	d303      	bcc.n	402232 <remove_chain+0x1a>
		res = FR_INT_ERR;
  40222a:	2202      	movs	r2, #2
}
  40222c:	4610      	mov	r0, r2
  40222e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			nxt = get_fat(fs, clst);			/* Get cluster status */
  402232:	4f16      	ldr	r7, [pc, #88]	; (40228c <remove_chain+0x74>)
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
  402234:	f04f 0900 	mov.w	r9, #0
  402238:	f8df 8054 	ldr.w	r8, [pc, #84]	; 402290 <remove_chain+0x78>
  40223c:	e003      	b.n	402246 <remove_chain+0x2e>
  40223e:	462e      	mov	r6, r5
		while (clst < fs->n_fatent) {			/* Not a last link? */
  402240:	69a3      	ldr	r3, [r4, #24]
  402242:	42ab      	cmp	r3, r5
  402244:	d9f2      	bls.n	40222c <remove_chain+0x14>
			nxt = get_fat(fs, clst);			/* Get cluster status */
  402246:	4631      	mov	r1, r6
  402248:	4620      	mov	r0, r4
  40224a:	47b8      	blx	r7
			if (nxt == 0) break;				/* Empty cluster? */
  40224c:	4605      	mov	r5, r0
  40224e:	b1b8      	cbz	r0, 402280 <remove_chain+0x68>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
  402250:	2801      	cmp	r0, #1
  402252:	d017      	beq.n	402284 <remove_chain+0x6c>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
  402254:	f1b0 3fff 	cmp.w	r0, #4294967295
  402258:	d016      	beq.n	402288 <remove_chain+0x70>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
  40225a:	464a      	mov	r2, r9
  40225c:	4631      	mov	r1, r6
  40225e:	4620      	mov	r0, r4
  402260:	47c0      	blx	r8
			if (res != FR_OK) break;
  402262:	4602      	mov	r2, r0
  402264:	2800      	cmp	r0, #0
  402266:	d1e1      	bne.n	40222c <remove_chain+0x14>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
  402268:	6923      	ldr	r3, [r4, #16]
  40226a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40226e:	d0e6      	beq.n	40223e <remove_chain+0x26>
				fs->free_clust++;
  402270:	3301      	adds	r3, #1
  402272:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
  402274:	2301      	movs	r3, #1
  402276:	7163      	strb	r3, [r4, #5]
  402278:	e7e1      	b.n	40223e <remove_chain+0x26>
		res = FR_INT_ERR;
  40227a:	2202      	movs	r2, #2
}
  40227c:	4610      	mov	r0, r2
  40227e:	4770      	bx	lr
  402280:	2200      	movs	r2, #0
  402282:	e7d3      	b.n	40222c <remove_chain+0x14>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
  402284:	2202      	movs	r2, #2
  402286:	e7d1      	b.n	40222c <remove_chain+0x14>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
  402288:	2201      	movs	r2, #1
  40228a:	e7cf      	b.n	40222c <remove_chain+0x14>
  40228c:	00401e99 	.word	0x00401e99
  402290:	00402025 	.word	0x00402025

00402294 <dir_next>:
{
  402294:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = dj->index + 1;
  402298:	88c4      	ldrh	r4, [r0, #6]
  40229a:	3401      	adds	r4, #1
  40229c:	b2a4      	uxth	r4, r4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
  40229e:	b914      	cbnz	r4, 4022a6 <dir_next+0x12>
		return FR_NO_FILE;
  4022a0:	2004      	movs	r0, #4
  4022a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
  4022a6:	6903      	ldr	r3, [r0, #16]
  4022a8:	b913      	cbnz	r3, 4022b0 <dir_next+0x1c>
		return FR_NO_FILE;
  4022aa:	2004      	movs	r0, #4
  4022ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4022b0:	460e      	mov	r6, r1
  4022b2:	4605      	mov	r5, r0
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
  4022b4:	f014 070f 	ands.w	r7, r4, #15
  4022b8:	d110      	bne.n	4022dc <dir_next+0x48>
		dj->sect++;					/* Next sector */
  4022ba:	3301      	adds	r3, #1
  4022bc:	6103      	str	r3, [r0, #16]
		if (dj->clust == 0) {	/* Static table */
  4022be:	68c1      	ldr	r1, [r0, #12]
  4022c0:	b931      	cbnz	r1, 4022d0 <dir_next+0x3c>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
  4022c2:	6803      	ldr	r3, [r0, #0]
  4022c4:	891b      	ldrh	r3, [r3, #8]
  4022c6:	42a3      	cmp	r3, r4
  4022c8:	d808      	bhi.n	4022dc <dir_next+0x48>
				return FR_NO_FILE;
  4022ca:	2004      	movs	r0, #4
  4022cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
  4022d0:	6800      	ldr	r0, [r0, #0]
  4022d2:	7883      	ldrb	r3, [r0, #2]
  4022d4:	3b01      	subs	r3, #1
  4022d6:	ea13 1314 	ands.w	r3, r3, r4, lsr #4
  4022da:	d008      	beq.n	4022ee <dir_next+0x5a>
	dj->index = i;
  4022dc:	80ec      	strh	r4, [r5, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
  4022de:	682b      	ldr	r3, [r5, #0]
  4022e0:	3330      	adds	r3, #48	; 0x30
  4022e2:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  4022e6:	616b      	str	r3, [r5, #20]
	return FR_OK;
  4022e8:	2000      	movs	r0, #0
  4022ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
  4022ee:	4b32      	ldr	r3, [pc, #200]	; (4023b8 <dir_next+0x124>)
  4022f0:	4798      	blx	r3
  4022f2:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
  4022f4:	2801      	cmp	r0, #1
  4022f6:	d94d      	bls.n	402394 <dir_next+0x100>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  4022f8:	f1b0 3fff 	cmp.w	r0, #4294967295
  4022fc:	d04d      	beq.n	40239a <dir_next+0x106>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
  4022fe:	6828      	ldr	r0, [r5, #0]
  402300:	6983      	ldr	r3, [r0, #24]
  402302:	4598      	cmp	r8, r3
  402304:	d33e      	bcc.n	402384 <dir_next+0xf0>
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
  402306:	b916      	cbnz	r6, 40230e <dir_next+0x7a>
  402308:	2004      	movs	r0, #4
  40230a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
  40230e:	68e9      	ldr	r1, [r5, #12]
  402310:	4b2a      	ldr	r3, [pc, #168]	; (4023bc <dir_next+0x128>)
  402312:	4798      	blx	r3
					if (clst == 0) return FR_DENIED;			/* No free cluster */
  402314:	4680      	mov	r8, r0
  402316:	b910      	cbnz	r0, 40231e <dir_next+0x8a>
  402318:	2007      	movs	r0, #7
  40231a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (clst == 1) return FR_INT_ERR;
  40231e:	2801      	cmp	r0, #1
  402320:	d03e      	beq.n	4023a0 <dir_next+0x10c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  402322:	f1b0 3fff 	cmp.w	r0, #4294967295
  402326:	d03e      	beq.n	4023a6 <dir_next+0x112>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
  402328:	2100      	movs	r1, #0
  40232a:	6828      	ldr	r0, [r5, #0]
  40232c:	4b24      	ldr	r3, [pc, #144]	; (4023c0 <dir_next+0x12c>)
  40232e:	4798      	blx	r3
  402330:	2800      	cmp	r0, #0
  402332:	d13b      	bne.n	4023ac <dir_next+0x118>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
  402334:	6828      	ldr	r0, [r5, #0]
  402336:	f44f 7200 	mov.w	r2, #512	; 0x200
  40233a:	2100      	movs	r1, #0
  40233c:	3030      	adds	r0, #48	; 0x30
  40233e:	4b21      	ldr	r3, [pc, #132]	; (4023c4 <dir_next+0x130>)
  402340:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
  402342:	682e      	ldr	r6, [r5, #0]
  402344:	4641      	mov	r1, r8
  402346:	4630      	mov	r0, r6
  402348:	4b1f      	ldr	r3, [pc, #124]	; (4023c8 <dir_next+0x134>)
  40234a:	4798      	blx	r3
  40234c:	62f0      	str	r0, [r6, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
  40234e:	2600      	movs	r6, #0
						dj->fs->wflag = 1;
  402350:	f04f 0b01 	mov.w	fp, #1
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  402354:	46b2      	mov	sl, r6
  402356:	f8df 9068 	ldr.w	r9, [pc, #104]	; 4023c0 <dir_next+0x12c>
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
  40235a:	682b      	ldr	r3, [r5, #0]
  40235c:	7899      	ldrb	r1, [r3, #2]
  40235e:	b2f2      	uxtb	r2, r6
  402360:	4291      	cmp	r1, r2
  402362:	d90b      	bls.n	40237c <dir_next+0xe8>
						dj->fs->wflag = 1;
  402364:	f883 b004 	strb.w	fp, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  402368:	4651      	mov	r1, sl
  40236a:	6828      	ldr	r0, [r5, #0]
  40236c:	47c8      	blx	r9
  40236e:	3601      	adds	r6, #1
  402370:	b9f8      	cbnz	r0, 4023b2 <dir_next+0x11e>
						dj->fs->winsect++;
  402372:	682a      	ldr	r2, [r5, #0]
  402374:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  402376:	3301      	adds	r3, #1
  402378:	62d3      	str	r3, [r2, #44]	; 0x2c
  40237a:	e7ee      	b.n	40235a <dir_next+0xc6>
					dj->fs->winsect -= c;						/* Rewind window address */
  40237c:	4616      	mov	r6, r2
  40237e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  402380:	1b96      	subs	r6, r2, r6
  402382:	62de      	str	r6, [r3, #44]	; 0x2c
				dj->clust = clst;				/* Initialize data for new cluster */
  402384:	f8c5 800c 	str.w	r8, [r5, #12]
				dj->sect = clust2sect(dj->fs, clst);
  402388:	4641      	mov	r1, r8
  40238a:	6828      	ldr	r0, [r5, #0]
  40238c:	4b0e      	ldr	r3, [pc, #56]	; (4023c8 <dir_next+0x134>)
  40238e:	4798      	blx	r3
  402390:	6128      	str	r0, [r5, #16]
  402392:	e7a3      	b.n	4022dc <dir_next+0x48>
				if (clst <= 1) return FR_INT_ERR;
  402394:	2002      	movs	r0, #2
  402396:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  40239a:	2001      	movs	r0, #1
  40239c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (clst == 1) return FR_INT_ERR;
  4023a0:	2002      	movs	r0, #2
  4023a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  4023a6:	2001      	movs	r0, #1
  4023a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
  4023ac:	2001      	movs	r0, #1
  4023ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  4023b2:	2001      	movs	r0, #1
}
  4023b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4023b8:	00401e99 	.word	0x00401e99
  4023bc:	00402159 	.word	0x00402159
  4023c0:	00401e09 	.word	0x00401e09
  4023c4:	00401991 	.word	0x00401991
  4023c8:	0040199f 	.word	0x0040199f

004023cc <dir_find>:
{
  4023cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4023d0:	b085      	sub	sp, #20
  4023d2:	4605      	mov	r5, r0
	res = dir_sdi(dj, 0);			/* Rewind directory object */
  4023d4:	2100      	movs	r1, #0
  4023d6:	4b61      	ldr	r3, [pc, #388]	; (40255c <dir_find+0x190>)
  4023d8:	4798      	blx	r3
	if (res != FR_OK) return res;
  4023da:	4680      	mov	r8, r0
  4023dc:	bb08      	cbnz	r0, 402422 <dir_find+0x56>
  4023de:	f04f 0bff 	mov.w	fp, #255	; 0xff
  4023e2:	46d9      	mov	r9, fp
		res = move_window(dj->fs, dj->sect);
  4023e4:	4f5e      	ldr	r7, [pc, #376]	; (402560 <dir_find+0x194>)
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
  4023e6:	46da      	mov	sl, fp
  4023e8:	e094      	b.n	402514 <dir_find+0x148>
			if (a == AM_LFN) {			/* An LFN entry is found */
  4023ea:	2a0f      	cmp	r2, #15
  4023ec:	d01d      	beq.n	40242a <dir_find+0x5e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
  4023ee:	f1b9 0f00 	cmp.w	r9, #0
  4023f2:	d104      	bne.n	4023fe <dir_find+0x32>
  4023f4:	4620      	mov	r0, r4
  4023f6:	4b5b      	ldr	r3, [pc, #364]	; (402564 <dir_find+0x198>)
  4023f8:	4798      	blx	r3
  4023fa:	4582      	cmp	sl, r0
  4023fc:	d011      	beq.n	402422 <dir_find+0x56>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  4023fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
  402402:	842b      	strh	r3, [r5, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
  402404:	69ab      	ldr	r3, [r5, #24]
  402406:	7ada      	ldrb	r2, [r3, #11]
  402408:	f012 0f01 	tst.w	r2, #1
  40240c:	d179      	bne.n	402502 <dir_find+0x136>
  40240e:	f104 000b 	add.w	r0, r4, #11
	while (cnt-- && (r = *d++ - *s++) == 0) ;
  402412:	f814 1b01 	ldrb.w	r1, [r4], #1
  402416:	f813 2b01 	ldrb.w	r2, [r3], #1
  40241a:	4291      	cmp	r1, r2
  40241c:	d16b      	bne.n	4024f6 <dir_find+0x12a>
  40241e:	4284      	cmp	r4, r0
  402420:	d1f7      	bne.n	402412 <dir_find+0x46>
}
  402422:	4640      	mov	r0, r8
  402424:	b005      	add	sp, #20
  402426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (dj->lfn) {
  40242a:	f8d5 801c 	ldr.w	r8, [r5, #28]
  40242e:	f1b8 0f00 	cmp.w	r8, #0
  402432:	d068      	beq.n	402506 <dir_find+0x13a>
					if (c & LLE) {		/* Is it start of LFN sequence? */
  402434:	f016 0f40 	tst.w	r6, #64	; 0x40
  402438:	d00c      	beq.n	402454 <dir_find+0x88>
						sum = dir[LDIR_Chksum];
  40243a:	f894 a00d 	ldrb.w	sl, [r4, #13]
						c &= ~LLE; ord = c;	/* LFN start order */
  40243e:	f006 06bf 	and.w	r6, r6, #191	; 0xbf
						dj->lfn_idx = dj->index;
  402442:	88eb      	ldrh	r3, [r5, #6]
  402444:	842b      	strh	r3, [r5, #32]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  402446:	f894 b00d 	ldrb.w	fp, [r4, #13]
  40244a:	45d3      	cmp	fp, sl
  40244c:	d007      	beq.n	40245e <dir_find+0x92>
  40244e:	f04f 09ff 	mov.w	r9, #255	; 0xff
  402452:	e058      	b.n	402506 <dir_find+0x13a>
  402454:	45b1      	cmp	r9, r6
  402456:	d0f6      	beq.n	402446 <dir_find+0x7a>
  402458:	f04f 09ff 	mov.w	r9, #255	; 0xff
  40245c:	e053      	b.n	402506 <dir_find+0x13a>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
  40245e:	f894 a000 	ldrb.w	sl, [r4]
  402462:	f02a 0a40 	bic.w	sl, sl, #64	; 0x40
  402466:	f10a 3aff 	add.w	sl, sl, #4294967295
  40246a:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
  40246e:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
  402472:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 402570 <dir_find+0x1a4>
  402476:	f109 0a0d 	add.w	sl, r9, #13
	s = 0; wc = 1;
  40247a:	2001      	movs	r0, #1
			if (uc != 0xFFFF) return 0;	/* Check filler */
  40247c:	9603      	str	r6, [sp, #12]
  40247e:	f8cd b004 	str.w	fp, [sp, #4]
  402482:	461e      	mov	r6, r3
  402484:	9502      	str	r5, [sp, #8]
  402486:	e00f      	b.n	4024a8 <dir_find+0xdc>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
  402488:	4618      	mov	r0, r3
  40248a:	4b37      	ldr	r3, [pc, #220]	; (402568 <dir_find+0x19c>)
  40248c:	4798      	blx	r3
  40248e:	4683      	mov	fp, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
  402490:	2efe      	cmp	r6, #254	; 0xfe
  402492:	d85a      	bhi.n	40254a <dir_find+0x17e>
  402494:	1c75      	adds	r5, r6, #1
  402496:	f838 0016 	ldrh.w	r0, [r8, r6, lsl #1]
  40249a:	4b33      	ldr	r3, [pc, #204]	; (402568 <dir_find+0x19c>)
  40249c:	4798      	blx	r3
  40249e:	4583      	cmp	fp, r0
  4024a0:	d157      	bne.n	402552 <dir_find+0x186>
  4024a2:	462e      	mov	r6, r5
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
  4024a4:	45d1      	cmp	r9, sl
  4024a6:	d013      	beq.n	4024d0 <dir_find+0x104>
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
  4024a8:	f819 2b01 	ldrb.w	r2, [r9], #1
  4024ac:	18a3      	adds	r3, r4, r2
  4024ae:	7859      	ldrb	r1, [r3, #1]
  4024b0:	5ca3      	ldrb	r3, [r4, r2]
  4024b2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
		if (wc) {	/* Last char has not been processed */
  4024b6:	2800      	cmp	r0, #0
  4024b8:	d1e6      	bne.n	402488 <dir_find+0xbc>
			if (uc != 0xFFFF) return 0;	/* Check filler */
  4024ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
  4024be:	4293      	cmp	r3, r2
  4024c0:	d0f0      	beq.n	4024a4 <dir_find+0xd8>
  4024c2:	f8dd b004 	ldr.w	fp, [sp, #4]
  4024c6:	9d02      	ldr	r5, [sp, #8]
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  4024c8:	46da      	mov	sl, fp
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  4024ca:	f04f 09ff 	mov.w	r9, #255	; 0xff
  4024ce:	e01a      	b.n	402506 <dir_find+0x13a>
  4024d0:	f8dd b004 	ldr.w	fp, [sp, #4]
  4024d4:	4632      	mov	r2, r6
  4024d6:	9e03      	ldr	r6, [sp, #12]
  4024d8:	9d02      	ldr	r5, [sp, #8]
	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
  4024da:	7823      	ldrb	r3, [r4, #0]
  4024dc:	f013 0f40 	tst.w	r3, #64	; 0x40
  4024e0:	d004      	beq.n	4024ec <dir_find+0x120>
  4024e2:	b118      	cbz	r0, 4024ec <dir_find+0x120>
  4024e4:	f838 3012 	ldrh.w	r3, [r8, r2, lsl #1]
  4024e8:	2b00      	cmp	r3, #0
  4024ea:	d1ed      	bne.n	4024c8 <dir_find+0xfc>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  4024ec:	3e01      	subs	r6, #1
  4024ee:	fa5f f986 	uxtb.w	r9, r6
  4024f2:	46da      	mov	sl, fp
  4024f4:	e007      	b.n	402506 <dir_find+0x13a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  4024f6:	f04f 09ff 	mov.w	r9, #255	; 0xff
  4024fa:	e004      	b.n	402506 <dir_find+0x13a>
			ord = 0xFF;
  4024fc:	f04f 09ff 	mov.w	r9, #255	; 0xff
  402500:	e001      	b.n	402506 <dir_find+0x13a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  402502:	f04f 09ff 	mov.w	r9, #255	; 0xff
		res = dir_next(dj, 0);		/* Next entry */
  402506:	2100      	movs	r1, #0
  402508:	4628      	mov	r0, r5
  40250a:	4b18      	ldr	r3, [pc, #96]	; (40256c <dir_find+0x1a0>)
  40250c:	4798      	blx	r3
	} while (res == FR_OK);
  40250e:	4680      	mov	r8, r0
  402510:	2800      	cmp	r0, #0
  402512:	d186      	bne.n	402422 <dir_find+0x56>
		res = move_window(dj->fs, dj->sect);
  402514:	6929      	ldr	r1, [r5, #16]
  402516:	6828      	ldr	r0, [r5, #0]
  402518:	47b8      	blx	r7
		if (res != FR_OK) break;
  40251a:	4680      	mov	r8, r0
  40251c:	2800      	cmp	r0, #0
  40251e:	d180      	bne.n	402422 <dir_find+0x56>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
  402520:	696c      	ldr	r4, [r5, #20]
		c = dir[DIR_Name];
  402522:	7826      	ldrb	r6, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  402524:	b176      	cbz	r6, 402544 <dir_find+0x178>
		a = dir[DIR_Attr] & AM_MASK;
  402526:	7ae3      	ldrb	r3, [r4, #11]
  402528:	f003 023f 	and.w	r2, r3, #63	; 0x3f
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
  40252c:	2ee5      	cmp	r6, #229	; 0xe5
  40252e:	d0e5      	beq.n	4024fc <dir_find+0x130>
  402530:	f013 0f08 	tst.w	r3, #8
  402534:	f43f af59 	beq.w	4023ea <dir_find+0x1e>
  402538:	2a0f      	cmp	r2, #15
  40253a:	f43f af56 	beq.w	4023ea <dir_find+0x1e>
			ord = 0xFF;
  40253e:	f04f 09ff 	mov.w	r9, #255	; 0xff
  402542:	e7e0      	b.n	402506 <dir_find+0x13a>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  402544:	f04f 0804 	mov.w	r8, #4
  402548:	e76b      	b.n	402422 <dir_find+0x56>
  40254a:	f8dd b004 	ldr.w	fp, [sp, #4]
  40254e:	9d02      	ldr	r5, [sp, #8]
  402550:	e7ba      	b.n	4024c8 <dir_find+0xfc>
  402552:	f8dd b004 	ldr.w	fp, [sp, #4]
  402556:	9d02      	ldr	r5, [sp, #8]
  402558:	e7b6      	b.n	4024c8 <dir_find+0xfc>
  40255a:	bf00      	nop
  40255c:	00401f81 	.word	0x00401f81
  402560:	00401e09 	.word	0x00401e09
  402564:	004019b7 	.word	0x004019b7
  402568:	00403155 	.word	0x00403155
  40256c:	00402295 	.word	0x00402295
  402570:	0040d600 	.word	0x0040d600

00402574 <dir_register>:
{
  402574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402578:	b089      	sub	sp, #36	; 0x24
  40257a:	4604      	mov	r4, r0
	fn = dj->fn; lfn = dj->lfn;
  40257c:	6985      	ldr	r5, [r0, #24]
  40257e:	f8d0 b01c 	ldr.w	fp, [r0, #28]
	mem_cpy(sn, fn, 12);
  402582:	220c      	movs	r2, #12
  402584:	4629      	mov	r1, r5
  402586:	a805      	add	r0, sp, #20
  402588:	4ba8      	ldr	r3, [pc, #672]	; (40282c <dir_register+0x2b8>)
  40258a:	4798      	blx	r3
	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
  40258c:	f89d 301f 	ldrb.w	r3, [sp, #31]
  402590:	f013 0f01 	tst.w	r3, #1
  402594:	d079      	beq.n	40268a <dir_register+0x116>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
  402596:	2300      	movs	r3, #0
  402598:	72eb      	strb	r3, [r5, #11]
  40259a:	61e3      	str	r3, [r4, #28]
	mem_cpy(dst, src, 11);
  40259c:	220b      	movs	r2, #11
  40259e:	a905      	add	r1, sp, #20
  4025a0:	4628      	mov	r0, r5
  4025a2:	4ba2      	ldr	r3, [pc, #648]	; (40282c <dir_register+0x2b8>)
  4025a4:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
  4025a6:	2701      	movs	r7, #1
  4025a8:	463b      	mov	r3, r7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  4025aa:	f04f 0820 	mov.w	r8, #32
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
  4025ae:	f8df 929c 	ldr.w	r9, [pc, #668]	; 40284c <dir_register+0x2d8>
	mem_cpy(dst, src, 11);
  4025b2:	f8df a278 	ldr.w	sl, [pc, #632]	; 40282c <dir_register+0x2b8>
  4025b6:	e032      	b.n	40261e <dir_register+0xaa>
		for (n = 1; n < 100; n++) {
  4025b8:	463b      	mov	r3, r7
  4025ba:	e030      	b.n	40261e <dir_register+0xaa>
	for (j = 0; j < i && dst[j] != ' '; j++) {
  4025bc:	4613      	mov	r3, r2
  4025be:	e002      	b.n	4025c6 <dir_register+0x52>
  4025c0:	2300      	movs	r3, #0
  4025c2:	e000      	b.n	4025c6 <dir_register+0x52>
  4025c4:	4613      	mov	r3, r2
  4025c6:	442b      	add	r3, r5
  4025c8:	e005      	b.n	4025d6 <dir_register+0x62>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  4025ca:	4641      	mov	r1, r8
  4025cc:	f803 1b01 	strb.w	r1, [r3], #1
	} while (j < 8);
  4025d0:	1b59      	subs	r1, r3, r5
  4025d2:	2907      	cmp	r1, #7
  4025d4:	d807      	bhi.n	4025e6 <dir_register+0x72>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  4025d6:	2a07      	cmp	r2, #7
  4025d8:	d8f7      	bhi.n	4025ca <dir_register+0x56>
  4025da:	a908      	add	r1, sp, #32
  4025dc:	4411      	add	r1, r2
  4025de:	f811 1c14 	ldrb.w	r1, [r1, #-20]
  4025e2:	3201      	adds	r2, #1
  4025e4:	e7f2      	b.n	4025cc <dir_register+0x58>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
  4025e6:	4620      	mov	r0, r4
  4025e8:	47c8      	blx	r9
			if (res != FR_OK) break;
  4025ea:	4606      	mov	r6, r0
  4025ec:	2800      	cmp	r0, #0
  4025ee:	d13e      	bne.n	40266e <dir_register+0xfa>
		for (n = 1; n < 100; n++) {
  4025f0:	3701      	adds	r7, #1
  4025f2:	b2bf      	uxth	r7, r7
  4025f4:	2f64      	cmp	r7, #100	; 0x64
  4025f6:	d038      	beq.n	40266a <dir_register+0xf6>
	mem_cpy(dst, src, 11);
  4025f8:	220b      	movs	r2, #11
  4025fa:	a905      	add	r1, sp, #20
  4025fc:	4628      	mov	r0, r5
  4025fe:	47d0      	blx	sl
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
  402600:	2f05      	cmp	r7, #5
  402602:	d9d9      	bls.n	4025b8 <dir_register+0x44>
  402604:	463b      	mov	r3, r7
  402606:	4659      	mov	r1, fp
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
  402608:	03da      	lsls	r2, r3, #15
  40260a:	ea42 0353 	orr.w	r3, r2, r3, lsr #1
  40260e:	f831 2b02 	ldrh.w	r2, [r1], #2
  402612:	fa12 f383 	uxtah	r3, r2, r3
  402616:	b29b      	uxth	r3, r3
  402618:	880a      	ldrh	r2, [r1, #0]
  40261a:	2a00      	cmp	r2, #0
  40261c:	d1f4      	bne.n	402608 <dir_register+0x94>
  40261e:	f10d 0613 	add.w	r6, sp, #19
		for (n = 1; n < 100; n++) {
  402622:	2207      	movs	r2, #7
		c = (seq % 16) + '0';
  402624:	f003 000f 	and.w	r0, r3, #15
  402628:	f100 0130 	add.w	r1, r0, #48	; 0x30
		if (c > '9') c += 7;
  40262c:	2939      	cmp	r1, #57	; 0x39
  40262e:	bf88      	it	hi
  402630:	f100 0137 	addhi.w	r1, r0, #55	; 0x37
		ns[i--] = c;
  402634:	3a01      	subs	r2, #1
  402636:	f806 1901 	strb.w	r1, [r6], #-1
		seq /= 16;
  40263a:	f3c3 130f 	ubfx	r3, r3, #4, #16
	} while (seq);
  40263e:	2b00      	cmp	r3, #0
  402640:	d1f0      	bne.n	402624 <dir_register+0xb0>
	ns[i] = '~';
  402642:	217e      	movs	r1, #126	; 0x7e
  402644:	ab08      	add	r3, sp, #32
  402646:	4413      	add	r3, r2
  402648:	f803 1c14 	strb.w	r1, [r3, #-20]
	for (j = 0; j < i && dst[j] != ' '; j++) {
  40264c:	2a00      	cmp	r2, #0
  40264e:	d0b5      	beq.n	4025bc <dir_register+0x48>
  402650:	782b      	ldrb	r3, [r5, #0]
  402652:	2b20      	cmp	r3, #32
  402654:	d0b4      	beq.n	4025c0 <dir_register+0x4c>
  402656:	4629      	mov	r1, r5
  402658:	2300      	movs	r3, #0
  40265a:	3301      	adds	r3, #1
  40265c:	429a      	cmp	r2, r3
  40265e:	d0b1      	beq.n	4025c4 <dir_register+0x50>
  402660:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  402664:	2820      	cmp	r0, #32
  402666:	d1f8      	bne.n	40265a <dir_register+0xe6>
  402668:	e7ad      	b.n	4025c6 <dir_register+0x52>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
  40266a:	2607      	movs	r6, #7
  40266c:	e004      	b.n	402678 <dir_register+0x104>
  40266e:	2f64      	cmp	r7, #100	; 0x64
  402670:	f000 80ac 	beq.w	4027cc <dir_register+0x258>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
  402674:	2804      	cmp	r0, #4
  402676:	d003      	beq.n	402680 <dir_register+0x10c>
}
  402678:	4630      	mov	r0, r6
  40267a:	b009      	add	sp, #36	; 0x24
  40267c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		fn[NS] = sn[NS]; dj->lfn = lfn;
  402680:	f89d 301f 	ldrb.w	r3, [sp, #31]
  402684:	72eb      	strb	r3, [r5, #11]
  402686:	f8c4 b01c 	str.w	fp, [r4, #28]
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
  40268a:	f89d 301f 	ldrb.w	r3, [sp, #31]
  40268e:	f013 0f02 	tst.w	r3, #2
  402692:	d014      	beq.n	4026be <dir_register+0x14a>
		for (ne = 0; lfn[ne]; ne++) ;
  402694:	f8bb 3000 	ldrh.w	r3, [fp]
  402698:	b17b      	cbz	r3, 4026ba <dir_register+0x146>
  40269a:	2300      	movs	r3, #0
  40269c:	3301      	adds	r3, #1
  40269e:	b29b      	uxth	r3, r3
  4026a0:	f83b 2013 	ldrh.w	r2, [fp, r3, lsl #1]
  4026a4:	2a00      	cmp	r2, #0
  4026a6:	d1f9      	bne.n	40269c <dir_register+0x128>
		ne = (ne + 25) / 13;
  4026a8:	3319      	adds	r3, #25
  4026aa:	4f61      	ldr	r7, [pc, #388]	; (402830 <dir_register+0x2bc>)
  4026ac:	fb87 2703 	smull	r2, r7, r7, r3
  4026b0:	17db      	asrs	r3, r3, #31
  4026b2:	ebc3 07a7 	rsb	r7, r3, r7, asr #2
  4026b6:	b2bf      	uxth	r7, r7
  4026b8:	e002      	b.n	4026c0 <dir_register+0x14c>
		for (ne = 0; lfn[ne]; ne++) ;
  4026ba:	2300      	movs	r3, #0
  4026bc:	e7f4      	b.n	4026a8 <dir_register+0x134>
		ne = 1;
  4026be:	2701      	movs	r7, #1
	res = dir_sdi(dj, 0);
  4026c0:	2100      	movs	r1, #0
  4026c2:	4620      	mov	r0, r4
  4026c4:	4b5b      	ldr	r3, [pc, #364]	; (402834 <dir_register+0x2c0>)
  4026c6:	4798      	blx	r3
	if (res != FR_OK) return res;
  4026c8:	4606      	mov	r6, r0
  4026ca:	2800      	cmp	r0, #0
  4026cc:	d1d4      	bne.n	402678 <dir_register+0x104>
  4026ce:	f04f 0a00 	mov.w	sl, #0
  4026d2:	4655      	mov	r5, sl
		res = move_window(dj->fs, dj->sect);
  4026d4:	f8df 8164 	ldr.w	r8, [pc, #356]	; 40283c <dir_register+0x2c8>
			n = 0;					/* Not a blank entry. Restart to search */
  4026d8:	46d3      	mov	fp, sl
		res = dir_next(dj, 1);		/* Next entry with table stretch */
  4026da:	f8df 915c 	ldr.w	r9, [pc, #348]	; 402838 <dir_register+0x2c4>
  4026de:	e00a      	b.n	4026f6 <dir_register+0x182>
			if (++n == ne) break;	/* A contiguous entry that required count is found */
  4026e0:	1c6b      	adds	r3, r5, #1
  4026e2:	b29b      	uxth	r3, r3
  4026e4:	429f      	cmp	r7, r3
  4026e6:	d073      	beq.n	4027d0 <dir_register+0x25c>
  4026e8:	461d      	mov	r5, r3
		res = dir_next(dj, 1);		/* Next entry with table stretch */
  4026ea:	2101      	movs	r1, #1
  4026ec:	4620      	mov	r0, r4
  4026ee:	47c8      	blx	r9
	} while (res == FR_OK);
  4026f0:	4606      	mov	r6, r0
  4026f2:	2800      	cmp	r0, #0
  4026f4:	d1c0      	bne.n	402678 <dir_register+0x104>
		res = move_window(dj->fs, dj->sect);
  4026f6:	6921      	ldr	r1, [r4, #16]
  4026f8:	6820      	ldr	r0, [r4, #0]
  4026fa:	47c0      	blx	r8
		if (res != FR_OK) break;
  4026fc:	4606      	mov	r6, r0
  4026fe:	2800      	cmp	r0, #0
  402700:	d1ba      	bne.n	402678 <dir_register+0x104>
		c = *dj->dir;				/* Check the entry status */
  402702:	6963      	ldr	r3, [r4, #20]
  402704:	781b      	ldrb	r3, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
  402706:	2be5      	cmp	r3, #229	; 0xe5
  402708:	d000      	beq.n	40270c <dir_register+0x198>
  40270a:	b923      	cbnz	r3, 402716 <dir_register+0x1a2>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
  40270c:	2d00      	cmp	r5, #0
  40270e:	d1e7      	bne.n	4026e0 <dir_register+0x16c>
  402710:	f8b4 a006 	ldrh.w	sl, [r4, #6]
  402714:	e7e4      	b.n	4026e0 <dir_register+0x16c>
			n = 0;					/* Not a blank entry. Restart to search */
  402716:	465d      	mov	r5, fp
  402718:	e7e7      	b.n	4026ea <dir_register+0x176>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  40271a:	4671      	mov	r1, lr
  40271c:	e070      	b.n	402800 <dir_register+0x28c>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
  40271e:	f64f 72ff 	movw	r2, #65535	; 0xffff
  402722:	4293      	cmp	r3, r2
  402724:	d002      	beq.n	40272c <dir_register+0x1b8>
  402726:	f839 3011 	ldrh.w	r3, [r9, r1, lsl #1]
  40272a:	b90b      	cbnz	r3, 402730 <dir_register+0x1bc>
  40272c:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
  402730:	f880 b000 	strb.w	fp, [r0]
				dj->fs->wflag = 1;
  402734:	6823      	ldr	r3, [r4, #0]
  402736:	2201      	movs	r2, #1
  402738:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
  40273a:	4639      	mov	r1, r7
  40273c:	4620      	mov	r0, r4
  40273e:	4b3e      	ldr	r3, [pc, #248]	; (402838 <dir_register+0x2c4>)
  402740:	4798      	blx	r3
			} while (res == FR_OK && --ne);
  402742:	4606      	mov	r6, r0
  402744:	2800      	cmp	r0, #0
  402746:	d197      	bne.n	402678 <dir_register+0x104>
  402748:	3d01      	subs	r5, #1
  40274a:	b2ad      	uxth	r5, r5
  40274c:	b315      	cbz	r5, 402794 <dir_register+0x220>
				res = move_window(dj->fs, dj->sect);
  40274e:	6921      	ldr	r1, [r4, #16]
  402750:	6820      	ldr	r0, [r4, #0]
  402752:	4b3a      	ldr	r3, [pc, #232]	; (40283c <dir_register+0x2c8>)
  402754:	4798      	blx	r3
				if (res != FR_OK) break;
  402756:	4606      	mov	r6, r0
  402758:	2800      	cmp	r0, #0
  40275a:	d18d      	bne.n	402678 <dir_register+0x104>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
  40275c:	f8d4 901c 	ldr.w	r9, [r4, #28]
  402760:	6960      	ldr	r0, [r4, #20]
  402762:	fa5f fb85 	uxtb.w	fp, r5
	dir[LDIR_Chksum] = sum;			/* Set check sum */
  402766:	f89d 3000 	ldrb.w	r3, [sp]
  40276a:	7343      	strb	r3, [r0, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
  40276c:	230f      	movs	r3, #15
  40276e:	72c3      	strb	r3, [r0, #11]
	dir[LDIR_Type] = 0;
  402770:	7307      	strb	r7, [r0, #12]
	ST_WORD(dir+LDIR_FstClusLO, 0);
  402772:	7687      	strb	r7, [r0, #26]
  402774:	76c7      	strb	r7, [r0, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
  402776:	f10b 31ff 	add.w	r1, fp, #4294967295
  40277a:	eb01 0341 	add.w	r3, r1, r1, lsl #1
  40277e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  402782:	4a2f      	ldr	r2, [pc, #188]	; (402840 <dir_register+0x2cc>)
  402784:	f102 080d 	add.w	r8, r2, #13
	s = wc = 0;
  402788:	9b01      	ldr	r3, [sp, #4]
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  40278a:	f64f 76ff 	movw	r6, #65535	; 0xffff
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  40278e:	f04f 0aff 	mov.w	sl, #255	; 0xff
  402792:	e038      	b.n	402806 <dir_register+0x292>
		res = move_window(dj->fs, dj->sect);
  402794:	6921      	ldr	r1, [r4, #16]
  402796:	6820      	ldr	r0, [r4, #0]
  402798:	4b28      	ldr	r3, [pc, #160]	; (40283c <dir_register+0x2c8>)
  40279a:	4798      	blx	r3
		if (res == FR_OK) {
  40279c:	4606      	mov	r6, r0
  40279e:	2800      	cmp	r0, #0
  4027a0:	f47f af6a 	bne.w	402678 <dir_register+0x104>
			dir = dj->dir;
  4027a4:	6965      	ldr	r5, [r4, #20]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
  4027a6:	2220      	movs	r2, #32
  4027a8:	2100      	movs	r1, #0
  4027aa:	4628      	mov	r0, r5
  4027ac:	4b25      	ldr	r3, [pc, #148]	; (402844 <dir_register+0x2d0>)
  4027ae:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
  4027b0:	220b      	movs	r2, #11
  4027b2:	69a1      	ldr	r1, [r4, #24]
  4027b4:	4628      	mov	r0, r5
  4027b6:	4b1d      	ldr	r3, [pc, #116]	; (40282c <dir_register+0x2b8>)
  4027b8:	4798      	blx	r3
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
  4027ba:	69a3      	ldr	r3, [r4, #24]
  4027bc:	7adb      	ldrb	r3, [r3, #11]
  4027be:	f003 0318 	and.w	r3, r3, #24
  4027c2:	732b      	strb	r3, [r5, #12]
			dj->fs->wflag = 1;
  4027c4:	6823      	ldr	r3, [r4, #0]
  4027c6:	2201      	movs	r2, #1
  4027c8:	711a      	strb	r2, [r3, #4]
  4027ca:	e755      	b.n	402678 <dir_register+0x104>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
  4027cc:	2607      	movs	r6, #7
  4027ce:	e753      	b.n	402678 <dir_register+0x104>
	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
  4027d0:	2b01      	cmp	r3, #1
  4027d2:	d9df      	bls.n	402794 <dir_register+0x220>
		res = dir_sdi(dj, is);
  4027d4:	4651      	mov	r1, sl
  4027d6:	4620      	mov	r0, r4
  4027d8:	4b16      	ldr	r3, [pc, #88]	; (402834 <dir_register+0x2c0>)
  4027da:	4798      	blx	r3
		if (res == FR_OK) {
  4027dc:	4606      	mov	r6, r0
  4027de:	2800      	cmp	r0, #0
  4027e0:	f47f af4a 	bne.w	402678 <dir_register+0x104>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
  4027e4:	69a0      	ldr	r0, [r4, #24]
  4027e6:	4b18      	ldr	r3, [pc, #96]	; (402848 <dir_register+0x2d4>)
  4027e8:	4798      	blx	r3
  4027ea:	9000      	str	r0, [sp, #0]
	dir[LDIR_Type] = 0;
  4027ec:	2700      	movs	r7, #0
	s = wc = 0;
  4027ee:	9701      	str	r7, [sp, #4]
  4027f0:	e7ad      	b.n	40274e <dir_register+0x1da>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  4027f2:	f892 e000 	ldrb.w	lr, [r2]
  4027f6:	f800 a00e 	strb.w	sl, [r0, lr]
  4027fa:	4486      	add	lr, r0
  4027fc:	f88e a001 	strb.w	sl, [lr, #1]
  402800:	3201      	adds	r2, #1
	} while (++s < 13);
  402802:	4542      	cmp	r2, r8
  402804:	d08b      	beq.n	40271e <dir_register+0x1aa>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  402806:	42b3      	cmp	r3, r6
  402808:	d0f3      	beq.n	4027f2 <dir_register+0x27e>
  40280a:	f101 0e01 	add.w	lr, r1, #1
  40280e:	f839 3011 	ldrh.w	r3, [r9, r1, lsl #1]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  402812:	7811      	ldrb	r1, [r2, #0]
  402814:	5443      	strb	r3, [r0, r1]
  402816:	4401      	add	r1, r0
  402818:	ea4f 2c13 	mov.w	ip, r3, lsr #8
  40281c:	f881 c001 	strb.w	ip, [r1, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
  402820:	2b00      	cmp	r3, #0
  402822:	f47f af7a 	bne.w	40271a <dir_register+0x1a6>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  402826:	4671      	mov	r1, lr
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
  402828:	4633      	mov	r3, r6
  40282a:	e7e9      	b.n	402800 <dir_register+0x28c>
  40282c:	0040197d 	.word	0x0040197d
  402830:	4ec4ec4f 	.word	0x4ec4ec4f
  402834:	00401f81 	.word	0x00401f81
  402838:	00402295 	.word	0x00402295
  40283c:	00401e09 	.word	0x00401e09
  402840:	0040d600 	.word	0x0040d600
  402844:	00401991 	.word	0x00401991
  402848:	004019b7 	.word	0x004019b7
  40284c:	004023cd 	.word	0x004023cd

00402850 <sync>:
{
  402850:	b570      	push	{r4, r5, r6, lr}
  402852:	4604      	mov	r4, r0
	res = move_window(fs, 0);
  402854:	2100      	movs	r1, #0
  402856:	4b2d      	ldr	r3, [pc, #180]	; (40290c <sync+0xbc>)
  402858:	4798      	blx	r3
	if (res == FR_OK) {
  40285a:	4603      	mov	r3, r0
  40285c:	b950      	cbnz	r0, 402874 <sync+0x24>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
  40285e:	7823      	ldrb	r3, [r4, #0]
  402860:	2b03      	cmp	r3, #3
  402862:	d009      	beq.n	402878 <sync+0x28>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
  402864:	2200      	movs	r2, #0
  402866:	4611      	mov	r1, r2
  402868:	7860      	ldrb	r0, [r4, #1]
  40286a:	4b29      	ldr	r3, [pc, #164]	; (402910 <sync+0xc0>)
  40286c:	4798      	blx	r3
	res = move_window(fs, 0);
  40286e:	1c03      	adds	r3, r0, #0
  402870:	bf18      	it	ne
  402872:	2301      	movne	r3, #1
}
  402874:	4618      	mov	r0, r3
  402876:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
  402878:	7963      	ldrb	r3, [r4, #5]
  40287a:	2b00      	cmp	r3, #0
  40287c:	d0f2      	beq.n	402864 <sync+0x14>
			fs->winsect = 0;
  40287e:	2600      	movs	r6, #0
  402880:	62e6      	str	r6, [r4, #44]	; 0x2c
			mem_set(fs->win, 0, 512);
  402882:	f104 0530 	add.w	r5, r4, #48	; 0x30
  402886:	f44f 7200 	mov.w	r2, #512	; 0x200
  40288a:	4631      	mov	r1, r6
  40288c:	4628      	mov	r0, r5
  40288e:	4b21      	ldr	r3, [pc, #132]	; (402914 <sync+0xc4>)
  402890:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
  402892:	2355      	movs	r3, #85	; 0x55
  402894:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
  402898:	23aa      	movs	r3, #170	; 0xaa
  40289a:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
  40289e:	2352      	movs	r3, #82	; 0x52
  4028a0:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  4028a4:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  4028a8:	2361      	movs	r3, #97	; 0x61
  4028aa:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  4028ae:	2241      	movs	r2, #65	; 0x41
  4028b0:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
  4028b4:	2172      	movs	r1, #114	; 0x72
  4028b6:	f884 1214 	strb.w	r1, [r4, #532]	; 0x214
  4028ba:	f884 1215 	strb.w	r1, [r4, #533]	; 0x215
  4028be:	f884 2216 	strb.w	r2, [r4, #534]	; 0x216
  4028c2:	f884 3217 	strb.w	r3, [r4, #535]	; 0x217
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
  4028c6:	6923      	ldr	r3, [r4, #16]
  4028c8:	f884 3218 	strb.w	r3, [r4, #536]	; 0x218
  4028cc:	f3c3 2207 	ubfx	r2, r3, #8, #8
  4028d0:	f884 2219 	strb.w	r2, [r4, #537]	; 0x219
  4028d4:	0c1a      	lsrs	r2, r3, #16
  4028d6:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
  4028da:	0e1b      	lsrs	r3, r3, #24
  4028dc:	f884 321b 	strb.w	r3, [r4, #539]	; 0x21b
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
  4028e0:	68e3      	ldr	r3, [r4, #12]
  4028e2:	f884 321c 	strb.w	r3, [r4, #540]	; 0x21c
  4028e6:	f3c3 2207 	ubfx	r2, r3, #8, #8
  4028ea:	f884 221d 	strb.w	r2, [r4, #541]	; 0x21d
  4028ee:	0c1a      	lsrs	r2, r3, #16
  4028f0:	f884 221e 	strb.w	r2, [r4, #542]	; 0x21e
  4028f4:	0e1b      	lsrs	r3, r3, #24
  4028f6:	f884 321f 	strb.w	r3, [r4, #543]	; 0x21f
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
  4028fa:	2301      	movs	r3, #1
  4028fc:	6962      	ldr	r2, [r4, #20]
  4028fe:	4629      	mov	r1, r5
  402900:	7860      	ldrb	r0, [r4, #1]
  402902:	4d05      	ldr	r5, [pc, #20]	; (402918 <sync+0xc8>)
  402904:	47a8      	blx	r5
			fs->fsi_flag = 0;
  402906:	7166      	strb	r6, [r4, #5]
  402908:	e7ac      	b.n	402864 <sync+0x14>
  40290a:	bf00      	nop
  40290c:	00401e09 	.word	0x00401e09
  402910:	004018b5 	.word	0x004018b5
  402914:	00401991 	.word	0x00401991
  402918:	00401845 	.word	0x00401845

0040291c <follow_path>:
{
  40291c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402920:	b083      	sub	sp, #12
  402922:	4682      	mov	sl, r0
  402924:	460d      	mov	r5, r1
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
  402926:	780b      	ldrb	r3, [r1, #0]
  402928:	2b2f      	cmp	r3, #47	; 0x2f
  40292a:	d00a      	beq.n	402942 <follow_path+0x26>
  40292c:	2b5c      	cmp	r3, #92	; 0x5c
  40292e:	d008      	beq.n	402942 <follow_path+0x26>
	dj->sclust = 0;						/* Start from the root dir */
  402930:	2300      	movs	r3, #0
  402932:	f8ca 3008 	str.w	r3, [sl, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
  402936:	782b      	ldrb	r3, [r5, #0]
  402938:	2b1f      	cmp	r3, #31
  40293a:	d904      	bls.n	402946 <follow_path+0x2a>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  40293c:	f8df b2fc 	ldr.w	fp, [pc, #764]	; 402c3c <follow_path+0x320>
  402940:	e130      	b.n	402ba4 <follow_path+0x288>
		path++;
  402942:	3501      	adds	r5, #1
  402944:	e7f4      	b.n	402930 <follow_path+0x14>
		res = dir_sdi(dj, 0);
  402946:	2100      	movs	r1, #0
  402948:	4650      	mov	r0, sl
  40294a:	4bb6      	ldr	r3, [pc, #728]	; (402c24 <follow_path+0x308>)
  40294c:	4798      	blx	r3
  40294e:	4603      	mov	r3, r0
		dj->dir = 0;
  402950:	2200      	movs	r2, #0
  402952:	f8ca 2014 	str.w	r2, [sl, #20]
  402956:	e15a      	b.n	402c0e <follow_path+0x2f2>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
  402958:	2b00      	cmp	r3, #0
  40295a:	f040 8152 	bne.w	402c02 <follow_path+0x2e6>
		lfn[di++] = w;					/* Store the Unicode char */
  40295e:	f827 2f02 	strh.w	r2, [r7, #2]!
		w = p[si++];					/* Get a character */
  402962:	1c63      	adds	r3, r4, #1
  402964:	f816 0f01 	ldrb.w	r0, [r6, #1]!
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
  402968:	282f      	cmp	r0, #47	; 0x2f
  40296a:	bf18      	it	ne
  40296c:	281f      	cmpne	r0, #31
  40296e:	d91b      	bls.n	4029a8 <follow_path+0x8c>
  402970:	285c      	cmp	r0, #92	; 0x5c
  402972:	d019      	beq.n	4029a8 <follow_path+0x8c>
		if (di >= _MAX_LFN)				/* Reject too long name */
  402974:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  402978:	f000 8143 	beq.w	402c02 <follow_path+0x2e6>
		w = p[si++];					/* Get a character */
  40297c:	461c      	mov	r4, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  40297e:	4641      	mov	r1, r8
  402980:	47d8      	blx	fp
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
  402982:	4602      	mov	r2, r0
  402984:	2800      	cmp	r0, #0
  402986:	f000 813c 	beq.w	402c02 <follow_path+0x2e6>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
  40298a:	287f      	cmp	r0, #127	; 0x7f
  40298c:	d8e7      	bhi.n	40295e <follow_path+0x42>
	while (*str && *str != chr) str++;
  40298e:	2822      	cmp	r0, #34	; 0x22
  402990:	f000 813c 	beq.w	402c0c <follow_path+0x2f0>
  402994:	232a      	movs	r3, #42	; 0x2a
  402996:	49a4      	ldr	r1, [pc, #656]	; (402c28 <follow_path+0x30c>)
  402998:	b298      	uxth	r0, r3
  40299a:	4290      	cmp	r0, r2
  40299c:	d0dc      	beq.n	402958 <follow_path+0x3c>
  40299e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  4029a2:	2b00      	cmp	r3, #0
  4029a4:	d1f8      	bne.n	402998 <follow_path+0x7c>
  4029a6:	e7da      	b.n	40295e <follow_path+0x42>
	*path = &p[si];						/* Return pointer to the next segment */
  4029a8:	441d      	add	r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
  4029aa:	2820      	cmp	r0, #32
  4029ac:	bf34      	ite	cc
  4029ae:	2604      	movcc	r6, #4
  4029b0:	2600      	movcs	r6, #0
	while (di) {						/* Strip trailing spaces and dots */
  4029b2:	2c00      	cmp	r4, #0
  4029b4:	f000 812a 	beq.w	402c0c <follow_path+0x2f0>
		w = lfn[di-1];
  4029b8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  4029bc:	4423      	add	r3, r4
  4029be:	eb09 0243 	add.w	r2, r9, r3, lsl #1
  4029c2:	f839 3013 	ldrh.w	r3, [r9, r3, lsl #1]
		if (w != ' ' && w != '.') break;
  4029c6:	2b20      	cmp	r3, #32
  4029c8:	d001      	beq.n	4029ce <follow_path+0xb2>
  4029ca:	2b2e      	cmp	r3, #46	; 0x2e
  4029cc:	d108      	bne.n	4029e0 <follow_path+0xc4>
	while (di) {						/* Strip trailing spaces and dots */
  4029ce:	3c01      	subs	r4, #1
  4029d0:	f000 811c 	beq.w	402c0c <follow_path+0x2f0>
		w = lfn[di-1];
  4029d4:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
  4029d8:	2b20      	cmp	r3, #32
  4029da:	d0f8      	beq.n	4029ce <follow_path+0xb2>
  4029dc:	2b2e      	cmp	r3, #46	; 0x2e
  4029de:	d0f6      	beq.n	4029ce <follow_path+0xb2>
	lfn[di] = 0;						/* LFN is created */
  4029e0:	0067      	lsls	r7, r4, #1
  4029e2:	2300      	movs	r3, #0
  4029e4:	f829 3014 	strh.w	r3, [r9, r4, lsl #1]
	mem_set(dj->fn, ' ', 11);
  4029e8:	220b      	movs	r2, #11
  4029ea:	2120      	movs	r1, #32
  4029ec:	f8da 0018 	ldr.w	r0, [sl, #24]
  4029f0:	4b8e      	ldr	r3, [pc, #568]	; (402c2c <follow_path+0x310>)
  4029f2:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
  4029f4:	f8b9 3000 	ldrh.w	r3, [r9]
  4029f8:	2b20      	cmp	r3, #32
  4029fa:	d001      	beq.n	402a00 <follow_path+0xe4>
  4029fc:	2b2e      	cmp	r3, #46	; 0x2e
  4029fe:	d11f      	bne.n	402a40 <follow_path+0x124>
  402a00:	4649      	mov	r1, r9
  402a02:	2300      	movs	r3, #0
  402a04:	3301      	adds	r3, #1
  402a06:	f831 2f02 	ldrh.w	r2, [r1, #2]!
  402a0a:	2a20      	cmp	r2, #32
  402a0c:	d0fa      	beq.n	402a04 <follow_path+0xe8>
  402a0e:	2a2e      	cmp	r2, #46	; 0x2e
  402a10:	d0f8      	beq.n	402a04 <follow_path+0xe8>
	if (si) cf |= NS_LOSS | NS_LFN;
  402a12:	b10b      	cbz	r3, 402a18 <follow_path+0xfc>
  402a14:	f046 0603 	orr.w	r6, r6, #3
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
  402a18:	3f02      	subs	r7, #2
  402a1a:	eb09 0207 	add.w	r2, r9, r7
  402a1e:	f839 1007 	ldrh.w	r1, [r9, r7]
  402a22:	292e      	cmp	r1, #46	; 0x2e
  402a24:	d005      	beq.n	402a32 <follow_path+0x116>
  402a26:	3c01      	subs	r4, #1
  402a28:	d003      	beq.n	402a32 <follow_path+0x116>
  402a2a:	f832 1d02 	ldrh.w	r1, [r2, #-2]!
  402a2e:	292e      	cmp	r1, #46	; 0x2e
  402a30:	d1f9      	bne.n	402a26 <follow_path+0x10a>
		dj->fn[i++] = (BYTE)w;
  402a32:	2208      	movs	r2, #8
  402a34:	9200      	str	r2, [sp, #0]
  402a36:	f04f 0800 	mov.w	r8, #0
  402a3a:	f8cd 8004 	str.w	r8, [sp, #4]
  402a3e:	e004      	b.n	402a4a <follow_path+0x12e>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
  402a40:	2300      	movs	r3, #0
  402a42:	e7e9      	b.n	402a18 <follow_path+0xfc>
			cf |= NS_LOSS | NS_LFN; continue;
  402a44:	f046 0603 	orr.w	r6, r6, #3
		w = lfn[si++];					/* Get an LFN char */
  402a48:	463b      	mov	r3, r7
  402a4a:	1c5f      	adds	r7, r3, #1
  402a4c:	f839 0013 	ldrh.w	r0, [r9, r3, lsl #1]
		if (!w) break;					/* Break on end of the LFN */
  402a50:	2800      	cmp	r0, #0
  402a52:	d066      	beq.n	402b22 <follow_path+0x206>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
  402a54:	2820      	cmp	r0, #32
  402a56:	d0f5      	beq.n	402a44 <follow_path+0x128>
  402a58:	282e      	cmp	r0, #46	; 0x2e
  402a5a:	d101      	bne.n	402a60 <follow_path+0x144>
  402a5c:	42a7      	cmp	r7, r4
  402a5e:	d1f1      	bne.n	402a44 <follow_path+0x128>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
  402a60:	9b00      	ldr	r3, [sp, #0]
  402a62:	4598      	cmp	r8, r3
  402a64:	d218      	bcs.n	402a98 <follow_path+0x17c>
  402a66:	42a7      	cmp	r7, r4
  402a68:	d016      	beq.n	402a98 <follow_path+0x17c>
		if (w >= 0x80) {				/* Non ASCII char */
  402a6a:	287f      	cmp	r0, #127	; 0x7f
  402a6c:	d831      	bhi.n	402ad2 <follow_path+0x1b6>
	while (*str && *str != chr) str++;
  402a6e:	282b      	cmp	r0, #43	; 0x2b
  402a70:	d03d      	beq.n	402aee <follow_path+0x1d2>
  402a72:	232c      	movs	r3, #44	; 0x2c
  402a74:	496e      	ldr	r1, [pc, #440]	; (402c30 <follow_path+0x314>)
  402a76:	b29a      	uxth	r2, r3
  402a78:	4282      	cmp	r2, r0
  402a7a:	d043      	beq.n	402b04 <follow_path+0x1e8>
  402a7c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  402a80:	2b00      	cmp	r3, #0
  402a82:	d1f8      	bne.n	402a76 <follow_path+0x15a>
				if (IsUpper(w)) {		/* ASCII large capital */
  402a84:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
  402a88:	b29b      	uxth	r3, r3
  402a8a:	2b19      	cmp	r3, #25
  402a8c:	d83d      	bhi.n	402b0a <follow_path+0x1ee>
					b |= 2;
  402a8e:	9b01      	ldr	r3, [sp, #4]
  402a90:	f043 0302 	orr.w	r3, r3, #2
  402a94:	9301      	str	r3, [sp, #4]
  402a96:	e02d      	b.n	402af4 <follow_path+0x1d8>
			if (ni == 11) {				/* Long extension */
  402a98:	9b00      	ldr	r3, [sp, #0]
  402a9a:	2b0b      	cmp	r3, #11
  402a9c:	d00f      	beq.n	402abe <follow_path+0x1a2>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
  402a9e:	42a7      	cmp	r7, r4
  402aa0:	bf18      	it	ne
  402aa2:	f046 0603 	orrne.w	r6, r6, #3
			if (si > di) break;			/* No extension */
  402aa6:	42a7      	cmp	r7, r4
  402aa8:	d83b      	bhi.n	402b22 <follow_path+0x206>
			b <<= 2; continue;
  402aaa:	9b01      	ldr	r3, [sp, #4]
  402aac:	009b      	lsls	r3, r3, #2
  402aae:	b2db      	uxtb	r3, r3
  402ab0:	9301      	str	r3, [sp, #4]
  402ab2:	4623      	mov	r3, r4
			si = di; i = 8; ni = 11;	/* Enter extension section */
  402ab4:	220b      	movs	r2, #11
  402ab6:	9200      	str	r2, [sp, #0]
  402ab8:	f04f 0808 	mov.w	r8, #8
  402abc:	e7c5      	b.n	402a4a <follow_path+0x12e>
				cf |= NS_LOSS | NS_LFN; break;
  402abe:	f046 0603 	orr.w	r6, r6, #3
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
  402ac2:	f8da 3018 	ldr.w	r3, [sl, #24]
  402ac6:	781a      	ldrb	r2, [r3, #0]
  402ac8:	2ae5      	cmp	r2, #229	; 0xe5
  402aca:	d132      	bne.n	402b32 <follow_path+0x216>
  402acc:	2205      	movs	r2, #5
  402ace:	701a      	strb	r2, [r3, #0]
  402ad0:	e02c      	b.n	402b2c <follow_path+0x210>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
  402ad2:	2100      	movs	r1, #0
  402ad4:	47d8      	blx	fp
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
  402ad6:	4603      	mov	r3, r0
  402ad8:	2800      	cmp	r0, #0
  402ada:	f000 809f 	beq.w	402c1c <follow_path+0x300>
  402ade:	4a55      	ldr	r2, [pc, #340]	; (402c34 <follow_path+0x318>)
  402ae0:	4413      	add	r3, r2
  402ae2:	f813 0c80 	ldrb.w	r0, [r3, #-128]
			cf |= NS_LFN;				/* Force create LFN entry */
  402ae6:	f046 0602 	orr.w	r6, r6, #2
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
  402aea:	2800      	cmp	r0, #0
  402aec:	d1bf      	bne.n	402a6e <follow_path+0x152>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
  402aee:	f046 0603 	orr.w	r6, r6, #3
  402af2:	205f      	movs	r0, #95	; 0x5f
		dj->fn[i++] = (BYTE)w;
  402af4:	f8da 3018 	ldr.w	r3, [sl, #24]
  402af8:	f803 0008 	strb.w	r0, [r3, r8]
		w = lfn[si++];					/* Get an LFN char */
  402afc:	463b      	mov	r3, r7
		dj->fn[i++] = (BYTE)w;
  402afe:	f108 0801 	add.w	r8, r8, #1
  402b02:	e7a2      	b.n	402a4a <follow_path+0x12e>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
  402b04:	2b00      	cmp	r3, #0
  402b06:	d1f2      	bne.n	402aee <follow_path+0x1d2>
  402b08:	e7bc      	b.n	402a84 <follow_path+0x168>
					if (IsLower(w)) {	/* ASCII small capital */
  402b0a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
  402b0e:	b29b      	uxth	r3, r3
  402b10:	2b19      	cmp	r3, #25
  402b12:	d8ef      	bhi.n	402af4 <follow_path+0x1d8>
						b |= 1; w -= 0x20;
  402b14:	9b01      	ldr	r3, [sp, #4]
  402b16:	f043 0301 	orr.w	r3, r3, #1
  402b1a:	9301      	str	r3, [sp, #4]
  402b1c:	3820      	subs	r0, #32
  402b1e:	b280      	uxth	r0, r0
  402b20:	e7e8      	b.n	402af4 <follow_path+0x1d8>
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
  402b22:	f8da 3018 	ldr.w	r3, [sl, #24]
  402b26:	781a      	ldrb	r2, [r3, #0]
  402b28:	2ae5      	cmp	r2, #229	; 0xe5
  402b2a:	d0cf      	beq.n	402acc <follow_path+0x1b0>
	if (ni == 8) b <<= 2;
  402b2c:	9b00      	ldr	r3, [sp, #0]
  402b2e:	2b08      	cmp	r3, #8
  402b30:	d052      	beq.n	402bd8 <follow_path+0x2bc>
  402b32:	9a01      	ldr	r2, [sp, #4]
  402b34:	f002 030c 	and.w	r3, r2, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
  402b38:	2b0c      	cmp	r3, #12
  402b3a:	d054      	beq.n	402be6 <follow_path+0x2ca>
  402b3c:	f002 0203 	and.w	r2, r2, #3
  402b40:	2a03      	cmp	r2, #3
  402b42:	d050      	beq.n	402be6 <follow_path+0x2ca>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
  402b44:	f016 0f02 	tst.w	r6, #2
  402b48:	d10b      	bne.n	402b62 <follow_path+0x246>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
  402b4a:	9a01      	ldr	r2, [sp, #4]
  402b4c:	f002 0903 	and.w	r9, r2, #3
  402b50:	f1b9 0f01 	cmp.w	r9, #1
  402b54:	bf08      	it	eq
  402b56:	f046 0610 	orreq.w	r6, r6, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
  402b5a:	2b04      	cmp	r3, #4
  402b5c:	bf08      	it	eq
  402b5e:	f046 0608 	orreq.w	r6, r6, #8
	dj->fn[NS] = cf;	/* SFN is created */
  402b62:	f8da 3018 	ldr.w	r3, [sl, #24]
  402b66:	72de      	strb	r6, [r3, #11]
			res = dir_find(dj);				/* Find it */
  402b68:	4650      	mov	r0, sl
  402b6a:	4b33      	ldr	r3, [pc, #204]	; (402c38 <follow_path+0x31c>)
  402b6c:	4798      	blx	r3
			ns = *(dj->fn+NS);
  402b6e:	f8da 3018 	ldr.w	r3, [sl, #24]
  402b72:	7ada      	ldrb	r2, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
  402b74:	4603      	mov	r3, r0
  402b76:	2800      	cmp	r0, #0
  402b78:	d138      	bne.n	402bec <follow_path+0x2d0>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
  402b7a:	f012 0f04 	tst.w	r2, #4
  402b7e:	d146      	bne.n	402c0e <follow_path+0x2f2>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
  402b80:	f8da 3014 	ldr.w	r3, [sl, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
  402b84:	7ada      	ldrb	r2, [r3, #11]
  402b86:	f012 0f10 	tst.w	r2, #16
  402b8a:	d038      	beq.n	402bfe <follow_path+0x2e2>
			dj->sclust = LD_CLUST(dir);
  402b8c:	7d59      	ldrb	r1, [r3, #21]
  402b8e:	7d1a      	ldrb	r2, [r3, #20]
  402b90:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  402b94:	7ed9      	ldrb	r1, [r3, #27]
  402b96:	7e9b      	ldrb	r3, [r3, #26]
  402b98:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  402b9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  402ba0:	f8ca 3008 	str.w	r3, [sl, #8]
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
  402ba4:	782b      	ldrb	r3, [r5, #0]
  402ba6:	2b2f      	cmp	r3, #47	; 0x2f
  402ba8:	d001      	beq.n	402bae <follow_path+0x292>
  402baa:	2b5c      	cmp	r3, #92	; 0x5c
  402bac:	d105      	bne.n	402bba <follow_path+0x29e>
  402bae:	f815 3f01 	ldrb.w	r3, [r5, #1]!
  402bb2:	2b2f      	cmp	r3, #47	; 0x2f
  402bb4:	d0fb      	beq.n	402bae <follow_path+0x292>
  402bb6:	2b5c      	cmp	r3, #92	; 0x5c
  402bb8:	d0f9      	beq.n	402bae <follow_path+0x292>
	lfn = dj->lfn;
  402bba:	f8da 901c 	ldr.w	r9, [sl, #28]
		w = p[si++];					/* Get a character */
  402bbe:	7828      	ldrb	r0, [r5, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
  402bc0:	282f      	cmp	r0, #47	; 0x2f
  402bc2:	bf18      	it	ne
  402bc4:	281f      	cmpne	r0, #31
  402bc6:	d91e      	bls.n	402c06 <follow_path+0x2ea>
  402bc8:	285c      	cmp	r0, #92	; 0x5c
  402bca:	d01c      	beq.n	402c06 <follow_path+0x2ea>
  402bcc:	f1a9 0702 	sub.w	r7, r9, #2
  402bd0:	462e      	mov	r6, r5
  402bd2:	2401      	movs	r4, #1
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  402bd4:	46a0      	mov	r8, r4
  402bd6:	e6d2      	b.n	40297e <follow_path+0x62>
	if (ni == 8) b <<= 2;
  402bd8:	9b01      	ldr	r3, [sp, #4]
  402bda:	ea4f 0983 	mov.w	r9, r3, lsl #2
  402bde:	fa5f f389 	uxtb.w	r3, r9
  402be2:	9301      	str	r3, [sp, #4]
  402be4:	e7a5      	b.n	402b32 <follow_path+0x216>
		cf |= NS_LFN;
  402be6:	f046 0602 	orr.w	r6, r6, #2
  402bea:	e7ab      	b.n	402b44 <follow_path+0x228>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
  402bec:	2804      	cmp	r0, #4
  402bee:	d10e      	bne.n	402c0e <follow_path+0x2f2>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
  402bf0:	f002 0204 	and.w	r2, r2, #4
  402bf4:	2a00      	cmp	r2, #0
  402bf6:	bf14      	ite	ne
  402bf8:	4603      	movne	r3, r0
  402bfa:	2305      	moveq	r3, #5
  402bfc:	e007      	b.n	402c0e <follow_path+0x2f2>
				res = FR_NO_PATH; break;
  402bfe:	2305      	movs	r3, #5
  402c00:	e005      	b.n	402c0e <follow_path+0x2f2>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
  402c02:	2306      	movs	r3, #6
	return res;
  402c04:	e003      	b.n	402c0e <follow_path+0x2f2>
	*path = &p[si];						/* Return pointer to the next segment */
  402c06:	3501      	adds	r5, #1
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
  402c08:	281f      	cmp	r0, #31
  402c0a:	d804      	bhi.n	402c16 <follow_path+0x2fa>
  402c0c:	2306      	movs	r3, #6
}
  402c0e:	4618      	mov	r0, r3
  402c10:	b003      	add	sp, #12
  402c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	si = di = 0;
  402c16:	2400      	movs	r4, #0
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
  402c18:	4626      	mov	r6, r4
  402c1a:	e6ca      	b.n	4029b2 <follow_path+0x96>
			cf |= NS_LFN;				/* Force create LFN entry */
  402c1c:	f046 0602 	orr.w	r6, r6, #2
  402c20:	e765      	b.n	402aee <follow_path+0x1d2>
  402c22:	bf00      	nop
  402c24:	00401f81 	.word	0x00401f81
  402c28:	0040d691 	.word	0x0040d691
  402c2c:	00401991 	.word	0x00401991
  402c30:	0040d69d 	.word	0x0040d69d
  402c34:	0040d610 	.word	0x0040d610
  402c38:	004023cd 	.word	0x004023cd
  402c3c:	00403115 	.word	0x00403115

00402c40 <f_mount>:
)
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
  402c40:	2807      	cmp	r0, #7
  402c42:	d901      	bls.n	402c48 <f_mount+0x8>
		return FR_INVALID_DRIVE;
  402c44:	200b      	movs	r0, #11
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
  402c46:	4770      	bx	lr
	rfs = FatFs[vol];			/* Get current fs object */
  402c48:	4b06      	ldr	r3, [pc, #24]	; (402c64 <f_mount+0x24>)
  402c4a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	if (rfs) {
  402c4e:	b10b      	cbz	r3, 402c54 <f_mount+0x14>
		rfs->fs_type = 0;		/* Clear old fs object */
  402c50:	2200      	movs	r2, #0
  402c52:	701a      	strb	r2, [r3, #0]
	if (fs) {
  402c54:	b109      	cbz	r1, 402c5a <f_mount+0x1a>
		fs->fs_type = 0;		/* Clear new fs object */
  402c56:	2300      	movs	r3, #0
  402c58:	700b      	strb	r3, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
  402c5a:	4b02      	ldr	r3, [pc, #8]	; (402c64 <f_mount+0x24>)
  402c5c:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
	return FR_OK;
  402c60:	2000      	movs	r0, #0
  402c62:	4770      	bx	lr
  402c64:	20400a28 	.word	0x20400a28

00402c68 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
  402c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402c6c:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
  402c70:	4605      	mov	r5, r0
  402c72:	9101      	str	r1, [sp, #4]
  402c74:	4616      	mov	r6, r2
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
  402c76:	2300      	movs	r3, #0
  402c78:	6003      	str	r3, [r0, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
  402c7a:	f002 071f 	and.w	r7, r2, #31
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
  402c7e:	f002 021e 	and.w	r2, r2, #30
  402c82:	a985      	add	r1, sp, #532	; 0x214
  402c84:	a801      	add	r0, sp, #4
  402c86:	4b58      	ldr	r3, [pc, #352]	; (402de8 <f_open+0x180>)
  402c88:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
  402c8a:	ab82      	add	r3, sp, #520	; 0x208
  402c8c:	938b      	str	r3, [sp, #556]	; 0x22c
  402c8e:	ab02      	add	r3, sp, #8
  402c90:	938c      	str	r3, [sp, #560]	; 0x230
	if (res == FR_OK)
  402c92:	b168      	cbz	r0, 402cb0 <f_open+0x48>
  402c94:	4603      	mov	r3, r0
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
  402c96:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  402c98:	f016 0f1c 	tst.w	r6, #28
  402c9c:	d158      	bne.n	402d50 <f_open+0xe8>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
  402c9e:	2b00      	cmp	r3, #0
  402ca0:	f040 8096 	bne.w	402dd0 <f_open+0x168>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
  402ca4:	7ae3      	ldrb	r3, [r4, #11]
  402ca6:	f013 0f10 	tst.w	r3, #16
  402caa:	d062      	beq.n	402d72 <f_open+0x10a>
				res = FR_NO_FILE;
  402cac:	2304      	movs	r3, #4
  402cae:	e08f      	b.n	402dd0 <f_open+0x168>
		res = follow_path(&dj, path);	/* Follow the file path */
  402cb0:	9901      	ldr	r1, [sp, #4]
  402cb2:	a885      	add	r0, sp, #532	; 0x214
  402cb4:	4b4d      	ldr	r3, [pc, #308]	; (402dec <f_open+0x184>)
  402cb6:	4798      	blx	r3
  402cb8:	4603      	mov	r3, r0
	dir = dj.dir;
  402cba:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		if (!dir)	/* Current dir itself */
  402cbc:	b934      	cbnz	r4, 402ccc <f_open+0x64>
  402cbe:	b928      	cbnz	r0, 402ccc <f_open+0x64>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  402cc0:	f016 0f1c 	tst.w	r6, #28
  402cc4:	f040 8089 	bne.w	402dda <f_open+0x172>
			res = FR_INVALID_NAME;
  402cc8:	2306      	movs	r3, #6
  402cca:	e046      	b.n	402d5a <f_open+0xf2>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  402ccc:	f016 0f1c 	tst.w	r6, #28
  402cd0:	d0e5      	beq.n	402c9e <f_open+0x36>
		if (res != FR_OK) {					/* No file, create new */
  402cd2:	2b00      	cmp	r3, #0
  402cd4:	d13c      	bne.n	402d50 <f_open+0xe8>
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
  402cd6:	7ae3      	ldrb	r3, [r4, #11]
  402cd8:	f013 0f11 	tst.w	r3, #17
  402cdc:	d17f      	bne.n	402dde <f_open+0x176>
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
  402cde:	f016 0f04 	tst.w	r6, #4
  402ce2:	d17e      	bne.n	402de2 <f_open+0x17a>
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
  402ce4:	f017 0f08 	tst.w	r7, #8
  402ce8:	d050      	beq.n	402d8c <f_open+0x124>
			dw = get_fattime();					/* Created time */
  402cea:	4b41      	ldr	r3, [pc, #260]	; (402df0 <f_open+0x188>)
  402cec:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
  402cee:	73a0      	strb	r0, [r4, #14]
  402cf0:	f3c0 2307 	ubfx	r3, r0, #8, #8
  402cf4:	73e3      	strb	r3, [r4, #15]
  402cf6:	0c03      	lsrs	r3, r0, #16
  402cf8:	7423      	strb	r3, [r4, #16]
  402cfa:	0e00      	lsrs	r0, r0, #24
  402cfc:	7460      	strb	r0, [r4, #17]
			dir[DIR_Attr] = 0;					/* Reset attribute */
  402cfe:	2300      	movs	r3, #0
  402d00:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
  402d02:	7723      	strb	r3, [r4, #28]
  402d04:	7763      	strb	r3, [r4, #29]
  402d06:	77a3      	strb	r3, [r4, #30]
  402d08:	77e3      	strb	r3, [r4, #31]
			cl = LD_CLUST(dir);					/* Get start cluster */
  402d0a:	7d62      	ldrb	r2, [r4, #21]
  402d0c:	7d26      	ldrb	r6, [r4, #20]
  402d0e:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
  402d12:	7ee1      	ldrb	r1, [r4, #27]
  402d14:	7ea2      	ldrb	r2, [r4, #26]
  402d16:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
			ST_CLUST(dir, 0);					/* cluster = 0 */
  402d1a:	76a3      	strb	r3, [r4, #26]
  402d1c:	76e3      	strb	r3, [r4, #27]
  402d1e:	7523      	strb	r3, [r4, #20]
  402d20:	7563      	strb	r3, [r4, #21]
			dj.fs->wflag = 1;
  402d22:	9885      	ldr	r0, [sp, #532]	; 0x214
  402d24:	2301      	movs	r3, #1
  402d26:	7103      	strb	r3, [r0, #4]
			if (cl) {							/* Remove the cluster chain if exist */
  402d28:	ea52 4606 	orrs.w	r6, r2, r6, lsl #16
  402d2c:	d02c      	beq.n	402d88 <f_open+0x120>
				dw = dj.fs->winsect;
  402d2e:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
				res = remove_chain(dj.fs, cl);
  402d32:	4631      	mov	r1, r6
  402d34:	4b2f      	ldr	r3, [pc, #188]	; (402df4 <f_open+0x18c>)
  402d36:	4798      	blx	r3
				if (res == FR_OK) {
  402d38:	4603      	mov	r3, r0
  402d3a:	2800      	cmp	r0, #0
  402d3c:	d148      	bne.n	402dd0 <f_open+0x168>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
  402d3e:	9885      	ldr	r0, [sp, #532]	; 0x214
  402d40:	3e01      	subs	r6, #1
  402d42:	60c6      	str	r6, [r0, #12]
					res = move_window(dj.fs, dw);
  402d44:	4641      	mov	r1, r8
  402d46:	4b2c      	ldr	r3, [pc, #176]	; (402df8 <f_open+0x190>)
  402d48:	4798      	blx	r3
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
					res = FR_DENIED;
			}
		}
	}
	if (res == FR_OK) {
  402d4a:	4603      	mov	r3, r0
  402d4c:	b1e0      	cbz	r0, 402d88 <f_open+0x120>
  402d4e:	e03f      	b.n	402dd0 <f_open+0x168>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
  402d50:	2b04      	cmp	r3, #4
  402d52:	d004      	beq.n	402d5e <f_open+0xf6>
			mode |= FA_CREATE_ALWAYS;		/* File is created */
  402d54:	f047 0708 	orr.w	r7, r7, #8
			dir = dj.dir;					/* New entry */
  402d58:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
  402d5a:	b1db      	cbz	r3, 402d94 <f_open+0x12c>
  402d5c:	e038      	b.n	402dd0 <f_open+0x168>
				res = dir_register(&dj);
  402d5e:	a885      	add	r0, sp, #532	; 0x214
  402d60:	4b26      	ldr	r3, [pc, #152]	; (402dfc <f_open+0x194>)
  402d62:	4798      	blx	r3
			mode |= FA_CREATE_ALWAYS;		/* File is created */
  402d64:	f047 0708 	orr.w	r7, r7, #8
			dir = dj.dir;					/* New entry */
  402d68:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
  402d6a:	4603      	mov	r3, r0
  402d6c:	2800      	cmp	r0, #0
  402d6e:	d0b9      	beq.n	402ce4 <f_open+0x7c>
  402d70:	e02e      	b.n	402dd0 <f_open+0x168>
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
  402d72:	f016 0f02 	tst.w	r6, #2
  402d76:	d004      	beq.n	402d82 <f_open+0x11a>
  402d78:	f013 0f01 	tst.w	r3, #1
  402d7c:	d001      	beq.n	402d82 <f_open+0x11a>
					res = FR_DENIED;
  402d7e:	2307      	movs	r3, #7
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
	}

	LEAVE_FF(dj.fs, res);
  402d80:	e026      	b.n	402dd0 <f_open+0x168>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
  402d82:	f016 0f08 	tst.w	r6, #8
  402d86:	d001      	beq.n	402d8c <f_open+0x124>
			mode |= FA__WRITTEN;
  402d88:	f047 0720 	orr.w	r7, r7, #32
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
  402d8c:	9b85      	ldr	r3, [sp, #532]	; 0x214
  402d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402d90:	61eb      	str	r3, [r5, #28]
		fp->dir_ptr = dir;
  402d92:	622c      	str	r4, [r5, #32]
		fp->flag = mode;					/* File access mode */
  402d94:	71af      	strb	r7, [r5, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
  402d96:	7d62      	ldrb	r2, [r4, #21]
  402d98:	7d23      	ldrb	r3, [r4, #20]
  402d9a:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
  402d9e:	7ee1      	ldrb	r1, [r4, #27]
  402da0:	7ea3      	ldrb	r3, [r4, #26]
  402da2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  402da6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  402daa:	612b      	str	r3, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
  402dac:	7fe2      	ldrb	r2, [r4, #31]
  402dae:	7fa3      	ldrb	r3, [r4, #30]
  402db0:	041b      	lsls	r3, r3, #16
  402db2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  402db6:	7f22      	ldrb	r2, [r4, #28]
  402db8:	4313      	orrs	r3, r2
  402dba:	7f62      	ldrb	r2, [r4, #29]
  402dbc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  402dc0:	60eb      	str	r3, [r5, #12]
		fp->fptr = 0;						/* File pointer */
  402dc2:	2300      	movs	r3, #0
  402dc4:	60ab      	str	r3, [r5, #8]
		fp->dsect = 0;
  402dc6:	61ab      	str	r3, [r5, #24]
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
  402dc8:	9a85      	ldr	r2, [sp, #532]	; 0x214
  402dca:	602a      	str	r2, [r5, #0]
  402dcc:	88d2      	ldrh	r2, [r2, #6]
  402dce:	80aa      	strh	r2, [r5, #4]
}
  402dd0:	4618      	mov	r0, r3
  402dd2:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
  402dd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			res = FR_INVALID_NAME;
  402dda:	2306      	movs	r3, #6
  402ddc:	e7ba      	b.n	402d54 <f_open+0xec>
				res = FR_DENIED;
  402dde:	2307      	movs	r3, #7
  402de0:	e7f6      	b.n	402dd0 <f_open+0x168>
					res = FR_EXIST;
  402de2:	2308      	movs	r3, #8
  402de4:	e7f4      	b.n	402dd0 <f_open+0x168>
  402de6:	bf00      	nop
  402de8:	00401a99 	.word	0x00401a99
  402dec:	0040291d 	.word	0x0040291d
  402df0:	00401925 	.word	0x00401925
  402df4:	00402219 	.word	0x00402219
  402df8:	00401e09 	.word	0x00401e09
  402dfc:	00402575 	.word	0x00402575

00402e00 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
  402e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402e04:	b083      	sub	sp, #12
  402e06:	4604      	mov	r4, r0
  402e08:	4689      	mov	r9, r1
  402e0a:	4616      	mov	r6, r2
  402e0c:	4698      	mov	r8, r3
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
  402e0e:	2300      	movs	r3, #0
  402e10:	f8c8 3000 	str.w	r3, [r8]

	res = validate(fp->fs, fp->id);			/* Check validity */
  402e14:	8881      	ldrh	r1, [r0, #4]
  402e16:	6800      	ldr	r0, [r0, #0]
  402e18:	4b75      	ldr	r3, [pc, #468]	; (402ff0 <f_write+0x1f0>)
  402e1a:	4798      	blx	r3
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
  402e1c:	9001      	str	r0, [sp, #4]
  402e1e:	2800      	cmp	r0, #0
  402e20:	f040 80e2 	bne.w	402fe8 <f_write+0x1e8>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
  402e24:	79a3      	ldrb	r3, [r4, #6]
  402e26:	f013 0f80 	tst.w	r3, #128	; 0x80
  402e2a:	f040 80db 	bne.w	402fe4 <f_write+0x1e4>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
  402e2e:	f013 0f02 	tst.w	r3, #2
  402e32:	d102      	bne.n	402e3a <f_write+0x3a>
		LEAVE_FF(fp->fs, FR_DENIED);
  402e34:	2307      	movs	r3, #7
  402e36:	9301      	str	r3, [sp, #4]
  402e38:	e0d6      	b.n	402fe8 <f_write+0x1e8>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
  402e3a:	68e3      	ldr	r3, [r4, #12]
  402e3c:	42f3      	cmn	r3, r6
  402e3e:	d20e      	bcs.n	402e5e <f_write+0x5e>

	for ( ;  btw;							/* Repeat until all data written */
  402e40:	2e00      	cmp	r6, #0
  402e42:	d174      	bne.n	402f2e <f_write+0x12e>
  402e44:	e00b      	b.n	402e5e <f_write+0x5e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
			if (!csect) {					/* On the cluster boundary? */
				if (fp->fptr == 0) {		/* On the top of the file? */
					clst = fp->sclust;		/* Follow from the origin */
					if (clst == 0)			/* When no cluster is allocated, */
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
  402e46:	2100      	movs	r1, #0
  402e48:	4b6a      	ldr	r3, [pc, #424]	; (402ff4 <f_write+0x1f4>)
  402e4a:	4798      	blx	r3
  402e4c:	4603      	mov	r3, r0
  402e4e:	6120      	str	r0, [r4, #16]
  402e50:	e003      	b.n	402e5a <f_write+0x5a>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
  402e52:	6961      	ldr	r1, [r4, #20]
  402e54:	4b67      	ldr	r3, [pc, #412]	; (402ff4 <f_write+0x1f4>)
  402e56:	4798      	blx	r3
  402e58:	4603      	mov	r3, r0
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
  402e5a:	2b00      	cmp	r3, #0
  402e5c:	d17a      	bne.n	402f54 <f_write+0x154>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
  402e5e:	68a3      	ldr	r3, [r4, #8]
  402e60:	68e2      	ldr	r2, [r4, #12]
  402e62:	4293      	cmp	r3, r2
  402e64:	bf88      	it	hi
  402e66:	60e3      	strhi	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
  402e68:	79a3      	ldrb	r3, [r4, #6]
  402e6a:	f043 0320 	orr.w	r3, r3, #32
  402e6e:	71a3      	strb	r3, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
  402e70:	e0ba      	b.n	402fe8 <f_write+0x1e8>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
  402e72:	79a3      	ldrb	r3, [r4, #6]
  402e74:	f063 037f 	orn	r3, r3, #127	; 0x7f
  402e78:	71a3      	strb	r3, [r4, #6]
  402e7a:	2302      	movs	r3, #2
  402e7c:	9301      	str	r3, [sp, #4]
  402e7e:	e0b3      	b.n	402fe8 <f_write+0x1e8>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  402e80:	79a3      	ldrb	r3, [r4, #6]
  402e82:	f063 037f 	orn	r3, r3, #127	; 0x7f
  402e86:	71a3      	strb	r3, [r4, #6]
  402e88:	2301      	movs	r3, #1
  402e8a:	9301      	str	r3, [sp, #4]
  402e8c:	e0ac      	b.n	402fe8 <f_write+0x1e8>
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
  402e8e:	2100      	movs	r1, #0
  402e90:	4b59      	ldr	r3, [pc, #356]	; (402ff8 <f_write+0x1f8>)
  402e92:	4798      	blx	r3
  402e94:	2800      	cmp	r0, #0
  402e96:	d068      	beq.n	402f6a <f_write+0x16a>
				ABORT(fp->fs, FR_DISK_ERR);
  402e98:	79a3      	ldrb	r3, [r4, #6]
  402e9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
  402e9e:	71a3      	strb	r3, [r4, #6]
  402ea0:	2301      	movs	r3, #1
  402ea2:	9301      	str	r3, [sp, #4]
  402ea4:	e0a0      	b.n	402fe8 <f_write+0x1e8>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
  402ea6:	79a3      	ldrb	r3, [r4, #6]
  402ea8:	f063 037f 	orn	r3, r3, #127	; 0x7f
  402eac:	71a3      	strb	r3, [r4, #6]
  402eae:	2302      	movs	r3, #2
  402eb0:	9301      	str	r3, [sp, #4]
  402eb2:	e099      	b.n	402fe8 <f_write+0x1e8>
					ABORT(fp->fs, FR_DISK_ERR);
  402eb4:	79a3      	ldrb	r3, [r4, #6]
  402eb6:	f063 037f 	orn	r3, r3, #127	; 0x7f
  402eba:	71a3      	strb	r3, [r4, #6]
  402ebc:	2301      	movs	r3, #1
  402ebe:	9301      	str	r3, [sp, #4]
  402ec0:	e092      	b.n	402fe8 <f_write+0x1e8>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
  402ec2:	f44f 7200 	mov.w	r2, #512	; 0x200
  402ec6:	eb09 2141 	add.w	r1, r9, r1, lsl #9
  402eca:	3030      	adds	r0, #48	; 0x30
  402ecc:	4b4b      	ldr	r3, [pc, #300]	; (402ffc <f_write+0x1fc>)
  402ece:	4798      	blx	r3
					fp->fs->wflag = 0;
  402ed0:	6823      	ldr	r3, [r4, #0]
  402ed2:	2200      	movs	r2, #0
  402ed4:	711a      	strb	r2, [r3, #4]
  402ed6:	e06c      	b.n	402fb2 <f_write+0x1b2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
  402ed8:	68a2      	ldr	r2, [r4, #8]
  402eda:	68e3      	ldr	r3, [r4, #12]
  402edc:	429a      	cmp	r2, r3
  402ede:	d26b      	bcs.n	402fb8 <f_write+0x1b8>
			fp->dsect = sect;
  402ee0:	61a5      	str	r5, [r4, #24]
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
  402ee2:	68a5      	ldr	r5, [r4, #8]
  402ee4:	f3c5 0508 	ubfx	r5, r5, #0, #9
  402ee8:	f5c5 7500 	rsb	r5, r5, #512	; 0x200
  402eec:	42b5      	cmp	r5, r6
  402eee:	bf28      	it	cs
  402ef0:	4635      	movcs	r5, r6
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
  402ef2:	69a1      	ldr	r1, [r4, #24]
  402ef4:	6820      	ldr	r0, [r4, #0]
  402ef6:	4b40      	ldr	r3, [pc, #256]	; (402ff8 <f_write+0x1f8>)
  402ef8:	4798      	blx	r3
  402efa:	2800      	cmp	r0, #0
  402efc:	d16b      	bne.n	402fd6 <f_write+0x1d6>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
  402efe:	68a0      	ldr	r0, [r4, #8]
  402f00:	f3c0 0008 	ubfx	r0, r0, #0, #9
  402f04:	3030      	adds	r0, #48	; 0x30
  402f06:	6823      	ldr	r3, [r4, #0]
  402f08:	462a      	mov	r2, r5
  402f0a:	4649      	mov	r1, r9
  402f0c:	4418      	add	r0, r3
  402f0e:	4b3b      	ldr	r3, [pc, #236]	; (402ffc <f_write+0x1fc>)
  402f10:	4798      	blx	r3
		fp->fs->wflag = 1;
  402f12:	6823      	ldr	r3, [r4, #0]
  402f14:	2201      	movs	r2, #1
  402f16:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
  402f18:	44a9      	add	r9, r5
  402f1a:	68a3      	ldr	r3, [r4, #8]
  402f1c:	442b      	add	r3, r5
  402f1e:	60a3      	str	r3, [r4, #8]
  402f20:	f8d8 3000 	ldr.w	r3, [r8]
  402f24:	442b      	add	r3, r5
  402f26:	f8c8 3000 	str.w	r3, [r8]
	for ( ;  btw;							/* Repeat until all data written */
  402f2a:	1b76      	subs	r6, r6, r5
  402f2c:	d097      	beq.n	402e5e <f_write+0x5e>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
  402f2e:	68a2      	ldr	r2, [r4, #8]
  402f30:	f3c2 0308 	ubfx	r3, r2, #0, #9
  402f34:	2b00      	cmp	r3, #0
  402f36:	d1d4      	bne.n	402ee2 <f_write+0xe2>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
  402f38:	6820      	ldr	r0, [r4, #0]
  402f3a:	7883      	ldrb	r3, [r0, #2]
  402f3c:	3b01      	subs	r3, #1
  402f3e:	ea03 2352 	and.w	r3, r3, r2, lsr #9
			if (!csect) {					/* On the cluster boundary? */
  402f42:	f013 07ff 	ands.w	r7, r3, #255	; 0xff
  402f46:	d10b      	bne.n	402f60 <f_write+0x160>
				if (fp->fptr == 0) {		/* On the top of the file? */
  402f48:	2a00      	cmp	r2, #0
  402f4a:	d182      	bne.n	402e52 <f_write+0x52>
					clst = fp->sclust;		/* Follow from the origin */
  402f4c:	6923      	ldr	r3, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
  402f4e:	2b00      	cmp	r3, #0
  402f50:	f43f af79 	beq.w	402e46 <f_write+0x46>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
  402f54:	2b01      	cmp	r3, #1
  402f56:	d08c      	beq.n	402e72 <f_write+0x72>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  402f58:	f1b3 3fff 	cmp.w	r3, #4294967295
  402f5c:	d090      	beq.n	402e80 <f_write+0x80>
				fp->clust = clst;			/* Update current cluster */
  402f5e:	6163      	str	r3, [r4, #20]
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
  402f60:	6820      	ldr	r0, [r4, #0]
  402f62:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  402f64:	69a3      	ldr	r3, [r4, #24]
  402f66:	429a      	cmp	r2, r3
  402f68:	d091      	beq.n	402e8e <f_write+0x8e>
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
  402f6a:	f8d4 a000 	ldr.w	sl, [r4]
  402f6e:	6961      	ldr	r1, [r4, #20]
  402f70:	4650      	mov	r0, sl
  402f72:	4b23      	ldr	r3, [pc, #140]	; (403000 <f_write+0x200>)
  402f74:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
  402f76:	4605      	mov	r5, r0
  402f78:	2800      	cmp	r0, #0
  402f7a:	d094      	beq.n	402ea6 <f_write+0xa6>
			sect += csect;
  402f7c:	443d      	add	r5, r7
			if (cc) {						/* Write maximum contiguous sectors directly */
  402f7e:	ea5f 2b56 	movs.w	fp, r6, lsr #9
  402f82:	d0a9      	beq.n	402ed8 <f_write+0xd8>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
  402f84:	f89a 3002 	ldrb.w	r3, [sl, #2]
  402f88:	eb07 020b 	add.w	r2, r7, fp
  402f8c:	429a      	cmp	r2, r3
					cc = fp->fs->csize - csect;
  402f8e:	bf88      	it	hi
  402f90:	eba3 0b07 	subhi.w	fp, r3, r7
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
  402f94:	fa5f f38b 	uxtb.w	r3, fp
  402f98:	462a      	mov	r2, r5
  402f9a:	4649      	mov	r1, r9
  402f9c:	f89a 0001 	ldrb.w	r0, [sl, #1]
  402fa0:	4f18      	ldr	r7, [pc, #96]	; (403004 <f_write+0x204>)
  402fa2:	47b8      	blx	r7
  402fa4:	2800      	cmp	r0, #0
  402fa6:	d185      	bne.n	402eb4 <f_write+0xb4>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
  402fa8:	6820      	ldr	r0, [r4, #0]
  402faa:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  402fac:	1b49      	subs	r1, r1, r5
  402fae:	458b      	cmp	fp, r1
  402fb0:	d887      	bhi.n	402ec2 <f_write+0xc2>
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
  402fb2:	ea4f 254b 	mov.w	r5, fp, lsl #9
				continue;
  402fb6:	e7af      	b.n	402f18 <f_write+0x118>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
  402fb8:	2100      	movs	r1, #0
  402fba:	4650      	mov	r0, sl
  402fbc:	4b0e      	ldr	r3, [pc, #56]	; (402ff8 <f_write+0x1f8>)
  402fbe:	4798      	blx	r3
  402fc0:	b910      	cbnz	r0, 402fc8 <f_write+0x1c8>
				fp->fs->winsect = sect;
  402fc2:	6823      	ldr	r3, [r4, #0]
  402fc4:	62dd      	str	r5, [r3, #44]	; 0x2c
  402fc6:	e78b      	b.n	402ee0 <f_write+0xe0>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
  402fc8:	79a3      	ldrb	r3, [r4, #6]
  402fca:	f063 037f 	orn	r3, r3, #127	; 0x7f
  402fce:	71a3      	strb	r3, [r4, #6]
  402fd0:	2301      	movs	r3, #1
  402fd2:	9301      	str	r3, [sp, #4]
  402fd4:	e008      	b.n	402fe8 <f_write+0x1e8>
			ABORT(fp->fs, FR_DISK_ERR);
  402fd6:	79a3      	ldrb	r3, [r4, #6]
  402fd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
  402fdc:	71a3      	strb	r3, [r4, #6]
  402fde:	2301      	movs	r3, #1
  402fe0:	9301      	str	r3, [sp, #4]
  402fe2:	e001      	b.n	402fe8 <f_write+0x1e8>
		LEAVE_FF(fp->fs, FR_INT_ERR);
  402fe4:	2302      	movs	r3, #2
  402fe6:	9301      	str	r3, [sp, #4]
}
  402fe8:	9801      	ldr	r0, [sp, #4]
  402fea:	b003      	add	sp, #12
  402fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402ff0:	004019d5 	.word	0x004019d5
  402ff4:	00402159 	.word	0x00402159
  402ff8:	00401e09 	.word	0x00401e09
  402ffc:	0040197d 	.word	0x0040197d
  403000:	0040199f 	.word	0x0040199f
  403004:	00401845 	.word	0x00401845

00403008 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
  403008:	b538      	push	{r3, r4, r5, lr}
  40300a:	4604      	mov	r4, r0
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
  40300c:	8881      	ldrh	r1, [r0, #4]
  40300e:	6800      	ldr	r0, [r0, #0]
  403010:	4b1f      	ldr	r3, [pc, #124]	; (403090 <f_sync+0x88>)
  403012:	4798      	blx	r3
	if (res == FR_OK) {
  403014:	4603      	mov	r3, r0
  403016:	b918      	cbnz	r0, 403020 <f_sync+0x18>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
  403018:	79a2      	ldrb	r2, [r4, #6]
  40301a:	f012 0f20 	tst.w	r2, #32
  40301e:	d101      	bne.n	403024 <f_sync+0x1c>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
  403020:	4618      	mov	r0, r3
  403022:	bd38      	pop	{r3, r4, r5, pc}
			res = move_window(fp->fs, fp->dir_sect);
  403024:	69e1      	ldr	r1, [r4, #28]
  403026:	6820      	ldr	r0, [r4, #0]
  403028:	4b1a      	ldr	r3, [pc, #104]	; (403094 <f_sync+0x8c>)
  40302a:	4798      	blx	r3
			if (res == FR_OK) {
  40302c:	4603      	mov	r3, r0
  40302e:	2800      	cmp	r0, #0
  403030:	d1f6      	bne.n	403020 <f_sync+0x18>
				dir = fp->dir_ptr;
  403032:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
  403034:	7aeb      	ldrb	r3, [r5, #11]
  403036:	f043 0320 	orr.w	r3, r3, #32
  40303a:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
  40303c:	68e3      	ldr	r3, [r4, #12]
  40303e:	772b      	strb	r3, [r5, #28]
  403040:	89a3      	ldrh	r3, [r4, #12]
  403042:	0a1b      	lsrs	r3, r3, #8
  403044:	776b      	strb	r3, [r5, #29]
  403046:	89e3      	ldrh	r3, [r4, #14]
  403048:	77ab      	strb	r3, [r5, #30]
  40304a:	7be3      	ldrb	r3, [r4, #15]
  40304c:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
  40304e:	6923      	ldr	r3, [r4, #16]
  403050:	76ab      	strb	r3, [r5, #26]
  403052:	8a23      	ldrh	r3, [r4, #16]
  403054:	0a1b      	lsrs	r3, r3, #8
  403056:	76eb      	strb	r3, [r5, #27]
  403058:	8a63      	ldrh	r3, [r4, #18]
  40305a:	752b      	strb	r3, [r5, #20]
  40305c:	8a63      	ldrh	r3, [r4, #18]
  40305e:	0a1b      	lsrs	r3, r3, #8
  403060:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
  403062:	4b0d      	ldr	r3, [pc, #52]	; (403098 <f_sync+0x90>)
  403064:	4798      	blx	r3
				ST_DWORD(dir+DIR_WrtTime, tim);
  403066:	75a8      	strb	r0, [r5, #22]
  403068:	f3c0 2307 	ubfx	r3, r0, #8, #8
  40306c:	75eb      	strb	r3, [r5, #23]
  40306e:	0c03      	lsrs	r3, r0, #16
  403070:	762b      	strb	r3, [r5, #24]
  403072:	0e00      	lsrs	r0, r0, #24
  403074:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
  403076:	79a3      	ldrb	r3, [r4, #6]
  403078:	f023 0320 	bic.w	r3, r3, #32
  40307c:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
  40307e:	6823      	ldr	r3, [r4, #0]
  403080:	2201      	movs	r2, #1
  403082:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
  403084:	6820      	ldr	r0, [r4, #0]
  403086:	4b05      	ldr	r3, [pc, #20]	; (40309c <f_sync+0x94>)
  403088:	4798      	blx	r3
  40308a:	4603      	mov	r3, r0
  40308c:	e7c8      	b.n	403020 <f_sync+0x18>
  40308e:	bf00      	nop
  403090:	004019d5 	.word	0x004019d5
  403094:	00401e09 	.word	0x00401e09
  403098:	00401925 	.word	0x00401925
  40309c:	00402851 	.word	0x00402851

004030a0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
  4030a0:	b510      	push	{r4, lr}
  4030a2:	4604      	mov	r4, r0
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
  4030a4:	4b03      	ldr	r3, [pc, #12]	; (4030b4 <f_close+0x14>)
  4030a6:	4798      	blx	r3
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
  4030a8:	4603      	mov	r3, r0
  4030aa:	b908      	cbnz	r0, 4030b0 <f_close+0x10>
  4030ac:	2200      	movs	r2, #0
  4030ae:	6022      	str	r2, [r4, #0]
	return res;
#endif
}
  4030b0:	4618      	mov	r0, r3
  4030b2:	bd10      	pop	{r4, pc}
  4030b4:	00403009 	.word	0x00403009

004030b8 <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
	TCHAR c,	/* A character to be output */
	FIL* fil	/* Pointer to the file object */
)
{
  4030b8:	b510      	push	{r4, lr}
  4030ba:	b082      	sub	sp, #8
  4030bc:	460c      	mov	r4, r1
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
  4030be:	f88d 0000 	strb.w	r0, [sp]
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
  4030c2:	ab01      	add	r3, sp, #4
  4030c4:	2201      	movs	r2, #1
  4030c6:	4669      	mov	r1, sp
  4030c8:	4620      	mov	r0, r4
  4030ca:	4c05      	ldr	r4, [pc, #20]	; (4030e0 <f_putc+0x28>)
  4030cc:	47a0      	blx	r4
	return (bw == btw) ? 1 : EOF;	/* Return the result */
  4030ce:	9b01      	ldr	r3, [sp, #4]
  4030d0:	2b01      	cmp	r3, #1
}
  4030d2:	bf0c      	ite	eq
  4030d4:	2001      	moveq	r0, #1
  4030d6:	f04f 30ff 	movne.w	r0, #4294967295
  4030da:	b002      	add	sp, #8
  4030dc:	bd10      	pop	{r4, pc}
  4030de:	bf00      	nop
  4030e0:	00402e01 	.word	0x00402e01

004030e4 <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fil			/* Pointer to the file object */
)
{
  4030e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int n;


	for (n = 0; *str; str++, n++) {
  4030e6:	7803      	ldrb	r3, [r0, #0]
  4030e8:	b17b      	cbz	r3, 40310a <f_puts+0x26>
  4030ea:	460e      	mov	r6, r1
  4030ec:	4605      	mov	r5, r0
  4030ee:	1c44      	adds	r4, r0, #1
		if (f_putc(*str, fil) == EOF) return EOF;
  4030f0:	4f07      	ldr	r7, [pc, #28]	; (403110 <f_puts+0x2c>)
  4030f2:	4631      	mov	r1, r6
  4030f4:	4618      	mov	r0, r3
  4030f6:	47b8      	blx	r7
  4030f8:	f1b0 3fff 	cmp.w	r0, #4294967295
  4030fc:	d006      	beq.n	40310c <f_puts+0x28>
  4030fe:	1b60      	subs	r0, r4, r5
	for (n = 0; *str; str++, n++) {
  403100:	f814 3b01 	ldrb.w	r3, [r4], #1
  403104:	2b00      	cmp	r3, #0
  403106:	d1f4      	bne.n	4030f2 <f_puts+0xe>
  403108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40310a:	2000      	movs	r0, #0
	}
	return n;
}
  40310c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40310e:	bf00      	nop
  403110:	004030b9 	.word	0x004030b9

00403114 <ff_convert>:
)
{
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
  403114:	287f      	cmp	r0, #127	; 0x7f
  403116:	d919      	bls.n	40314c <ff_convert+0x38>
		c = src;

	} else {
		if (dir) {		/* OEMCP to Unicode */
  403118:	b971      	cbnz	r1, 403138 <ff_convert+0x24>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (src == Tbl[c]) break;
  40311a:	28c7      	cmp	r0, #199	; 0xc7
  40311c:	d013      	beq.n	403146 <ff_convert+0x32>
  40311e:	4a0c      	ldr	r2, [pc, #48]	; (403150 <ff_convert+0x3c>)
			for (c = 0; c < 0x80; c++) {
  403120:	2301      	movs	r3, #1
				if (src == Tbl[c]) break;
  403122:	f832 1f02 	ldrh.w	r1, [r2, #2]!
  403126:	4281      	cmp	r1, r0
  403128:	d003      	beq.n	403132 <ff_convert+0x1e>
			for (c = 0; c < 0x80; c++) {
  40312a:	3301      	adds	r3, #1
  40312c:	b29b      	uxth	r3, r3
  40312e:	2b80      	cmp	r3, #128	; 0x80
  403130:	d1f7      	bne.n	403122 <ff_convert+0xe>
			}
			c = (c + 0x80) & 0xFF;
  403132:	3380      	adds	r3, #128	; 0x80
  403134:	b2d8      	uxtb	r0, r3
  403136:	4770      	bx	lr
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
  403138:	28ff      	cmp	r0, #255	; 0xff
  40313a:	d806      	bhi.n	40314a <ff_convert+0x36>
  40313c:	3880      	subs	r0, #128	; 0x80
  40313e:	4b04      	ldr	r3, [pc, #16]	; (403150 <ff_convert+0x3c>)
  403140:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
  403144:	4770      	bx	lr
				if (src == Tbl[c]) break;
  403146:	2300      	movs	r3, #0
  403148:	e7f3      	b.n	403132 <ff_convert+0x1e>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
  40314a:	2000      	movs	r0, #0
		}
	}

	return c;
}
  40314c:	4770      	bx	lr
  40314e:	bf00      	nop
  403150:	0040d6a4 	.word	0x0040d6a4

00403154 <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
  403154:	2861      	cmp	r0, #97	; 0x61
  403156:	d00e      	beq.n	403176 <ff_wtoupper+0x22>
  403158:	4908      	ldr	r1, [pc, #32]	; (40317c <ff_wtoupper+0x28>)
  40315a:	2200      	movs	r2, #0
  40315c:	3201      	adds	r2, #1
  40315e:	f831 3f02 	ldrh.w	r3, [r1, #2]!
  403162:	4283      	cmp	r3, r0
  403164:	d001      	beq.n	40316a <ff_wtoupper+0x16>
  403166:	2b00      	cmp	r3, #0
  403168:	d1f8      	bne.n	40315c <ff_wtoupper+0x8>

	return tbl_lower[i] ? tbl_upper[i] : chr;
  40316a:	b11b      	cbz	r3, 403174 <ff_wtoupper+0x20>
  40316c:	4b04      	ldr	r3, [pc, #16]	; (403180 <ff_wtoupper+0x2c>)
  40316e:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
}
  403172:	4770      	bx	lr
  403174:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
  403176:	2200      	movs	r2, #0
  403178:	e7f8      	b.n	40316c <ff_wtoupper+0x18>
  40317a:	bf00      	nop
  40317c:	0040d7a4 	.word	0x0040d7a4
  403180:	0040d984 	.word	0x0040d984

00403184 <chip_isr>:

static tpfNmBspIsr gpfIsr;

static void chip_isr(uint32_t id, uint32_t mask)
{
	if ((id == CONF_WINC_SPI_INT_PIO_ID) && (mask == CONF_WINC_SPI_INT_MASK)) {
  403184:	2810      	cmp	r0, #16
  403186:	d108      	bne.n	40319a <chip_isr+0x16>
  403188:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  40318c:	d105      	bne.n	40319a <chip_isr+0x16>
{
  40318e:	b508      	push	{r3, lr}
		if (gpfIsr) {
  403190:	4b02      	ldr	r3, [pc, #8]	; (40319c <chip_isr+0x18>)
  403192:	681b      	ldr	r3, [r3, #0]
  403194:	b103      	cbz	r3, 403198 <chip_isr+0x14>
			gpfIsr();
  403196:	4798      	blx	r3
  403198:	bd08      	pop	{r3, pc}
  40319a:	4770      	bx	lr
  40319c:	20400a4c 	.word	0x20400a4c

004031a0 <nm_bsp_sleep>:
*	@param[IN]	u32TimeMsec
*				Time in milliseconds
*/
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while(u32TimeMsec--) {
  4031a0:	b150      	cbz	r0, 4031b8 <nm_bsp_sleep+0x18>
{
  4031a2:	b570      	push	{r4, r5, r6, lr}
  4031a4:	1e44      	subs	r4, r0, #1
		delay_ms(4);
  4031a6:	4e05      	ldr	r6, [pc, #20]	; (4031bc <nm_bsp_sleep+0x1c>)
  4031a8:	4d05      	ldr	r5, [pc, #20]	; (4031c0 <nm_bsp_sleep+0x20>)
  4031aa:	4630      	mov	r0, r6
  4031ac:	47a8      	blx	r5
	while(u32TimeMsec--) {
  4031ae:	3c01      	subs	r4, #1
  4031b0:	f1b4 3fff 	cmp.w	r4, #4294967295
  4031b4:	d1f9      	bne.n	4031aa <nm_bsp_sleep+0xa>
  4031b6:	bd70      	pop	{r4, r5, r6, pc}
  4031b8:	4770      	bx	lr
  4031ba:	bf00      	nop
  4031bc:	00031635 	.word	0x00031635
  4031c0:	20400001 	.word	0x20400001

004031c4 <nm_bsp_reset>:
{
  4031c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4031c8:	4f09      	ldr	r7, [pc, #36]	; (4031f0 <nm_bsp_reset+0x2c>)
  4031ca:	f44f 3800 	mov.w	r8, #131072	; 0x20000
  4031ce:	f8c7 8034 	str.w	r8, [r7, #52]	; 0x34
  4031d2:	4d08      	ldr	r5, [pc, #32]	; (4031f4 <nm_bsp_reset+0x30>)
  4031d4:	2608      	movs	r6, #8
  4031d6:	636e      	str	r6, [r5, #52]	; 0x34
	nm_bsp_sleep(100);
  4031d8:	2064      	movs	r0, #100	; 0x64
  4031da:	4c07      	ldr	r4, [pc, #28]	; (4031f8 <nm_bsp_reset+0x34>)
  4031dc:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4031de:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
	nm_bsp_sleep(100);
  4031e2:	2064      	movs	r0, #100	; 0x64
  4031e4:	47a0      	blx	r4
  4031e6:	632e      	str	r6, [r5, #48]	; 0x30
	nm_bsp_sleep(100);
  4031e8:	2064      	movs	r0, #100	; 0x64
  4031ea:	47a0      	blx	r4
  4031ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4031f0:	400e1200 	.word	0x400e1200
  4031f4:	400e1000 	.word	0x400e1000
  4031f8:	004031a1 	.word	0x004031a1

004031fc <nm_bsp_init>:
{
  4031fc:	b510      	push	{r4, lr}
	gpfIsr = NULL;
  4031fe:	2200      	movs	r2, #0
  403200:	4b14      	ldr	r3, [pc, #80]	; (403254 <nm_bsp_init+0x58>)
  403202:	601a      	str	r2, [r3, #0]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  403204:	200a      	movs	r0, #10
  403206:	4c14      	ldr	r4, [pc, #80]	; (403258 <nm_bsp_init+0x5c>)
  403208:	47a0      	blx	r4
  40320a:	200b      	movs	r0, #11
  40320c:	47a0      	blx	r4
  40320e:	200c      	movs	r0, #12
  403210:	47a0      	blx	r4
  403212:	2010      	movs	r0, #16
  403214:	47a0      	blx	r4
  403216:	2011      	movs	r0, #17
  403218:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40321a:	4b10      	ldr	r3, [pc, #64]	; (40325c <nm_bsp_init+0x60>)
  40321c:	2208      	movs	r2, #8
  40321e:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  403220:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  403224:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  403226:	4a0e      	ldr	r2, [pc, #56]	; (403260 <nm_bsp_init+0x64>)
  403228:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  40322c:	6111      	str	r1, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40322e:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  403232:	6311      	str	r1, [r2, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  403234:	2204      	movs	r2, #4
  403236:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  403238:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40323c:	631a      	str	r2, [r3, #48]	; 0x30
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
  40323e:	4b09      	ldr	r3, [pc, #36]	; (403264 <nm_bsp_init+0x68>)
  403240:	681b      	ldr	r3, [r3, #0]
  403242:	f013 0f01 	tst.w	r3, #1
  403246:	d001      	beq.n	40324c <nm_bsp_init+0x50>
  403248:	4b06      	ldr	r3, [pc, #24]	; (403264 <nm_bsp_init+0x68>)
  40324a:	681b      	ldr	r3, [r3, #0]
	nm_bsp_reset();
  40324c:	4b06      	ldr	r3, [pc, #24]	; (403268 <nm_bsp_init+0x6c>)
  40324e:	4798      	blx	r3
}
  403250:	2000      	movs	r0, #0
  403252:	bd10      	pop	{r4, pc}
  403254:	20400a4c 	.word	0x20400a4c
  403258:	00406651 	.word	0x00406651
  40325c:	400e1000 	.word	0x400e1000
  403260:	400e1200 	.word	0x400e1200
  403264:	e000e010 	.word	0xe000e010
  403268:	004031c5 	.word	0x004031c5

0040326c <nm_bsp_register_isr>:
*	@brief	Register interrupt service routine
*	@param[IN]	pfIsr
*				Pointer to ISR handler
*/
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
  40326c:	b530      	push	{r4, r5, lr}
  40326e:	b083      	sub	sp, #12
	gpfIsr = pfIsr;
  403270:	4b14      	ldr	r3, [pc, #80]	; (4032c4 <nm_bsp_register_isr+0x58>)
  403272:	6018      	str	r0, [r3, #0]

	/* Configure PGIO pin for interrupt from SPI slave, used when slave has data to send. */
	pmc_enable_periph_clk(CONF_WINC_SPI_INT_PIO_ID);
  403274:	2010      	movs	r0, #16
  403276:	4b14      	ldr	r3, [pc, #80]	; (4032c8 <nm_bsp_register_isr+0x5c>)
  403278:	4798      	blx	r3
	pio_configure_pin(CONF_WINC_SPI_INT_PIN, PIO_TYPE_PIO_INPUT);
  40327a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40327e:	207c      	movs	r0, #124	; 0x7c
  403280:	4b12      	ldr	r3, [pc, #72]	; (4032cc <nm_bsp_register_isr+0x60>)
  403282:	4798      	blx	r3
	pio_pull_up(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK, PIO_PULLUP);
  403284:	4c12      	ldr	r4, [pc, #72]	; (4032d0 <nm_bsp_register_isr+0x64>)
  403286:	2201      	movs	r2, #1
  403288:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40328c:	4620      	mov	r0, r4
  40328e:	4b11      	ldr	r3, [pc, #68]	; (4032d4 <nm_bsp_register_isr+0x68>)
  403290:	4798      	blx	r3
	/*Interrupt on falling edge*/
	pio_handler_set(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_PIO_ID,
  403292:	4b11      	ldr	r3, [pc, #68]	; (4032d8 <nm_bsp_register_isr+0x6c>)
  403294:	9300      	str	r3, [sp, #0]
  403296:	2351      	movs	r3, #81	; 0x51
  403298:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40329c:	2110      	movs	r1, #16
  40329e:	4620      	mov	r0, r4
  4032a0:	4d0e      	ldr	r5, [pc, #56]	; (4032dc <nm_bsp_register_isr+0x70>)
  4032a2:	47a8      	blx	r5
	CONF_WINC_SPI_INT_MASK, PIO_PULLUP | PIO_IT_FALL_EDGE, chip_isr);
	pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  4032a4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4032a8:	4620      	mov	r0, r4
  4032aa:	4b0d      	ldr	r3, [pc, #52]	; (4032e0 <nm_bsp_register_isr+0x74>)
  4032ac:	4798      	blx	r3
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4032ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  4032b2:	4b0c      	ldr	r3, [pc, #48]	; (4032e4 <nm_bsp_register_isr+0x78>)
  4032b4:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ((IRQn_Type) CONF_WINC_SPI_INT_PIO_ID);
	pio_handler_set_priority(CONF_WINC_SPI_INT_PIO, (IRQn_Type)CONF_WINC_SPI_INT_PIO_ID,
  4032b6:	2200      	movs	r2, #0
  4032b8:	2110      	movs	r1, #16
  4032ba:	4620      	mov	r0, r4
  4032bc:	4b0a      	ldr	r3, [pc, #40]	; (4032e8 <nm_bsp_register_isr+0x7c>)
  4032be:	4798      	blx	r3
			CONF_WINC_SPI_INT_PRIORITY);
}
  4032c0:	b003      	add	sp, #12
  4032c2:	bd30      	pop	{r4, r5, pc}
  4032c4:	20400a4c 	.word	0x20400a4c
  4032c8:	00406651 	.word	0x00406651
  4032cc:	00406259 	.word	0x00406259
  4032d0:	400e1400 	.word	0x400e1400
  4032d4:	0040611d 	.word	0x0040611d
  4032d8:	00403185 	.word	0x00403185
  4032dc:	004063d9 	.word	0x004063d9
  4032e0:	00406249 	.word	0x00406249
  4032e4:	e000e100 	.word	0xe000e100
  4032e8:	004064ad 	.word	0x004064ad

004032ec <nm_bsp_interrupt_ctrl>:
*	@brief	Enable/Disable interrupts
*	@param[IN]	u8Enable
*				'0' disable interrupts. '1' enable interrupts
*/
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
  4032ec:	b508      	push	{r3, lr}
	if (u8Enable) {
  4032ee:	b928      	cbnz	r0, 4032fc <nm_bsp_interrupt_ctrl+0x10>
		pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
	}
	else {
		pio_disable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  4032f0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4032f4:	4804      	ldr	r0, [pc, #16]	; (403308 <nm_bsp_interrupt_ctrl+0x1c>)
  4032f6:	4b05      	ldr	r3, [pc, #20]	; (40330c <nm_bsp_interrupt_ctrl+0x20>)
  4032f8:	4798      	blx	r3
  4032fa:	bd08      	pop	{r3, pc}
		pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  4032fc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  403300:	4801      	ldr	r0, [pc, #4]	; (403308 <nm_bsp_interrupt_ctrl+0x1c>)
  403302:	4b03      	ldr	r3, [pc, #12]	; (403310 <nm_bsp_interrupt_ctrl+0x24>)
  403304:	4798      	blx	r3
  403306:	bd08      	pop	{r3, pc}
  403308:	400e1400 	.word	0x400e1400
  40330c:	0040624d 	.word	0x0040624d
  403310:	00406249 	.word	0x00406249

00403314 <nm_bus_init>:
 *	@fn		nm_bus_init
 *	@brief	Initialize the bus wrapper
 *	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_bus_init(void *pvinit)
{
  403314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		base->PIO_PUDR = mask;
  403316:	4c39      	ldr	r4, [pc, #228]	; (4033fc <nm_bus_init+0xe8>)
  403318:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  40331c:	6621      	str	r1, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40331e:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  403322:	6561      	str	r1, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  403324:	6261      	str	r1, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  403326:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  40332a:	6f23      	ldr	r3, [r4, #112]	; 0x70
  40332c:	430b      	orrs	r3, r1
  40332e:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  403330:	6f63      	ldr	r3, [r4, #116]	; 0x74
  403332:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
  403336:	6763      	str	r3, [r4, #116]	; 0x74
		base->PIO_PUDR = mask;
  403338:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  40333c:	6622      	str	r2, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40333e:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  403342:	6562      	str	r2, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  403344:	6262      	str	r2, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  403346:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  40334a:	6f23      	ldr	r3, [r4, #112]	; 0x70
  40334c:	4313      	orrs	r3, r2
  40334e:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  403350:	6f63      	ldr	r3, [r4, #116]	; 0x74
  403352:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  403356:	6763      	str	r3, [r4, #116]	; 0x74
		base->PIO_PUDR = mask;
  403358:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  40335c:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40335e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  403362:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  403364:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  403366:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  40336a:	6f20      	ldr	r0, [r4, #112]	; 0x70
  40336c:	4318      	orrs	r0, r3
  40336e:	6720      	str	r0, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  403370:	6f60      	ldr	r0, [r4, #116]	; 0x74
  403372:	f420 0080 	bic.w	r0, r0, #4194304	; 0x400000
  403376:	6760      	str	r0, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  403378:	6061      	str	r1, [r4, #4]
  40337a:	6062      	str	r2, [r4, #4]
  40337c:	6063      	str	r3, [r4, #4]
  40337e:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
  403382:	6066      	str	r6, [r4, #4]
	ioport_disable_pin(CONF_WINC_SPI_MOSI_GPIO);
	ioport_disable_pin(CONF_WINC_SPI_CLK_GPIO);
	ioport_disable_pin(CONF_WINC_SPI_CS_GPIO);
	
	/* disable CS control by peripheral */
	PIOD->PIO_PER = (1<<25);
  403384:	6026      	str	r6, [r4, #0]
	PIOD->PIO_OER = (1<<25);
  403386:	6126      	str	r6, [r4, #16]
	SPI_DEASSERT_CS();
  403388:	6326      	str	r6, [r4, #48]	; 0x30

	spi_enable_clock(CONF_WINC_SPI);
  40338a:	4d1d      	ldr	r5, [pc, #116]	; (403400 <nm_bus_init+0xec>)
  40338c:	4628      	mov	r0, r5
  40338e:	4b1d      	ldr	r3, [pc, #116]	; (403404 <nm_bus_init+0xf0>)
  403390:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  403392:	2302      	movs	r3, #2
  403394:	602b      	str	r3, [r5, #0]
	p_spi->SPI_CR = SPI_CR_SWRST;
  403396:	2380      	movs	r3, #128	; 0x80
  403398:	602b      	str	r3, [r5, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  40339a:	686b      	ldr	r3, [r5, #4]
  40339c:	f043 0301 	orr.w	r3, r3, #1
  4033a0:	606b      	str	r3, [r5, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  4033a2:	686b      	ldr	r3, [r5, #4]
  4033a4:	f043 0310 	orr.w	r3, r3, #16
  4033a8:	606b      	str	r3, [r5, #4]
	spi_disable(CONF_WINC_SPI);
	spi_reset(CONF_WINC_SPI);
	spi_set_master_mode(CONF_WINC_SPI);
	spi_disable_mode_fault_detect(CONF_WINC_SPI);
	spi_set_peripheral_chip_select_value(CONF_WINC_SPI, CONF_WINC_SPI_NPCS);
  4033aa:	2101      	movs	r1, #1
  4033ac:	4628      	mov	r0, r5
  4033ae:	4b16      	ldr	r3, [pc, #88]	; (403408 <nm_bus_init+0xf4>)
  4033b0:	4798      	blx	r3
	spi_set_clock_polarity(CONF_WINC_SPI,
  4033b2:	2200      	movs	r2, #0
  4033b4:	2101      	movs	r1, #1
  4033b6:	4628      	mov	r0, r5
  4033b8:	4b14      	ldr	r3, [pc, #80]	; (40340c <nm_bus_init+0xf8>)
  4033ba:	4798      	blx	r3
			CONF_WINC_SPI_NPCS, CONF_WINC_SPI_POL);
	spi_set_clock_phase(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_PHA);
  4033bc:	2201      	movs	r2, #1
  4033be:	4611      	mov	r1, r2
  4033c0:	4628      	mov	r0, r5
  4033c2:	4b13      	ldr	r3, [pc, #76]	; (403410 <nm_bus_init+0xfc>)
  4033c4:	4798      	blx	r3
	spi_set_bits_per_transfer(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, SPI_CSR_BITS_8_BIT);
  4033c6:	2200      	movs	r2, #0
  4033c8:	2101      	movs	r1, #1
  4033ca:	4628      	mov	r0, r5
  4033cc:	4b11      	ldr	r3, [pc, #68]	; (403414 <nm_bus_init+0x100>)
  4033ce:	4798      	blx	r3
	spi_set_baudrate_div(CONF_WINC_SPI, CONF_WINC_SPI_NPCS,
			spi_calc_baudrate_div(CONF_WINC_SPI_CLOCK, sysclk_get_cpu_hz()));
  4033d0:	4911      	ldr	r1, [pc, #68]	; (403418 <nm_bus_init+0x104>)
  4033d2:	4812      	ldr	r0, [pc, #72]	; (40341c <nm_bus_init+0x108>)
  4033d4:	4b12      	ldr	r3, [pc, #72]	; (403420 <nm_bus_init+0x10c>)
  4033d6:	4798      	blx	r3
	spi_set_baudrate_div(CONF_WINC_SPI, CONF_WINC_SPI_NPCS,
  4033d8:	b2c2      	uxtb	r2, r0
  4033da:	2101      	movs	r1, #1
  4033dc:	4628      	mov	r0, r5
  4033de:	4b11      	ldr	r3, [pc, #68]	; (403424 <nm_bus_init+0x110>)
  4033e0:	4798      	blx	r3
	spi_set_transfer_delay(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_DLYBS,
  4033e2:	2300      	movs	r3, #0
  4033e4:	461a      	mov	r2, r3
  4033e6:	2101      	movs	r1, #1
  4033e8:	4628      	mov	r0, r5
  4033ea:	4f0f      	ldr	r7, [pc, #60]	; (403428 <nm_bus_init+0x114>)
  4033ec:	47b8      	blx	r7
	p_spi->SPI_CR = SPI_CR_SPIEN;
  4033ee:	2301      	movs	r3, #1
  4033f0:	602b      	str	r3, [r5, #0]
			CONF_WINC_SPI_DLYBCT);
	spi_enable(CONF_WINC_SPI);
	
	SPI_DEASSERT_CS();
  4033f2:	6326      	str	r6, [r4, #48]	; 0x30
	nm_bsp_reset();
  4033f4:	4b0d      	ldr	r3, [pc, #52]	; (40342c <nm_bus_init+0x118>)
  4033f6:	4798      	blx	r3
#endif
	return result;
}
  4033f8:	2000      	movs	r0, #0
  4033fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4033fc:	400e1400 	.word	0x400e1400
  403400:	40008000 	.word	0x40008000
  403404:	004066a5 	.word	0x004066a5
  403408:	004066d1 	.word	0x004066d1
  40340c:	0040674b 	.word	0x0040674b
  403410:	00406769 	.word	0x00406769
  403414:	00406787 	.word	0x00406787
  403418:	11e1a300 	.word	0x11e1a300
  40341c:	02dc6c00 	.word	0x02dc6c00
  403420:	0040679b 	.word	0x0040679b
  403424:	004067b1 	.word	0x004067b1
  403428:	004067d9 	.word	0x004067d9
  40342c:	004031c5 	.word	0x004031c5

00403430 <nm_bus_ioctl>:
 *					Arbitrary parameter depenging on IOCTL
 *	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 *	@note	For SPI only, it's important to be able to send/receive at the same time
 */
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
  403430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403434:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
  403436:	2803      	cmp	r0, #3
  403438:	d144      	bne.n	4034c4 <nm_bus_ioctl+0x94>
		}
		break;
#elif CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
  40343a:	680e      	ldr	r6, [r1, #0]
  40343c:	684d      	ldr	r5, [r1, #4]
  40343e:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0;
  403440:	2300      	movs	r3, #0
  403442:	f88d 3004 	strb.w	r3, [sp, #4]
	uint16_t rxd_data = 0;
  403446:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (!pu8Mosi) {
  40344a:	b186      	cbz	r6, 40346e <nm_bus_ioctl+0x3e>
	else if(!pu8Miso) {
  40344c:	2d00      	cmp	r5, #0
  40344e:	d136      	bne.n	4034be <nm_bus_ioctl+0x8e>
		u8SkipMiso = 1;
  403450:	f04f 0801 	mov.w	r8, #1
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
  403454:	4699      	mov	r9, r3
		pu8Miso = &u8Dummy;
  403456:	ad01      	add	r5, sp, #4
	SPI_ASSERT_CS();
  403458:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40345c:	4b20      	ldr	r3, [pc, #128]	; (4034e0 <nm_bus_ioctl+0xb0>)
  40345e:	635a      	str	r2, [r3, #52]	; 0x34
	while (u16Sz) {
  403460:	b32c      	cbz	r4, 4034ae <nm_bus_ioctl+0x7e>
		spi_write(CONF_WINC_SPI, txd_data, 0, 0);
  403462:	4f20      	ldr	r7, [pc, #128]	; (4034e4 <nm_bus_ioctl+0xb4>)
  403464:	f8df b094 	ldr.w	fp, [pc, #148]	; 4034fc <nm_bus_ioctl+0xcc>
		spi_read(CONF_WINC_SPI, &rxd_data, &uc_pcs);
  403468:	f8df a094 	ldr.w	sl, [pc, #148]	; 403500 <nm_bus_ioctl+0xd0>
  40346c:	e006      	b.n	40347c <nm_bus_ioctl+0x4c>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
  40346e:	f04f 0800 	mov.w	r8, #0
		u8SkipMosi = 1;
  403472:	f04f 0901 	mov.w	r9, #1
		pu8Mosi = &u8Dummy;
  403476:	ae01      	add	r6, sp, #4
  403478:	e7ee      	b.n	403458 <nm_bus_ioctl+0x28>
	while (u16Sz) {
  40347a:	b1c4      	cbz	r4, 4034ae <nm_bus_ioctl+0x7e>
		spi_write(CONF_WINC_SPI, txd_data, 0, 0);
  40347c:	2300      	movs	r3, #0
  40347e:	461a      	mov	r2, r3
  403480:	7831      	ldrb	r1, [r6, #0]
  403482:	4638      	mov	r0, r7
  403484:	47d8      	blx	fp
		spi_read(CONF_WINC_SPI, &rxd_data, &uc_pcs);
  403486:	f10d 0205 	add.w	r2, sp, #5
  40348a:	f10d 0106 	add.w	r1, sp, #6
  40348e:	4638      	mov	r0, r7
  403490:	47d0      	blx	sl
		*pu8Miso = rxd_data;
  403492:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  403496:	702b      	strb	r3, [r5, #0]
		u16Sz--;
  403498:	3c01      	subs	r4, #1
  40349a:	b2a4      	uxth	r4, r4
		if (!u8SkipMiso)
  40349c:	f1b8 0f00 	cmp.w	r8, #0
  4034a0:	d100      	bne.n	4034a4 <nm_bus_ioctl+0x74>
			pu8Miso++;
  4034a2:	3501      	adds	r5, #1
		if (!u8SkipMosi)
  4034a4:	f1b9 0f00 	cmp.w	r9, #0
  4034a8:	d1e7      	bne.n	40347a <nm_bus_ioctl+0x4a>
			pu8Mosi++;
  4034aa:	3601      	adds	r6, #1
  4034ac:	e7e5      	b.n	40347a <nm_bus_ioctl+0x4a>
	SPI_DEASSERT_CS();
  4034ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4034b2:	4b0b      	ldr	r3, [pc, #44]	; (4034e0 <nm_bus_ioctl+0xb0>)
  4034b4:	631a      	str	r2, [r3, #48]	; 0x30
	return M2M_SUCCESS;
  4034b6:	2000      	movs	r0, #0
			M2M_ERR("Invalid IOCTL command!\n");
			break;
	}

	return s8Ret;
}
  4034b8:	b003      	add	sp, #12
  4034ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return M2M_ERR_BUS_FAIL;
  4034be:	f06f 0005 	mvn.w	r0, #5
		break;
  4034c2:	e7f9      	b.n	4034b8 <nm_bus_ioctl+0x88>
			M2M_ERR("Invalid IOCTL command!\n");
  4034c4:	f240 121f 	movw	r2, #287	; 0x11f
  4034c8:	4907      	ldr	r1, [pc, #28]	; (4034e8 <nm_bus_ioctl+0xb8>)
  4034ca:	4808      	ldr	r0, [pc, #32]	; (4034ec <nm_bus_ioctl+0xbc>)
  4034cc:	4c08      	ldr	r4, [pc, #32]	; (4034f0 <nm_bus_ioctl+0xc0>)
  4034ce:	47a0      	blx	r4
  4034d0:	4808      	ldr	r0, [pc, #32]	; (4034f4 <nm_bus_ioctl+0xc4>)
  4034d2:	47a0      	blx	r4
  4034d4:	4808      	ldr	r0, [pc, #32]	; (4034f8 <nm_bus_ioctl+0xc8>)
  4034d6:	47a0      	blx	r4
			s8Ret = -1;
  4034d8:	f04f 30ff 	mov.w	r0, #4294967295
			break;
  4034dc:	e7ec      	b.n	4034b8 <nm_bus_ioctl+0x88>
  4034de:	bf00      	nop
  4034e0:	400e1400 	.word	0x400e1400
  4034e4:	40008000 	.word	0x40008000
  4034e8:	0040db64 	.word	0x0040db64
  4034ec:	0040db74 	.word	0x0040db74
  4034f0:	00407321 	.word	0x00407321
  4034f4:	0040db88 	.word	0x0040db88
  4034f8:	0040e928 	.word	0x0040e928
  4034fc:	00406717 	.word	0x00406717
  403500:	004066e7 	.word	0x004066e7

00403504 <nm_bus_deinit>:
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  403504:	2202      	movs	r2, #2
  403506:	4b0e      	ldr	r3, [pc, #56]	; (403540 <nm_bus_deinit+0x3c>)
  403508:	601a      	str	r2, [r3, #0]
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40350a:	f503 2359 	add.w	r3, r3, #888832	; 0xd9000
  40350e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  403512:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  403516:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  403518:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40351c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  403520:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  403522:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  403526:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40352a:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40352c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  403530:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  403534:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  403536:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_dir(CONF_WINC_SPI_MOSI_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_MISO_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_CLK_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_CS_GPIO, IOPORT_DIR_INPUT);
	return M2M_SUCCESS;
}
  40353a:	2000      	movs	r0, #0
  40353c:	4770      	bx	lr
  40353e:	bf00      	nop
  403540:	40008000 	.word	0x40008000

00403544 <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
  403544:	b13a      	cbz	r2, 403556 <m2m_memcpy+0x12>
  403546:	3901      	subs	r1, #1
  403548:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
  40354a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  40354e:	f800 3b01 	strb.w	r3, [r0], #1
		pDst++;
		pSrc++;
	}while(--sz);
  403552:	4290      	cmp	r0, r2
  403554:	d1f9      	bne.n	40354a <m2m_memcpy+0x6>
  403556:	4770      	bx	lr

00403558 <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
  403558:	b122      	cbz	r2, 403564 <m2m_memset+0xc>
  40355a:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
  40355c:	f800 1b01 	strb.w	r1, [r0], #1
		pBuf++;
	}while(--sz);
  403560:	4290      	cmp	r0, r2
  403562:	d1fb      	bne.n	40355c <m2m_memset+0x4>
  403564:	4770      	bx	lr

00403566 <m2m_strlen>:
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
	while(*pcStr)
  403566:	7803      	ldrb	r3, [r0, #0]
  403568:	b143      	cbz	r3, 40357c <m2m_strlen+0x16>
  40356a:	2300      	movs	r3, #0
	{
		u16StrLen ++;
  40356c:	3301      	adds	r3, #1
  40356e:	b29b      	uxth	r3, r3
	while(*pcStr)
  403570:	f810 2f01 	ldrb.w	r2, [r0, #1]!
  403574:	2a00      	cmp	r2, #0
  403576:	d1f9      	bne.n	40356c <m2m_strlen+0x6>
		pcStr++;
	}
	return u16StrLen;
}
  403578:	4618      	mov	r0, r3
  40357a:	4770      	bx	lr
	uint16	u16StrLen = 0;
  40357c:	2300      	movs	r3, #0
  40357e:	e7fb      	b.n	403578 <m2m_strlen+0x12>

00403580 <isr>:
tpfHifCallBack pfHifCb = NULL;
tpfHifCallBack pfCryptoCb = NULL;

static void isr(void)
{
	gu8Interrupt++;
  403580:	4a02      	ldr	r2, [pc, #8]	; (40358c <isr+0xc>)
  403582:	7813      	ldrb	r3, [r2, #0]
  403584:	3301      	adds	r3, #1
  403586:	b2db      	uxtb	r3, r3
  403588:	7013      	strb	r3, [r2, #0]
  40358a:	4770      	bx	lr
  40358c:	20400a53 	.word	0x20400a53

00403590 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
  403590:	4770      	bx	lr
	...

00403594 <hif_set_rx_done>:
{
  403594:	b500      	push	{lr}
  403596:	b083      	sub	sp, #12
	nm_bsp_interrupt_ctrl(1);
  403598:	2001      	movs	r0, #1
  40359a:	4b0b      	ldr	r3, [pc, #44]	; (4035c8 <hif_set_rx_done+0x34>)
  40359c:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
  40359e:	a901      	add	r1, sp, #4
  4035a0:	f241 0070 	movw	r0, #4208	; 0x1070
  4035a4:	4b09      	ldr	r3, [pc, #36]	; (4035cc <hif_set_rx_done+0x38>)
  4035a6:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  4035a8:	4603      	mov	r3, r0
  4035aa:	b118      	cbz	r0, 4035b4 <hif_set_rx_done+0x20>
}
  4035ac:	4618      	mov	r0, r3
  4035ae:	b003      	add	sp, #12
  4035b0:	f85d fb04 	ldr.w	pc, [sp], #4
	reg |= (1<<1);
  4035b4:	9901      	ldr	r1, [sp, #4]
  4035b6:	f041 0102 	orr.w	r1, r1, #2
  4035ba:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
  4035bc:	f241 0070 	movw	r0, #4208	; 0x1070
  4035c0:	4b03      	ldr	r3, [pc, #12]	; (4035d0 <hif_set_rx_done+0x3c>)
  4035c2:	4798      	blx	r3
  4035c4:	4603      	mov	r3, r0
  4035c6:	e7f1      	b.n	4035ac <hif_set_rx_done+0x18>
  4035c8:	004032ed 	.word	0x004032ed
  4035cc:	00404881 	.word	0x00404881
  4035d0:	0040488d 	.word	0x0040488d

004035d4 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
  4035d4:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	if(gu8ChipSleep == 0)
  4035d6:	4b12      	ldr	r3, [pc, #72]	; (403620 <hif_chip_wake+0x4c>)
  4035d8:	781b      	ldrb	r3, [r3, #0]
  4035da:	b94b      	cbnz	r3, 4035f0 <hif_chip_wake+0x1c>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
  4035dc:	4b11      	ldr	r3, [pc, #68]	; (403624 <hif_chip_wake+0x50>)
  4035de:	781b      	ldrb	r3, [r3, #0]
  4035e0:	b2db      	uxtb	r3, r3
  4035e2:	2b03      	cmp	r3, #3
  4035e4:	d00c      	beq.n	403600 <hif_chip_wake+0x2c>
  4035e6:	4b0f      	ldr	r3, [pc, #60]	; (403624 <hif_chip_wake+0x50>)
  4035e8:	781b      	ldrb	r3, [r3, #0]
  4035ea:	b2db      	uxtb	r3, r3
  4035ec:	2b04      	cmp	r3, #4
  4035ee:	d007      	beq.n	403600 <hif_chip_wake+0x2c>
		}
		else
		{
		}
	}
	gu8ChipSleep++;
  4035f0:	4a0b      	ldr	r2, [pc, #44]	; (403620 <hif_chip_wake+0x4c>)
  4035f2:	7813      	ldrb	r3, [r2, #0]
  4035f4:	3301      	adds	r3, #1
  4035f6:	b2db      	uxtb	r3, r3
  4035f8:	7013      	strb	r3, [r2, #0]
  4035fa:	2300      	movs	r3, #0
ERR1:
	return ret;
}
  4035fc:	4618      	mov	r0, r3
  4035fe:	bd08      	pop	{r3, pc}
			ret = nm_clkless_wake();
  403600:	4b09      	ldr	r3, [pc, #36]	; (403628 <hif_chip_wake+0x54>)
  403602:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  403604:	4603      	mov	r3, r0
  403606:	2800      	cmp	r0, #0
  403608:	d1f8      	bne.n	4035fc <hif_chip_wake+0x28>
			ret = nm_write_reg(WAKE_REG, WAKE_VALUE);
  40360a:	f245 6178 	movw	r1, #22136	; 0x5678
  40360e:	f241 0074 	movw	r0, #4212	; 0x1074
  403612:	4b06      	ldr	r3, [pc, #24]	; (40362c <hif_chip_wake+0x58>)
  403614:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  403616:	4603      	mov	r3, r0
  403618:	2800      	cmp	r0, #0
  40361a:	d0e9      	beq.n	4035f0 <hif_chip_wake+0x1c>
  40361c:	e7ee      	b.n	4035fc <hif_chip_wake+0x28>
  40361e:	bf00      	nop
  403620:	20400a51 	.word	0x20400a51
  403624:	20400a50 	.word	0x20400a50
  403628:	004043f1 	.word	0x004043f1
  40362c:	0040488d 	.word	0x0040488d

00403630 <hif_chip_sleep>:

sint8 hif_chip_sleep(void)
{
	sint8 ret = M2M_SUCCESS;

	if(gu8ChipSleep >= 1)
  403630:	4b1e      	ldr	r3, [pc, #120]	; (4036ac <hif_chip_sleep+0x7c>)
  403632:	781b      	ldrb	r3, [r3, #0]
  403634:	b123      	cbz	r3, 403640 <hif_chip_sleep+0x10>
	{
		gu8ChipSleep--;
  403636:	4a1d      	ldr	r2, [pc, #116]	; (4036ac <hif_chip_sleep+0x7c>)
  403638:	7813      	ldrb	r3, [r2, #0]
  40363a:	3b01      	subs	r3, #1
  40363c:	b2db      	uxtb	r3, r3
  40363e:	7013      	strb	r3, [r2, #0]
	}
	
	if(gu8ChipSleep == 0)
  403640:	4b1a      	ldr	r3, [pc, #104]	; (4036ac <hif_chip_sleep+0x7c>)
  403642:	781b      	ldrb	r3, [r3, #0]
  403644:	2b00      	cmp	r3, #0
  403646:	d12e      	bne.n	4036a6 <hif_chip_sleep+0x76>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
  403648:	4b19      	ldr	r3, [pc, #100]	; (4036b0 <hif_chip_sleep+0x80>)
  40364a:	781b      	ldrb	r3, [r3, #0]
  40364c:	b2db      	uxtb	r3, r3
  40364e:	2b03      	cmp	r3, #3
  403650:	d006      	beq.n	403660 <hif_chip_sleep+0x30>
  403652:	4b17      	ldr	r3, [pc, #92]	; (4036b0 <hif_chip_sleep+0x80>)
  403654:	781b      	ldrb	r3, [r3, #0]
  403656:	b2db      	uxtb	r3, r3
  403658:	2b04      	cmp	r3, #4
  40365a:	d001      	beq.n	403660 <hif_chip_sleep+0x30>
	sint8 ret = M2M_SUCCESS;
  40365c:	2300      	movs	r3, #0
  40365e:	e023      	b.n	4036a8 <hif_chip_sleep+0x78>
{
  403660:	b500      	push	{lr}
  403662:	b083      	sub	sp, #12
		{
			uint32 reg = 0;
  403664:	2300      	movs	r3, #0
  403666:	9301      	str	r3, [sp, #4]
			ret = nm_write_reg(WAKE_REG, SLEEP_VALUE);
  403668:	f244 3121 	movw	r1, #17185	; 0x4321
  40366c:	f241 0074 	movw	r0, #4212	; 0x1074
  403670:	4b10      	ldr	r3, [pc, #64]	; (4036b4 <hif_chip_sleep+0x84>)
  403672:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  403674:	4603      	mov	r3, r0
  403676:	b118      	cbz	r0, 403680 <hif_chip_sleep+0x50>
		{
		}
	}
ERR1:
	return ret;
}
  403678:	4618      	mov	r0, r3
  40367a:	b003      	add	sp, #12
  40367c:	f85d fb04 	ldr.w	pc, [sp], #4
			ret = nm_read_reg_with_ret(0x1, &reg);
  403680:	a901      	add	r1, sp, #4
  403682:	2001      	movs	r0, #1
  403684:	4b0c      	ldr	r3, [pc, #48]	; (4036b8 <hif_chip_sleep+0x88>)
  403686:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  403688:	4603      	mov	r3, r0
  40368a:	2800      	cmp	r0, #0
  40368c:	d1f4      	bne.n	403678 <hif_chip_sleep+0x48>
			if(reg&0x2)
  40368e:	9901      	ldr	r1, [sp, #4]
  403690:	f011 0f02 	tst.w	r1, #2
  403694:	d0f0      	beq.n	403678 <hif_chip_sleep+0x48>
				reg &=~(1 << 1);
  403696:	f021 0102 	bic.w	r1, r1, #2
  40369a:	9101      	str	r1, [sp, #4]
				ret = nm_write_reg(0x1, reg);
  40369c:	2001      	movs	r0, #1
  40369e:	4b05      	ldr	r3, [pc, #20]	; (4036b4 <hif_chip_sleep+0x84>)
  4036a0:	4798      	blx	r3
  4036a2:	4603      	mov	r3, r0
  4036a4:	e7e8      	b.n	403678 <hif_chip_sleep+0x48>
	sint8 ret = M2M_SUCCESS;
  4036a6:	2300      	movs	r3, #0
}
  4036a8:	4618      	mov	r0, r3
  4036aa:	4770      	bx	lr
  4036ac:	20400a51 	.word	0x20400a51
  4036b0:	20400a50 	.word	0x20400a50
  4036b4:	0040488d 	.word	0x0040488d
  4036b8:	00404881 	.word	0x00404881

004036bc <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
  4036bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4036c0:	b087      	sub	sp, #28
  4036c2:	4607      	mov	r7, r0
  4036c4:	4688      	mov	r8, r1
  4036c6:	4692      	mov	sl, r2
  4036c8:	4699      	mov	r9, r3
  4036ca:	9c10      	ldr	r4, [sp, #64]	; 0x40
  4036cc:	f8bd 6044 	ldrh.w	r6, [sp, #68]	; 0x44
  4036d0:	f8bd 5048 	ldrh.w	r5, [sp, #72]	; 0x48
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
  4036d4:	f001 037f 	and.w	r3, r1, #127	; 0x7f
  4036d8:	f88d 3015 	strb.w	r3, [sp, #21]
	strHif.u8Gid		= u8Gid;
  4036dc:	f88d 0014 	strb.w	r0, [sp, #20]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
  4036e0:	2308      	movs	r3, #8
  4036e2:	f8ad 3016 	strh.w	r3, [sp, #22]
	if(pu8DataBuf != NULL)
  4036e6:	2c00      	cmp	r4, #0
  4036e8:	f000 809f 	beq.w	40382a <hif_send+0x16e>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
  4036ec:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  4036f0:	fa16 f383 	uxtah	r3, r6, r3
  4036f4:	442b      	add	r3, r5
  4036f6:	b29b      	uxth	r3, r3
  4036f8:	f8ad 3016 	strh.w	r3, [sp, #22]
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
	ret = hif_chip_wake();
  4036fc:	4b5c      	ldr	r3, [pc, #368]	; (403870 <hif_send+0x1b4>)
  4036fe:	4798      	blx	r3
	if(ret == M2M_SUCCESS)
  403700:	4683      	mov	fp, r0
  403702:	2800      	cmp	r0, #0
  403704:	f040 80a2 	bne.w	40384c <hif_send+0x190>
	{
		volatile uint32 reg, dma_addr = 0;
  403708:	2300      	movs	r3, #0
  40370a:	9303      	str	r3, [sp, #12]
		volatile uint16 cnt = 0;
  40370c:	f8ad 3006 	strh.w	r3, [sp, #6]

		reg = 0UL;
  403710:	9302      	str	r3, [sp, #8]
		reg |= (uint32)u8Gid;
  403712:	9b02      	ldr	r3, [sp, #8]
  403714:	431f      	orrs	r7, r3
  403716:	9702      	str	r7, [sp, #8]
		reg |= ((uint32)u8Opcode<<8);
  403718:	9b02      	ldr	r3, [sp, #8]
  40371a:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
  40371e:	9302      	str	r3, [sp, #8]
		reg |= ((uint32)strHif.u16Length<<16);
  403720:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  403724:	9b02      	ldr	r3, [sp, #8]
  403726:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40372a:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(NMI_STATE_REG,reg);
  40372c:	9902      	ldr	r1, [sp, #8]
  40372e:	f241 008c 	movw	r0, #4236	; 0x108c
  403732:	4b50      	ldr	r3, [pc, #320]	; (403874 <hif_send+0x1b8>)
  403734:	4798      	blx	r3
		if(M2M_SUCCESS != ret) goto ERR1;
  403736:	4683      	mov	fp, r0
  403738:	2800      	cmp	r0, #0
  40373a:	f040 8091 	bne.w	403860 <hif_send+0x1a4>


		reg = 0;
  40373e:	2300      	movs	r3, #0
  403740:	9302      	str	r3, [sp, #8]
		reg |= (1<<1);
  403742:	9b02      	ldr	r3, [sp, #8]
  403744:	f043 0302 	orr.w	r3, r3, #2
  403748:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
  40374a:	9902      	ldr	r1, [sp, #8]
  40374c:	f241 0078 	movw	r0, #4216	; 0x1078
  403750:	4b48      	ldr	r3, [pc, #288]	; (403874 <hif_send+0x1b8>)
  403752:	4798      	blx	r3
		if(M2M_SUCCESS != ret) goto ERR1;
  403754:	4683      	mov	fp, r0
  403756:	2800      	cmp	r0, #0
  403758:	f040 8082 	bne.w	403860 <hif_send+0x1a4>
		dma_addr = 0;
  40375c:	2300      	movs	r3, #0
  40375e:	9303      	str	r3, [sp, #12]

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
  403760:	f8ad 3006 	strh.w	r3, [sp, #6]
  403764:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  403768:	b29b      	uxth	r3, r3
  40376a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  40376e:	d216      	bcs.n	40379e <hif_send+0xe2>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
  403770:	f241 0878 	movw	r8, #4216	; 0x1078
  403774:	4f40      	ldr	r7, [pc, #256]	; (403878 <hif_send+0x1bc>)
  403776:	a902      	add	r1, sp, #8
  403778:	4640      	mov	r0, r8
  40377a:	47b8      	blx	r7
			if(ret != M2M_SUCCESS) break;
  40377c:	b978      	cbnz	r0, 40379e <hif_send+0xe2>
			if (!(reg & 0x2))
  40377e:	9b02      	ldr	r3, [sp, #8]
  403780:	f013 0f02 	tst.w	r3, #2
  403784:	d059      	beq.n	40383a <hif_send+0x17e>
		for(cnt = 0; cnt < 1000; cnt ++)
  403786:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  40378a:	3301      	adds	r3, #1
  40378c:	b29b      	uxth	r3, r3
  40378e:	f8ad 3006 	strh.w	r3, [sp, #6]
  403792:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  403796:	b29b      	uxth	r3, r3
  403798:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  40379c:	d3eb      	bcc.n	403776 <hif_send+0xba>
				break;
			}
		}
		//nm_bsp_interrupt_ctrl(1);

		if (dma_addr != 0)
  40379e:	9b03      	ldr	r3, [sp, #12]
  4037a0:	2b00      	cmp	r3, #0
  4037a2:	d061      	beq.n	403868 <hif_send+0x1ac>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
  4037a4:	9b03      	ldr	r3, [sp, #12]
  4037a6:	9304      	str	r3, [sp, #16]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
  4037a8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  4037ac:	b29b      	uxth	r3, r3
  4037ae:	f8ad 3016 	strh.w	r3, [sp, #22]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
  4037b2:	9804      	ldr	r0, [sp, #16]
  4037b4:	2208      	movs	r2, #8
  4037b6:	a905      	add	r1, sp, #20
  4037b8:	4b30      	ldr	r3, [pc, #192]	; (40387c <hif_send+0x1c0>)
  4037ba:	4798      	blx	r3
		#ifdef CONF_WINC_USE_I2C
			nm_bsp_sleep(1);
		#endif
			if(M2M_SUCCESS != ret) goto ERR1;
  4037bc:	4683      	mov	fp, r0
  4037be:	2800      	cmp	r0, #0
  4037c0:	d14e      	bne.n	403860 <hif_send+0x1a4>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
  4037c2:	9b04      	ldr	r3, [sp, #16]
  4037c4:	3308      	adds	r3, #8
  4037c6:	9304      	str	r3, [sp, #16]
			if(pu8CtrlBuf != NULL)
  4037c8:	f1ba 0f00 	cmp.w	sl, #0
  4037cc:	d00a      	beq.n	4037e4 <hif_send+0x128>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
  4037ce:	9804      	ldr	r0, [sp, #16]
  4037d0:	464a      	mov	r2, r9
  4037d2:	4651      	mov	r1, sl
  4037d4:	4b29      	ldr	r3, [pc, #164]	; (40387c <hif_send+0x1c0>)
  4037d6:	4798      	blx	r3
			#ifdef CONF_WINC_USE_I2C
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  4037d8:	4683      	mov	fp, r0
  4037da:	2800      	cmp	r0, #0
  4037dc:	d140      	bne.n	403860 <hif_send+0x1a4>
				u32CurrAddr += u16CtrlBufSize;
  4037de:	9b04      	ldr	r3, [sp, #16]
  4037e0:	444b      	add	r3, r9
  4037e2:	9304      	str	r3, [sp, #16]
			}
			if(pu8DataBuf != NULL)
  4037e4:	b17c      	cbz	r4, 403806 <hif_send+0x14a>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
  4037e6:	9b04      	ldr	r3, [sp, #16]
  4037e8:	eba5 0509 	sub.w	r5, r5, r9
  4037ec:	441d      	add	r5, r3
  4037ee:	9504      	str	r5, [sp, #16]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
  4037f0:	9804      	ldr	r0, [sp, #16]
  4037f2:	4632      	mov	r2, r6
  4037f4:	4621      	mov	r1, r4
  4037f6:	4b21      	ldr	r3, [pc, #132]	; (40387c <hif_send+0x1c0>)
  4037f8:	4798      	blx	r3
			#ifdef CONF_WINC_USE_I2C	
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  4037fa:	4683      	mov	fp, r0
  4037fc:	2800      	cmp	r0, #0
  4037fe:	d12f      	bne.n	403860 <hif_send+0x1a4>
				u32CurrAddr += u16DataSize;
  403800:	9b04      	ldr	r3, [sp, #16]
  403802:	441e      	add	r6, r3
  403804:	9604      	str	r6, [sp, #16]
			}

			reg = dma_addr << 2;
  403806:	9b03      	ldr	r3, [sp, #12]
  403808:	009b      	lsls	r3, r3, #2
  40380a:	9302      	str	r3, [sp, #8]
			reg |= (1 << 1);
  40380c:	9b02      	ldr	r3, [sp, #8]
  40380e:	f043 0302 	orr.w	r3, r3, #2
  403812:	9302      	str	r3, [sp, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
  403814:	9902      	ldr	r1, [sp, #8]
  403816:	f241 006c 	movw	r0, #4204	; 0x106c
  40381a:	4b16      	ldr	r3, [pc, #88]	; (403874 <hif_send+0x1b8>)
  40381c:	4798      	blx	r3
			if(M2M_SUCCESS != ret) goto ERR1;
  40381e:	4683      	mov	fp, r0
  403820:	b9f0      	cbnz	r0, 403860 <hif_send+0x1a4>
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
		goto ERR1;
	}
	ret = hif_chip_sleep();
  403822:	4b17      	ldr	r3, [pc, #92]	; (403880 <hif_send+0x1c4>)
  403824:	4798      	blx	r3
  403826:	4683      	mov	fp, r0
  403828:	e01a      	b.n	403860 <hif_send+0x1a4>
		strHif.u16Length += u16CtrlBufSize;
  40382a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  40382e:	fa19 f383 	uxtah	r3, r9, r3
  403832:	b29b      	uxth	r3, r3
  403834:	f8ad 3016 	strh.w	r3, [sp, #22]
  403838:	e760      	b.n	4036fc <hif_send+0x40>
				ret = nm_read_reg_with_ret(0x150400,(uint32 *)&dma_addr);
  40383a:	a903      	add	r1, sp, #12
  40383c:	4811      	ldr	r0, [pc, #68]	; (403884 <hif_send+0x1c8>)
  40383e:	4b0e      	ldr	r3, [pc, #56]	; (403878 <hif_send+0x1bc>)
  403840:	4798      	blx	r3
				if(ret != M2M_SUCCESS) {
  403842:	2800      	cmp	r0, #0
  403844:	d0ab      	beq.n	40379e <hif_send+0xe2>
					dma_addr = 0;
  403846:	2300      	movs	r3, #0
  403848:	9303      	str	r3, [sp, #12]
  40384a:	e7a8      	b.n	40379e <hif_send+0xe2>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
  40384c:	f240 129f 	movw	r2, #415	; 0x19f
  403850:	490d      	ldr	r1, [pc, #52]	; (403888 <hif_send+0x1cc>)
  403852:	480e      	ldr	r0, [pc, #56]	; (40388c <hif_send+0x1d0>)
  403854:	4c0e      	ldr	r4, [pc, #56]	; (403890 <hif_send+0x1d4>)
  403856:	47a0      	blx	r4
  403858:	480e      	ldr	r0, [pc, #56]	; (403894 <hif_send+0x1d8>)
  40385a:	47a0      	blx	r4
  40385c:	480e      	ldr	r0, [pc, #56]	; (403898 <hif_send+0x1dc>)
  40385e:	47a0      	blx	r4

ERR1:
	return ret;
}
  403860:	4658      	mov	r0, fp
  403862:	b007      	add	sp, #28
  403864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret =  M2M_ERR_MEM_ALLOC;
  403868:	f06f 0b02 	mvn.w	fp, #2
  40386c:	e7f8      	b.n	403860 <hif_send+0x1a4>
  40386e:	bf00      	nop
  403870:	004035d5 	.word	0x004035d5
  403874:	0040488d 	.word	0x0040488d
  403878:	00404881 	.word	0x00404881
  40387c:	004048f5 	.word	0x004048f5
  403880:	00403631 	.word	0x00403631
  403884:	00150400 	.word	0x00150400
  403888:	0040dba0 	.word	0x0040dba0
  40388c:	0040db74 	.word	0x0040db74
  403890:	00407321 	.word	0x00407321
  403894:	0040ddf4 	.word	0x0040ddf4
  403898:	0040e928 	.word	0x0040e928

0040389c <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
  40389c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4038a0:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
  4038a2:	f8df 92f8 	ldr.w	r9, [pc, #760]	; 403b9c <hif_handle_isr+0x300>
	ret = hif_chip_wake();
  4038a6:	4fa2      	ldr	r7, [pc, #648]	; (403b30 <hif_handle_isr+0x294>)
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
  4038a8:	4ea2      	ldr	r6, [pc, #648]	; (403b34 <hif_handle_isr+0x298>)
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
  4038aa:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 403ba0 <hif_handle_isr+0x304>
	while (gu8Interrupt) {
  4038ae:	e0d5      	b.n	403a5c <hif_handle_isr+0x1c0>
					ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
  4038b0:	2204      	movs	r2, #4
  4038b2:	a904      	add	r1, sp, #16
  4038b4:	9805      	ldr	r0, [sp, #20]
  4038b6:	4ba0      	ldr	r3, [pc, #640]	; (403b38 <hif_handle_isr+0x29c>)
  4038b8:	4798      	blx	r3
					strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
  4038ba:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  4038be:	b29b      	uxth	r3, r3
  4038c0:	f8ad 3012 	strh.w	r3, [sp, #18]
					if(M2M_SUCCESS != ret)
  4038c4:	4604      	mov	r4, r0
  4038c6:	2800      	cmp	r0, #0
  4038c8:	d130      	bne.n	40392c <hif_handle_isr+0x90>
					if(strHif.u16Length != size)
  4038ca:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  4038ce:	b29b      	uxth	r3, r3
  4038d0:	429d      	cmp	r5, r3
  4038d2:	d005      	beq.n	4038e0 <hif_handle_isr+0x44>
						if((size - strHif.u16Length) > 4)
  4038d4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  4038d8:	b29b      	uxth	r3, r3
  4038da:	1aeb      	subs	r3, r5, r3
  4038dc:	2b04      	cmp	r3, #4
  4038de:	dc33      	bgt.n	403948 <hif_handle_isr+0xac>
					if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
  4038e0:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4038e4:	b2db      	uxtb	r3, r3
  4038e6:	2b01      	cmp	r3, #1
  4038e8:	d047      	beq.n	40397a <hif_handle_isr+0xde>
					else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
  4038ea:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4038ee:	b2db      	uxtb	r3, r3
  4038f0:	2b02      	cmp	r3, #2
  4038f2:	d05f      	beq.n	4039b4 <hif_handle_isr+0x118>
					else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
  4038f4:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4038f8:	b2db      	uxtb	r3, r3
  4038fa:	2b04      	cmp	r3, #4
  4038fc:	d068      	beq.n	4039d0 <hif_handle_isr+0x134>
					else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
  4038fe:	f89d 3010 	ldrb.w	r3, [sp, #16]
  403902:	b2db      	uxtb	r3, r3
  403904:	2b06      	cmp	r3, #6
  403906:	d071      	beq.n	4039ec <hif_handle_isr+0x150>
					else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
  403908:	f89d 3010 	ldrb.w	r3, [sp, #16]
  40390c:	b2db      	uxtb	r3, r3
  40390e:	2b07      	cmp	r3, #7
  403910:	d07a      	beq.n	403a08 <hif_handle_isr+0x16c>
						M2M_ERR("(hif) invalid group ID\n");
  403912:	f240 2202 	movw	r2, #514	; 0x202
  403916:	4641      	mov	r1, r8
  403918:	4630      	mov	r0, r6
  40391a:	4c88      	ldr	r4, [pc, #544]	; (403b3c <hif_handle_isr+0x2a0>)
  40391c:	47a0      	blx	r4
  40391e:	4888      	ldr	r0, [pc, #544]	; (403b40 <hif_handle_isr+0x2a4>)
  403920:	47a0      	blx	r4
  403922:	4888      	ldr	r0, [pc, #544]	; (403b44 <hif_handle_isr+0x2a8>)
  403924:	47a0      	blx	r4
						ret = M2M_ERR_BUS_FAIL;
  403926:	f06f 0405 	mvn.w	r4, #5
  40392a:	e096      	b.n	403a5a <hif_handle_isr+0x1be>
						M2M_ERR("(hif) address bus fail\n");
  40392c:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
  403930:	4641      	mov	r1, r8
  403932:	4630      	mov	r0, r6
  403934:	4d81      	ldr	r5, [pc, #516]	; (403b3c <hif_handle_isr+0x2a0>)
  403936:	47a8      	blx	r5
  403938:	4883      	ldr	r0, [pc, #524]	; (403b48 <hif_handle_isr+0x2ac>)
  40393a:	47a8      	blx	r5
  40393c:	4881      	ldr	r0, [pc, #516]	; (403b44 <hif_handle_isr+0x2a8>)
  40393e:	47a8      	blx	r5
						nm_bsp_interrupt_ctrl(1);
  403940:	2001      	movs	r0, #1
  403942:	4b82      	ldr	r3, [pc, #520]	; (403b4c <hif_handle_isr+0x2b0>)
  403944:	4798      	blx	r3
  403946:	e088      	b.n	403a5a <hif_handle_isr+0x1be>
							M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
  403948:	f240 12df 	movw	r2, #479	; 0x1df
  40394c:	4641      	mov	r1, r8
  40394e:	4630      	mov	r0, r6
  403950:	4c7a      	ldr	r4, [pc, #488]	; (403b3c <hif_handle_isr+0x2a0>)
  403952:	47a0      	blx	r4
  403954:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  403958:	f89d 3010 	ldrb.w	r3, [sp, #16]
  40395c:	f89d 1011 	ldrb.w	r1, [sp, #17]
  403960:	9100      	str	r1, [sp, #0]
  403962:	b292      	uxth	r2, r2
  403964:	4629      	mov	r1, r5
  403966:	487a      	ldr	r0, [pc, #488]	; (403b50 <hif_handle_isr+0x2b4>)
  403968:	47a0      	blx	r4
  40396a:	4876      	ldr	r0, [pc, #472]	; (403b44 <hif_handle_isr+0x2a8>)
  40396c:	47a0      	blx	r4
							nm_bsp_interrupt_ctrl(1);
  40396e:	2001      	movs	r0, #1
  403970:	4b76      	ldr	r3, [pc, #472]	; (403b4c <hif_handle_isr+0x2b0>)
  403972:	4798      	blx	r3
							ret = M2M_ERR_BUS_FAIL;
  403974:	f06f 0405 	mvn.w	r4, #5
  403978:	e06f      	b.n	403a5a <hif_handle_isr+0x1be>
						if(pfWifiCb)
  40397a:	4b76      	ldr	r3, [pc, #472]	; (403b54 <hif_handle_isr+0x2b8>)
  40397c:	681b      	ldr	r3, [r3, #0]
  40397e:	b143      	cbz	r3, 403992 <hif_handle_isr+0xf6>
							pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  403980:	f89d 0011 	ldrb.w	r0, [sp, #17]
  403984:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  403988:	3908      	subs	r1, #8
  40398a:	9a05      	ldr	r2, [sp, #20]
  40398c:	3208      	adds	r2, #8
  40398e:	b289      	uxth	r1, r1
  403990:	4798      	blx	r3
					if(!gu8HifSizeDone)
  403992:	4b71      	ldr	r3, [pc, #452]	; (403b58 <hif_handle_isr+0x2bc>)
  403994:	781b      	ldrb	r3, [r3, #0]
  403996:	2b00      	cmp	r3, #0
  403998:	d15c      	bne.n	403a54 <hif_handle_isr+0x1b8>
						M2M_ERR("(hif) host app didn't set RX Done\n");
  40399a:	f240 2209 	movw	r2, #521	; 0x209
  40399e:	4641      	mov	r1, r8
  4039a0:	4630      	mov	r0, r6
  4039a2:	4c66      	ldr	r4, [pc, #408]	; (403b3c <hif_handle_isr+0x2a0>)
  4039a4:	47a0      	blx	r4
  4039a6:	486d      	ldr	r0, [pc, #436]	; (403b5c <hif_handle_isr+0x2c0>)
  4039a8:	47a0      	blx	r4
  4039aa:	4866      	ldr	r0, [pc, #408]	; (403b44 <hif_handle_isr+0x2a8>)
  4039ac:	47a0      	blx	r4
						ret = hif_set_rx_done();
  4039ae:	4b6c      	ldr	r3, [pc, #432]	; (403b60 <hif_handle_isr+0x2c4>)
  4039b0:	4798      	blx	r3
  4039b2:	e04f      	b.n	403a54 <hif_handle_isr+0x1b8>
						if(pfIpCb)
  4039b4:	4b6b      	ldr	r3, [pc, #428]	; (403b64 <hif_handle_isr+0x2c8>)
  4039b6:	681b      	ldr	r3, [r3, #0]
  4039b8:	2b00      	cmp	r3, #0
  4039ba:	d0ea      	beq.n	403992 <hif_handle_isr+0xf6>
							pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  4039bc:	f89d 0011 	ldrb.w	r0, [sp, #17]
  4039c0:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  4039c4:	3908      	subs	r1, #8
  4039c6:	9a05      	ldr	r2, [sp, #20]
  4039c8:	3208      	adds	r2, #8
  4039ca:	b289      	uxth	r1, r1
  4039cc:	4798      	blx	r3
  4039ce:	e7e0      	b.n	403992 <hif_handle_isr+0xf6>
						if(pfOtaCb)
  4039d0:	4b65      	ldr	r3, [pc, #404]	; (403b68 <hif_handle_isr+0x2cc>)
  4039d2:	681b      	ldr	r3, [r3, #0]
  4039d4:	2b00      	cmp	r3, #0
  4039d6:	d0dc      	beq.n	403992 <hif_handle_isr+0xf6>
							pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  4039d8:	f89d 0011 	ldrb.w	r0, [sp, #17]
  4039dc:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  4039e0:	3908      	subs	r1, #8
  4039e2:	9a05      	ldr	r2, [sp, #20]
  4039e4:	3208      	adds	r2, #8
  4039e6:	b289      	uxth	r1, r1
  4039e8:	4798      	blx	r3
  4039ea:	e7d2      	b.n	403992 <hif_handle_isr+0xf6>
						if(pfCryptoCb)
  4039ec:	4b5f      	ldr	r3, [pc, #380]	; (403b6c <hif_handle_isr+0x2d0>)
  4039ee:	681b      	ldr	r3, [r3, #0]
  4039f0:	2b00      	cmp	r3, #0
  4039f2:	d0ce      	beq.n	403992 <hif_handle_isr+0xf6>
							pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  4039f4:	f89d 0011 	ldrb.w	r0, [sp, #17]
  4039f8:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  4039fc:	3908      	subs	r1, #8
  4039fe:	9a05      	ldr	r2, [sp, #20]
  403a00:	3208      	adds	r2, #8
  403a02:	b289      	uxth	r1, r1
  403a04:	4798      	blx	r3
  403a06:	e7c4      	b.n	403992 <hif_handle_isr+0xf6>
						if(pfSigmaCb)
  403a08:	4b59      	ldr	r3, [pc, #356]	; (403b70 <hif_handle_isr+0x2d4>)
  403a0a:	681b      	ldr	r3, [r3, #0]
  403a0c:	2b00      	cmp	r3, #0
  403a0e:	d0c0      	beq.n	403992 <hif_handle_isr+0xf6>
							pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  403a10:	f89d 0011 	ldrb.w	r0, [sp, #17]
  403a14:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  403a18:	3908      	subs	r1, #8
  403a1a:	9a05      	ldr	r2, [sp, #20]
  403a1c:	3208      	adds	r2, #8
  403a1e:	b289      	uxth	r1, r1
  403a20:	4798      	blx	r3
  403a22:	e7b6      	b.n	403992 <hif_handle_isr+0xf6>
					M2M_ERR("(hif) Wrong Size\n");
  403a24:	f240 2211 	movw	r2, #529	; 0x211
  403a28:	4641      	mov	r1, r8
  403a2a:	4630      	mov	r0, r6
  403a2c:	4c43      	ldr	r4, [pc, #268]	; (403b3c <hif_handle_isr+0x2a0>)
  403a2e:	47a0      	blx	r4
  403a30:	4850      	ldr	r0, [pc, #320]	; (403b74 <hif_handle_isr+0x2d8>)
  403a32:	47a0      	blx	r4
  403a34:	4843      	ldr	r0, [pc, #268]	; (403b44 <hif_handle_isr+0x2a8>)
  403a36:	47a0      	blx	r4
					ret = M2M_ERR_RCV;
  403a38:	f06f 0401 	mvn.w	r4, #1
  403a3c:	e02f      	b.n	403a9e <hif_handle_isr+0x202>
				M2M_ERR("(hif) False interrupt %lx",reg);
  403a3e:	f44f 7206 	mov.w	r2, #536	; 0x218
  403a42:	4641      	mov	r1, r8
  403a44:	4630      	mov	r0, r6
  403a46:	4c3d      	ldr	r4, [pc, #244]	; (403b3c <hif_handle_isr+0x2a0>)
  403a48:	47a0      	blx	r4
  403a4a:	9903      	ldr	r1, [sp, #12]
  403a4c:	484a      	ldr	r0, [pc, #296]	; (403b78 <hif_handle_isr+0x2dc>)
  403a4e:	47a0      	blx	r4
  403a50:	483c      	ldr	r0, [pc, #240]	; (403b44 <hif_handle_isr+0x2a8>)
  403a52:	47a0      	blx	r4
	ret = hif_chip_sleep();
  403a54:	4b49      	ldr	r3, [pc, #292]	; (403b7c <hif_handle_isr+0x2e0>)
  403a56:	4798      	blx	r3
  403a58:	4604      	mov	r4, r0
			if(ret == M2M_SUCCESS) {
  403a5a:	bb04      	cbnz	r4, 403a9e <hif_handle_isr+0x202>
	while (gu8Interrupt) {
  403a5c:	f899 3000 	ldrb.w	r3, [r9]
  403a60:	2b00      	cmp	r3, #0
  403a62:	f000 809f 	beq.w	403ba4 <hif_handle_isr+0x308>
		gu8Interrupt--;
  403a66:	f899 3000 	ldrb.w	r3, [r9]
  403a6a:	3b01      	subs	r3, #1
  403a6c:	b2db      	uxtb	r3, r3
  403a6e:	f889 3000 	strb.w	r3, [r9]
  403a72:	e01f      	b.n	403ab4 <hif_handle_isr+0x218>
			M2M_ERR("(hif) Fail to Read interrupt reg\n");
  403a74:	f240 221e 	movw	r2, #542	; 0x21e
  403a78:	4641      	mov	r1, r8
  403a7a:	4630      	mov	r0, r6
  403a7c:	4d2f      	ldr	r5, [pc, #188]	; (403b3c <hif_handle_isr+0x2a0>)
  403a7e:	47a8      	blx	r5
  403a80:	483f      	ldr	r0, [pc, #252]	; (403b80 <hif_handle_isr+0x2e4>)
  403a82:	47a8      	blx	r5
  403a84:	482f      	ldr	r0, [pc, #188]	; (403b44 <hif_handle_isr+0x2a8>)
  403a86:	47a8      	blx	r5
  403a88:	e009      	b.n	403a9e <hif_handle_isr+0x202>
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
  403a8a:	f44f 7209 	mov.w	r2, #548	; 0x224
  403a8e:	4641      	mov	r1, r8
  403a90:	4630      	mov	r0, r6
  403a92:	4d2a      	ldr	r5, [pc, #168]	; (403b3c <hif_handle_isr+0x2a0>)
  403a94:	47a8      	blx	r5
  403a96:	483b      	ldr	r0, [pc, #236]	; (403b84 <hif_handle_isr+0x2e8>)
  403a98:	47a8      	blx	r5
  403a9a:	482a      	ldr	r0, [pc, #168]	; (403b44 <hif_handle_isr+0x2a8>)
  403a9c:	47a8      	blx	r5
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
  403a9e:	f240 2243 	movw	r2, #579	; 0x243
  403aa2:	4939      	ldr	r1, [pc, #228]	; (403b88 <hif_handle_isr+0x2ec>)
  403aa4:	4630      	mov	r0, r6
  403aa6:	4d25      	ldr	r5, [pc, #148]	; (403b3c <hif_handle_isr+0x2a0>)
  403aa8:	47a8      	blx	r5
  403aaa:	4621      	mov	r1, r4
  403aac:	4837      	ldr	r0, [pc, #220]	; (403b8c <hif_handle_isr+0x2f0>)
  403aae:	47a8      	blx	r5
  403ab0:	4824      	ldr	r0, [pc, #144]	; (403b44 <hif_handle_isr+0x2a8>)
  403ab2:	47a8      	blx	r5
	ret = hif_chip_wake();
  403ab4:	47b8      	blx	r7
	if(ret == M2M_SUCCESS)
  403ab6:	4604      	mov	r4, r0
  403ab8:	2800      	cmp	r0, #0
  403aba:	d1e6      	bne.n	403a8a <hif_handle_isr+0x1ee>
		ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
  403abc:	a903      	add	r1, sp, #12
  403abe:	f241 0070 	movw	r0, #4208	; 0x1070
  403ac2:	4b33      	ldr	r3, [pc, #204]	; (403b90 <hif_handle_isr+0x2f4>)
  403ac4:	4798      	blx	r3
		if(M2M_SUCCESS == ret)
  403ac6:	4604      	mov	r4, r0
  403ac8:	2800      	cmp	r0, #0
  403aca:	d1d3      	bne.n	403a74 <hif_handle_isr+0x1d8>
			if(reg & 0x1)	/* New interrupt has been received */
  403acc:	9b03      	ldr	r3, [sp, #12]
  403ace:	f013 0f01 	tst.w	r3, #1
  403ad2:	d0b4      	beq.n	403a3e <hif_handle_isr+0x1a2>
				nm_bsp_interrupt_ctrl(0);
  403ad4:	4b1d      	ldr	r3, [pc, #116]	; (403b4c <hif_handle_isr+0x2b0>)
  403ad6:	4798      	blx	r3
				reg &= ~(1<<0);
  403ad8:	9903      	ldr	r1, [sp, #12]
  403ada:	f021 0101 	bic.w	r1, r1, #1
  403ade:	9103      	str	r1, [sp, #12]
				ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
  403ae0:	f241 0070 	movw	r0, #4208	; 0x1070
  403ae4:	4b2b      	ldr	r3, [pc, #172]	; (403b94 <hif_handle_isr+0x2f8>)
  403ae6:	4798      	blx	r3
				if(ret != M2M_SUCCESS)goto ERR1;
  403ae8:	4604      	mov	r4, r0
  403aea:	2800      	cmp	r0, #0
  403aec:	d1d7      	bne.n	403a9e <hif_handle_isr+0x202>
				gu8HifSizeDone = 0;
  403aee:	2200      	movs	r2, #0
  403af0:	4b19      	ldr	r3, [pc, #100]	; (403b58 <hif_handle_isr+0x2bc>)
  403af2:	701a      	strb	r2, [r3, #0]
				size = (uint16)((reg >> 2) & 0xfff);
  403af4:	9d03      	ldr	r5, [sp, #12]
  403af6:	f3c5 058b 	ubfx	r5, r5, #2, #12
				if (size > 0) {
  403afa:	2d00      	cmp	r5, #0
  403afc:	d092      	beq.n	403a24 <hif_handle_isr+0x188>
					uint32 address = 0;
  403afe:	a906      	add	r1, sp, #24
  403b00:	f841 2d04 	str.w	r2, [r1, #-4]!
					ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
  403b04:	f241 0084 	movw	r0, #4228	; 0x1084
  403b08:	4b21      	ldr	r3, [pc, #132]	; (403b90 <hif_handle_isr+0x2f4>)
  403b0a:	4798      	blx	r3
					if(M2M_SUCCESS != ret)
  403b0c:	4604      	mov	r4, r0
  403b0e:	2800      	cmp	r0, #0
  403b10:	f43f aece 	beq.w	4038b0 <hif_handle_isr+0x14>
						M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
  403b14:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
  403b18:	4641      	mov	r1, r8
  403b1a:	4630      	mov	r0, r6
  403b1c:	4d07      	ldr	r5, [pc, #28]	; (403b3c <hif_handle_isr+0x2a0>)
  403b1e:	47a8      	blx	r5
  403b20:	481d      	ldr	r0, [pc, #116]	; (403b98 <hif_handle_isr+0x2fc>)
  403b22:	47a8      	blx	r5
  403b24:	4807      	ldr	r0, [pc, #28]	; (403b44 <hif_handle_isr+0x2a8>)
  403b26:	47a8      	blx	r5
						nm_bsp_interrupt_ctrl(1);
  403b28:	2001      	movs	r0, #1
  403b2a:	4b08      	ldr	r3, [pc, #32]	; (403b4c <hif_handle_isr+0x2b0>)
  403b2c:	4798      	blx	r3
  403b2e:	e794      	b.n	403a5a <hif_handle_isr+0x1be>
  403b30:	004035d5 	.word	0x004035d5
  403b34:	0040db74 	.word	0x0040db74
  403b38:	00404899 	.word	0x00404899
  403b3c:	00407321 	.word	0x00407321
  403b40:	0040dc60 	.word	0x0040dc60
  403b44:	0040e928 	.word	0x0040e928
  403b48:	0040dc08 	.word	0x0040dc08
  403b4c:	004032ed 	.word	0x004032ed
  403b50:	0040dc20 	.word	0x0040dc20
  403b54:	20400a68 	.word	0x20400a68
  403b58:	20400a52 	.word	0x20400a52
  403b5c:	0040dc78 	.word	0x0040dc78
  403b60:	00403595 	.word	0x00403595
  403b64:	20400a5c 	.word	0x20400a5c
  403b68:	20400a60 	.word	0x20400a60
  403b6c:	20400a54 	.word	0x20400a54
  403b70:	20400a64 	.word	0x20400a64
  403b74:	0040dc9c 	.word	0x0040dc9c
  403b78:	0040dcb0 	.word	0x0040dcb0
  403b7c:	00403631 	.word	0x00403631
  403b80:	0040dccc 	.word	0x0040dccc
  403b84:	0040dcf0 	.word	0x0040dcf0
  403b88:	0040dbb4 	.word	0x0040dbb4
  403b8c:	0040dd10 	.word	0x0040dd10
  403b90:	00404881 	.word	0x00404881
  403b94:	0040488d 	.word	0x0040488d
  403b98:	0040dbe0 	.word	0x0040dbe0
  403b9c:	20400a53 	.word	0x20400a53
  403ba0:	0040dbac 	.word	0x0040dbac
			}
		}
	}

	return ret;
}
  403ba4:	2000      	movs	r0, #0
  403ba6:	b007      	add	sp, #28
  403ba8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00403bac <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
  403bac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  403bb0:	b083      	sub	sp, #12
  403bb2:	461c      	mov	r4, r3
	uint32 address, reg;
	uint16 size;
	sint8 ret = M2M_SUCCESS;

	if(u32Addr == 0 ||pu8Buf == NULL || u16Sz == 0)
  403bb4:	2a00      	cmp	r2, #0
  403bb6:	bf18      	it	ne
  403bb8:	2900      	cmpne	r1, #0
  403bba:	d003      	beq.n	403bc4 <hif_receive+0x18>
  403bbc:	4605      	mov	r5, r0
  403bbe:	460f      	mov	r7, r1
  403bc0:	4616      	mov	r6, r2
  403bc2:	b9b8      	cbnz	r0, 403bf4 <hif_receive+0x48>
	{
		if(isDone)
  403bc4:	b14c      	cbz	r4, 403bda <hif_receive+0x2e>
		{
			gu8HifSizeDone = 1;
  403bc6:	2201      	movs	r2, #1
  403bc8:	4b32      	ldr	r3, [pc, #200]	; (403c94 <hif_receive+0xe8>)
  403bca:	701a      	strb	r2, [r3, #0]
			
			/* set RX done */
			ret = hif_set_rx_done();
  403bcc:	4b32      	ldr	r3, [pc, #200]	; (403c98 <hif_receive+0xec>)
  403bce:	4798      	blx	r3
  403bd0:	4603      	mov	r3, r0



ERR1:
	return ret;
}
  403bd2:	4618      	mov	r0, r3
  403bd4:	b003      	add	sp, #12
  403bd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
  403bda:	f240 2269 	movw	r2, #617	; 0x269
  403bde:	492f      	ldr	r1, [pc, #188]	; (403c9c <hif_receive+0xf0>)
  403be0:	482f      	ldr	r0, [pc, #188]	; (403ca0 <hif_receive+0xf4>)
  403be2:	4c30      	ldr	r4, [pc, #192]	; (403ca4 <hif_receive+0xf8>)
  403be4:	47a0      	blx	r4
  403be6:	4830      	ldr	r0, [pc, #192]	; (403ca8 <hif_receive+0xfc>)
  403be8:	47a0      	blx	r4
  403bea:	4830      	ldr	r0, [pc, #192]	; (403cac <hif_receive+0x100>)
  403bec:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  403bee:	f06f 030b 	mvn.w	r3, #11
  403bf2:	e7ee      	b.n	403bd2 <hif_receive+0x26>
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
  403bf4:	4669      	mov	r1, sp
  403bf6:	f241 0070 	movw	r0, #4208	; 0x1070
  403bfa:	4b2d      	ldr	r3, [pc, #180]	; (403cb0 <hif_receive+0x104>)
  403bfc:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  403bfe:	4603      	mov	r3, r0
  403c00:	2800      	cmp	r0, #0
  403c02:	d1e6      	bne.n	403bd2 <hif_receive+0x26>
	size = (uint16)((reg >> 2) & 0xfff);
  403c04:	f8dd 8000 	ldr.w	r8, [sp]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
  403c08:	a901      	add	r1, sp, #4
  403c0a:	f241 0084 	movw	r0, #4228	; 0x1084
  403c0e:	4b28      	ldr	r3, [pc, #160]	; (403cb0 <hif_receive+0x104>)
  403c10:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  403c12:	4603      	mov	r3, r0
  403c14:	2800      	cmp	r0, #0
  403c16:	d1dc      	bne.n	403bd2 <hif_receive+0x26>
	size = (uint16)((reg >> 2) & 0xfff);
  403c18:	f3c8 088b 	ubfx	r8, r8, #2, #12
	if(u16Sz > size)
  403c1c:	4546      	cmp	r6, r8
  403c1e:	d81c      	bhi.n	403c5a <hif_receive+0xae>
	if((u32Addr < address)||((u32Addr + u16Sz)>(address+size)))
  403c20:	9b01      	ldr	r3, [sp, #4]
  403c22:	429d      	cmp	r5, r3
  403c24:	d328      	bcc.n	403c78 <hif_receive+0xcc>
  403c26:	eb05 0906 	add.w	r9, r5, r6
  403c2a:	4443      	add	r3, r8
  403c2c:	4599      	cmp	r9, r3
  403c2e:	d823      	bhi.n	403c78 <hif_receive+0xcc>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
  403c30:	4632      	mov	r2, r6
  403c32:	4639      	mov	r1, r7
  403c34:	4628      	mov	r0, r5
  403c36:	4b1f      	ldr	r3, [pc, #124]	; (403cb4 <hif_receive+0x108>)
  403c38:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  403c3a:	4603      	mov	r3, r0
  403c3c:	2800      	cmp	r0, #0
  403c3e:	d1c8      	bne.n	403bd2 <hif_receive+0x26>
	if((((address + size) - (u32Addr + u16Sz)) <= 0) || isDone)
  403c40:	9a01      	ldr	r2, [sp, #4]
  403c42:	4490      	add	r8, r2
  403c44:	45c8      	cmp	r8, r9
  403c46:	d001      	beq.n	403c4c <hif_receive+0xa0>
  403c48:	2c00      	cmp	r4, #0
  403c4a:	d0c2      	beq.n	403bd2 <hif_receive+0x26>
		gu8HifSizeDone = 1;
  403c4c:	2201      	movs	r2, #1
  403c4e:	4b11      	ldr	r3, [pc, #68]	; (403c94 <hif_receive+0xe8>)
  403c50:	701a      	strb	r2, [r3, #0]
		ret = hif_set_rx_done();
  403c52:	4b11      	ldr	r3, [pc, #68]	; (403c98 <hif_receive+0xec>)
  403c54:	4798      	blx	r3
  403c56:	4603      	mov	r3, r0
  403c58:	e7bb      	b.n	403bd2 <hif_receive+0x26>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
  403c5a:	f240 227a 	movw	r2, #634	; 0x27a
  403c5e:	490f      	ldr	r1, [pc, #60]	; (403c9c <hif_receive+0xf0>)
  403c60:	480f      	ldr	r0, [pc, #60]	; (403ca0 <hif_receive+0xf4>)
  403c62:	4c10      	ldr	r4, [pc, #64]	; (403ca4 <hif_receive+0xf8>)
  403c64:	47a0      	blx	r4
  403c66:	4642      	mov	r2, r8
  403c68:	4631      	mov	r1, r6
  403c6a:	4813      	ldr	r0, [pc, #76]	; (403cb8 <hif_receive+0x10c>)
  403c6c:	47a0      	blx	r4
  403c6e:	480f      	ldr	r0, [pc, #60]	; (403cac <hif_receive+0x100>)
  403c70:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  403c72:	f06f 030b 	mvn.w	r3, #11
		goto ERR1;
  403c76:	e7ac      	b.n	403bd2 <hif_receive+0x26>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
  403c78:	f44f 7220 	mov.w	r2, #640	; 0x280
  403c7c:	4907      	ldr	r1, [pc, #28]	; (403c9c <hif_receive+0xf0>)
  403c7e:	4808      	ldr	r0, [pc, #32]	; (403ca0 <hif_receive+0xf4>)
  403c80:	4c08      	ldr	r4, [pc, #32]	; (403ca4 <hif_receive+0xf8>)
  403c82:	47a0      	blx	r4
  403c84:	480d      	ldr	r0, [pc, #52]	; (403cbc <hif_receive+0x110>)
  403c86:	47a0      	blx	r4
  403c88:	4808      	ldr	r0, [pc, #32]	; (403cac <hif_receive+0x100>)
  403c8a:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  403c8c:	f06f 030b 	mvn.w	r3, #11
		goto ERR1;
  403c90:	e79f      	b.n	403bd2 <hif_receive+0x26>
  403c92:	bf00      	nop
  403c94:	20400a52 	.word	0x20400a52
  403c98:	00403595 	.word	0x00403595
  403c9c:	0040dbc4 	.word	0x0040dbc4
  403ca0:	0040db74 	.word	0x0040db74
  403ca4:	00407321 	.word	0x00407321
  403ca8:	0040dd40 	.word	0x0040dd40
  403cac:	0040e928 	.word	0x0040e928
  403cb0:	00404881 	.word	0x00404881
  403cb4:	00404899 	.word	0x00404899
  403cb8:	0040dd60 	.word	0x0040dd60
  403cbc:	0040dda4 	.word	0x0040dda4

00403cc0 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
  403cc0:	b538      	push	{r3, r4, r5, lr}
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
  403cc2:	1e43      	subs	r3, r0, #1
  403cc4:	2b06      	cmp	r3, #6
  403cc6:	d81d      	bhi.n	403d04 <hif_register_cb+0x44>
  403cc8:	e8df f003 	tbb	[pc, r3]
  403ccc:	0c100408 	.word	0x0c100408
  403cd0:	141c      	.short	0x141c
  403cd2:	18          	.byte	0x18
  403cd3:	00          	.byte	0x00
	{
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
  403cd4:	4b13      	ldr	r3, [pc, #76]	; (403d24 <hif_register_cb+0x64>)
  403cd6:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  403cd8:	2000      	movs	r0, #0
			break;
  403cda:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
  403cdc:	4b12      	ldr	r3, [pc, #72]	; (403d28 <hif_register_cb+0x68>)
  403cde:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  403ce0:	2000      	movs	r0, #0
			break;
  403ce2:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
  403ce4:	4b11      	ldr	r3, [pc, #68]	; (403d2c <hif_register_cb+0x6c>)
  403ce6:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  403ce8:	2000      	movs	r0, #0
			break;
  403cea:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
  403cec:	4b10      	ldr	r3, [pc, #64]	; (403d30 <hif_register_cb+0x70>)
  403cee:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  403cf0:	2000      	movs	r0, #0
			break;
  403cf2:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
  403cf4:	4b0f      	ldr	r3, [pc, #60]	; (403d34 <hif_register_cb+0x74>)
  403cf6:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  403cf8:	2000      	movs	r0, #0
			break;
  403cfa:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_SIGMA:
			pfSigmaCb = fn;
  403cfc:	4b0e      	ldr	r3, [pc, #56]	; (403d38 <hif_register_cb+0x78>)
  403cfe:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  403d00:	2000      	movs	r0, #0
			break;
  403d02:	bd38      	pop	{r3, r4, r5, pc}
  403d04:	4604      	mov	r4, r0
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
  403d06:	f240 22b9 	movw	r2, #697	; 0x2b9
  403d0a:	490c      	ldr	r1, [pc, #48]	; (403d3c <hif_register_cb+0x7c>)
  403d0c:	480c      	ldr	r0, [pc, #48]	; (403d40 <hif_register_cb+0x80>)
  403d0e:	4d0d      	ldr	r5, [pc, #52]	; (403d44 <hif_register_cb+0x84>)
  403d10:	47a8      	blx	r5
  403d12:	4621      	mov	r1, r4
  403d14:	480c      	ldr	r0, [pc, #48]	; (403d48 <hif_register_cb+0x88>)
  403d16:	47a8      	blx	r5
  403d18:	480c      	ldr	r0, [pc, #48]	; (403d4c <hif_register_cb+0x8c>)
  403d1a:	47a8      	blx	r5
			ret = M2M_ERR_FAIL;
  403d1c:	f06f 000b 	mvn.w	r0, #11
			break;
	}
	return ret;
}
  403d20:	bd38      	pop	{r3, r4, r5, pc}
  403d22:	bf00      	nop
  403d24:	20400a5c 	.word	0x20400a5c
  403d28:	20400a68 	.word	0x20400a68
  403d2c:	20400a60 	.word	0x20400a60
  403d30:	20400a58 	.word	0x20400a58
  403d34:	20400a54 	.word	0x20400a54
  403d38:	20400a64 	.word	0x20400a64
  403d3c:	0040dbd0 	.word	0x0040dbd0
  403d40:	0040db74 	.word	0x0040db74
  403d44:	00407321 	.word	0x00407321
  403d48:	0040dde8 	.word	0x0040dde8
  403d4c:	0040e928 	.word	0x0040e928

00403d50 <hif_init>:
{
  403d50:	b510      	push	{r4, lr}
	pfWifiCb = NULL;
  403d52:	2400      	movs	r4, #0
  403d54:	4b09      	ldr	r3, [pc, #36]	; (403d7c <hif_init+0x2c>)
  403d56:	601c      	str	r4, [r3, #0]
	pfIpCb = NULL;
  403d58:	4b09      	ldr	r3, [pc, #36]	; (403d80 <hif_init+0x30>)
  403d5a:	601c      	str	r4, [r3, #0]
	gu8ChipSleep = 0;
  403d5c:	4b09      	ldr	r3, [pc, #36]	; (403d84 <hif_init+0x34>)
  403d5e:	701c      	strb	r4, [r3, #0]
	gu8ChipMode = M2M_NO_PS;
  403d60:	4b09      	ldr	r3, [pc, #36]	; (403d88 <hif_init+0x38>)
  403d62:	701c      	strb	r4, [r3, #0]
	gu8Interrupt = 0;
  403d64:	4b09      	ldr	r3, [pc, #36]	; (403d8c <hif_init+0x3c>)
  403d66:	701c      	strb	r4, [r3, #0]
	nm_bsp_register_isr(isr);
  403d68:	4809      	ldr	r0, [pc, #36]	; (403d90 <hif_init+0x40>)
  403d6a:	4b0a      	ldr	r3, [pc, #40]	; (403d94 <hif_init+0x44>)
  403d6c:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
  403d6e:	490a      	ldr	r1, [pc, #40]	; (403d98 <hif_init+0x48>)
  403d70:	2003      	movs	r0, #3
  403d72:	4b0a      	ldr	r3, [pc, #40]	; (403d9c <hif_init+0x4c>)
  403d74:	4798      	blx	r3
}
  403d76:	4620      	mov	r0, r4
  403d78:	bd10      	pop	{r4, pc}
  403d7a:	bf00      	nop
  403d7c:	20400a68 	.word	0x20400a68
  403d80:	20400a5c 	.word	0x20400a5c
  403d84:	20400a51 	.word	0x20400a51
  403d88:	20400a50 	.word	0x20400a50
  403d8c:	20400a53 	.word	0x20400a53
  403d90:	00403581 	.word	0x00403581
  403d94:	0040326d 	.word	0x0040326d
  403d98:	00403591 	.word	0x00403591
  403d9c:	00403cc1 	.word	0x00403cc1

00403da0 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
  403da0:	b530      	push	{r4, r5, lr}
  403da2:	b09f      	sub	sp, #124	; 0x7c
  403da4:	4615      	mov	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
  403da6:	282c      	cmp	r0, #44	; 0x2c
  403da8:	d02e      	beq.n	403e08 <m2m_wifi_cb+0x68>
  403daa:	4604      	mov	r4, r0
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
  403dac:	281b      	cmp	r0, #27
  403dae:	d03b      	beq.n	403e28 <m2m_wifi_cb+0x88>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
  403db0:	2806      	cmp	r0, #6
  403db2:	d049      	beq.n	403e48 <m2m_wifi_cb+0xa8>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
  403db4:	280e      	cmp	r0, #14
  403db6:	d025      	beq.n	403e04 <m2m_wifi_cb+0x64>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
  403db8:	2832      	cmp	r0, #50	; 0x32
  403dba:	d055      	beq.n	403e68 <m2m_wifi_cb+0xc8>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
  403dbc:	282f      	cmp	r0, #47	; 0x2f
  403dbe:	d063      	beq.n	403e88 <m2m_wifi_cb+0xe8>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
  403dc0:	2834      	cmp	r0, #52	; 0x34
  403dc2:	d076      	beq.n	403eb2 <m2m_wifi_cb+0x112>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
  403dc4:	2811      	cmp	r0, #17
  403dc6:	f000 8093 	beq.w	403ef0 <m2m_wifi_cb+0x150>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
  403dca:	2813      	cmp	r0, #19
  403dcc:	f000 80a8 	beq.w	403f20 <m2m_wifi_cb+0x180>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
  403dd0:	2804      	cmp	r0, #4
  403dd2:	f000 80b7 	beq.w	403f44 <m2m_wifi_cb+0x1a4>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
  403dd6:	2865      	cmp	r0, #101	; 0x65
  403dd8:	f000 80c6 	beq.w	403f68 <m2m_wifi_cb+0x1c8>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
  403ddc:	2809      	cmp	r0, #9
  403dde:	f000 80d5 	beq.w	403f8c <m2m_wifi_cb+0x1ec>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
  403de2:	282a      	cmp	r0, #42	; 0x2a
  403de4:	f000 80e4 	beq.w	403fb0 <m2m_wifi_cb+0x210>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
  403de8:	2820      	cmp	r0, #32
  403dea:	f000 80f3 	beq.w	403fd4 <m2m_wifi_cb+0x234>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
  403dee:	f44f 7295 	mov.w	r2, #298	; 0x12a
  403df2:	4986      	ldr	r1, [pc, #536]	; (40400c <m2m_wifi_cb+0x26c>)
  403df4:	4886      	ldr	r0, [pc, #536]	; (404010 <m2m_wifi_cb+0x270>)
  403df6:	4d87      	ldr	r5, [pc, #540]	; (404014 <m2m_wifi_cb+0x274>)
  403df8:	47a8      	blx	r5
  403dfa:	4621      	mov	r1, r4
  403dfc:	4886      	ldr	r0, [pc, #536]	; (404018 <m2m_wifi_cb+0x278>)
  403dfe:	47a8      	blx	r5
  403e00:	4886      	ldr	r0, [pc, #536]	; (40401c <m2m_wifi_cb+0x27c>)
  403e02:	47a8      	blx	r5
	}
}
  403e04:	b01f      	add	sp, #124	; 0x7c
  403e06:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
  403e08:	2300      	movs	r3, #0
  403e0a:	2204      	movs	r2, #4
  403e0c:	a903      	add	r1, sp, #12
  403e0e:	4628      	mov	r0, r5
  403e10:	4c83      	ldr	r4, [pc, #524]	; (404020 <m2m_wifi_cb+0x280>)
  403e12:	47a0      	blx	r4
  403e14:	2800      	cmp	r0, #0
  403e16:	d1f5      	bne.n	403e04 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  403e18:	4b82      	ldr	r3, [pc, #520]	; (404024 <m2m_wifi_cb+0x284>)
  403e1a:	681b      	ldr	r3, [r3, #0]
  403e1c:	2b00      	cmp	r3, #0
  403e1e:	d0f1      	beq.n	403e04 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
  403e20:	a903      	add	r1, sp, #12
  403e22:	202c      	movs	r0, #44	; 0x2c
  403e24:	4798      	blx	r3
  403e26:	e7ed      	b.n	403e04 <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
  403e28:	2300      	movs	r3, #0
  403e2a:	2208      	movs	r2, #8
  403e2c:	a903      	add	r1, sp, #12
  403e2e:	4628      	mov	r0, r5
  403e30:	4c7b      	ldr	r4, [pc, #492]	; (404020 <m2m_wifi_cb+0x280>)
  403e32:	47a0      	blx	r4
  403e34:	2800      	cmp	r0, #0
  403e36:	d1e5      	bne.n	403e04 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  403e38:	4b7a      	ldr	r3, [pc, #488]	; (404024 <m2m_wifi_cb+0x284>)
  403e3a:	681b      	ldr	r3, [r3, #0]
  403e3c:	2b00      	cmp	r3, #0
  403e3e:	d0e1      	beq.n	403e04 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
  403e40:	a903      	add	r1, sp, #12
  403e42:	201b      	movs	r0, #27
  403e44:	4798      	blx	r3
  403e46:	e7dd      	b.n	403e04 <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
  403e48:	2301      	movs	r3, #1
  403e4a:	2230      	movs	r2, #48	; 0x30
  403e4c:	a903      	add	r1, sp, #12
  403e4e:	4628      	mov	r0, r5
  403e50:	4c73      	ldr	r4, [pc, #460]	; (404020 <m2m_wifi_cb+0x280>)
  403e52:	47a0      	blx	r4
  403e54:	2800      	cmp	r0, #0
  403e56:	d1d5      	bne.n	403e04 <m2m_wifi_cb+0x64>
			if(gpfAppWifiCb)
  403e58:	4b72      	ldr	r3, [pc, #456]	; (404024 <m2m_wifi_cb+0x284>)
  403e5a:	681b      	ldr	r3, [r3, #0]
  403e5c:	2b00      	cmp	r3, #0
  403e5e:	d0d1      	beq.n	403e04 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
  403e60:	a903      	add	r1, sp, #12
  403e62:	2006      	movs	r0, #6
  403e64:	4798      	blx	r3
  403e66:	e7cd      	b.n	403e04 <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
  403e68:	2300      	movs	r3, #0
  403e6a:	2210      	movs	r2, #16
  403e6c:	a903      	add	r1, sp, #12
  403e6e:	4628      	mov	r0, r5
  403e70:	4c6b      	ldr	r4, [pc, #428]	; (404020 <m2m_wifi_cb+0x280>)
  403e72:	47a0      	blx	r4
  403e74:	2800      	cmp	r0, #0
  403e76:	d1c5      	bne.n	403e04 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  403e78:	4b6a      	ldr	r3, [pc, #424]	; (404024 <m2m_wifi_cb+0x284>)
  403e7a:	681b      	ldr	r3, [r3, #0]
  403e7c:	2b00      	cmp	r3, #0
  403e7e:	d0c1      	beq.n	403e04 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
  403e80:	a903      	add	r1, sp, #12
  403e82:	2032      	movs	r0, #50	; 0x32
  403e84:	4798      	blx	r3
  403e86:	e7bd      	b.n	403e04 <m2m_wifi_cb+0x64>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
  403e88:	2264      	movs	r2, #100	; 0x64
  403e8a:	2100      	movs	r1, #0
  403e8c:	a803      	add	r0, sp, #12
  403e8e:	4b66      	ldr	r3, [pc, #408]	; (404028 <m2m_wifi_cb+0x288>)
  403e90:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
  403e92:	2300      	movs	r3, #0
  403e94:	2264      	movs	r2, #100	; 0x64
  403e96:	a903      	add	r1, sp, #12
  403e98:	4628      	mov	r0, r5
  403e9a:	4c61      	ldr	r4, [pc, #388]	; (404020 <m2m_wifi_cb+0x280>)
  403e9c:	47a0      	blx	r4
  403e9e:	2800      	cmp	r0, #0
  403ea0:	d1b0      	bne.n	403e04 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  403ea2:	4b60      	ldr	r3, [pc, #384]	; (404024 <m2m_wifi_cb+0x284>)
  403ea4:	681b      	ldr	r3, [r3, #0]
  403ea6:	2b00      	cmp	r3, #0
  403ea8:	d0ac      	beq.n	403e04 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
  403eaa:	a903      	add	r1, sp, #12
  403eac:	202f      	movs	r0, #47	; 0x2f
  403eae:	4798      	blx	r3
  403eb0:	e7a8      	b.n	403e04 <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
  403eb2:	2300      	movs	r3, #0
  403eb4:	2204      	movs	r2, #4
  403eb6:	a903      	add	r1, sp, #12
  403eb8:	4628      	mov	r0, r5
  403eba:	4c59      	ldr	r4, [pc, #356]	; (404020 <m2m_wifi_cb+0x280>)
  403ebc:	47a0      	blx	r4
  403ebe:	2800      	cmp	r0, #0
  403ec0:	d1a0      	bne.n	403e04 <m2m_wifi_cb+0x64>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
  403ec2:	485a      	ldr	r0, [pc, #360]	; (40402c <m2m_wifi_cb+0x28c>)
  403ec4:	4c53      	ldr	r4, [pc, #332]	; (404014 <m2m_wifi_cb+0x274>)
  403ec6:	47a0      	blx	r4
  403ec8:	9903      	ldr	r1, [sp, #12]
  403eca:	b2cb      	uxtb	r3, r1
  403ecc:	9300      	str	r3, [sp, #0]
  403ece:	f3c1 2307 	ubfx	r3, r1, #8, #8
  403ed2:	f3c1 4207 	ubfx	r2, r1, #16, #8
  403ed6:	0e09      	lsrs	r1, r1, #24
  403ed8:	4855      	ldr	r0, [pc, #340]	; (404030 <m2m_wifi_cb+0x290>)
  403eda:	47a0      	blx	r4
  403edc:	484f      	ldr	r0, [pc, #316]	; (40401c <m2m_wifi_cb+0x27c>)
  403ede:	47a0      	blx	r4
			if (gpfAppWifiCb)
  403ee0:	4b50      	ldr	r3, [pc, #320]	; (404024 <m2m_wifi_cb+0x284>)
  403ee2:	681b      	ldr	r3, [r3, #0]
  403ee4:	2b00      	cmp	r3, #0
  403ee6:	d08d      	beq.n	403e04 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
  403ee8:	2100      	movs	r1, #0
  403eea:	2034      	movs	r0, #52	; 0x34
  403eec:	4798      	blx	r3
  403eee:	e789      	b.n	403e04 <m2m_wifi_cb+0x64>
		gu8scanInProgress = 0;
  403ef0:	2300      	movs	r3, #0
  403ef2:	4a50      	ldr	r2, [pc, #320]	; (404034 <m2m_wifi_cb+0x294>)
  403ef4:	7013      	strb	r3, [r2, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
  403ef6:	2204      	movs	r2, #4
  403ef8:	a903      	add	r1, sp, #12
  403efa:	4628      	mov	r0, r5
  403efc:	4c48      	ldr	r4, [pc, #288]	; (404020 <m2m_wifi_cb+0x280>)
  403efe:	47a0      	blx	r4
  403f00:	2800      	cmp	r0, #0
  403f02:	f47f af7f 	bne.w	403e04 <m2m_wifi_cb+0x64>
			gu8ChNum = strState.u8NumofCh;
  403f06:	f89d 200c 	ldrb.w	r2, [sp, #12]
  403f0a:	4b4b      	ldr	r3, [pc, #300]	; (404038 <m2m_wifi_cb+0x298>)
  403f0c:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
  403f0e:	4b45      	ldr	r3, [pc, #276]	; (404024 <m2m_wifi_cb+0x284>)
  403f10:	681b      	ldr	r3, [r3, #0]
  403f12:	2b00      	cmp	r3, #0
  403f14:	f43f af76 	beq.w	403e04 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
  403f18:	a903      	add	r1, sp, #12
  403f1a:	2011      	movs	r0, #17
  403f1c:	4798      	blx	r3
  403f1e:	e771      	b.n	403e04 <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
  403f20:	2300      	movs	r3, #0
  403f22:	222c      	movs	r2, #44	; 0x2c
  403f24:	a903      	add	r1, sp, #12
  403f26:	4628      	mov	r0, r5
  403f28:	4c3d      	ldr	r4, [pc, #244]	; (404020 <m2m_wifi_cb+0x280>)
  403f2a:	47a0      	blx	r4
  403f2c:	2800      	cmp	r0, #0
  403f2e:	f47f af69 	bne.w	403e04 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  403f32:	4b3c      	ldr	r3, [pc, #240]	; (404024 <m2m_wifi_cb+0x284>)
  403f34:	681b      	ldr	r3, [r3, #0]
  403f36:	2b00      	cmp	r3, #0
  403f38:	f43f af64 	beq.w	403e04 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
  403f3c:	a903      	add	r1, sp, #12
  403f3e:	2013      	movs	r0, #19
  403f40:	4798      	blx	r3
  403f42:	e75f      	b.n	403e04 <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
  403f44:	2300      	movs	r3, #0
  403f46:	2204      	movs	r2, #4
  403f48:	a91c      	add	r1, sp, #112	; 0x70
  403f4a:	4628      	mov	r0, r5
  403f4c:	4c34      	ldr	r4, [pc, #208]	; (404020 <m2m_wifi_cb+0x280>)
  403f4e:	47a0      	blx	r4
  403f50:	2800      	cmp	r0, #0
  403f52:	f47f af57 	bne.w	403e04 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  403f56:	4b33      	ldr	r3, [pc, #204]	; (404024 <m2m_wifi_cb+0x284>)
  403f58:	681b      	ldr	r3, [r3, #0]
  403f5a:	2b00      	cmp	r3, #0
  403f5c:	f43f af52 	beq.w	403e04 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
  403f60:	a91c      	add	r1, sp, #112	; 0x70
  403f62:	2004      	movs	r0, #4
  403f64:	4798      	blx	r3
  403f66:	e74d      	b.n	403e04 <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
  403f68:	2300      	movs	r3, #0
  403f6a:	2204      	movs	r2, #4
  403f6c:	a91c      	add	r1, sp, #112	; 0x70
  403f6e:	4628      	mov	r0, r5
  403f70:	4c2b      	ldr	r4, [pc, #172]	; (404020 <m2m_wifi_cb+0x280>)
  403f72:	47a0      	blx	r4
  403f74:	2800      	cmp	r0, #0
  403f76:	f47f af45 	bne.w	403e04 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  403f7a:	4b2a      	ldr	r3, [pc, #168]	; (404024 <m2m_wifi_cb+0x284>)
  403f7c:	681b      	ldr	r3, [r3, #0]
  403f7e:	2b00      	cmp	r3, #0
  403f80:	f43f af40 	beq.w	403e04 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
  403f84:	a91c      	add	r1, sp, #112	; 0x70
  403f86:	2065      	movs	r0, #101	; 0x65
  403f88:	4798      	blx	r3
  403f8a:	e73b      	b.n	403e04 <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
  403f8c:	2301      	movs	r3, #1
  403f8e:	2264      	movs	r2, #100	; 0x64
  403f90:	a903      	add	r1, sp, #12
  403f92:	4628      	mov	r0, r5
  403f94:	4c22      	ldr	r4, [pc, #136]	; (404020 <m2m_wifi_cb+0x280>)
  403f96:	47a0      	blx	r4
  403f98:	2800      	cmp	r0, #0
  403f9a:	f47f af33 	bne.w	403e04 <m2m_wifi_cb+0x64>
			if(gpfAppWifiCb)
  403f9e:	4b21      	ldr	r3, [pc, #132]	; (404024 <m2m_wifi_cb+0x284>)
  403fa0:	681b      	ldr	r3, [r3, #0]
  403fa2:	2b00      	cmp	r3, #0
  403fa4:	f43f af2e 	beq.w	403e04 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
  403fa8:	a903      	add	r1, sp, #12
  403faa:	2009      	movs	r0, #9
  403fac:	4798      	blx	r3
  403fae:	e729      	b.n	403e04 <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
  403fb0:	2301      	movs	r3, #1
  403fb2:	2204      	movs	r2, #4
  403fb4:	a903      	add	r1, sp, #12
  403fb6:	4628      	mov	r0, r5
  403fb8:	4c19      	ldr	r4, [pc, #100]	; (404020 <m2m_wifi_cb+0x280>)
  403fba:	47a0      	blx	r4
  403fbc:	2800      	cmp	r0, #0
  403fbe:	f47f af21 	bne.w	403e04 <m2m_wifi_cb+0x64>
			if(gpfAppWifiCb)
  403fc2:	4b18      	ldr	r3, [pc, #96]	; (404024 <m2m_wifi_cb+0x284>)
  403fc4:	681b      	ldr	r3, [r3, #0]
  403fc6:	2b00      	cmp	r3, #0
  403fc8:	f43f af1c 	beq.w	403e04 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
  403fcc:	a903      	add	r1, sp, #12
  403fce:	202a      	movs	r0, #42	; 0x2a
  403fd0:	4798      	blx	r3
  403fd2:	e717      	b.n	403e04 <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
  403fd4:	2300      	movs	r3, #0
  403fd6:	2208      	movs	r2, #8
  403fd8:	a903      	add	r1, sp, #12
  403fda:	4628      	mov	r0, r5
  403fdc:	4c10      	ldr	r4, [pc, #64]	; (404020 <m2m_wifi_cb+0x280>)
  403fde:	47a0      	blx	r4
  403fe0:	2800      	cmp	r0, #0
  403fe2:	f47f af0f 	bne.w	403e04 <m2m_wifi_cb+0x64>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
  403fe6:	2301      	movs	r3, #1
  403fe8:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  403fec:	9903      	ldr	r1, [sp, #12]
  403fee:	f105 0008 	add.w	r0, r5, #8
  403ff2:	47a0      	blx	r4
  403ff4:	2800      	cmp	r0, #0
  403ff6:	f47f af05 	bne.w	403e04 <m2m_wifi_cb+0x64>
				if(gpfAppWifiCb)
  403ffa:	4b0a      	ldr	r3, [pc, #40]	; (404024 <m2m_wifi_cb+0x284>)
  403ffc:	681b      	ldr	r3, [r3, #0]
  403ffe:	2b00      	cmp	r3, #0
  404000:	f43f af00 	beq.w	403e04 <m2m_wifi_cb+0x64>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
  404004:	a903      	add	r1, sp, #12
  404006:	2020      	movs	r0, #32
  404008:	4798      	blx	r3
  40400a:	e6fb      	b.n	403e04 <m2m_wifi_cb+0x64>
  40400c:	0040de14 	.word	0x0040de14
  404010:	0040db74 	.word	0x0040db74
  404014:	00407321 	.word	0x00407321
  404018:	0040de70 	.word	0x0040de70
  40401c:	0040e928 	.word	0x0040e928
  404020:	00403bad 	.word	0x00403bad
  404024:	20400a6c 	.word	0x20400a6c
  404028:	00403559 	.word	0x00403559
  40402c:	0040de44 	.word	0x0040de44
  404030:	0040de50 	.word	0x0040de50
  404034:	20400a71 	.word	0x20400a71
  404038:	20400a70 	.word	0x20400a70

0040403c <m2m_wifi_init>:
	}	
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
  40403c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40403e:	b08b      	sub	sp, #44	; 0x2c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
  404040:	2301      	movs	r3, #1
  404042:	f88d 3007 	strb.w	r3, [sp, #7]
	
	if(param == NULL) {
  404046:	2800      	cmp	r0, #0
  404048:	d050      	beq.n	4040ec <m2m_wifi_init+0xb0>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
  40404a:	6802      	ldr	r2, [r0, #0]
  40404c:	4b29      	ldr	r3, [pc, #164]	; (4040f4 <m2m_wifi_init+0xb8>)
  40404e:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
  404050:	2200      	movs	r2, #0
  404052:	4b29      	ldr	r3, [pc, #164]	; (4040f8 <m2m_wifi_init+0xbc>)
  404054:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
  404056:	f10d 0007 	add.w	r0, sp, #7
  40405a:	4b28      	ldr	r3, [pc, #160]	; (4040fc <m2m_wifi_init+0xc0>)
  40405c:	4798      	blx	r3
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
  40405e:	4604      	mov	r4, r0
  404060:	b110      	cbz	r0, 404068 <m2m_wifi_init+0x2c>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
  404062:	4620      	mov	r0, r4
  404064:	b00b      	add	sp, #44	; 0x2c
  404066:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
  404068:	4b25      	ldr	r3, [pc, #148]	; (404100 <m2m_wifi_init+0xc4>)
  40406a:	4798      	blx	r3
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
  40406c:	4604      	mov	r4, r0
  40406e:	2800      	cmp	r0, #0
  404070:	d138      	bne.n	4040e4 <m2m_wifi_init+0xa8>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
  404072:	4924      	ldr	r1, [pc, #144]	; (404104 <m2m_wifi_init+0xc8>)
  404074:	2001      	movs	r0, #1
  404076:	4b24      	ldr	r3, [pc, #144]	; (404108 <m2m_wifi_init+0xcc>)
  404078:	4798      	blx	r3
	ret = nm_get_firmware_info(&strtmp);
  40407a:	a802      	add	r0, sp, #8
  40407c:	4b23      	ldr	r3, [pc, #140]	; (40410c <m2m_wifi_init+0xd0>)
  40407e:	4798      	blx	r3
  404080:	4604      	mov	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch);
  404082:	4f23      	ldr	r7, [pc, #140]	; (404110 <m2m_wifi_init+0xd4>)
  404084:	4638      	mov	r0, r7
  404086:	4d23      	ldr	r5, [pc, #140]	; (404114 <m2m_wifi_init+0xd8>)
  404088:	47a8      	blx	r5
  40408a:	f89d 300e 	ldrb.w	r3, [sp, #14]
  40408e:	f89d 200d 	ldrb.w	r2, [sp, #13]
  404092:	f89d 100c 	ldrb.w	r1, [sp, #12]
  404096:	4820      	ldr	r0, [pc, #128]	; (404118 <m2m_wifi_init+0xdc>)
  404098:	47a8      	blx	r5
  40409a:	4e20      	ldr	r6, [pc, #128]	; (40411c <m2m_wifi_init+0xe0>)
  40409c:	4630      	mov	r0, r6
  40409e:	47a8      	blx	r5
	M2M_INFO("Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
  4040a0:	4638      	mov	r0, r7
  4040a2:	47a8      	blx	r5
  4040a4:	f89d 3011 	ldrb.w	r3, [sp, #17]
  4040a8:	f89d 2010 	ldrb.w	r2, [sp, #16]
  4040ac:	f89d 100f 	ldrb.w	r1, [sp, #15]
  4040b0:	481b      	ldr	r0, [pc, #108]	; (404120 <m2m_wifi_init+0xe4>)
  4040b2:	47a8      	blx	r5
  4040b4:	4630      	mov	r0, r6
  4040b6:	47a8      	blx	r5
	M2M_INFO("Curr driver ver: %u.%u.%u\n", M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
  4040b8:	4638      	mov	r0, r7
  4040ba:	47a8      	blx	r5
  4040bc:	2300      	movs	r3, #0
  4040be:	2203      	movs	r2, #3
  4040c0:	2113      	movs	r1, #19
  4040c2:	4818      	ldr	r0, [pc, #96]	; (404124 <m2m_wifi_init+0xe8>)
  4040c4:	47a8      	blx	r5
  4040c6:	4630      	mov	r0, r6
  4040c8:	47a8      	blx	r5
	if(M2M_ERR_FW_VER_MISMATCH == ret)
  4040ca:	f114 0f0d 	cmn.w	r4, #13
  4040ce:	d1c8      	bne.n	404062 <m2m_wifi_init+0x26>
		M2M_ERR("Mismatch Firmawre Version\n");
  4040d0:	f240 12d5 	movw	r2, #469	; 0x1d5
  4040d4:	4914      	ldr	r1, [pc, #80]	; (404128 <m2m_wifi_init+0xec>)
  4040d6:	4815      	ldr	r0, [pc, #84]	; (40412c <m2m_wifi_init+0xf0>)
  4040d8:	47a8      	blx	r5
  4040da:	4815      	ldr	r0, [pc, #84]	; (404130 <m2m_wifi_init+0xf4>)
  4040dc:	47a8      	blx	r5
  4040de:	4630      	mov	r0, r6
  4040e0:	47a8      	blx	r5
  4040e2:	e7be      	b.n	404062 <m2m_wifi_init+0x26>
	nm_drv_deinit(NULL);
  4040e4:	2000      	movs	r0, #0
  4040e6:	4b13      	ldr	r3, [pc, #76]	; (404134 <m2m_wifi_init+0xf8>)
  4040e8:	4798      	blx	r3
  4040ea:	e7ba      	b.n	404062 <m2m_wifi_init+0x26>
		ret = M2M_ERR_FAIL;
  4040ec:	f06f 040b 	mvn.w	r4, #11
  4040f0:	e7b7      	b.n	404062 <m2m_wifi_init+0x26>
  4040f2:	bf00      	nop
  4040f4:	20400a6c 	.word	0x20400a6c
  4040f8:	20400a71 	.word	0x20400a71
  4040fc:	00404a01 	.word	0x00404a01
  404100:	00403d51 	.word	0x00403d51
  404104:	00403da1 	.word	0x00403da1
  404108:	00403cc1 	.word	0x00403cc1
  40410c:	00404951 	.word	0x00404951
  404110:	0040de44 	.word	0x0040de44
  404114:	00407321 	.word	0x00407321
  404118:	0040df30 	.word	0x0040df30
  40411c:	0040e928 	.word	0x0040e928
  404120:	0040df4c 	.word	0x0040df4c
  404124:	0040df68 	.word	0x0040df68
  404128:	0040de20 	.word	0x0040de20
  40412c:	0040db74 	.word	0x0040db74
  404130:	0040df84 	.word	0x0040df84
  404134:	00404acd 	.word	0x00404acd

00404138 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
  404138:	b508      	push	{r3, lr}
	return hif_handle_isr();
  40413a:	4b01      	ldr	r3, [pc, #4]	; (404140 <m2m_wifi_handle_events+0x8>)
  40413c:	4798      	blx	r3
}
  40413e:	bd08      	pop	{r3, pc}
  404140:	0040389d 	.word	0x0040389d

00404144 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
  404144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404148:	b0a0      	sub	sp, #128	; 0x80
  40414a:	4680      	mov	r8, r0
  40414c:	460d      	mov	r5, r1
  40414e:	4614      	mov	r4, r2
  404150:	461e      	mov	r6, r3
  404152:	f8bd 7098 	ldrh.w	r7, [sp, #152]	; 0x98
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
  404156:	2a01      	cmp	r2, #1
  404158:	d003      	beq.n	404162 <m2m_wifi_connect_sc+0x1e>
	{
		if(pvAuthInfo == NULL)
  40415a:	2b00      	cmp	r3, #0
  40415c:	d037      	beq.n	4041ce <m2m_wifi_connect_sc+0x8a>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
  40415e:	2a02      	cmp	r2, #2
  404160:	d042      	beq.n	4041e8 <m2m_wifi_connect_sc+0xa4>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
  404162:	1e6b      	subs	r3, r5, #1
  404164:	b2db      	uxtb	r3, r3
  404166:	2b1f      	cmp	r3, #31
  404168:	d875      	bhi.n	404256 <m2m_wifi_connect_sc+0x112>
		goto ERR1;
	}

	if(u16Ch>M2M_WIFI_CH_14)
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
  40416a:	2fff      	cmp	r7, #255	; 0xff
  40416c:	d001      	beq.n	404172 <m2m_wifi_connect_sc+0x2e>
  40416e:	2f0d      	cmp	r7, #13
  404170:	d87e      	bhi.n	404270 <m2m_wifi_connect_sc+0x12c>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
  404172:	462a      	mov	r2, r5
  404174:	4641      	mov	r1, r8
  404176:	f10d 005a 	add.w	r0, sp, #90	; 0x5a
  40417a:	4b77      	ldr	r3, [pc, #476]	; (404358 <m2m_wifi_connect_sc+0x214>)
  40417c:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
  40417e:	ab20      	add	r3, sp, #128	; 0x80
  404180:	441d      	add	r5, r3
  404182:	2300      	movs	r3, #0
  404184:	f805 3c26 	strb.w	r3, [r5, #-38]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
  404188:	f8ad 7058 	strh.w	r7, [sp, #88]	; 0x58
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
  40418c:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
  404190:	3300      	adds	r3, #0
  404192:	bf18      	it	ne
  404194:	2301      	movne	r3, #1
  404196:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
  40419a:	f88d 4055 	strb.w	r4, [sp, #85]	; 0x55

	if(u8SecType == M2M_WIFI_SEC_WEP)
  40419e:	2c03      	cmp	r4, #3
  4041a0:	d073      	beq.n	40428a <m2m_wifi_connect_sc+0x146>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
  4041a2:	2c02      	cmp	r4, #2
  4041a4:	f000 80aa 	beq.w	4042fc <m2m_wifi_connect_sc+0x1b8>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
  4041a8:	2c04      	cmp	r4, #4
  4041aa:	f000 80c1 	beq.w	404330 <m2m_wifi_connect_sc+0x1ec>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
  4041ae:	2c01      	cmp	r4, #1
  4041b0:	f040 80c4 	bne.w	40433c <m2m_wifi_connect_sc+0x1f8>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
  4041b4:	2300      	movs	r3, #0
  4041b6:	9302      	str	r3, [sp, #8]
  4041b8:	9301      	str	r3, [sp, #4]
  4041ba:	9300      	str	r3, [sp, #0]
  4041bc:	236c      	movs	r3, #108	; 0x6c
  4041be:	aa05      	add	r2, sp, #20
  4041c0:	2128      	movs	r1, #40	; 0x28
  4041c2:	2001      	movs	r0, #1
  4041c4:	4c65      	ldr	r4, [pc, #404]	; (40435c <m2m_wifi_connect_sc+0x218>)
  4041c6:	47a0      	blx	r4

ERR1:
	return ret;
}
  4041c8:	b020      	add	sp, #128	; 0x80
  4041ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			M2M_ERR("Key is not valid\n");
  4041ce:	f240 2203 	movw	r2, #515	; 0x203
  4041d2:	4963      	ldr	r1, [pc, #396]	; (404360 <m2m_wifi_connect_sc+0x21c>)
  4041d4:	4863      	ldr	r0, [pc, #396]	; (404364 <m2m_wifi_connect_sc+0x220>)
  4041d6:	4c64      	ldr	r4, [pc, #400]	; (404368 <m2m_wifi_connect_sc+0x224>)
  4041d8:	47a0      	blx	r4
  4041da:	4864      	ldr	r0, [pc, #400]	; (40436c <m2m_wifi_connect_sc+0x228>)
  4041dc:	47a0      	blx	r4
  4041de:	4864      	ldr	r0, [pc, #400]	; (404370 <m2m_wifi_connect_sc+0x22c>)
  4041e0:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  4041e2:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  4041e6:	e7ef      	b.n	4041c8 <m2m_wifi_connect_sc+0x84>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
  4041e8:	4618      	mov	r0, r3
  4041ea:	4b62      	ldr	r3, [pc, #392]	; (404374 <m2m_wifi_connect_sc+0x230>)
  4041ec:	4798      	blx	r3
  4041ee:	2840      	cmp	r0, #64	; 0x40
  4041f0:	d1b7      	bne.n	404162 <m2m_wifi_connect_sc+0x1e>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
  4041f2:	7833      	ldrb	r3, [r6, #0]
  4041f4:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
  4041f8:	b2d2      	uxtb	r2, r2
  4041fa:	2a06      	cmp	r2, #6
  4041fc:	d91e      	bls.n	40423c <m2m_wifi_connect_sc+0xf8>
  4041fe:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  404202:	b2d2      	uxtb	r2, r2
  404204:	2a36      	cmp	r2, #54	; 0x36
  404206:	d819      	bhi.n	40423c <m2m_wifi_connect_sc+0xf8>
  404208:	3b47      	subs	r3, #71	; 0x47
  40420a:	b2db      	uxtb	r3, r3
  40420c:	2b19      	cmp	r3, #25
  40420e:	d915      	bls.n	40423c <m2m_wifi_connect_sc+0xf8>
  404210:	4631      	mov	r1, r6
  404212:	f106 003f 	add.w	r0, r6, #63	; 0x3f
  404216:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  40421a:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
  40421e:	b2d2      	uxtb	r2, r2
  404220:	2a06      	cmp	r2, #6
  404222:	d90b      	bls.n	40423c <m2m_wifi_connect_sc+0xf8>
  404224:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  404228:	b2d2      	uxtb	r2, r2
  40422a:	2a36      	cmp	r2, #54	; 0x36
  40422c:	d806      	bhi.n	40423c <m2m_wifi_connect_sc+0xf8>
  40422e:	3b47      	subs	r3, #71	; 0x47
  404230:	b2db      	uxtb	r3, r3
  404232:	2b19      	cmp	r3, #25
  404234:	d902      	bls.n	40423c <m2m_wifi_connect_sc+0xf8>
			while(i < (M2M_MAX_PSK_LEN-1))
  404236:	4288      	cmp	r0, r1
  404238:	d1ed      	bne.n	404216 <m2m_wifi_connect_sc+0xd2>
  40423a:	e792      	b.n	404162 <m2m_wifi_connect_sc+0x1e>
					M2M_ERR("Invalid Key\n");
  40423c:	f240 220f 	movw	r2, #527	; 0x20f
  404240:	4947      	ldr	r1, [pc, #284]	; (404360 <m2m_wifi_connect_sc+0x21c>)
  404242:	4848      	ldr	r0, [pc, #288]	; (404364 <m2m_wifi_connect_sc+0x220>)
  404244:	4c48      	ldr	r4, [pc, #288]	; (404368 <m2m_wifi_connect_sc+0x224>)
  404246:	47a0      	blx	r4
  404248:	484b      	ldr	r0, [pc, #300]	; (404378 <m2m_wifi_connect_sc+0x234>)
  40424a:	47a0      	blx	r4
  40424c:	4848      	ldr	r0, [pc, #288]	; (404370 <m2m_wifi_connect_sc+0x22c>)
  40424e:	47a0      	blx	r4
					ret = M2M_ERR_FAIL;
  404250:	f06f 000b 	mvn.w	r0, #11
					goto ERR1;
  404254:	e7b8      	b.n	4041c8 <m2m_wifi_connect_sc+0x84>
		M2M_ERR("SSID LEN INVALID\n");
  404256:	f240 2219 	movw	r2, #537	; 0x219
  40425a:	4941      	ldr	r1, [pc, #260]	; (404360 <m2m_wifi_connect_sc+0x21c>)
  40425c:	4841      	ldr	r0, [pc, #260]	; (404364 <m2m_wifi_connect_sc+0x220>)
  40425e:	4c42      	ldr	r4, [pc, #264]	; (404368 <m2m_wifi_connect_sc+0x224>)
  404260:	47a0      	blx	r4
  404262:	4846      	ldr	r0, [pc, #280]	; (40437c <m2m_wifi_connect_sc+0x238>)
  404264:	47a0      	blx	r4
  404266:	4842      	ldr	r0, [pc, #264]	; (404370 <m2m_wifi_connect_sc+0x22c>)
  404268:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  40426a:	f06f 000b 	mvn.w	r0, #11
		goto ERR1;
  40426e:	e7ab      	b.n	4041c8 <m2m_wifi_connect_sc+0x84>
			M2M_ERR("CH INVALID\n");
  404270:	f240 2222 	movw	r2, #546	; 0x222
  404274:	493a      	ldr	r1, [pc, #232]	; (404360 <m2m_wifi_connect_sc+0x21c>)
  404276:	483b      	ldr	r0, [pc, #236]	; (404364 <m2m_wifi_connect_sc+0x220>)
  404278:	4c3b      	ldr	r4, [pc, #236]	; (404368 <m2m_wifi_connect_sc+0x224>)
  40427a:	47a0      	blx	r4
  40427c:	4840      	ldr	r0, [pc, #256]	; (404380 <m2m_wifi_connect_sc+0x23c>)
  40427e:	47a0      	blx	r4
  404280:	483b      	ldr	r0, [pc, #236]	; (404370 <m2m_wifi_connect_sc+0x22c>)
  404282:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  404284:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  404288:	e79e      	b.n	4041c8 <m2m_wifi_connect_sc+0x84>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
  40428a:	7833      	ldrb	r3, [r6, #0]
  40428c:	3b01      	subs	r3, #1
  40428e:	b2db      	uxtb	r3, r3
  404290:	f88d 3014 	strb.w	r3, [sp, #20]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
  404294:	2b03      	cmp	r3, #3
  404296:	d813      	bhi.n	4042c0 <m2m_wifi_connect_sc+0x17c>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
  404298:	7872      	ldrb	r2, [r6, #1]
  40429a:	1e53      	subs	r3, r2, #1
  40429c:	f88d 3015 	strb.w	r3, [sp, #21]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
  4042a0:	f002 03ef 	and.w	r3, r2, #239	; 0xef
  4042a4:	2b0b      	cmp	r3, #11
  4042a6:	d11a      	bne.n	4042de <m2m_wifi_connect_sc+0x19a>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
  4042a8:	1cb1      	adds	r1, r6, #2
  4042aa:	f10d 0016 	add.w	r0, sp, #22
  4042ae:	4b2a      	ldr	r3, [pc, #168]	; (404358 <m2m_wifi_connect_sc+0x214>)
  4042b0:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
  4042b2:	7873      	ldrb	r3, [r6, #1]
  4042b4:	aa20      	add	r2, sp, #128	; 0x80
  4042b6:	4413      	add	r3, r2
  4042b8:	2200      	movs	r2, #0
  4042ba:	f803 2c6a 	strb.w	r2, [r3, #-106]
  4042be:	e779      	b.n	4041b4 <m2m_wifi_connect_sc+0x70>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
  4042c0:	f240 2239 	movw	r2, #569	; 0x239
  4042c4:	4926      	ldr	r1, [pc, #152]	; (404360 <m2m_wifi_connect_sc+0x21c>)
  4042c6:	4827      	ldr	r0, [pc, #156]	; (404364 <m2m_wifi_connect_sc+0x220>)
  4042c8:	4c27      	ldr	r4, [pc, #156]	; (404368 <m2m_wifi_connect_sc+0x224>)
  4042ca:	47a0      	blx	r4
  4042cc:	f89d 1014 	ldrb.w	r1, [sp, #20]
  4042d0:	482c      	ldr	r0, [pc, #176]	; (404384 <m2m_wifi_connect_sc+0x240>)
  4042d2:	47a0      	blx	r4
  4042d4:	4826      	ldr	r0, [pc, #152]	; (404370 <m2m_wifi_connect_sc+0x22c>)
  4042d6:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  4042d8:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  4042dc:	e774      	b.n	4041c8 <m2m_wifi_connect_sc+0x84>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
  4042de:	f44f 7210 	mov.w	r2, #576	; 0x240
  4042e2:	491f      	ldr	r1, [pc, #124]	; (404360 <m2m_wifi_connect_sc+0x21c>)
  4042e4:	481f      	ldr	r0, [pc, #124]	; (404364 <m2m_wifi_connect_sc+0x220>)
  4042e6:	4c20      	ldr	r4, [pc, #128]	; (404368 <m2m_wifi_connect_sc+0x224>)
  4042e8:	47a0      	blx	r4
  4042ea:	f89d 1015 	ldrb.w	r1, [sp, #21]
  4042ee:	4826      	ldr	r0, [pc, #152]	; (404388 <m2m_wifi_connect_sc+0x244>)
  4042f0:	47a0      	blx	r4
  4042f2:	481f      	ldr	r0, [pc, #124]	; (404370 <m2m_wifi_connect_sc+0x22c>)
  4042f4:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  4042f6:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  4042fa:	e765      	b.n	4041c8 <m2m_wifi_connect_sc+0x84>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
  4042fc:	4630      	mov	r0, r6
  4042fe:	4b1d      	ldr	r3, [pc, #116]	; (404374 <m2m_wifi_connect_sc+0x230>)
  404300:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
  404302:	1e43      	subs	r3, r0, #1
  404304:	b29b      	uxth	r3, r3
  404306:	2b3f      	cmp	r3, #63	; 0x3f
  404308:	d805      	bhi.n	404316 <m2m_wifi_connect_sc+0x1d2>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
  40430a:	1c42      	adds	r2, r0, #1
  40430c:	4631      	mov	r1, r6
  40430e:	a805      	add	r0, sp, #20
  404310:	4b11      	ldr	r3, [pc, #68]	; (404358 <m2m_wifi_connect_sc+0x214>)
  404312:	4798      	blx	r3
  404314:	e74e      	b.n	4041b4 <m2m_wifi_connect_sc+0x70>
			M2M_ERR("Incorrect PSK key length\n");
  404316:	f240 224f 	movw	r2, #591	; 0x24f
  40431a:	4911      	ldr	r1, [pc, #68]	; (404360 <m2m_wifi_connect_sc+0x21c>)
  40431c:	4811      	ldr	r0, [pc, #68]	; (404364 <m2m_wifi_connect_sc+0x220>)
  40431e:	4c12      	ldr	r4, [pc, #72]	; (404368 <m2m_wifi_connect_sc+0x224>)
  404320:	47a0      	blx	r4
  404322:	481a      	ldr	r0, [pc, #104]	; (40438c <m2m_wifi_connect_sc+0x248>)
  404324:	47a0      	blx	r4
  404326:	4812      	ldr	r0, [pc, #72]	; (404370 <m2m_wifi_connect_sc+0x22c>)
  404328:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  40432a:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  40432e:	e74b      	b.n	4041c8 <m2m_wifi_connect_sc+0x84>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
  404330:	223e      	movs	r2, #62	; 0x3e
  404332:	4631      	mov	r1, r6
  404334:	a805      	add	r0, sp, #20
  404336:	4b08      	ldr	r3, [pc, #32]	; (404358 <m2m_wifi_connect_sc+0x214>)
  404338:	4798      	blx	r3
  40433a:	e73b      	b.n	4041b4 <m2m_wifi_connect_sc+0x70>
		M2M_ERR("undefined sec type\n");
  40433c:	f240 225f 	movw	r2, #607	; 0x25f
  404340:	4907      	ldr	r1, [pc, #28]	; (404360 <m2m_wifi_connect_sc+0x21c>)
  404342:	4808      	ldr	r0, [pc, #32]	; (404364 <m2m_wifi_connect_sc+0x220>)
  404344:	4c08      	ldr	r4, [pc, #32]	; (404368 <m2m_wifi_connect_sc+0x224>)
  404346:	47a0      	blx	r4
  404348:	4811      	ldr	r0, [pc, #68]	; (404390 <m2m_wifi_connect_sc+0x24c>)
  40434a:	47a0      	blx	r4
  40434c:	4808      	ldr	r0, [pc, #32]	; (404370 <m2m_wifi_connect_sc+0x22c>)
  40434e:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  404350:	f06f 000b 	mvn.w	r0, #11
		goto ERR1;
  404354:	e738      	b.n	4041c8 <m2m_wifi_connect_sc+0x84>
  404356:	bf00      	nop
  404358:	00403545 	.word	0x00403545
  40435c:	004036bd 	.word	0x004036bd
  404360:	0040de30 	.word	0x0040de30
  404364:	0040db74 	.word	0x0040db74
  404368:	00407321 	.word	0x00407321
  40436c:	0040de84 	.word	0x0040de84
  404370:	0040e928 	.word	0x0040e928
  404374:	00403567 	.word	0x00403567
  404378:	0040de98 	.word	0x0040de98
  40437c:	0040dea8 	.word	0x0040dea8
  404380:	0040debc 	.word	0x0040debc
  404384:	0040dec8 	.word	0x0040dec8
  404388:	0040dee4 	.word	0x0040dee4
  40438c:	0040df00 	.word	0x0040df00
  404390:	0040df1c 	.word	0x0040df1c

00404394 <m2m_wifi_connect>:
{
  404394:	b510      	push	{r4, lr}
  404396:	b082      	sub	sp, #8
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
  404398:	2400      	movs	r4, #0
  40439a:	9401      	str	r4, [sp, #4]
  40439c:	f8bd 4010 	ldrh.w	r4, [sp, #16]
  4043a0:	9400      	str	r4, [sp, #0]
  4043a2:	4c02      	ldr	r4, [pc, #8]	; (4043ac <m2m_wifi_connect+0x18>)
  4043a4:	47a0      	blx	r4
}
  4043a6:	b002      	add	sp, #8
  4043a8:	bd10      	pop	{r4, pc}
  4043aa:	bf00      	nop
  4043ac:	00404145 	.word	0x00404145

004043b0 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
  4043b0:	2000      	movs	r0, #0
  4043b2:	4770      	bx	lr

004043b4 <chip_apply_conf>:
#define M2M_DISABLE_PS				(0xd0ul)

static uint32 clk_status_reg_adr = 0xf; /* Assume initially it is B0 chip */

sint8 chip_apply_conf(uint32 u32Conf)
{
  4043b4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4043b6:	b083      	sub	sp, #12
  4043b8:	4604      	mov	r4, r0
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
  4043ba:	f44f 55a5 	mov.w	r5, #5280	; 0x14a0
  4043be:	4e0a      	ldr	r6, [pc, #40]	; (4043e8 <chip_apply_conf+0x34>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
  4043c0:	4f0a      	ldr	r7, [pc, #40]	; (4043ec <chip_apply_conf+0x38>)
		nm_write_reg(rNMI_GP_REG_1, val32);
  4043c2:	4621      	mov	r1, r4
  4043c4:	4628      	mov	r0, r5
  4043c6:	47b0      	blx	r6
		if(val32 != 0) {		
  4043c8:	b154      	cbz	r4, 4043e0 <chip_apply_conf+0x2c>
			uint32 reg = 0;
  4043ca:	a902      	add	r1, sp, #8
  4043cc:	2300      	movs	r3, #0
  4043ce:	f841 3d04 	str.w	r3, [r1, #-4]!
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
  4043d2:	4628      	mov	r0, r5
  4043d4:	47b8      	blx	r7
			if(ret == M2M_SUCCESS) {
  4043d6:	2800      	cmp	r0, #0
  4043d8:	d1f3      	bne.n	4043c2 <chip_apply_conf+0xe>
				if(reg == val32)
  4043da:	9b01      	ldr	r3, [sp, #4]
  4043dc:	429c      	cmp	r4, r3
  4043de:	d1f0      	bne.n	4043c2 <chip_apply_conf+0xe>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
  4043e0:	2000      	movs	r0, #0
  4043e2:	b003      	add	sp, #12
  4043e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4043e6:	bf00      	nop
  4043e8:	0040488d 	.word	0x0040488d
  4043ec:	00404881 	.word	0x00404881

004043f0 <nm_clkless_wake>:
*	@author	Samer Sarhan
*	@date	06 June 2014
*	@version	1.0
*/
sint8 nm_clkless_wake(void)
{
  4043f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4043f4:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg, clk_status_reg,trials = 0;
	/* wait 1ms, spi data read */
	nm_bsp_sleep(1);
  4043f6:	2001      	movs	r0, #1
  4043f8:	4b3c      	ldr	r3, [pc, #240]	; (4044ec <nm_clkless_wake+0xfc>)
  4043fa:	4798      	blx	r3
	ret = nm_read_reg_with_ret(0x1, &reg);
  4043fc:	a901      	add	r1, sp, #4
  4043fe:	2001      	movs	r0, #1
  404400:	4b3b      	ldr	r3, [pc, #236]	; (4044f0 <nm_clkless_wake+0x100>)
  404402:	4798      	blx	r3
	if(ret != M2M_SUCCESS) {
  404404:	4682      	mov	sl, r0
  404406:	b938      	cbnz	r0, 404418 <nm_clkless_wake+0x28>
  404408:	2400      	movs	r4, #0
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
  40440a:	f04f 0801 	mov.w	r8, #1
  40440e:	f8df 9108 	ldr.w	r9, [pc, #264]	; 404518 <nm_clkless_wake+0x128>
		/* wait 1ms, spi data read */
		nm_bsp_sleep(1);
  404412:	4d36      	ldr	r5, [pc, #216]	; (4044ec <nm_clkless_wake+0xfc>)
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
  404414:	4f37      	ldr	r7, [pc, #220]	; (4044f4 <nm_clkless_wake+0x104>)
  404416:	e020      	b.n	40445a <nm_clkless_wake+0x6a>
		M2M_ERR("Bus error (1). Wake up failed\n");
  404418:	2272      	movs	r2, #114	; 0x72
  40441a:	4937      	ldr	r1, [pc, #220]	; (4044f8 <nm_clkless_wake+0x108>)
  40441c:	4837      	ldr	r0, [pc, #220]	; (4044fc <nm_clkless_wake+0x10c>)
  40441e:	4c38      	ldr	r4, [pc, #224]	; (404500 <nm_clkless_wake+0x110>)
  404420:	47a0      	blx	r4
  404422:	4838      	ldr	r0, [pc, #224]	; (404504 <nm_clkless_wake+0x114>)
  404424:	47a0      	blx	r4
  404426:	4838      	ldr	r0, [pc, #224]	; (404508 <nm_clkless_wake+0x118>)
  404428:	47a0      	blx	r4
		goto _WAKE_EXIT;
  40442a:	e009      	b.n	404440 <nm_clkless_wake+0x50>
					M2M_ERR("Bus error (2). Wake up failed\n");
  40442c:	2296      	movs	r2, #150	; 0x96
  40442e:	4932      	ldr	r1, [pc, #200]	; (4044f8 <nm_clkless_wake+0x108>)
  404430:	4832      	ldr	r0, [pc, #200]	; (4044fc <nm_clkless_wake+0x10c>)
  404432:	4c33      	ldr	r4, [pc, #204]	; (404500 <nm_clkless_wake+0x110>)
  404434:	47a0      	blx	r4
  404436:	4835      	ldr	r0, [pc, #212]	; (40450c <nm_clkless_wake+0x11c>)
  404438:	47a0      	blx	r4
  40443a:	4833      	ldr	r0, [pc, #204]	; (404508 <nm_clkless_wake+0x118>)
  40443c:	47a0      	blx	r4
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  40443e:	46b2      	mov	sl, r6
		}
	} while((clk_status_reg & 0x4) == 0);

_WAKE_EXIT:
	return ret;
}
  404440:	4650      	mov	r0, sl
  404442:	b003      	add	sp, #12
  404444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			nm_write_reg(0x1, reg | (1 << 1));
  404448:	9901      	ldr	r1, [sp, #4]
  40444a:	f041 0102 	orr.w	r1, r1, #2
  40444e:	4640      	mov	r0, r8
  404450:	47c8      	blx	r9
	} while((clk_status_reg & 0x4) == 0);
  404452:	9b00      	ldr	r3, [sp, #0]
  404454:	f013 0f04 	tst.w	r3, #4
  404458:	d1f2      	bne.n	404440 <nm_clkless_wake+0x50>
		nm_write_reg(0x1, reg | (1 << 1));
  40445a:	9901      	ldr	r1, [sp, #4]
  40445c:	f041 0102 	orr.w	r1, r1, #2
  404460:	4640      	mov	r0, r8
  404462:	47c8      	blx	r9
		nm_bsp_sleep(1);
  404464:	4640      	mov	r0, r8
  404466:	47a8      	blx	r5
		ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  404468:	4669      	mov	r1, sp
  40446a:	4b29      	ldr	r3, [pc, #164]	; (404510 <nm_clkless_wake+0x120>)
  40446c:	6818      	ldr	r0, [r3, #0]
  40446e:	4b20      	ldr	r3, [pc, #128]	; (4044f0 <nm_clkless_wake+0x100>)
  404470:	4798      	blx	r3
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
  404472:	b908      	cbnz	r0, 404478 <nm_clkless_wake+0x88>
  404474:	9b00      	ldr	r3, [sp, #0]
  404476:	b9bb      	cbnz	r3, 4044a8 <nm_clkless_wake+0xb8>
			clk_status_reg_adr = 0xe;
  404478:	4e25      	ldr	r6, [pc, #148]	; (404510 <nm_clkless_wake+0x120>)
  40447a:	230e      	movs	r3, #14
  40447c:	6033      	str	r3, [r6, #0]
			nm_bsp_sleep(1);
  40447e:	4640      	mov	r0, r8
  404480:	47a8      	blx	r5
			ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  404482:	4669      	mov	r1, sp
  404484:	6830      	ldr	r0, [r6, #0]
  404486:	4b1a      	ldr	r3, [pc, #104]	; (4044f0 <nm_clkless_wake+0x100>)
  404488:	4798      	blx	r3
			if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
  40448a:	b908      	cbnz	r0, 404490 <nm_clkless_wake+0xa0>
  40448c:	9b00      	ldr	r3, [sp, #0]
  40448e:	b95b      	cbnz	r3, 4044a8 <nm_clkless_wake+0xb8>
				clk_status_reg_adr = 0x13;
  404490:	4e1f      	ldr	r6, [pc, #124]	; (404510 <nm_clkless_wake+0x120>)
  404492:	2313      	movs	r3, #19
  404494:	6033      	str	r3, [r6, #0]
				nm_bsp_sleep(1);
  404496:	4640      	mov	r0, r8
  404498:	47a8      	blx	r5
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  40449a:	4669      	mov	r1, sp
  40449c:	6830      	ldr	r0, [r6, #0]
  40449e:	4b14      	ldr	r3, [pc, #80]	; (4044f0 <nm_clkless_wake+0x100>)
  4044a0:	4798      	blx	r3
				if(ret != M2M_SUCCESS) {
  4044a2:	4606      	mov	r6, r0
  4044a4:	2800      	cmp	r0, #0
  4044a6:	d1c1      	bne.n	40442c <nm_clkless_wake+0x3c>
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  4044a8:	4e19      	ldr	r6, [pc, #100]	; (404510 <nm_clkless_wake+0x120>)
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
  4044aa:	9b00      	ldr	r3, [sp, #0]
  4044ac:	f013 0f04 	tst.w	r3, #4
  4044b0:	d1c6      	bne.n	404440 <nm_clkless_wake+0x50>
  4044b2:	3401      	adds	r4, #1
  4044b4:	fba7 2304 	umull	r2, r3, r7, r4
  4044b8:	085b      	lsrs	r3, r3, #1
  4044ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  4044be:	429c      	cmp	r4, r3
  4044c0:	d1c2      	bne.n	404448 <nm_clkless_wake+0x58>
			nm_bsp_sleep(2);
  4044c2:	2002      	movs	r0, #2
  4044c4:	47a8      	blx	r5
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  4044c6:	4669      	mov	r1, sp
  4044c8:	6830      	ldr	r0, [r6, #0]
  4044ca:	4b09      	ldr	r3, [pc, #36]	; (4044f0 <nm_clkless_wake+0x100>)
  4044cc:	4798      	blx	r3
			if((clk_status_reg & 0x4) == 0)
  4044ce:	9b00      	ldr	r3, [sp, #0]
  4044d0:	f013 0f04 	tst.w	r3, #4
  4044d4:	d1e9      	bne.n	4044aa <nm_clkless_wake+0xba>
				M2M_ERR("clocks still OFF. Wake up failed\n");
  4044d6:	22aa      	movs	r2, #170	; 0xaa
  4044d8:	4907      	ldr	r1, [pc, #28]	; (4044f8 <nm_clkless_wake+0x108>)
  4044da:	4808      	ldr	r0, [pc, #32]	; (4044fc <nm_clkless_wake+0x10c>)
  4044dc:	f8df b020 	ldr.w	fp, [pc, #32]	; 404500 <nm_clkless_wake+0x110>
  4044e0:	47d8      	blx	fp
  4044e2:	480c      	ldr	r0, [pc, #48]	; (404514 <nm_clkless_wake+0x124>)
  4044e4:	47d8      	blx	fp
  4044e6:	4808      	ldr	r0, [pc, #32]	; (404508 <nm_clkless_wake+0x118>)
  4044e8:	47d8      	blx	fp
  4044ea:	e7de      	b.n	4044aa <nm_clkless_wake+0xba>
  4044ec:	004031a1 	.word	0x004031a1
  4044f0:	00404881 	.word	0x00404881
  4044f4:	aaaaaaab 	.word	0xaaaaaaab
  4044f8:	0040dfa0 	.word	0x0040dfa0
  4044fc:	0040db74 	.word	0x0040db74
  404500:	00407321 	.word	0x00407321
  404504:	0040e010 	.word	0x0040e010
  404508:	0040e928 	.word	0x0040e928
  40450c:	0040e030 	.word	0x0040e030
  404510:	20400034 	.word	0x20400034
  404514:	0040e050 	.word	0x0040e050
  404518:	0040488d 	.word	0x0040488d

0040451c <enable_interrupts>:
	nm_write_reg(0x6, 0x0);
	nm_write_reg(0x7, 0x0);
}

sint8 enable_interrupts(void)
{
  40451c:	b500      	push	{lr}
  40451e:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
  404520:	a901      	add	r1, sp, #4
  404522:	f241 4008 	movw	r0, #5128	; 0x1408
  404526:	4b15      	ldr	r3, [pc, #84]	; (40457c <enable_interrupts+0x60>)
  404528:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  40452a:	b9e8      	cbnz	r0, 404568 <enable_interrupts+0x4c>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 8);
  40452c:	9901      	ldr	r1, [sp, #4]
  40452e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  404532:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
  404534:	f241 4008 	movw	r0, #5128	; 0x1408
  404538:	4b11      	ldr	r3, [pc, #68]	; (404580 <enable_interrupts+0x64>)
  40453a:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  40453c:	b9b8      	cbnz	r0, 40456e <enable_interrupts+0x52>
		return M2M_ERR_BUS_FAIL;
	}
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
  40453e:	a901      	add	r1, sp, #4
  404540:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
  404544:	4b0d      	ldr	r3, [pc, #52]	; (40457c <enable_interrupts+0x60>)
  404546:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  404548:	b9a0      	cbnz	r0, 404574 <enable_interrupts+0x58>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 16);
  40454a:	9901      	ldr	r1, [sp, #4]
  40454c:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  404550:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
  404552:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
  404556:	4b0a      	ldr	r3, [pc, #40]	; (404580 <enable_interrupts+0x64>)
  404558:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  40455a:	2800      	cmp	r0, #0
		return M2M_ERR_BUS_FAIL;
  40455c:	bf18      	it	ne
  40455e:	f06f 0005 	mvnne.w	r0, #5
	}
	return M2M_SUCCESS;
}
  404562:	b003      	add	sp, #12
  404564:	f85d fb04 	ldr.w	pc, [sp], #4
		return M2M_ERR_BUS_FAIL;
  404568:	f06f 0005 	mvn.w	r0, #5
  40456c:	e7f9      	b.n	404562 <enable_interrupts+0x46>
		return M2M_ERR_BUS_FAIL;
  40456e:	f06f 0005 	mvn.w	r0, #5
  404572:	e7f6      	b.n	404562 <enable_interrupts+0x46>
		return M2M_ERR_BUS_FAIL;
  404574:	f06f 0005 	mvn.w	r0, #5
  404578:	e7f3      	b.n	404562 <enable_interrupts+0x46>
  40457a:	bf00      	nop
  40457c:	00404881 	.word	0x00404881
  404580:	0040488d 	.word	0x0040488d

00404584 <nmi_get_chipid>:
	nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
	return ret;
}

uint32 nmi_get_chipid(void)
{
  404584:	b510      	push	{r4, lr}
  404586:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
  404588:	4b25      	ldr	r3, [pc, #148]	; (404620 <nmi_get_chipid+0x9c>)
  40458a:	681c      	ldr	r4, [r3, #0]
  40458c:	b124      	cbz	r4, 404598 <nmi_get_chipid+0x14>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
  40458e:	4b24      	ldr	r3, [pc, #144]	; (404620 <nmi_get_chipid+0x9c>)
  404590:	681c      	ldr	r4, [r3, #0]
}
  404592:	4620      	mov	r0, r4
  404594:	b002      	add	sp, #8
  404596:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
  404598:	4619      	mov	r1, r3
  40459a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  40459e:	4b21      	ldr	r3, [pc, #132]	; (404624 <nmi_get_chipid+0xa0>)
  4045a0:	4798      	blx	r3
  4045a2:	b118      	cbz	r0, 4045ac <nmi_get_chipid+0x28>
			chipid = 0;
  4045a4:	2200      	movs	r2, #0
  4045a6:	4b1e      	ldr	r3, [pc, #120]	; (404620 <nmi_get_chipid+0x9c>)
  4045a8:	601a      	str	r2, [r3, #0]
			return 0;
  4045aa:	e7f2      	b.n	404592 <nmi_get_chipid+0xe>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
  4045ac:	a901      	add	r1, sp, #4
  4045ae:	f241 30f4 	movw	r0, #5108	; 0x13f4
  4045b2:	4b1c      	ldr	r3, [pc, #112]	; (404624 <nmi_get_chipid+0xa0>)
  4045b4:	4798      	blx	r3
  4045b6:	b118      	cbz	r0, 4045c0 <nmi_get_chipid+0x3c>
			chipid = 0;
  4045b8:	2200      	movs	r2, #0
  4045ba:	4b19      	ldr	r3, [pc, #100]	; (404620 <nmi_get_chipid+0x9c>)
  4045bc:	601a      	str	r2, [r3, #0]
			return 0;
  4045be:	e7e8      	b.n	404592 <nmi_get_chipid+0xe>
		if (chipid == 0x1002a0)  {
  4045c0:	4b17      	ldr	r3, [pc, #92]	; (404620 <nmi_get_chipid+0x9c>)
  4045c2:	681b      	ldr	r3, [r3, #0]
  4045c4:	4a18      	ldr	r2, [pc, #96]	; (404628 <nmi_get_chipid+0xa4>)
  4045c6:	4293      	cmp	r3, r2
  4045c8:	d00d      	beq.n	4045e6 <nmi_get_chipid+0x62>
		} else if(chipid == 0x1002b0) {
  4045ca:	4a18      	ldr	r2, [pc, #96]	; (40462c <nmi_get_chipid+0xa8>)
  4045cc:	4293      	cmp	r3, r2
  4045ce:	d011      	beq.n	4045f4 <nmi_get_chipid+0x70>
		} else if(chipid == 0x1000F0) { 
  4045d0:	4a17      	ldr	r2, [pc, #92]	; (404630 <nmi_get_chipid+0xac>)
  4045d2:	4293      	cmp	r3, r2
  4045d4:	d018      	beq.n	404608 <nmi_get_chipid+0x84>
		chipid |= 0x050000;
  4045d6:	4a12      	ldr	r2, [pc, #72]	; (404620 <nmi_get_chipid+0x9c>)
		chipid &= ~(0x0f0000);
  4045d8:	6813      	ldr	r3, [r2, #0]
  4045da:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
		chipid |= 0x050000;
  4045de:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
  4045e2:	6013      	str	r3, [r2, #0]
  4045e4:	e7d3      	b.n	40458e <nmi_get_chipid+0xa>
			if (rfrevid == 0x1) { /* 1002A0 */
  4045e6:	9b01      	ldr	r3, [sp, #4]
  4045e8:	2b01      	cmp	r3, #1
  4045ea:	d0f4      	beq.n	4045d6 <nmi_get_chipid+0x52>
				chipid = 0x1002a1;
  4045ec:	3201      	adds	r2, #1
  4045ee:	4b0c      	ldr	r3, [pc, #48]	; (404620 <nmi_get_chipid+0x9c>)
  4045f0:	601a      	str	r2, [r3, #0]
  4045f2:	e7f0      	b.n	4045d6 <nmi_get_chipid+0x52>
			if(rfrevid == 3) { /* 1002B0 */
  4045f4:	9b01      	ldr	r3, [sp, #4]
  4045f6:	2b03      	cmp	r3, #3
  4045f8:	d0ed      	beq.n	4045d6 <nmi_get_chipid+0x52>
			} else if(rfrevid == 4) { /* 1002B1 */
  4045fa:	2b04      	cmp	r3, #4
				chipid = 0x1002b1;
  4045fc:	bf0c      	ite	eq
  4045fe:	3201      	addeq	r2, #1
				chipid = 0x1002b2;
  404600:	4a0c      	ldrne	r2, [pc, #48]	; (404634 <nmi_get_chipid+0xb0>)
  404602:	4b07      	ldr	r3, [pc, #28]	; (404620 <nmi_get_chipid+0x9c>)
  404604:	601a      	str	r2, [r3, #0]
  404606:	e7e6      	b.n	4045d6 <nmi_get_chipid+0x52>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
  404608:	4905      	ldr	r1, [pc, #20]	; (404620 <nmi_get_chipid+0x9c>)
  40460a:	f44f 106c 	mov.w	r0, #3866624	; 0x3b0000
  40460e:	4b05      	ldr	r3, [pc, #20]	; (404624 <nmi_get_chipid+0xa0>)
  404610:	4798      	blx	r3
  404612:	2800      	cmp	r0, #0
  404614:	d0df      	beq.n	4045d6 <nmi_get_chipid+0x52>
			chipid = 0;
  404616:	2200      	movs	r2, #0
  404618:	4b01      	ldr	r3, [pc, #4]	; (404620 <nmi_get_chipid+0x9c>)
  40461a:	601a      	str	r2, [r3, #0]
			return 0;
  40461c:	e7b9      	b.n	404592 <nmi_get_chipid+0xe>
  40461e:	bf00      	nop
  404620:	20400a74 	.word	0x20400a74
  404624:	00404881 	.word	0x00404881
  404628:	001002a0 	.word	0x001002a0
  40462c:	001002b0 	.word	0x001002b0
  404630:	001000f0 	.word	0x001000f0
  404634:	001002b2 	.word	0x001002b2

00404638 <wait_for_bootrom>:
#endif
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
  404638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40463c:	4607      	mov	r7, r0
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  40463e:	f241 0514 	movw	r5, #4116	; 0x1014
  404642:	4c28      	ldr	r4, [pc, #160]	; (4046e4 <wait_for_bootrom+0xac>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
  404644:	4e28      	ldr	r6, [pc, #160]	; (4046e8 <wait_for_bootrom+0xb0>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  404646:	4628      	mov	r0, r5
  404648:	47a0      	blx	r4
		if (reg & 0x80000000) {
  40464a:	2800      	cmp	r0, #0
  40464c:	db02      	blt.n	404654 <wait_for_bootrom+0x1c>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
  40464e:	2001      	movs	r0, #1
  404650:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  404652:	e7f8      	b.n	404646 <wait_for_bootrom+0xe>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
  404654:	4825      	ldr	r0, [pc, #148]	; (4046ec <wait_for_bootrom+0xb4>)
  404656:	4b23      	ldr	r3, [pc, #140]	; (4046e4 <wait_for_bootrom+0xac>)
  404658:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
  40465a:	f010 0f01 	tst.w	r0, #1
  40465e:	d110      	bne.n	404682 <wait_for_bootrom+0x4a>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
  404660:	f8df 8084 	ldr.w	r8, [pc, #132]	; 4046e8 <wait_for_bootrom+0xb0>
			reg = nm_read_reg(BOOTROM_REG);
  404664:	4e1f      	ldr	r6, [pc, #124]	; (4046e4 <wait_for_bootrom+0xac>)

			printf("reg:%x / %x \n",reg, M2M_FINISH_BOOT_ROM );
  404666:	4d22      	ldr	r5, [pc, #136]	; (4046f0 <wait_for_bootrom+0xb8>)
			nm_bsp_sleep(1);
  404668:	2001      	movs	r0, #1
  40466a:	47c0      	blx	r8
			reg = nm_read_reg(BOOTROM_REG);
  40466c:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
  404670:	47b0      	blx	r6
  404672:	4604      	mov	r4, r0
			printf("reg:%x / %x \n",reg, M2M_FINISH_BOOT_ROM );
  404674:	462a      	mov	r2, r5
  404676:	4601      	mov	r1, r0
  404678:	481e      	ldr	r0, [pc, #120]	; (4046f4 <wait_for_bootrom+0xbc>)
  40467a:	4b1f      	ldr	r3, [pc, #124]	; (4046f8 <wait_for_bootrom+0xc0>)
  40467c:	4798      	blx	r3
		while(reg != M2M_FINISH_BOOT_ROM)
  40467e:	42ac      	cmp	r4, r5
  404680:	d1f2      	bne.n	404668 <wait_for_bootrom+0x30>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
  404682:	2f02      	cmp	r7, #2
  404684:	d019      	beq.n	4046ba <wait_for_bootrom+0x82>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
  404686:	2f03      	cmp	r7, #3
  404688:	d022      	beq.n	4046d0 <wait_for_bootrom+0x98>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
  40468a:	2f04      	cmp	r7, #4
  40468c:	bf14      	ite	ne
  40468e:	2400      	movne	r4, #0
  404690:	2480      	moveq	r4, #128	; 0x80
	} else {
		/*bypass this step*/
	}

	if(REV(nmi_get_chipid()) == REV_3A0)
  404692:	4b1a      	ldr	r3, [pc, #104]	; (4046fc <wait_for_bootrom+0xc4>)
  404694:	4798      	blx	r3
  404696:	f3c0 000b 	ubfx	r0, r0, #0, #12
  40469a:	f5b0 7f68 	cmp.w	r0, #928	; 0x3a0
	{
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
  40469e:	bf0c      	ite	eq
  4046a0:	f044 0002 	orreq.w	r0, r4, #2
	}
	else
	{
		chip_apply_conf(u32GpReg1);
  4046a4:	4620      	movne	r0, r4
  4046a6:	4b16      	ldr	r3, [pc, #88]	; (404700 <wait_for_bootrom+0xc8>)
  4046a8:	4798      	blx	r3
	}
	
	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
  4046aa:	4916      	ldr	r1, [pc, #88]	; (404704 <wait_for_bootrom+0xcc>)
  4046ac:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
  4046b0:	4b15      	ldr	r3, [pc, #84]	; (404708 <wait_for_bootrom+0xd0>)
  4046b2:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
  4046b4:	2000      	movs	r0, #0
  4046b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
  4046ba:	4914      	ldr	r1, [pc, #80]	; (40470c <wait_for_bootrom+0xd4>)
  4046bc:	4814      	ldr	r0, [pc, #80]	; (404710 <wait_for_bootrom+0xd8>)
  4046be:	4c12      	ldr	r4, [pc, #72]	; (404708 <wait_for_bootrom+0xd0>)
  4046c0:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
  4046c2:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  4046c6:	f241 008c 	movw	r0, #4236	; 0x108c
  4046ca:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
  4046cc:	2400      	movs	r4, #0
  4046ce:	e7e0      	b.n	404692 <wait_for_bootrom+0x5a>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
  4046d0:	490e      	ldr	r1, [pc, #56]	; (40470c <wait_for_bootrom+0xd4>)
  4046d2:	480f      	ldr	r0, [pc, #60]	; (404710 <wait_for_bootrom+0xd8>)
  4046d4:	4c0c      	ldr	r4, [pc, #48]	; (404708 <wait_for_bootrom+0xd0>)
  4046d6:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
  4046d8:	2100      	movs	r1, #0
  4046da:	f241 008c 	movw	r0, #4236	; 0x108c
  4046de:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
  4046e0:	2400      	movs	r4, #0
  4046e2:	e7d6      	b.n	404692 <wait_for_bootrom+0x5a>
  4046e4:	00404875 	.word	0x00404875
  4046e8:	004031a1 	.word	0x004031a1
  4046ec:	000207bc 	.word	0x000207bc
  4046f0:	10add09e 	.word	0x10add09e
  4046f4:	0040e074 	.word	0x0040e074
  4046f8:	00407321 	.word	0x00407321
  4046fc:	00404585 	.word	0x00404585
  404700:	004043b5 	.word	0x004043b5
  404704:	ef522f61 	.word	0xef522f61
  404708:	0040488d 	.word	0x0040488d
  40470c:	3c1cd57d 	.word	0x3c1cd57d
  404710:	000207ac 	.word	0x000207ac

00404714 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
  404714:	b5f0      	push	{r4, r5, r6, r7, lr}
  404716:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
  404718:	f241 038c 	movw	r3, #4236	; 0x108c
  40471c:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
  40471e:	4b18      	ldr	r3, [pc, #96]	; (404780 <wait_for_firmware_start+0x6c>)
  404720:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
  404722:	3802      	subs	r0, #2
  404724:	b2c0      	uxtb	r0, r0
  404726:	2801      	cmp	r0, #1
  404728:	d911      	bls.n	40474e <wait_for_firmware_start+0x3a>
{
  40472a:	f04f 34ff 	mov.w	r4, #4294967295
  40472e:	2000      	movs	r0, #0
	
	
	while (checkValue != reg)
	{
	
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
  404730:	2702      	movs	r7, #2
  404732:	4e14      	ldr	r6, [pc, #80]	; (404784 <wait_for_firmware_start+0x70>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
  404734:	4d14      	ldr	r5, [pc, #80]	; (404788 <wait_for_firmware_start+0x74>)
	while (checkValue != reg)
  404736:	9b00      	ldr	r3, [sp, #0]
  404738:	4298      	cmp	r0, r3
  40473a:	d012      	beq.n	404762 <wait_for_firmware_start+0x4e>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
  40473c:	4638      	mov	r0, r7
  40473e:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
  404740:	9801      	ldr	r0, [sp, #4]
  404742:	47a8      	blx	r5
		if(++cnt >= u32Timeout)
  404744:	3c01      	subs	r4, #1
  404746:	d1f6      	bne.n	404736 <wait_for_firmware_start+0x22>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
  404748:	f06f 0004 	mvn.w	r0, #4
  40474c:	e00e      	b.n	40476c <wait_for_firmware_start+0x58>
		regAddress = NMI_REV_REG;
  40474e:	4b0f      	ldr	r3, [pc, #60]	; (40478c <wait_for_firmware_start+0x78>)
  404750:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
  404752:	f1a3 5322 	sub.w	r3, r3, #679477248	; 0x28800000
  404756:	f5a3 1311 	sub.w	r3, r3, #2375680	; 0x244000
  40475a:	f2a3 53e9 	subw	r3, r3, #1513	; 0x5e9
  40475e:	9300      	str	r3, [sp, #0]
  404760:	e7e3      	b.n	40472a <wait_for_firmware_start+0x16>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
  404762:	9a00      	ldr	r2, [sp, #0]
  404764:	4b06      	ldr	r3, [pc, #24]	; (404780 <wait_for_firmware_start+0x6c>)
  404766:	429a      	cmp	r2, r3
  404768:	d002      	beq.n	404770 <wait_for_firmware_start+0x5c>
	sint8 ret = M2M_SUCCESS;
  40476a:	2000      	movs	r0, #0
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
  40476c:	b003      	add	sp, #12
  40476e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nm_write_reg(NMI_STATE_REG, 0);
  404770:	2100      	movs	r1, #0
  404772:	f241 008c 	movw	r0, #4236	; 0x108c
  404776:	4b06      	ldr	r3, [pc, #24]	; (404790 <wait_for_firmware_start+0x7c>)
  404778:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
  40477a:	2000      	movs	r0, #0
  40477c:	e7f6      	b.n	40476c <wait_for_firmware_start+0x58>
  40477e:	bf00      	nop
  404780:	02532636 	.word	0x02532636
  404784:	004031a1 	.word	0x004031a1
  404788:	00404875 	.word	0x00404875
  40478c:	000207ac 	.word	0x000207ac
  404790:	0040488d 	.word	0x0040488d

00404794 <chip_deinit>:

sint8 chip_deinit(void)
{
  404794:	b5f0      	push	{r4, r5, r6, r7, lr}
  404796:	b083      	sub	sp, #12
	uint32 reg = 0;
  404798:	a902      	add	r1, sp, #8
  40479a:	2300      	movs	r3, #0
  40479c:	f841 3d04 	str.w	r3, [r1, #-4]!
	uint8 timeout = 10;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  4047a0:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  4047a4:	4b24      	ldr	r3, [pc, #144]	; (404838 <chip_deinit+0xa4>)
  4047a6:	4798      	blx	r3
	if (ret != M2M_SUCCESS) {
  4047a8:	bb20      	cbnz	r0, 4047f4 <chip_deinit+0x60>
		M2M_ERR("failed to de-initialize\n");
	}
	reg &= ~(1 << 10);
  4047aa:	9901      	ldr	r1, [sp, #4]
  4047ac:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  4047b0:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  4047b2:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  4047b6:	4b21      	ldr	r3, [pc, #132]	; (40483c <chip_deinit+0xa8>)
  4047b8:	4798      	blx	r3

	if (ret != M2M_SUCCESS) {
  4047ba:	4605      	mov	r5, r0
  4047bc:	bb28      	cbnz	r0, 40480a <chip_deinit+0x76>
  4047be:	240a      	movs	r4, #10
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  4047c0:	4e1d      	ldr	r6, [pc, #116]	; (404838 <chip_deinit+0xa4>)
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  4047c2:	4f1e      	ldr	r7, [pc, #120]	; (40483c <chip_deinit+0xa8>)
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  4047c4:	a901      	add	r1, sp, #4
  4047c6:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  4047ca:	47b0      	blx	r6
		if (ret != M2M_SUCCESS) {
  4047cc:	4605      	mov	r5, r0
  4047ce:	bb38      	cbnz	r0, 404820 <chip_deinit+0x8c>
		if ((reg & (1 << 10))) {
  4047d0:	9901      	ldr	r1, [sp, #4]
  4047d2:	f411 6f80 	tst.w	r1, #1024	; 0x400
  4047d6:	d00a      	beq.n	4047ee <chip_deinit+0x5a>
			reg &= ~(1 << 10);
  4047d8:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  4047dc:	9101      	str	r1, [sp, #4]
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  4047de:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  4047e2:	47b8      	blx	r7
  4047e4:	4605      	mov	r5, r0
  4047e6:	1e63      	subs	r3, r4, #1
			timeout--;
		} else {
			break;
		}

	} while (timeout);
  4047e8:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  4047ec:	d1ea      	bne.n	4047c4 <chip_deinit+0x30>

	return ret;
}
  4047ee:	4628      	mov	r0, r5
  4047f0:	b003      	add	sp, #12
  4047f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		M2M_ERR("failed to de-initialize\n");
  4047f4:	f240 2231 	movw	r2, #561	; 0x231
  4047f8:	4911      	ldr	r1, [pc, #68]	; (404840 <chip_deinit+0xac>)
  4047fa:	4812      	ldr	r0, [pc, #72]	; (404844 <chip_deinit+0xb0>)
  4047fc:	4c12      	ldr	r4, [pc, #72]	; (404848 <chip_deinit+0xb4>)
  4047fe:	47a0      	blx	r4
  404800:	4812      	ldr	r0, [pc, #72]	; (40484c <chip_deinit+0xb8>)
  404802:	47a0      	blx	r4
  404804:	4812      	ldr	r0, [pc, #72]	; (404850 <chip_deinit+0xbc>)
  404806:	47a0      	blx	r4
  404808:	e7cf      	b.n	4047aa <chip_deinit+0x16>
		M2M_ERR("Error while writing reg\n");
  40480a:	f240 2237 	movw	r2, #567	; 0x237
  40480e:	490c      	ldr	r1, [pc, #48]	; (404840 <chip_deinit+0xac>)
  404810:	480c      	ldr	r0, [pc, #48]	; (404844 <chip_deinit+0xb0>)
  404812:	4c0d      	ldr	r4, [pc, #52]	; (404848 <chip_deinit+0xb4>)
  404814:	47a0      	blx	r4
  404816:	480f      	ldr	r0, [pc, #60]	; (404854 <chip_deinit+0xc0>)
  404818:	47a0      	blx	r4
  40481a:	480d      	ldr	r0, [pc, #52]	; (404850 <chip_deinit+0xbc>)
  40481c:	47a0      	blx	r4
		return ret;
  40481e:	e7e6      	b.n	4047ee <chip_deinit+0x5a>
			M2M_ERR("Error while reading reg\n");
  404820:	f240 223e 	movw	r2, #574	; 0x23e
  404824:	4906      	ldr	r1, [pc, #24]	; (404840 <chip_deinit+0xac>)
  404826:	4807      	ldr	r0, [pc, #28]	; (404844 <chip_deinit+0xb0>)
  404828:	4c07      	ldr	r4, [pc, #28]	; (404848 <chip_deinit+0xb4>)
  40482a:	47a0      	blx	r4
  40482c:	480a      	ldr	r0, [pc, #40]	; (404858 <chip_deinit+0xc4>)
  40482e:	47a0      	blx	r4
  404830:	4807      	ldr	r0, [pc, #28]	; (404850 <chip_deinit+0xbc>)
  404832:	47a0      	blx	r4
			return ret;
  404834:	e7db      	b.n	4047ee <chip_deinit+0x5a>
  404836:	bf00      	nop
  404838:	00404881 	.word	0x00404881
  40483c:	0040488d 	.word	0x0040488d
  404840:	0040dfb0 	.word	0x0040dfb0
  404844:	0040db74 	.word	0x0040db74
  404848:	00407321 	.word	0x00407321
  40484c:	0040dfbc 	.word	0x0040dfbc
  404850:	0040e928 	.word	0x0040e928
  404854:	0040dfd8 	.word	0x0040dfd8
  404858:	0040dff4 	.word	0x0040dff4

0040485c <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
  40485c:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
  40485e:	4b01      	ldr	r3, [pc, #4]	; (404864 <nm_bus_iface_init+0x8>)
  404860:	4798      	blx	r3

	return ret;
}
  404862:	bd08      	pop	{r3, pc}
  404864:	00403315 	.word	0x00403315

00404868 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
  404868:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
  40486a:	4b01      	ldr	r3, [pc, #4]	; (404870 <nm_bus_iface_deinit+0x8>)
  40486c:	4798      	blx	r3

	return ret;
}
  40486e:	bd08      	pop	{r3, pc}
  404870:	00403505 	.word	0x00403505

00404874 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
  404874:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
  404876:	4b01      	ldr	r3, [pc, #4]	; (40487c <nm_read_reg+0x8>)
  404878:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
  40487a:	bd08      	pop	{r3, pc}
  40487c:	004050c9 	.word	0x004050c9

00404880 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
  404880:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
  404882:	4b01      	ldr	r3, [pc, #4]	; (404888 <nm_read_reg_with_ret+0x8>)
  404884:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
  404886:	bd08      	pop	{r3, pc}
  404888:	004050e1 	.word	0x004050e1

0040488c <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
  40488c:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
  40488e:	4b01      	ldr	r3, [pc, #4]	; (404894 <nm_write_reg+0x8>)
  404890:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
  404892:	bd08      	pop	{r3, pc}
  404894:	004050f9 	.word	0x004050f9

00404898 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
  404898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40489c:	4607      	mov	r7, r0
  40489e:	4689      	mov	r9, r1
  4048a0:	4615      	mov	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
  4048a2:	4b12      	ldr	r3, [pc, #72]	; (4048ec <nm_read_block+0x54>)
  4048a4:	f8b3 8000 	ldrh.w	r8, [r3]
  4048a8:	f1a8 0808 	sub.w	r8, r8, #8
  4048ac:	fa1f f888 	uxth.w	r8, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  4048b0:	4542      	cmp	r2, r8
  4048b2:	d919      	bls.n	4048e8 <nm_read_block+0x50>
  4048b4:	4644      	mov	r4, r8
  4048b6:	2600      	movs	r6, #0
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
  4048b8:	f8df a034 	ldr.w	sl, [pc, #52]	; 4048f0 <nm_read_block+0x58>
  4048bc:	4642      	mov	r2, r8
  4048be:	eb09 0106 	add.w	r1, r9, r6
  4048c2:	4638      	mov	r0, r7
  4048c4:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
  4048c6:	4603      	mov	r3, r0
  4048c8:	b958      	cbnz	r0, 4048e2 <nm_read_block+0x4a>
			u32Sz -= u16MaxTrxSz;
  4048ca:	1b2d      	subs	r5, r5, r4
			off += u16MaxTrxSz;
  4048cc:	4426      	add	r6, r4
			u32Addr += u16MaxTrxSz;
  4048ce:	4427      	add	r7, r4
		if(u32Sz <= u16MaxTrxSz)
  4048d0:	42a5      	cmp	r5, r4
  4048d2:	d8f3      	bhi.n	4048bc <nm_read_block+0x24>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
  4048d4:	b2aa      	uxth	r2, r5
  4048d6:	eb09 0106 	add.w	r1, r9, r6
  4048da:	4638      	mov	r0, r7
  4048dc:	4b04      	ldr	r3, [pc, #16]	; (4048f0 <nm_read_block+0x58>)
  4048de:	4798      	blx	r3
  4048e0:	4603      	mov	r3, r0
		}
	}

	return s8Ret;
}
  4048e2:	4618      	mov	r0, r3
  4048e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32 off = 0;
  4048e8:	2600      	movs	r6, #0
  4048ea:	e7f3      	b.n	4048d4 <nm_read_block+0x3c>
  4048ec:	20400030 	.word	0x20400030
  4048f0:	00405225 	.word	0x00405225

004048f4 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
  4048f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4048f8:	4607      	mov	r7, r0
  4048fa:	4689      	mov	r9, r1
  4048fc:	4615      	mov	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
  4048fe:	4b12      	ldr	r3, [pc, #72]	; (404948 <nm_write_block+0x54>)
  404900:	f8b3 8000 	ldrh.w	r8, [r3]
  404904:	f1a8 0808 	sub.w	r8, r8, #8
  404908:	fa1f f888 	uxth.w	r8, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  40490c:	4542      	cmp	r2, r8
  40490e:	d919      	bls.n	404944 <nm_write_block+0x50>
  404910:	4644      	mov	r4, r8
  404912:	2600      	movs	r6, #0
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
  404914:	f8df a034 	ldr.w	sl, [pc, #52]	; 40494c <nm_write_block+0x58>
  404918:	4642      	mov	r2, r8
  40491a:	eb09 0106 	add.w	r1, r9, r6
  40491e:	4638      	mov	r0, r7
  404920:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
  404922:	4603      	mov	r3, r0
  404924:	b958      	cbnz	r0, 40493e <nm_write_block+0x4a>
			u32Sz -= u16MaxTrxSz;
  404926:	1b2d      	subs	r5, r5, r4
			off += u16MaxTrxSz;
  404928:	4426      	add	r6, r4
			u32Addr += u16MaxTrxSz;
  40492a:	4427      	add	r7, r4
		if(u32Sz <= u16MaxTrxSz)
  40492c:	42a5      	cmp	r5, r4
  40492e:	d8f3      	bhi.n	404918 <nm_write_block+0x24>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
  404930:	b2aa      	uxth	r2, r5
  404932:	eb09 0106 	add.w	r1, r9, r6
  404936:	4638      	mov	r0, r7
  404938:	4b04      	ldr	r3, [pc, #16]	; (40494c <nm_write_block+0x58>)
  40493a:	4798      	blx	r3
  40493c:	4603      	mov	r3, r0
		}
	}

	return s8Ret;
}
  40493e:	4618      	mov	r0, r3
  404940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32 off = 0;
  404944:	2600      	movs	r6, #0
  404946:	e7f3      	b.n	404930 <nm_write_block+0x3c>
  404948:	20400030 	.word	0x20400030
  40494c:	004052ed 	.word	0x004052ed

00404950 <nm_get_firmware_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_info(tstrM2mRev* M2mRev)
{
  404950:	b530      	push	{r4, r5, lr}
  404952:	b083      	sub	sp, #12
  404954:	4604      	mov	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
  404956:	a902      	add	r1, sp, #8
  404958:	2300      	movs	r3, #0
  40495a:	f841 3d04 	str.w	r3, [r1, #-4]!
	sint8	ret = M2M_SUCCESS;

	ret = nm_read_reg_with_ret(NMI_REV_REG, &reg);
  40495e:	4824      	ldr	r0, [pc, #144]	; (4049f0 <nm_get_firmware_info+0xa0>)
  404960:	4b24      	ldr	r3, [pc, #144]	; (4049f4 <nm_get_firmware_info+0xa4>)
  404962:	4798      	blx	r3
  404964:	4605      	mov	r5, r0
	//In case the Firmware running is ATE fw
	if(M2M_ATE_FW_IS_UP_VALUE == reg)
  404966:	9a01      	ldr	r2, [sp, #4]
  404968:	4b23      	ldr	r3, [pc, #140]	; (4049f8 <nm_get_firmware_info+0xa8>)
  40496a:	429a      	cmp	r2, r3
  40496c:	d039      	beq.n	4049e2 <nm_get_firmware_info+0x92>
	{
		//Read FW info again from the register specified for ATE
		ret = nm_read_reg_with_ret(NMI_REV_REG_ATE, &reg);
	}
	M2mRev->u8DriverMajor	= M2M_GET_DRV_MAJOR(reg);
  40496e:	9b01      	ldr	r3, [sp, #4]
  404970:	0c1a      	lsrs	r2, r3, #16
  404972:	b291      	uxth	r1, r2
  404974:	0a08      	lsrs	r0, r1, #8
  404976:	71e0      	strb	r0, [r4, #7]
	M2mRev->u8DriverMinor   = M2M_GET_DRV_MINOR(reg);
  404978:	f3c1 1103 	ubfx	r1, r1, #4, #4
  40497c:	7221      	strb	r1, [r4, #8]
	M2mRev->u8DriverPatch	= M2M_GET_DRV_PATCH(reg);
  40497e:	f002 020f 	and.w	r2, r2, #15
  404982:	7262      	strb	r2, [r4, #9]
	M2mRev->u8FirmwareMajor	= M2M_GET_FW_MAJOR(reg);
  404984:	b29a      	uxth	r2, r3
  404986:	0a11      	lsrs	r1, r2, #8
  404988:	7121      	strb	r1, [r4, #4]
	M2mRev->u8FirmwareMinor = M2M_GET_FW_MINOR(reg);
  40498a:	f3c2 1203 	ubfx	r2, r2, #4, #4
  40498e:	7162      	strb	r2, [r4, #5]
	M2mRev->u8FirmwarePatch = M2M_GET_FW_PATCH(reg);
  404990:	f003 030f 	and.w	r3, r3, #15
  404994:	71a3      	strb	r3, [r4, #6]
	M2mRev->u32Chipid	= nmi_get_chipid();
  404996:	4b19      	ldr	r3, [pc, #100]	; (4049fc <nm_get_firmware_info+0xac>)
  404998:	4798      	blx	r3
  40499a:	6020      	str	r0, [r4, #0]
	
	curr_firm_ver   = M2M_MAKE_VERSION(M2mRev->u8FirmwareMajor, M2mRev->u8FirmwareMinor,M2mRev->u8FirmwarePatch);
  40499c:	7922      	ldrb	r2, [r4, #4]
  40499e:	79a3      	ldrb	r3, [r4, #6]
  4049a0:	f003 030f 	and.w	r3, r3, #15
  4049a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4049a8:	7962      	ldrb	r2, [r4, #5]
  4049aa:	0112      	lsls	r2, r2, #4
  4049ac:	b2d2      	uxtb	r2, r2
  4049ae:	4313      	orrs	r3, r2
	curr_drv_ver    = M2M_MAKE_VERSION(M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
	min_req_drv_ver = M2M_MAKE_VERSION(M2mRev->u8DriverMajor, M2mRev->u8DriverMinor,M2mRev->u8DriverPatch);
  4049b0:	79e1      	ldrb	r1, [r4, #7]
  4049b2:	7a62      	ldrb	r2, [r4, #9]
  4049b4:	f002 020f 	and.w	r2, r2, #15
  4049b8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  4049bc:	7a21      	ldrb	r1, [r4, #8]
  4049be:	0109      	lsls	r1, r1, #4
  4049c0:	b2c9      	uxtb	r1, r1
	if(curr_drv_ver <  min_req_drv_ver) {
  4049c2:	430a      	orrs	r2, r1
  4049c4:	f241 3130 	movw	r1, #4912	; 0x1330
		/*The current driver version should be larger or equal 
		than the min driver that the current firmware support  */
		ret = M2M_ERR_FW_VER_MISMATCH;
  4049c8:	428a      	cmp	r2, r1
  4049ca:	bf88      	it	hi
  4049cc:	f06f 050c 	mvnhi.w	r5, #12
	}
	if(curr_drv_ver >  curr_firm_ver) {
  4049d0:	f241 322f 	movw	r2, #4911	; 0x132f
		/*The current driver should be equal or less than the firmware version*/
		ret = M2M_ERR_FW_VER_MISMATCH;
  4049d4:	4293      	cmp	r3, r2
	}
	return ret;
}
  4049d6:	bf8c      	ite	hi
  4049d8:	4628      	movhi	r0, r5
  4049da:	f06f 000c 	mvnls.w	r0, #12
  4049de:	b003      	add	sp, #12
  4049e0:	bd30      	pop	{r4, r5, pc}
		ret = nm_read_reg_with_ret(NMI_REV_REG_ATE, &reg);
  4049e2:	a901      	add	r1, sp, #4
  4049e4:	f241 0048 	movw	r0, #4168	; 0x1048
  4049e8:	4b02      	ldr	r3, [pc, #8]	; (4049f4 <nm_get_firmware_info+0xa4>)
  4049ea:	4798      	blx	r3
  4049ec:	4605      	mov	r5, r0
  4049ee:	e7be      	b.n	40496e <nm_get_firmware_info+0x1e>
  4049f0:	000207ac 	.word	0x000207ac
  4049f4:	00404881 	.word	0x00404881
  4049f8:	d75dc1c3 	.word	0xd75dc1c3
  4049fc:	00404585 	.word	0x00404585

00404a00 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
  404a00:	b538      	push	{r3, r4, r5, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
  404a02:	2800      	cmp	r0, #0
  404a04:	d037      	beq.n	404a76 <nm_drv_init+0x76>
		u8Mode = *((uint8 *)arg);
  404a06:	7804      	ldrb	r4, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
  404a08:	1e63      	subs	r3, r4, #1
  404a0a:	b2db      	uxtb	r3, r3
			u8Mode = M2M_WIFI_MODE_NORMAL;
  404a0c:	2b04      	cmp	r3, #4
  404a0e:	bf28      	it	cs
  404a10:	2401      	movcs	r4, #1
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
  404a12:	2000      	movs	r0, #0
  404a14:	4b1e      	ldr	r3, [pc, #120]	; (404a90 <nm_drv_init+0x90>)
  404a16:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  404a18:	4605      	mov	r5, r0
  404a1a:	2800      	cmp	r0, #0
  404a1c:	d12d      	bne.n	404a7a <nm_drv_init+0x7a>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
  404a1e:	481d      	ldr	r0, [pc, #116]	; (404a94 <nm_drv_init+0x94>)
  404a20:	4d1d      	ldr	r5, [pc, #116]	; (404a98 <nm_drv_init+0x98>)
  404a22:	47a8      	blx	r5
  404a24:	4b1d      	ldr	r3, [pc, #116]	; (404a9c <nm_drv_init+0x9c>)
  404a26:	4798      	blx	r3
  404a28:	4601      	mov	r1, r0
  404a2a:	481d      	ldr	r0, [pc, #116]	; (404aa0 <nm_drv_init+0xa0>)
  404a2c:	47a8      	blx	r5
  404a2e:	481d      	ldr	r0, [pc, #116]	; (404aa4 <nm_drv_init+0xa4>)
  404a30:	47a8      	blx	r5
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
  404a32:	4b1d      	ldr	r3, [pc, #116]	; (404aa8 <nm_drv_init+0xa8>)
  404a34:	4798      	blx	r3
	ret = cpu_start();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	ret = wait_for_bootrom(u8Mode);
  404a36:	4620      	mov	r0, r4
  404a38:	4b1c      	ldr	r3, [pc, #112]	; (404aac <nm_drv_init+0xac>)
  404a3a:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  404a3c:	4605      	mov	r5, r0
  404a3e:	b9b0      	cbnz	r0, 404a6e <nm_drv_init+0x6e>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
  404a40:	4620      	mov	r0, r4
  404a42:	4b1b      	ldr	r3, [pc, #108]	; (404ab0 <nm_drv_init+0xb0>)
  404a44:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  404a46:	4605      	mov	r5, r0
  404a48:	b988      	cbnz	r0, 404a6e <nm_drv_init+0x6e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
  404a4a:	3c02      	subs	r4, #2
  404a4c:	b2e4      	uxtb	r4, r4
  404a4e:	2c01      	cmp	r4, #1
  404a50:	d90f      	bls.n	404a72 <nm_drv_init+0x72>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
  404a52:	4b18      	ldr	r3, [pc, #96]	; (404ab4 <nm_drv_init+0xb4>)
  404a54:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  404a56:	4605      	mov	r5, r0
  404a58:	b158      	cbz	r0, 404a72 <nm_drv_init+0x72>
		M2M_ERR("failed to enable interrupts..\n");
  404a5a:	f44f 72ae 	mov.w	r2, #348	; 0x15c
  404a5e:	4916      	ldr	r1, [pc, #88]	; (404ab8 <nm_drv_init+0xb8>)
  404a60:	4816      	ldr	r0, [pc, #88]	; (404abc <nm_drv_init+0xbc>)
  404a62:	4c0d      	ldr	r4, [pc, #52]	; (404a98 <nm_drv_init+0x98>)
  404a64:	47a0      	blx	r4
  404a66:	4816      	ldr	r0, [pc, #88]	; (404ac0 <nm_drv_init+0xc0>)
  404a68:	47a0      	blx	r4
  404a6a:	480e      	ldr	r0, [pc, #56]	; (404aa4 <nm_drv_init+0xa4>)
  404a6c:	47a0      	blx	r4
		goto ERR2;
	}
	
	return ret;
ERR2:
	nm_bus_iface_deinit();
  404a6e:	4b15      	ldr	r3, [pc, #84]	; (404ac4 <nm_drv_init+0xc4>)
  404a70:	4798      	blx	r3
ERR1:
	return ret;
}
  404a72:	4628      	mov	r0, r5
  404a74:	bd38      	pop	{r3, r4, r5, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
  404a76:	2401      	movs	r4, #1
  404a78:	e7cb      	b.n	404a12 <nm_drv_init+0x12>
		M2M_ERR("[nmi start]: fail init bus\n");
  404a7a:	f44f 7292 	mov.w	r2, #292	; 0x124
  404a7e:	490e      	ldr	r1, [pc, #56]	; (404ab8 <nm_drv_init+0xb8>)
  404a80:	480e      	ldr	r0, [pc, #56]	; (404abc <nm_drv_init+0xbc>)
  404a82:	4c05      	ldr	r4, [pc, #20]	; (404a98 <nm_drv_init+0x98>)
  404a84:	47a0      	blx	r4
  404a86:	4810      	ldr	r0, [pc, #64]	; (404ac8 <nm_drv_init+0xc8>)
  404a88:	47a0      	blx	r4
  404a8a:	4806      	ldr	r0, [pc, #24]	; (404aa4 <nm_drv_init+0xa4>)
  404a8c:	47a0      	blx	r4
		goto ERR1;
  404a8e:	e7f0      	b.n	404a72 <nm_drv_init+0x72>
  404a90:	0040485d 	.word	0x0040485d
  404a94:	0040de44 	.word	0x0040de44
  404a98:	00407321 	.word	0x00407321
  404a9c:	00404585 	.word	0x00404585
  404aa0:	0040e13c 	.word	0x0040e13c
  404aa4:	0040e928 	.word	0x0040e928
  404aa8:	00405111 	.word	0x00405111
  404aac:	00404639 	.word	0x00404639
  404ab0:	00404715 	.word	0x00404715
  404ab4:	0040451d 	.word	0x0040451d
  404ab8:	0040e084 	.word	0x0040e084
  404abc:	0040db74 	.word	0x0040db74
  404ac0:	0040e100 	.word	0x0040e100
  404ac4:	00404869 	.word	0x00404869
  404ac8:	0040e120 	.word	0x0040e120

00404acc <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
  404acc:	b538      	push	{r3, r4, r5, lr}
	sint8 ret;

	ret = chip_deinit();
  404ace:	4b19      	ldr	r3, [pc, #100]	; (404b34 <nm_drv_deinit+0x68>)
  404ad0:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  404ad2:	b958      	cbnz	r0, 404aec <nm_drv_deinit+0x20>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
  404ad4:	2000      	movs	r0, #0
  404ad6:	4b18      	ldr	r3, [pc, #96]	; (404b38 <nm_drv_deinit+0x6c>)
  404ad8:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  404ada:	4604      	mov	r4, r0
  404adc:	b998      	cbnz	r0, 404b06 <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
  404ade:	4b17      	ldr	r3, [pc, #92]	; (404b3c <nm_drv_deinit+0x70>)
  404ae0:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  404ae2:	4604      	mov	r4, r0
  404ae4:	b9d0      	cbnz	r0, 404b1c <nm_drv_deinit+0x50>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
  404ae6:	4b16      	ldr	r3, [pc, #88]	; (404b40 <nm_drv_deinit+0x74>)
  404ae8:	4798      	blx	r3
  404aea:	e00a      	b.n	404b02 <nm_drv_deinit+0x36>
  404aec:	4604      	mov	r4, r0
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
  404aee:	f44f 72ba 	mov.w	r2, #372	; 0x174
  404af2:	4914      	ldr	r1, [pc, #80]	; (404b44 <nm_drv_deinit+0x78>)
  404af4:	4814      	ldr	r0, [pc, #80]	; (404b48 <nm_drv_deinit+0x7c>)
  404af6:	4d15      	ldr	r5, [pc, #84]	; (404b4c <nm_drv_deinit+0x80>)
  404af8:	47a8      	blx	r5
  404afa:	4815      	ldr	r0, [pc, #84]	; (404b50 <nm_drv_deinit+0x84>)
  404afc:	47a8      	blx	r5
  404afe:	4815      	ldr	r0, [pc, #84]	; (404b54 <nm_drv_deinit+0x88>)
  404b00:	47a8      	blx	r5
#endif

ERR1:
	return ret;
}
  404b02:	4620      	mov	r0, r4
  404b04:	bd38      	pop	{r3, r4, r5, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
  404b06:	f240 127b 	movw	r2, #379	; 0x17b
  404b0a:	490e      	ldr	r1, [pc, #56]	; (404b44 <nm_drv_deinit+0x78>)
  404b0c:	480e      	ldr	r0, [pc, #56]	; (404b48 <nm_drv_deinit+0x7c>)
  404b0e:	4d0f      	ldr	r5, [pc, #60]	; (404b4c <nm_drv_deinit+0x80>)
  404b10:	47a8      	blx	r5
  404b12:	4811      	ldr	r0, [pc, #68]	; (404b58 <nm_drv_deinit+0x8c>)
  404b14:	47a8      	blx	r5
  404b16:	480f      	ldr	r0, [pc, #60]	; (404b54 <nm_drv_deinit+0x88>)
  404b18:	47a8      	blx	r5
		goto ERR1;
  404b1a:	e7f2      	b.n	404b02 <nm_drv_deinit+0x36>
		M2M_ERR("[nmi stop]: fail init bus\n");
  404b1c:	f240 1281 	movw	r2, #385	; 0x181
  404b20:	4908      	ldr	r1, [pc, #32]	; (404b44 <nm_drv_deinit+0x78>)
  404b22:	4809      	ldr	r0, [pc, #36]	; (404b48 <nm_drv_deinit+0x7c>)
  404b24:	4d09      	ldr	r5, [pc, #36]	; (404b4c <nm_drv_deinit+0x80>)
  404b26:	47a8      	blx	r5
  404b28:	480c      	ldr	r0, [pc, #48]	; (404b5c <nm_drv_deinit+0x90>)
  404b2a:	47a8      	blx	r5
  404b2c:	4809      	ldr	r0, [pc, #36]	; (404b54 <nm_drv_deinit+0x88>)
  404b2e:	47a8      	blx	r5
		goto ERR1;
  404b30:	e7e7      	b.n	404b02 <nm_drv_deinit+0x36>
  404b32:	bf00      	nop
  404b34:	00404795 	.word	0x00404795
  404b38:	00405b71 	.word	0x00405b71
  404b3c:	00404869 	.word	0x00404869
  404b40:	004050bd 	.word	0x004050bd
  404b44:	0040e090 	.word	0x0040e090
  404b48:	0040db74 	.word	0x0040db74
  404b4c:	00407321 	.word	0x00407321
  404b50:	0040e0a0 	.word	0x0040e0a0
  404b54:	0040e928 	.word	0x0040e928
  404b58:	0040e0c0 	.word	0x0040e0c0
  404b5c:	0040e0e4 	.word	0x0040e0e4

00404b60 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
  404b60:	b500      	push	{lr}
  404b62:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
  404b64:	2300      	movs	r3, #0
  404b66:	9301      	str	r3, [sp, #4]
	spi.pu8OutBuf = b;
  404b68:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
  404b6a:	f8ad 100c 	strh.w	r1, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
  404b6e:	a901      	add	r1, sp, #4
  404b70:	2003      	movs	r0, #3
  404b72:	4b02      	ldr	r3, [pc, #8]	; (404b7c <nmi_spi_read+0x1c>)
  404b74:	4798      	blx	r3
}
  404b76:	b005      	add	sp, #20
  404b78:	f85d fb04 	ldr.w	pc, [sp], #4
  404b7c:	00403431 	.word	0x00403431

00404b80 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
  404b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404b84:	b082      	sub	sp, #8
  404b86:	4605      	mov	r5, r0

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
		 (cmd == CMD_TERMINATE) ||
  404b88:	f100 033b 	add.w	r3, r0, #59	; 0x3b
  404b8c:	b2db      	uxtb	r3, r3
  404b8e:	2b01      	cmp	r3, #1
  404b90:	d927      	bls.n	404be2 <spi_cmd_rsp+0x62>
  404b92:	28cf      	cmp	r0, #207	; 0xcf
  404b94:	d025      	beq.n	404be2 <spi_cmd_rsp+0x62>
{
  404b96:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  404b98:	f04f 0801 	mov.w	r8, #1
  404b9c:	4f23      	ldr	r7, [pc, #140]	; (404c2c <spi_cmd_rsp+0xac>)
  404b9e:	4641      	mov	r1, r8
  404ba0:	f10d 0007 	add.w	r0, sp, #7
  404ba4:	47b8      	blx	r7
  404ba6:	4606      	mov	r6, r0
  404ba8:	bb20      	cbnz	r0, 404bf4 <spi_cmd_rsp+0x74>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
  404baa:	f89d 3007 	ldrb.w	r3, [sp, #7]
  404bae:	42ab      	cmp	r3, r5
  404bb0:	d02c      	beq.n	404c0c <spi_cmd_rsp+0x8c>
  404bb2:	1e63      	subs	r3, r4, #1
  404bb4:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  404bb8:	d1f1      	bne.n	404b9e <spi_cmd_rsp+0x1e>
  404bba:	240b      	movs	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  404bbc:	2701      	movs	r7, #1
  404bbe:	4d1b      	ldr	r5, [pc, #108]	; (404c2c <spi_cmd_rsp+0xac>)
  404bc0:	4639      	mov	r1, r7
  404bc2:	f10d 0007 	add.w	r0, sp, #7
  404bc6:	47a8      	blx	r5
  404bc8:	bb10      	cbnz	r0, 404c10 <spi_cmd_rsp+0x90>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
  404bca:	f89d 3007 	ldrb.w	r3, [sp, #7]
  404bce:	b353      	cbz	r3, 404c26 <spi_cmd_rsp+0xa6>
  404bd0:	1e63      	subs	r3, r4, #1
  404bd2:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  404bd6:	d1f3      	bne.n	404bc0 <spi_cmd_rsp+0x40>
	sint8 result = N_OK;
  404bd8:	2601      	movs	r6, #1

_fail_:

	return result;
}
  404bda:	4630      	mov	r0, r6
  404bdc:	b002      	add	sp, #8
  404bde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  404be2:	2101      	movs	r1, #1
  404be4:	f10d 0007 	add.w	r0, sp, #7
  404be8:	4b10      	ldr	r3, [pc, #64]	; (404c2c <spi_cmd_rsp+0xac>)
  404bea:	4798      	blx	r3
  404bec:	2800      	cmp	r0, #0
  404bee:	d0d2      	beq.n	404b96 <spi_cmd_rsp+0x16>
			result = N_FAIL;
  404bf0:	2600      	movs	r6, #0
  404bf2:	e7f2      	b.n	404bda <spi_cmd_rsp+0x5a>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
  404bf4:	f240 1227 	movw	r2, #295	; 0x127
  404bf8:	490d      	ldr	r1, [pc, #52]	; (404c30 <spi_cmd_rsp+0xb0>)
  404bfa:	480e      	ldr	r0, [pc, #56]	; (404c34 <spi_cmd_rsp+0xb4>)
  404bfc:	4c0e      	ldr	r4, [pc, #56]	; (404c38 <spi_cmd_rsp+0xb8>)
  404bfe:	47a0      	blx	r4
  404c00:	480e      	ldr	r0, [pc, #56]	; (404c3c <spi_cmd_rsp+0xbc>)
  404c02:	47a0      	blx	r4
  404c04:	480e      	ldr	r0, [pc, #56]	; (404c40 <spi_cmd_rsp+0xc0>)
  404c06:	47a0      	blx	r4
			result = N_FAIL;
  404c08:	2600      	movs	r6, #0
			goto _fail_;
  404c0a:	e7e6      	b.n	404bda <spi_cmd_rsp+0x5a>
  404c0c:	240b      	movs	r4, #11
  404c0e:	e7d5      	b.n	404bbc <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
  404c10:	f240 1235 	movw	r2, #309	; 0x135
  404c14:	4906      	ldr	r1, [pc, #24]	; (404c30 <spi_cmd_rsp+0xb0>)
  404c16:	4807      	ldr	r0, [pc, #28]	; (404c34 <spi_cmd_rsp+0xb4>)
  404c18:	4c07      	ldr	r4, [pc, #28]	; (404c38 <spi_cmd_rsp+0xb8>)
  404c1a:	47a0      	blx	r4
  404c1c:	4807      	ldr	r0, [pc, #28]	; (404c3c <spi_cmd_rsp+0xbc>)
  404c1e:	47a0      	blx	r4
  404c20:	4807      	ldr	r0, [pc, #28]	; (404c40 <spi_cmd_rsp+0xc0>)
  404c22:	47a0      	blx	r4
			goto _fail_;
  404c24:	e7d9      	b.n	404bda <spi_cmd_rsp+0x5a>
	sint8 result = N_OK;
  404c26:	2601      	movs	r6, #1
  404c28:	e7d7      	b.n	404bda <spi_cmd_rsp+0x5a>
  404c2a:	bf00      	nop
  404c2c:	00404b61 	.word	0x00404b61
  404c30:	0040e154 	.word	0x0040e154
  404c34:	0040db74 	.word	0x0040db74
  404c38:	00407321 	.word	0x00407321
  404c3c:	0040e594 	.word	0x0040e594
  404c40:	0040e928 	.word	0x0040e928

00404c44 <spi_data_read>:

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
  404c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404c48:	b085      	sub	sp, #20
  404c4a:	4683      	mov	fp, r0
  404c4c:	468a      	mov	sl, r1
  404c4e:	4617      	mov	r7, r2
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
  404c50:	f04f 0900 	mov.w	r9, #0
		/**
			Data Respnose header
		**/
		retry = 10;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  404c54:	4d37      	ldr	r5, [pc, #220]	; (404d34 <spi_data_read+0xf0>)
  404c56:	e027      	b.n	404ca8 <spi_data_read+0x64>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
  404c58:	f240 1257 	movw	r2, #343	; 0x157
  404c5c:	4936      	ldr	r1, [pc, #216]	; (404d38 <spi_data_read+0xf4>)
  404c5e:	4837      	ldr	r0, [pc, #220]	; (404d3c <spi_data_read+0xf8>)
  404c60:	4c37      	ldr	r4, [pc, #220]	; (404d40 <spi_data_read+0xfc>)
  404c62:	47a0      	blx	r4
  404c64:	4837      	ldr	r0, [pc, #220]	; (404d44 <spi_data_read+0x100>)
  404c66:	47a0      	blx	r4
  404c68:	4837      	ldr	r0, [pc, #220]	; (404d48 <spi_data_read+0x104>)
  404c6a:	47a0      	blx	r4
  404c6c:	2300      	movs	r3, #0
  404c6e:	9301      	str	r3, [sp, #4]
		sz -= nbytes;

	} while (sz);

	return result;
}
  404c70:	9801      	ldr	r0, [sp, #4]
  404c72:	b005      	add	sp, #20
  404c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (retry <= 0) {
  404c78:	2c00      	cmp	r4, #0
  404c7a:	dd2e      	ble.n	404cda <spi_data_read+0x96>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
  404c7c:	4641      	mov	r1, r8
  404c7e:	eb0b 0009 	add.w	r0, fp, r9
  404c82:	47a8      	blx	r5
  404c84:	4604      	mov	r4, r0
  404c86:	2800      	cmp	r0, #0
  404c88:	d134      	bne.n	404cf4 <spi_data_read+0xb0>
		if(!clockless)
  404c8a:	b91f      	cbnz	r7, 404c94 <spi_data_read+0x50>
			if (!gu8Crc_off) {
  404c8c:	4b2f      	ldr	r3, [pc, #188]	; (404d4c <spi_data_read+0x108>)
  404c8e:	781b      	ldrb	r3, [r3, #0]
  404c90:	2b00      	cmp	r3, #0
  404c92:	d03a      	beq.n	404d0a <spi_data_read+0xc6>
		ix += nbytes;
  404c94:	44c1      	add	r9, r8
  404c96:	fa0f f989 	sxth.w	r9, r9
		sz -= nbytes;
  404c9a:	ebaa 0a08 	sub.w	sl, sl, r8
  404c9e:	fa1f fa8a 	uxth.w	sl, sl
	} while (sz);
  404ca2:	f1ba 0f00 	cmp.w	sl, #0
  404ca6:	d041      	beq.n	404d2c <spi_data_read+0xe8>
  404ca8:	46d0      	mov	r8, sl
  404caa:	f5ba 5f00 	cmp.w	sl, #8192	; 0x2000
  404cae:	bf28      	it	cs
  404cb0:	f44f 5800 	movcs.w	r8, #8192	; 0x2000
		retry = 10;
  404cb4:	240a      	movs	r4, #10
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  404cb6:	2601      	movs	r6, #1
  404cb8:	4631      	mov	r1, r6
  404cba:	f10d 000b 	add.w	r0, sp, #11
  404cbe:	47a8      	blx	r5
  404cc0:	9001      	str	r0, [sp, #4]
  404cc2:	2800      	cmp	r0, #0
  404cc4:	d1c8      	bne.n	404c58 <spi_data_read+0x14>
			if (((rsp >> 4) & 0xf) == 0xf)
  404cc6:	f89d 300b 	ldrb.w	r3, [sp, #11]
  404cca:	091b      	lsrs	r3, r3, #4
  404ccc:	2b0f      	cmp	r3, #15
  404cce:	d0d3      	beq.n	404c78 <spi_data_read+0x34>
  404cd0:	3c01      	subs	r4, #1
  404cd2:	b224      	sxth	r4, r4
		} while (retry--);
  404cd4:	f1b4 3fff 	cmp.w	r4, #4294967295
  404cd8:	d1ee      	bne.n	404cb8 <spi_data_read+0x74>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
  404cda:	f240 1263 	movw	r2, #355	; 0x163
  404cde:	4916      	ldr	r1, [pc, #88]	; (404d38 <spi_data_read+0xf4>)
  404ce0:	4816      	ldr	r0, [pc, #88]	; (404d3c <spi_data_read+0xf8>)
  404ce2:	4c17      	ldr	r4, [pc, #92]	; (404d40 <spi_data_read+0xfc>)
  404ce4:	47a0      	blx	r4
  404ce6:	f89d 100b 	ldrb.w	r1, [sp, #11]
  404cea:	4819      	ldr	r0, [pc, #100]	; (404d50 <spi_data_read+0x10c>)
  404cec:	47a0      	blx	r4
  404cee:	4816      	ldr	r0, [pc, #88]	; (404d48 <spi_data_read+0x104>)
  404cf0:	47a0      	blx	r4
			break;
  404cf2:	e7bd      	b.n	404c70 <spi_data_read+0x2c>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
  404cf4:	f44f 72b6 	mov.w	r2, #364	; 0x16c
  404cf8:	490f      	ldr	r1, [pc, #60]	; (404d38 <spi_data_read+0xf4>)
  404cfa:	4810      	ldr	r0, [pc, #64]	; (404d3c <spi_data_read+0xf8>)
  404cfc:	4c10      	ldr	r4, [pc, #64]	; (404d40 <spi_data_read+0xfc>)
  404cfe:	47a0      	blx	r4
  404d00:	4814      	ldr	r0, [pc, #80]	; (404d54 <spi_data_read+0x110>)
  404d02:	47a0      	blx	r4
  404d04:	4810      	ldr	r0, [pc, #64]	; (404d48 <spi_data_read+0x104>)
  404d06:	47a0      	blx	r4
			break;
  404d08:	e7b2      	b.n	404c70 <spi_data_read+0x2c>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
  404d0a:	2102      	movs	r1, #2
  404d0c:	a803      	add	r0, sp, #12
  404d0e:	47a8      	blx	r5
  404d10:	2800      	cmp	r0, #0
  404d12:	d0bf      	beq.n	404c94 <spi_data_read+0x50>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
  404d14:	f240 1277 	movw	r2, #375	; 0x177
  404d18:	4907      	ldr	r1, [pc, #28]	; (404d38 <spi_data_read+0xf4>)
  404d1a:	4808      	ldr	r0, [pc, #32]	; (404d3c <spi_data_read+0xf8>)
  404d1c:	4d08      	ldr	r5, [pc, #32]	; (404d40 <spi_data_read+0xfc>)
  404d1e:	47a8      	blx	r5
  404d20:	480d      	ldr	r0, [pc, #52]	; (404d58 <spi_data_read+0x114>)
  404d22:	47a8      	blx	r5
  404d24:	4808      	ldr	r0, [pc, #32]	; (404d48 <spi_data_read+0x104>)
  404d26:	47a8      	blx	r5
					result = N_FAIL;
  404d28:	9401      	str	r4, [sp, #4]
					break;
  404d2a:	e7a1      	b.n	404c70 <spi_data_read+0x2c>
  404d2c:	2301      	movs	r3, #1
  404d2e:	9301      	str	r3, [sp, #4]
  404d30:	e79e      	b.n	404c70 <spi_data_read+0x2c>
  404d32:	bf00      	nop
  404d34:	00404b61 	.word	0x00404b61
  404d38:	0040e160 	.word	0x0040e160
  404d3c:	0040db74 	.word	0x0040db74
  404d40:	00407321 	.word	0x00407321
  404d44:	0040e5c8 	.word	0x0040e5c8
  404d48:	0040e928 	.word	0x0040e928
  404d4c:	20400a78 	.word	0x20400a78
  404d50:	0040e5fc 	.word	0x0040e5fc
  404d54:	0040e62c 	.word	0x0040e62c
  404d58:	0040e660 	.word	0x0040e660

00404d5c <nmi_spi_write>:
{
  404d5c:	b500      	push	{lr}
  404d5e:	b085      	sub	sp, #20
	spi.pu8InBuf = b;
  404d60:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
  404d62:	2300      	movs	r3, #0
  404d64:	9302      	str	r3, [sp, #8]
	spi.u16Sz = sz;
  404d66:	f8ad 100c 	strh.w	r1, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
  404d6a:	a901      	add	r1, sp, #4
  404d6c:	2003      	movs	r0, #3
  404d6e:	4b02      	ldr	r3, [pc, #8]	; (404d78 <nmi_spi_write+0x1c>)
  404d70:	4798      	blx	r3
}
  404d72:	b005      	add	sp, #20
  404d74:	f85d fb04 	ldr.w	pc, [sp], #4
  404d78:	00403431 	.word	0x00403431

00404d7c <spi_cmd>:
{
  404d7c:	b570      	push	{r4, r5, r6, lr}
  404d7e:	b084      	sub	sp, #16
  404d80:	f89d 4020 	ldrb.w	r4, [sp, #32]
	bc[0] = cmd;
  404d84:	f88d 0004 	strb.w	r0, [sp, #4]
	switch (cmd) {
  404d88:	38c1      	subs	r0, #193	; 0xc1
  404d8a:	280e      	cmp	r0, #14
  404d8c:	f200 80a2 	bhi.w	404ed4 <spi_cmd+0x158>
  404d90:	e8df f000 	tbb	[pc, r0]
  404d94:	19664545 	.word	0x19664545
  404d98:	5454332a 	.word	0x5454332a
  404d9c:	a0a0087f 	.word	0xa0a0087f
  404da0:	a0a0      	.short	0xa0a0
  404da2:	3c          	.byte	0x3c
  404da3:	00          	.byte	0x00
		bc[1] = (uint8)(adr >> 16);
  404da4:	0c0b      	lsrs	r3, r1, #16
  404da6:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  404daa:	0a0b      	lsrs	r3, r1, #8
  404dac:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = (uint8)adr;
  404db0:	f88d 1007 	strb.w	r1, [sp, #7]
		len = 5;
  404db4:	2105      	movs	r1, #5
		if (!gu8Crc_off)
  404db6:	4b55      	ldr	r3, [pc, #340]	; (404f0c <spi_cmd+0x190>)
  404db8:	781b      	ldrb	r3, [r3, #0]
  404dba:	2b00      	cmp	r3, #0
  404dbc:	f000 808c 	beq.w	404ed8 <spi_cmd+0x15c>
			len-=1;
  404dc0:	3901      	subs	r1, #1
  404dc2:	b2c9      	uxtb	r1, r1
  404dc4:	e09a      	b.n	404efc <spi_cmd+0x180>
		bc[1] = (uint8)(adr >> 8);
  404dc6:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
  404dca:	b944      	cbnz	r4, 404dde <spi_cmd+0x62>
		bc[1] = (uint8)(adr >> 8);
  404dcc:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)adr;
  404dd0:	f88d 1006 	strb.w	r1, [sp, #6]
		bc[3] = 0x00;
  404dd4:	2300      	movs	r3, #0
  404dd6:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  404dda:	2105      	movs	r1, #5
		break;
  404ddc:	e7eb      	b.n	404db6 <spi_cmd+0x3a>
		if(clockless)  bc[1] |= (1 << 7);
  404dde:	f063 037f 	orn	r3, r3, #127	; 0x7f
  404de2:	f88d 3005 	strb.w	r3, [sp, #5]
  404de6:	e7f3      	b.n	404dd0 <spi_cmd+0x54>
		bc[1] = 0x00;
  404de8:	2300      	movs	r3, #0
  404dea:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0x00;
  404dee:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0x00;
  404df2:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  404df6:	2105      	movs	r1, #5
		break;
  404df8:	e7dd      	b.n	404db6 <spi_cmd+0x3a>
		bc[1] = 0x00;
  404dfa:	2300      	movs	r3, #0
  404dfc:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0x00;
  404e00:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0x00;
  404e04:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  404e08:	2105      	movs	r1, #5
		break;
  404e0a:	e7d4      	b.n	404db6 <spi_cmd+0x3a>
		bc[1] = 0xff;
  404e0c:	23ff      	movs	r3, #255	; 0xff
  404e0e:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0xff;
  404e12:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0xff;
  404e16:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  404e1a:	2105      	movs	r1, #5
		break;
  404e1c:	e7cb      	b.n	404db6 <spi_cmd+0x3a>
		bc[1] = (uint8)(adr >> 16);
  404e1e:	0c0a      	lsrs	r2, r1, #16
  404e20:	f88d 2005 	strb.w	r2, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  404e24:	0a0a      	lsrs	r2, r1, #8
  404e26:	f88d 2006 	strb.w	r2, [sp, #6]
		bc[3] = (uint8)adr;
  404e2a:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(sz >> 8);
  404e2e:	0a1a      	lsrs	r2, r3, #8
  404e30:	f88d 2008 	strb.w	r2, [sp, #8]
		bc[5] = (uint8)(sz);
  404e34:	f88d 3009 	strb.w	r3, [sp, #9]
		len = 7;
  404e38:	2107      	movs	r1, #7
		break;
  404e3a:	e7bc      	b.n	404db6 <spi_cmd+0x3a>
		bc[1] = (uint8)(adr >> 16);
  404e3c:	0c0a      	lsrs	r2, r1, #16
  404e3e:	f88d 2005 	strb.w	r2, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  404e42:	0a0a      	lsrs	r2, r1, #8
  404e44:	f88d 2006 	strb.w	r2, [sp, #6]
		bc[3] = (uint8)adr;
  404e48:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(sz >> 16);
  404e4c:	0c1a      	lsrs	r2, r3, #16
  404e4e:	f88d 2008 	strb.w	r2, [sp, #8]
		bc[5] = (uint8)(sz >> 8);
  404e52:	0a1a      	lsrs	r2, r3, #8
  404e54:	f88d 2009 	strb.w	r2, [sp, #9]
		bc[6] = (uint8)(sz);
  404e58:	f88d 300a 	strb.w	r3, [sp, #10]
		len = 8;
  404e5c:	2108      	movs	r1, #8
		break;
  404e5e:	e7aa      	b.n	404db6 <spi_cmd+0x3a>
		bc[1] = (uint8)(adr >> 8);
  404e60:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
  404e64:	b984      	cbnz	r4, 404e88 <spi_cmd+0x10c>
		bc[1] = (uint8)(adr >> 8);
  404e66:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr);
  404e6a:	f88d 1006 	strb.w	r1, [sp, #6]
		bc[3] = (uint8)(u32data >> 24);
  404e6e:	0e13      	lsrs	r3, r2, #24
  404e70:	f88d 3007 	strb.w	r3, [sp, #7]
		bc[4] = (uint8)(u32data >> 16);
  404e74:	0c13      	lsrs	r3, r2, #16
  404e76:	f88d 3008 	strb.w	r3, [sp, #8]
		bc[5] = (uint8)(u32data >> 8);
  404e7a:	0a13      	lsrs	r3, r2, #8
  404e7c:	f88d 3009 	strb.w	r3, [sp, #9]
		bc[6] = (uint8)(u32data);
  404e80:	f88d 200a 	strb.w	r2, [sp, #10]
		len = 8;
  404e84:	2108      	movs	r1, #8
		break;
  404e86:	e796      	b.n	404db6 <spi_cmd+0x3a>
		if(clockless)  bc[1] |= (1 << 7);
  404e88:	f063 037f 	orn	r3, r3, #127	; 0x7f
  404e8c:	f88d 3005 	strb.w	r3, [sp, #5]
  404e90:	e7eb      	b.n	404e6a <spi_cmd+0xee>
		bc[1] = (uint8)(adr >> 16);
  404e92:	0c0b      	lsrs	r3, r1, #16
  404e94:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  404e98:	0a0b      	lsrs	r3, r1, #8
  404e9a:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = (uint8)(adr);
  404e9e:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(u32data >> 24);
  404ea2:	0e13      	lsrs	r3, r2, #24
  404ea4:	f88d 3008 	strb.w	r3, [sp, #8]
		bc[5] = (uint8)(u32data >> 16);
  404ea8:	0c13      	lsrs	r3, r2, #16
  404eaa:	f88d 3009 	strb.w	r3, [sp, #9]
		bc[6] = (uint8)(u32data >> 8);
  404eae:	0a13      	lsrs	r3, r2, #8
  404eb0:	f88d 300a 	strb.w	r3, [sp, #10]
		bc[7] = (uint8)(u32data);
  404eb4:	f88d 200b 	strb.w	r2, [sp, #11]
		len = 9;
  404eb8:	2109      	movs	r1, #9
		break;
  404eba:	e77c      	b.n	404db6 <spi_cmd+0x3a>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
  404ebc:	f44f 7284 	mov.w	r2, #264	; 0x108
  404ec0:	4913      	ldr	r1, [pc, #76]	; (404f10 <spi_cmd+0x194>)
  404ec2:	4814      	ldr	r0, [pc, #80]	; (404f14 <spi_cmd+0x198>)
  404ec4:	4c14      	ldr	r4, [pc, #80]	; (404f18 <spi_cmd+0x19c>)
  404ec6:	47a0      	blx	r4
  404ec8:	4814      	ldr	r0, [pc, #80]	; (404f1c <spi_cmd+0x1a0>)
  404eca:	47a0      	blx	r4
  404ecc:	4814      	ldr	r0, [pc, #80]	; (404f20 <spi_cmd+0x1a4>)
  404ece:	47a0      	blx	r4
			result = N_FAIL;
  404ed0:	2000      	movs	r0, #0
  404ed2:	e019      	b.n	404f08 <spi_cmd+0x18c>
	switch (cmd) {
  404ed4:	2000      	movs	r0, #0
  404ed6:	e017      	b.n	404f08 <spi_cmd+0x18c>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
  404ed8:	1e4e      	subs	r6, r1, #1
  404eda:	ab01      	add	r3, sp, #4
  404edc:	199d      	adds	r5, r3, r6
  404ede:	207f      	movs	r0, #127	; 0x7f
  404ee0:	461a      	mov	r2, r3
	return crc7_syndrome_table[(crc << 1) ^ data];
  404ee2:	4c10      	ldr	r4, [pc, #64]	; (404f24 <spi_cmd+0x1a8>)
  404ee4:	f812 3b01 	ldrb.w	r3, [r2], #1
  404ee8:	ea83 0340 	eor.w	r3, r3, r0, lsl #1
  404eec:	5ce0      	ldrb	r0, [r4, r3]
	while (len--)
  404eee:	4295      	cmp	r5, r2
  404ef0:	d1f8      	bne.n	404ee4 <spi_cmd+0x168>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
  404ef2:	ab04      	add	r3, sp, #16
  404ef4:	441e      	add	r6, r3
  404ef6:	0043      	lsls	r3, r0, #1
  404ef8:	f806 3c0c 	strb.w	r3, [r6, #-12]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
  404efc:	a801      	add	r0, sp, #4
  404efe:	4b0a      	ldr	r3, [pc, #40]	; (404f28 <spi_cmd+0x1ac>)
  404f00:	4798      	blx	r3
  404f02:	2800      	cmp	r0, #0
  404f04:	d1da      	bne.n	404ebc <spi_cmd+0x140>
  404f06:	2001      	movs	r0, #1
}
  404f08:	b004      	add	sp, #16
  404f0a:	bd70      	pop	{r4, r5, r6, pc}
  404f0c:	20400a78 	.word	0x20400a78
  404f10:	0040e14c 	.word	0x0040e14c
  404f14:	0040db74 	.word	0x0040db74
  404f18:	00407321 	.word	0x00407321
  404f1c:	0040e568 	.word	0x0040e568
  404f20:	0040e928 	.word	0x0040e928
  404f24:	0040e1c8 	.word	0x0040e1c8
  404f28:	00404d5d 	.word	0x00404d5d

00404f2c <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
  404f2c:	b570      	push	{r4, r5, r6, lr}
  404f2e:	b082      	sub	sp, #8
  404f30:	4604      	mov	r4, r0
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
  404f32:	2831      	cmp	r0, #49	; 0x31
  404f34:	bf35      	itete	cc
  404f36:	2301      	movcc	r3, #1
  404f38:	2300      	movcs	r3, #0
  404f3a:	25c3      	movcc	r5, #195	; 0xc3
  404f3c:	25c9      	movcs	r5, #201	; 0xc9
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
  404f3e:	9300      	str	r3, [sp, #0]
  404f40:	2304      	movs	r3, #4
  404f42:	460a      	mov	r2, r1
  404f44:	4601      	mov	r1, r0
  404f46:	4628      	mov	r0, r5
  404f48:	4e15      	ldr	r6, [pc, #84]	; (404fa0 <spi_write_reg+0x74>)
  404f4a:	47b0      	blx	r6
	if (result != N_OK) {
  404f4c:	2801      	cmp	r0, #1
  404f4e:	d00d      	beq.n	404f6c <spi_write_reg+0x40>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
  404f50:	f240 12eb 	movw	r2, #491	; 0x1eb
  404f54:	4913      	ldr	r1, [pc, #76]	; (404fa4 <spi_write_reg+0x78>)
  404f56:	4814      	ldr	r0, [pc, #80]	; (404fa8 <spi_write_reg+0x7c>)
  404f58:	4d14      	ldr	r5, [pc, #80]	; (404fac <spi_write_reg+0x80>)
  404f5a:	47a8      	blx	r5
  404f5c:	4621      	mov	r1, r4
  404f5e:	4814      	ldr	r0, [pc, #80]	; (404fb0 <spi_write_reg+0x84>)
  404f60:	47a8      	blx	r5
  404f62:	4814      	ldr	r0, [pc, #80]	; (404fb4 <spi_write_reg+0x88>)
  404f64:	47a8      	blx	r5
		return N_FAIL;
  404f66:	2000      	movs	r0, #0
	}

	return result;

#endif
}
  404f68:	b002      	add	sp, #8
  404f6a:	bd70      	pop	{r4, r5, r6, pc}
	result = spi_cmd_rsp(cmd);
  404f6c:	4628      	mov	r0, r5
  404f6e:	4b12      	ldr	r3, [pc, #72]	; (404fb8 <spi_write_reg+0x8c>)
  404f70:	4798      	blx	r3
	if (result != N_OK) {
  404f72:	2801      	cmp	r0, #1
  404f74:	d0f8      	beq.n	404f68 <spi_write_reg+0x3c>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
  404f76:	f240 12f1 	movw	r2, #497	; 0x1f1
  404f7a:	490a      	ldr	r1, [pc, #40]	; (404fa4 <spi_write_reg+0x78>)
  404f7c:	480a      	ldr	r0, [pc, #40]	; (404fa8 <spi_write_reg+0x7c>)
  404f7e:	4d0b      	ldr	r5, [pc, #44]	; (404fac <spi_write_reg+0x80>)
  404f80:	47a8      	blx	r5
  404f82:	4621      	mov	r1, r4
  404f84:	480d      	ldr	r0, [pc, #52]	; (404fbc <spi_write_reg+0x90>)
  404f86:	47a8      	blx	r5
  404f88:	480a      	ldr	r0, [pc, #40]	; (404fb4 <spi_write_reg+0x88>)
  404f8a:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  404f8c:	2400      	movs	r4, #0
  404f8e:	9400      	str	r4, [sp, #0]
  404f90:	4623      	mov	r3, r4
  404f92:	4622      	mov	r2, r4
  404f94:	4621      	mov	r1, r4
  404f96:	20cf      	movs	r0, #207	; 0xcf
  404f98:	4d01      	ldr	r5, [pc, #4]	; (404fa0 <spi_write_reg+0x74>)
  404f9a:	47a8      	blx	r5
		return N_FAIL;
  404f9c:	4620      	mov	r0, r4
  404f9e:	e7e3      	b.n	404f68 <spi_write_reg+0x3c>
  404fa0:	00404d7d 	.word	0x00404d7d
  404fa4:	0040e180 	.word	0x0040e180
  404fa8:	0040db74 	.word	0x0040db74
  404fac:	00407321 	.word	0x00407321
  404fb0:	0040e718 	.word	0x0040e718
  404fb4:	0040e928 	.word	0x0040e928
  404fb8:	00404b81 	.word	0x00404b81
  404fbc:	0040e744 	.word	0x0040e744

00404fc0 <spi_read_reg>:

	return N_OK;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
  404fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404fc4:	b084      	sub	sp, #16
  404fc6:	4604      	mov	r4, r0
  404fc8:	4688      	mov	r8, r1
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_READ;
		clockless = 0;
  404fca:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  404fce:	bf35      	itete	cc
  404fd0:	2601      	movcc	r6, #1
  404fd2:	2600      	movcs	r6, #0
  404fd4:	25c4      	movcc	r5, #196	; 0xc4
  404fd6:	25ca      	movcs	r5, #202	; 0xca
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
  404fd8:	9600      	str	r6, [sp, #0]
  404fda:	2304      	movs	r3, #4
  404fdc:	2200      	movs	r2, #0
  404fde:	4601      	mov	r1, r0
  404fe0:	4628      	mov	r0, r5
  404fe2:	4f2c      	ldr	r7, [pc, #176]	; (405094 <spi_read_reg+0xd4>)
  404fe4:	47b8      	blx	r7
	if (result != N_OK) {
  404fe6:	2801      	cmp	r0, #1
  404fe8:	d00e      	beq.n	405008 <spi_read_reg+0x48>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
  404fea:	f240 2245 	movw	r2, #581	; 0x245
  404fee:	492a      	ldr	r1, [pc, #168]	; (405098 <spi_read_reg+0xd8>)
  404ff0:	482a      	ldr	r0, [pc, #168]	; (40509c <spi_read_reg+0xdc>)
  404ff2:	4d2b      	ldr	r5, [pc, #172]	; (4050a0 <spi_read_reg+0xe0>)
  404ff4:	47a8      	blx	r5
  404ff6:	4621      	mov	r1, r4
  404ff8:	482a      	ldr	r0, [pc, #168]	; (4050a4 <spi_read_reg+0xe4>)
  404ffa:	47a8      	blx	r5
  404ffc:	482a      	ldr	r0, [pc, #168]	; (4050a8 <spi_read_reg+0xe8>)
  404ffe:	47a8      	blx	r5
		return N_FAIL;
  405000:	2000      	movs	r0, #0
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);

	return N_OK;
}
  405002:	b004      	add	sp, #16
  405004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	result = spi_cmd_rsp(cmd);
  405008:	4628      	mov	r0, r5
  40500a:	4b28      	ldr	r3, [pc, #160]	; (4050ac <spi_read_reg+0xec>)
  40500c:	4798      	blx	r3
	if (result != N_OK) {
  40500e:	2801      	cmp	r0, #1
  405010:	d014      	beq.n	40503c <spi_read_reg+0x7c>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
  405012:	f240 224b 	movw	r2, #587	; 0x24b
  405016:	4920      	ldr	r1, [pc, #128]	; (405098 <spi_read_reg+0xd8>)
  405018:	4820      	ldr	r0, [pc, #128]	; (40509c <spi_read_reg+0xdc>)
  40501a:	4d21      	ldr	r5, [pc, #132]	; (4050a0 <spi_read_reg+0xe0>)
  40501c:	47a8      	blx	r5
  40501e:	4621      	mov	r1, r4
  405020:	4823      	ldr	r0, [pc, #140]	; (4050b0 <spi_read_reg+0xf0>)
  405022:	47a8      	blx	r5
  405024:	4820      	ldr	r0, [pc, #128]	; (4050a8 <spi_read_reg+0xe8>)
  405026:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  405028:	2400      	movs	r4, #0
  40502a:	9400      	str	r4, [sp, #0]
  40502c:	4623      	mov	r3, r4
  40502e:	4622      	mov	r2, r4
  405030:	4621      	mov	r1, r4
  405032:	20cf      	movs	r0, #207	; 0xcf
  405034:	4d17      	ldr	r5, [pc, #92]	; (405094 <spi_read_reg+0xd4>)
  405036:	47a8      	blx	r5
		return N_FAIL;
  405038:	4620      	mov	r0, r4
  40503a:	e7e2      	b.n	405002 <spi_read_reg+0x42>
	result = spi_data_read(&tmp[0], 4, clockless);
  40503c:	4632      	mov	r2, r6
  40503e:	2104      	movs	r1, #4
  405040:	a803      	add	r0, sp, #12
  405042:	4b1c      	ldr	r3, [pc, #112]	; (4050b4 <spi_read_reg+0xf4>)
  405044:	4798      	blx	r3
	if (result != N_OK) {
  405046:	2801      	cmp	r0, #1
  405048:	d110      	bne.n	40506c <spi_read_reg+0xac>
		((uint32)tmp[1] << 8) |
  40504a:	f89d 200d 	ldrb.w	r2, [sp, #13]
		((uint32)tmp[2] << 16) |
  40504e:	f89d 300e 	ldrb.w	r3, [sp, #14]
  405052:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
  405054:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	*u32data = tmp[0] |
  405058:	f89d 200c 	ldrb.w	r2, [sp, #12]
		((uint32)tmp[1] << 8) |
  40505c:	4313      	orrs	r3, r2
		((uint32)tmp[3] << 24);
  40505e:	f89d 200f 	ldrb.w	r2, [sp, #15]
		((uint32)tmp[2] << 16) |
  405062:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
	*u32data = tmp[0] |
  405066:	f8c8 3000 	str.w	r3, [r8]
	return N_OK;
  40506a:	e7ca      	b.n	405002 <spi_read_reg+0x42>
		M2M_ERR("[nmi spi]: Failed data read...\n");
  40506c:	f240 2253 	movw	r2, #595	; 0x253
  405070:	4909      	ldr	r1, [pc, #36]	; (405098 <spi_read_reg+0xd8>)
  405072:	480a      	ldr	r0, [pc, #40]	; (40509c <spi_read_reg+0xdc>)
  405074:	4c0a      	ldr	r4, [pc, #40]	; (4050a0 <spi_read_reg+0xe0>)
  405076:	47a0      	blx	r4
  405078:	480f      	ldr	r0, [pc, #60]	; (4050b8 <spi_read_reg+0xf8>)
  40507a:	47a0      	blx	r4
  40507c:	480a      	ldr	r0, [pc, #40]	; (4050a8 <spi_read_reg+0xe8>)
  40507e:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  405080:	2400      	movs	r4, #0
  405082:	9400      	str	r4, [sp, #0]
  405084:	4623      	mov	r3, r4
  405086:	4622      	mov	r2, r4
  405088:	4621      	mov	r1, r4
  40508a:	20cf      	movs	r0, #207	; 0xcf
  40508c:	4d01      	ldr	r5, [pc, #4]	; (405094 <spi_read_reg+0xd4>)
  40508e:	47a8      	blx	r5
		return N_FAIL;
  405090:	4620      	mov	r0, r4
  405092:	e7b6      	b.n	405002 <spi_read_reg+0x42>
  405094:	00404d7d 	.word	0x00404d7d
  405098:	0040e1a0 	.word	0x0040e1a0
  40509c:	0040db74 	.word	0x0040db74
  4050a0:	00407321 	.word	0x00407321
  4050a4:	0040e698 	.word	0x0040e698
  4050a8:	0040e928 	.word	0x0040e928
  4050ac:	00404b81 	.word	0x00404b81
  4050b0:	0040e6c4 	.word	0x0040e6c4
  4050b4:	00404c45 	.word	0x00404c45
  4050b8:	0040e6f8 	.word	0x0040e6f8

004050bc <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
  4050bc:	2000      	movs	r0, #0
  4050be:	4b01      	ldr	r3, [pc, #4]	; (4050c4 <nm_spi_deinit+0x8>)
  4050c0:	7018      	strb	r0, [r3, #0]
	return M2M_SUCCESS;
}
  4050c2:	4770      	bx	lr
  4050c4:	20400a78 	.word	0x20400a78

004050c8 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
  4050c8:	b500      	push	{lr}
  4050ca:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
  4050cc:	a901      	add	r1, sp, #4
  4050ce:	4b03      	ldr	r3, [pc, #12]	; (4050dc <nm_spi_read_reg+0x14>)
  4050d0:	4798      	blx	r3

	return u32Val;
}
  4050d2:	9801      	ldr	r0, [sp, #4]
  4050d4:	b003      	add	sp, #12
  4050d6:	f85d fb04 	ldr.w	pc, [sp], #4
  4050da:	bf00      	nop
  4050dc:	00404fc1 	.word	0x00404fc1

004050e0 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
  4050e0:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
  4050e2:	4b04      	ldr	r3, [pc, #16]	; (4050f4 <nm_spi_read_reg_with_ret+0x14>)
  4050e4:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  4050e6:	2801      	cmp	r0, #1

	return s8Ret;
}
  4050e8:	bf0c      	ite	eq
  4050ea:	2000      	moveq	r0, #0
  4050ec:	f06f 0005 	mvnne.w	r0, #5
  4050f0:	bd08      	pop	{r3, pc}
  4050f2:	bf00      	nop
  4050f4:	00404fc1 	.word	0x00404fc1

004050f8 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
  4050f8:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
  4050fa:	4b04      	ldr	r3, [pc, #16]	; (40510c <nm_spi_write_reg+0x14>)
  4050fc:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  4050fe:	2801      	cmp	r0, #1

	return s8Ret;
}
  405100:	bf0c      	ite	eq
  405102:	2000      	moveq	r0, #0
  405104:	f06f 0005 	mvnne.w	r0, #5
  405108:	bd08      	pop	{r3, pc}
  40510a:	bf00      	nop
  40510c:	00404f2d 	.word	0x00404f2d

00405110 <nm_spi_init>:
{
  405110:	b530      	push	{r4, r5, lr}
  405112:	b083      	sub	sp, #12
	uint32 reg =0;
  405114:	2300      	movs	r3, #0
  405116:	a902      	add	r1, sp, #8
  405118:	f841 3d08 	str.w	r3, [r1, #-8]!
	gu8Crc_off = 0;
  40511c:	4a34      	ldr	r2, [pc, #208]	; (4051f0 <nm_spi_init+0xe0>)
  40511e:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
  405120:	f64e 0024 	movw	r0, #59428	; 0xe824
  405124:	4b33      	ldr	r3, [pc, #204]	; (4051f4 <nm_spi_init+0xe4>)
  405126:	4798      	blx	r3
  405128:	b348      	cbz	r0, 40517e <nm_spi_init+0x6e>
	if(gu8Crc_off == 0)
  40512a:	4b31      	ldr	r3, [pc, #196]	; (4051f0 <nm_spi_init+0xe0>)
  40512c:	781b      	ldrb	r3, [r3, #0]
  40512e:	b97b      	cbnz	r3, 405150 <nm_spi_init+0x40>
		reg &= ~0x70;
  405130:	9900      	ldr	r1, [sp, #0]
  405132:	f021 017c 	bic.w	r1, r1, #124	; 0x7c
		reg |= (0x5 << 4);
  405136:	f041 0150 	orr.w	r1, r1, #80	; 0x50
  40513a:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
  40513c:	f64e 0024 	movw	r0, #59428	; 0xe824
  405140:	4b2d      	ldr	r3, [pc, #180]	; (4051f8 <nm_spi_init+0xe8>)
  405142:	4798      	blx	r3
  405144:	4604      	mov	r4, r0
  405146:	2800      	cmp	r0, #0
  405148:	d039      	beq.n	4051be <nm_spi_init+0xae>
		gu8Crc_off = 1;
  40514a:	2201      	movs	r2, #1
  40514c:	4b28      	ldr	r3, [pc, #160]	; (4051f0 <nm_spi_init+0xe0>)
  40514e:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
  405150:	a901      	add	r1, sp, #4
  405152:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  405156:	4b27      	ldr	r3, [pc, #156]	; (4051f4 <nm_spi_init+0xe4>)
  405158:	4798      	blx	r3
  40515a:	2800      	cmp	r0, #0
  40515c:	d03a      	beq.n	4051d4 <nm_spi_init+0xc4>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
  40515e:	f64e 0024 	movw	r0, #59428	; 0xe824
  405162:	4b26      	ldr	r3, [pc, #152]	; (4051fc <nm_spi_init+0xec>)
  405164:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
  405166:	f020 0170 	bic.w	r1, r0, #112	; 0x70
	nm_spi_write_reg(SPI_BASE+0x24, val32);
  40516a:	f041 0150 	orr.w	r1, r1, #80	; 0x50
  40516e:	f64e 0024 	movw	r0, #59428	; 0xe824
  405172:	4b23      	ldr	r3, [pc, #140]	; (405200 <nm_spi_init+0xf0>)
  405174:	4798      	blx	r3
	return M2M_SUCCESS;
  405176:	2400      	movs	r4, #0
}
  405178:	4620      	mov	r0, r4
  40517a:	b003      	add	sp, #12
  40517c:	bd30      	pop	{r4, r5, pc}
		gu8Crc_off = 1;
  40517e:	2201      	movs	r2, #1
  405180:	4b1b      	ldr	r3, [pc, #108]	; (4051f0 <nm_spi_init+0xe0>)
  405182:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
  405184:	f240 22c5 	movw	r2, #709	; 0x2c5
  405188:	491e      	ldr	r1, [pc, #120]	; (405204 <nm_spi_init+0xf4>)
  40518a:	481f      	ldr	r0, [pc, #124]	; (405208 <nm_spi_init+0xf8>)
  40518c:	4c1f      	ldr	r4, [pc, #124]	; (40520c <nm_spi_init+0xfc>)
  40518e:	47a0      	blx	r4
  405190:	481f      	ldr	r0, [pc, #124]	; (405210 <nm_spi_init+0x100>)
  405192:	47a0      	blx	r4
  405194:	481f      	ldr	r0, [pc, #124]	; (405214 <nm_spi_init+0x104>)
  405196:	47a0      	blx	r4
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
  405198:	4669      	mov	r1, sp
  40519a:	f64e 0024 	movw	r0, #59428	; 0xe824
  40519e:	4b15      	ldr	r3, [pc, #84]	; (4051f4 <nm_spi_init+0xe4>)
  4051a0:	4798      	blx	r3
  4051a2:	4604      	mov	r4, r0
  4051a4:	2800      	cmp	r0, #0
  4051a6:	d1c0      	bne.n	40512a <nm_spi_init+0x1a>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
  4051a8:	f44f 7232 	mov.w	r2, #712	; 0x2c8
  4051ac:	4915      	ldr	r1, [pc, #84]	; (405204 <nm_spi_init+0xf4>)
  4051ae:	4816      	ldr	r0, [pc, #88]	; (405208 <nm_spi_init+0xf8>)
  4051b0:	4d16      	ldr	r5, [pc, #88]	; (40520c <nm_spi_init+0xfc>)
  4051b2:	47a8      	blx	r5
  4051b4:	4818      	ldr	r0, [pc, #96]	; (405218 <nm_spi_init+0x108>)
  4051b6:	47a8      	blx	r5
  4051b8:	4816      	ldr	r0, [pc, #88]	; (405214 <nm_spi_init+0x104>)
  4051ba:	47a8      	blx	r5
			return 0;
  4051bc:	e7dc      	b.n	405178 <nm_spi_init+0x68>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
  4051be:	f240 22d2 	movw	r2, #722	; 0x2d2
  4051c2:	4910      	ldr	r1, [pc, #64]	; (405204 <nm_spi_init+0xf4>)
  4051c4:	4810      	ldr	r0, [pc, #64]	; (405208 <nm_spi_init+0xf8>)
  4051c6:	4d11      	ldr	r5, [pc, #68]	; (40520c <nm_spi_init+0xfc>)
  4051c8:	47a8      	blx	r5
  4051ca:	4814      	ldr	r0, [pc, #80]	; (40521c <nm_spi_init+0x10c>)
  4051cc:	47a8      	blx	r5
  4051ce:	4811      	ldr	r0, [pc, #68]	; (405214 <nm_spi_init+0x104>)
  4051d0:	47a8      	blx	r5
			return 0;
  4051d2:	e7d1      	b.n	405178 <nm_spi_init+0x68>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
  4051d4:	f44f 7237 	mov.w	r2, #732	; 0x2dc
  4051d8:	490a      	ldr	r1, [pc, #40]	; (405204 <nm_spi_init+0xf4>)
  4051da:	480b      	ldr	r0, [pc, #44]	; (405208 <nm_spi_init+0xf8>)
  4051dc:	4c0b      	ldr	r4, [pc, #44]	; (40520c <nm_spi_init+0xfc>)
  4051de:	47a0      	blx	r4
  4051e0:	480f      	ldr	r0, [pc, #60]	; (405220 <nm_spi_init+0x110>)
  4051e2:	47a0      	blx	r4
  4051e4:	480b      	ldr	r0, [pc, #44]	; (405214 <nm_spi_init+0x104>)
  4051e6:	47a0      	blx	r4
		return M2M_ERR_BUS_FAIL;
  4051e8:	f06f 0405 	mvn.w	r4, #5
  4051ec:	e7c4      	b.n	405178 <nm_spi_init+0x68>
  4051ee:	bf00      	nop
  4051f0:	20400a78 	.word	0x20400a78
  4051f4:	00404fc1 	.word	0x00404fc1
  4051f8:	00404f2d 	.word	0x00404f2d
  4051fc:	004050c9 	.word	0x004050c9
  405200:	004050f9 	.word	0x004050f9
  405204:	0040e1bc 	.word	0x0040e1bc
  405208:	0040db74 	.word	0x0040db74
  40520c:	00407321 	.word	0x00407321
  405210:	0040e2c8 	.word	0x0040e2c8
  405214:	0040e928 	.word	0x0040e928
  405218:	0040e318 	.word	0x0040e318
  40521c:	0040e348 	.word	0x0040e348
  405220:	0040e37c 	.word	0x0040e37c

00405224 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  405224:	b5f0      	push	{r4, r5, r6, r7, lr}
  405226:	b083      	sub	sp, #12
  405228:	4604      	mov	r4, r0
  40522a:	460f      	mov	r7, r1
  40522c:	4615      	mov	r5, r2
	result = spi_cmd(cmd, addr, 0, size,0);
  40522e:	2200      	movs	r2, #0
  405230:	9200      	str	r2, [sp, #0]
  405232:	462b      	mov	r3, r5
  405234:	4601      	mov	r1, r0
  405236:	20c8      	movs	r0, #200	; 0xc8
  405238:	4e22      	ldr	r6, [pc, #136]	; (4052c4 <nm_spi_read_block+0xa0>)
  40523a:	47b0      	blx	r6
	if (result != N_OK) {
  40523c:	2801      	cmp	r0, #1
  40523e:	d00e      	beq.n	40525e <nm_spi_read_block+0x3a>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
  405240:	f44f 721d 	mov.w	r2, #628	; 0x274
  405244:	4920      	ldr	r1, [pc, #128]	; (4052c8 <nm_spi_read_block+0xa4>)
  405246:	4821      	ldr	r0, [pc, #132]	; (4052cc <nm_spi_read_block+0xa8>)
  405248:	4d21      	ldr	r5, [pc, #132]	; (4052d0 <nm_spi_read_block+0xac>)
  40524a:	47a8      	blx	r5
  40524c:	4621      	mov	r1, r4
  40524e:	4821      	ldr	r0, [pc, #132]	; (4052d4 <nm_spi_read_block+0xb0>)
  405250:	47a8      	blx	r5
  405252:	4821      	ldr	r0, [pc, #132]	; (4052d8 <nm_spi_read_block+0xb4>)
  405254:	47a8      	blx	r5
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  405256:	f06f 0005 	mvn.w	r0, #5

	return s8Ret;
}
  40525a:	b003      	add	sp, #12
  40525c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	result = spi_cmd_rsp(cmd);
  40525e:	20c8      	movs	r0, #200	; 0xc8
  405260:	4b1e      	ldr	r3, [pc, #120]	; (4052dc <nm_spi_read_block+0xb8>)
  405262:	4798      	blx	r3
	if (result != N_OK) {
  405264:	2801      	cmp	r0, #1
  405266:	d012      	beq.n	40528e <nm_spi_read_block+0x6a>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
  405268:	f240 227a 	movw	r2, #634	; 0x27a
  40526c:	4916      	ldr	r1, [pc, #88]	; (4052c8 <nm_spi_read_block+0xa4>)
  40526e:	4817      	ldr	r0, [pc, #92]	; (4052cc <nm_spi_read_block+0xa8>)
  405270:	4d17      	ldr	r5, [pc, #92]	; (4052d0 <nm_spi_read_block+0xac>)
  405272:	47a8      	blx	r5
  405274:	4621      	mov	r1, r4
  405276:	481a      	ldr	r0, [pc, #104]	; (4052e0 <nm_spi_read_block+0xbc>)
  405278:	47a8      	blx	r5
  40527a:	4817      	ldr	r0, [pc, #92]	; (4052d8 <nm_spi_read_block+0xb4>)
  40527c:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  40527e:	2100      	movs	r1, #0
  405280:	9100      	str	r1, [sp, #0]
  405282:	460b      	mov	r3, r1
  405284:	460a      	mov	r2, r1
  405286:	20cf      	movs	r0, #207	; 0xcf
  405288:	4c0e      	ldr	r4, [pc, #56]	; (4052c4 <nm_spi_read_block+0xa0>)
  40528a:	47a0      	blx	r4
  40528c:	e7e3      	b.n	405256 <nm_spi_read_block+0x32>
	result = spi_data_read(buf, size,0);
  40528e:	2200      	movs	r2, #0
  405290:	4629      	mov	r1, r5
  405292:	4638      	mov	r0, r7
  405294:	4b13      	ldr	r3, [pc, #76]	; (4052e4 <nm_spi_read_block+0xc0>)
  405296:	4798      	blx	r3
	if (result != N_OK) {
  405298:	2801      	cmp	r0, #1
  40529a:	d011      	beq.n	4052c0 <nm_spi_read_block+0x9c>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
  40529c:	f44f 7221 	mov.w	r2, #644	; 0x284
  4052a0:	4909      	ldr	r1, [pc, #36]	; (4052c8 <nm_spi_read_block+0xa4>)
  4052a2:	480a      	ldr	r0, [pc, #40]	; (4052cc <nm_spi_read_block+0xa8>)
  4052a4:	4c0a      	ldr	r4, [pc, #40]	; (4052d0 <nm_spi_read_block+0xac>)
  4052a6:	47a0      	blx	r4
  4052a8:	480f      	ldr	r0, [pc, #60]	; (4052e8 <nm_spi_read_block+0xc4>)
  4052aa:	47a0      	blx	r4
  4052ac:	480a      	ldr	r0, [pc, #40]	; (4052d8 <nm_spi_read_block+0xb4>)
  4052ae:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  4052b0:	2100      	movs	r1, #0
  4052b2:	9100      	str	r1, [sp, #0]
  4052b4:	460b      	mov	r3, r1
  4052b6:	460a      	mov	r2, r1
  4052b8:	20cf      	movs	r0, #207	; 0xcf
  4052ba:	4c02      	ldr	r4, [pc, #8]	; (4052c4 <nm_spi_read_block+0xa0>)
  4052bc:	47a0      	blx	r4
  4052be:	e7ca      	b.n	405256 <nm_spi_read_block+0x32>
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  4052c0:	2000      	movs	r0, #0
  4052c2:	e7ca      	b.n	40525a <nm_spi_read_block+0x36>
  4052c4:	00404d7d 	.word	0x00404d7d
  4052c8:	0040e1b0 	.word	0x0040e1b0
  4052cc:	0040db74 	.word	0x0040db74
  4052d0:	00407321 	.word	0x00407321
  4052d4:	0040e3a4 	.word	0x0040e3a4
  4052d8:	0040e928 	.word	0x0040e928
  4052dc:	00404b81 	.word	0x00404b81
  4052e0:	0040e3d4 	.word	0x0040e3d4
  4052e4:	00404c45 	.word	0x00404c45
  4052e8:	0040e40c 	.word	0x0040e40c

004052ec <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  4052ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4052f0:	b085      	sub	sp, #20
  4052f2:	4604      	mov	r4, r0
  4052f4:	4688      	mov	r8, r1
  4052f6:	4615      	mov	r5, r2
	result = spi_cmd(cmd, addr, 0, size,0);
  4052f8:	2200      	movs	r2, #0
  4052fa:	9200      	str	r2, [sp, #0]
  4052fc:	462b      	mov	r3, r5
  4052fe:	4601      	mov	r1, r0
  405300:	20c7      	movs	r0, #199	; 0xc7
  405302:	4e4d      	ldr	r6, [pc, #308]	; (405438 <nm_spi_write_block+0x14c>)
  405304:	47b0      	blx	r6
	if (result != N_OK) {
  405306:	2801      	cmp	r0, #1
  405308:	d00f      	beq.n	40532a <nm_spi_write_block+0x3e>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
  40530a:	f240 220f 	movw	r2, #527	; 0x20f
  40530e:	494b      	ldr	r1, [pc, #300]	; (40543c <nm_spi_write_block+0x150>)
  405310:	484b      	ldr	r0, [pc, #300]	; (405440 <nm_spi_write_block+0x154>)
  405312:	4d4c      	ldr	r5, [pc, #304]	; (405444 <nm_spi_write_block+0x158>)
  405314:	47a8      	blx	r5
  405316:	4621      	mov	r1, r4
  405318:	484b      	ldr	r0, [pc, #300]	; (405448 <nm_spi_write_block+0x15c>)
  40531a:	47a8      	blx	r5
  40531c:	484b      	ldr	r0, [pc, #300]	; (40544c <nm_spi_write_block+0x160>)
  40531e:	47a8      	blx	r5
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  405320:	f06f 0005 	mvn.w	r0, #5

	return s8Ret;
}
  405324:	b005      	add	sp, #20
  405326:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	result = spi_cmd_rsp(cmd);
  40532a:	20c7      	movs	r0, #199	; 0xc7
  40532c:	4b48      	ldr	r3, [pc, #288]	; (405450 <nm_spi_write_block+0x164>)
  40532e:	4798      	blx	r3
	if (result != N_OK) {
  405330:	2801      	cmp	r0, #1
  405332:	d012      	beq.n	40535a <nm_spi_write_block+0x6e>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
  405334:	f240 2215 	movw	r2, #533	; 0x215
  405338:	4940      	ldr	r1, [pc, #256]	; (40543c <nm_spi_write_block+0x150>)
  40533a:	4841      	ldr	r0, [pc, #260]	; (405440 <nm_spi_write_block+0x154>)
  40533c:	4d41      	ldr	r5, [pc, #260]	; (405444 <nm_spi_write_block+0x158>)
  40533e:	47a8      	blx	r5
  405340:	4621      	mov	r1, r4
  405342:	4844      	ldr	r0, [pc, #272]	; (405454 <nm_spi_write_block+0x168>)
  405344:	47a8      	blx	r5
  405346:	4841      	ldr	r0, [pc, #260]	; (40544c <nm_spi_write_block+0x160>)
  405348:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  40534a:	2100      	movs	r1, #0
  40534c:	9100      	str	r1, [sp, #0]
  40534e:	460b      	mov	r3, r1
  405350:	460a      	mov	r2, r1
  405352:	20cf      	movs	r0, #207	; 0xcf
  405354:	4c38      	ldr	r4, [pc, #224]	; (405438 <nm_spi_write_block+0x14c>)
  405356:	47a0      	blx	r4
  405358:	e7e2      	b.n	405320 <nm_spi_write_block+0x34>
	uint8 cmd, order, crc[2] = {0};
  40535a:	2400      	movs	r4, #0
  40535c:	f8ad 400c 	strh.w	r4, [sp, #12]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
  405360:	4f3d      	ldr	r7, [pc, #244]	; (405458 <nm_spi_write_block+0x16c>)
		if (!gu8Crc_off) {
  405362:	f8df 910c 	ldr.w	r9, [pc, #268]	; 405470 <nm_spi_write_block+0x184>
  405366:	e01d      	b.n	4053a4 <nm_spi_write_block+0xb8>
				order = 0x2;
  405368:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  40536c:	bf94      	ite	ls
  40536e:	2303      	movls	r3, #3
  405370:	2302      	movhi	r3, #2
		cmd |= order;
  405372:	f063 030f 	orn	r3, r3, #15
  405376:	f88d 300b 	strb.w	r3, [sp, #11]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
  40537a:	2101      	movs	r1, #1
  40537c:	f10d 000b 	add.w	r0, sp, #11
  405380:	47b8      	blx	r7
  405382:	b9e8      	cbnz	r0, 4053c0 <nm_spi_write_block+0xd4>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
  405384:	4631      	mov	r1, r6
  405386:	eb08 0004 	add.w	r0, r8, r4
  40538a:	47b8      	blx	r7
  40538c:	2800      	cmp	r0, #0
  40538e:	d135      	bne.n	4053fc <nm_spi_write_block+0x110>
		if (!gu8Crc_off) {
  405390:	f899 3000 	ldrb.w	r3, [r9]
  405394:	2b00      	cmp	r3, #0
  405396:	d03c      	beq.n	405412 <nm_spi_write_block+0x126>
		ix += nbytes;
  405398:	4434      	add	r4, r6
  40539a:	b224      	sxth	r4, r4
		sz -= nbytes;
  40539c:	1bad      	subs	r5, r5, r6
  40539e:	b2ad      	uxth	r5, r5
	} while (sz);
  4053a0:	2d00      	cmp	r5, #0
  4053a2:	d046      	beq.n	405432 <nm_spi_write_block+0x146>
  4053a4:	462e      	mov	r6, r5
  4053a6:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  4053aa:	bf28      	it	cs
  4053ac:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
		if (ix == 0)  {
  4053b0:	2c00      	cmp	r4, #0
  4053b2:	d1d9      	bne.n	405368 <nm_spi_write_block+0x7c>
				order = 0x1;
  4053b4:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  4053b8:	bf94      	ite	ls
  4053ba:	2303      	movls	r3, #3
  4053bc:	2301      	movhi	r3, #1
  4053be:	e7d8      	b.n	405372 <nm_spi_write_block+0x86>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
  4053c0:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
  4053c4:	4925      	ldr	r1, [pc, #148]	; (40545c <nm_spi_write_block+0x170>)
  4053c6:	481e      	ldr	r0, [pc, #120]	; (405440 <nm_spi_write_block+0x154>)
  4053c8:	4c1e      	ldr	r4, [pc, #120]	; (405444 <nm_spi_write_block+0x158>)
  4053ca:	47a0      	blx	r4
  4053cc:	4824      	ldr	r0, [pc, #144]	; (405460 <nm_spi_write_block+0x174>)
  4053ce:	47a0      	blx	r4
  4053d0:	481e      	ldr	r0, [pc, #120]	; (40544c <nm_spi_write_block+0x160>)
  4053d2:	47a0      	blx	r4
		M2M_ERR("[nmi spi]: Failed block data write...\n");
  4053d4:	f240 2226 	movw	r2, #550	; 0x226
  4053d8:	4918      	ldr	r1, [pc, #96]	; (40543c <nm_spi_write_block+0x150>)
  4053da:	4819      	ldr	r0, [pc, #100]	; (405440 <nm_spi_write_block+0x154>)
  4053dc:	4c19      	ldr	r4, [pc, #100]	; (405444 <nm_spi_write_block+0x158>)
  4053de:	47a0      	blx	r4
  4053e0:	4820      	ldr	r0, [pc, #128]	; (405464 <nm_spi_write_block+0x178>)
  4053e2:	47a0      	blx	r4
  4053e4:	4819      	ldr	r0, [pc, #100]	; (40544c <nm_spi_write_block+0x160>)
  4053e6:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  4053e8:	2400      	movs	r4, #0
  4053ea:	9400      	str	r4, [sp, #0]
  4053ec:	4623      	mov	r3, r4
  4053ee:	4622      	mov	r2, r4
  4053f0:	4621      	mov	r1, r4
  4053f2:	20cf      	movs	r0, #207	; 0xcf
  4053f4:	4d10      	ldr	r5, [pc, #64]	; (405438 <nm_spi_write_block+0x14c>)
  4053f6:	47a8      	blx	r5
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  4053f8:	4620      	mov	r0, r4
  4053fa:	e793      	b.n	405324 <nm_spi_write_block+0x38>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
  4053fc:	f240 12b1 	movw	r2, #433	; 0x1b1
  405400:	4916      	ldr	r1, [pc, #88]	; (40545c <nm_spi_write_block+0x170>)
  405402:	480f      	ldr	r0, [pc, #60]	; (405440 <nm_spi_write_block+0x154>)
  405404:	4c0f      	ldr	r4, [pc, #60]	; (405444 <nm_spi_write_block+0x158>)
  405406:	47a0      	blx	r4
  405408:	4817      	ldr	r0, [pc, #92]	; (405468 <nm_spi_write_block+0x17c>)
  40540a:	47a0      	blx	r4
  40540c:	480f      	ldr	r0, [pc, #60]	; (40544c <nm_spi_write_block+0x160>)
  40540e:	47a0      	blx	r4
  405410:	e7e0      	b.n	4053d4 <nm_spi_write_block+0xe8>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
  405412:	2102      	movs	r1, #2
  405414:	a803      	add	r0, sp, #12
  405416:	47b8      	blx	r7
  405418:	2800      	cmp	r0, #0
  40541a:	d0bd      	beq.n	405398 <nm_spi_write_block+0xac>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
  40541c:	f240 12bb 	movw	r2, #443	; 0x1bb
  405420:	490e      	ldr	r1, [pc, #56]	; (40545c <nm_spi_write_block+0x170>)
  405422:	4807      	ldr	r0, [pc, #28]	; (405440 <nm_spi_write_block+0x154>)
  405424:	4c07      	ldr	r4, [pc, #28]	; (405444 <nm_spi_write_block+0x158>)
  405426:	47a0      	blx	r4
  405428:	4810      	ldr	r0, [pc, #64]	; (40546c <nm_spi_write_block+0x180>)
  40542a:	47a0      	blx	r4
  40542c:	4807      	ldr	r0, [pc, #28]	; (40544c <nm_spi_write_block+0x160>)
  40542e:	47a0      	blx	r4
  405430:	e7d0      	b.n	4053d4 <nm_spi_write_block+0xe8>
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  405432:	2000      	movs	r0, #0
  405434:	e776      	b.n	405324 <nm_spi_write_block+0x38>
  405436:	bf00      	nop
  405438:	00404d7d 	.word	0x00404d7d
  40543c:	0040e190 	.word	0x0040e190
  405440:	0040db74 	.word	0x0040db74
  405444:	00407321 	.word	0x00407321
  405448:	0040e434 	.word	0x0040e434
  40544c:	0040e928 	.word	0x0040e928
  405450:	00404b81 	.word	0x00404b81
  405454:	0040e464 	.word	0x0040e464
  405458:	00404d5d 	.word	0x00404d5d
  40545c:	0040e170 	.word	0x0040e170
  405460:	0040e49c 	.word	0x0040e49c
  405464:	0040e540 	.word	0x0040e540
  405468:	0040e4d4 	.word	0x0040e4d4
  40546c:	0040e508 	.word	0x0040e508
  405470:	20400a78 	.word	0x20400a78

00405474 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
  405474:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405478:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
  40547c:	b194      	cbz	r4, 4054a4 <Socket_ReadSocketData+0x30>
  40547e:	4681      	mov	r9, r0
  405480:	460e      	mov	r6, r1
  405482:	4692      	mov	sl, r2
  405484:	4698      	mov	r8, r3
  405486:	0103      	lsls	r3, r0, #4
  405488:	4922      	ldr	r1, [pc, #136]	; (405514 <Socket_ReadSocketData+0xa0>)
  40548a:	58cb      	ldr	r3, [r1, r3]
  40548c:	b153      	cbz	r3, 4054a4 <Socket_ReadSocketData+0x30>
  40548e:	eb01 1300 	add.w	r3, r1, r0, lsl #4
  405492:	889b      	ldrh	r3, [r3, #4]
  405494:	b29b      	uxth	r3, r3
  405496:	b12b      	cbz	r3, 4054a4 <Socket_ReadSocketData+0x30>
  405498:	eb01 1300 	add.w	r3, r1, r0, lsl #4
  40549c:	7a9b      	ldrb	r3, [r3, #10]
  40549e:	b2db      	uxtb	r3, r3
  4054a0:	2b01      	cmp	r3, #1
  4054a2:	d001      	beq.n	4054a8 <Socket_ReadSocketData+0x34>
  4054a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
  4054a8:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
  4054aa:	eb01 1700 	add.w	r7, r1, r0, lsl #4
			if(s16Diff > 0)
			{
				u8SetRxDone = 0;
				u16Read		= gastrSockets[sock].u16UserBufferSize;
			}
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
  4054ae:	f8df b07c 	ldr.w	fp, [pc, #124]	; 40552c <Socket_ReadSocketData+0xb8>
  4054b2:	e006      	b.n	4054c2 <Socket_ReadSocketData+0x4e>
  4054b4:	4625      	mov	r5, r4
			u8SetRxDone = 1;
  4054b6:	2301      	movs	r3, #1
  4054b8:	e00b      	b.n	4054d2 <Socket_ReadSocketData+0x5e>
				pstrRecv->u16RemainingSize	-= u16Read;

				if (gpfAppSocketCb)
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);

				u16ReadCount -= u16Read;
  4054ba:	1b64      	subs	r4, r4, r5
  4054bc:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
  4054be:	44a8      	add	r8, r5
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
				break;
			}
		}while(u16ReadCount != 0);
  4054c0:	b1ec      	cbz	r4, 4054fe <Socket_ReadSocketData+0x8a>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
  4054c2:	88bb      	ldrh	r3, [r7, #4]
  4054c4:	1ae3      	subs	r3, r4, r3
			if(s16Diff > 0)
  4054c6:	b21b      	sxth	r3, r3
  4054c8:	2b00      	cmp	r3, #0
  4054ca:	ddf3      	ble.n	4054b4 <Socket_ReadSocketData+0x40>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
  4054cc:	88bd      	ldrh	r5, [r7, #4]
  4054ce:	b2ad      	uxth	r5, r5
				u8SetRxDone = 0;
  4054d0:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
  4054d2:	6839      	ldr	r1, [r7, #0]
  4054d4:	462a      	mov	r2, r5
  4054d6:	4640      	mov	r0, r8
  4054d8:	47d8      	blx	fp
  4054da:	b990      	cbnz	r0, 405502 <Socket_ReadSocketData+0x8e>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
  4054dc:	683b      	ldr	r3, [r7, #0]
  4054de:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
  4054e0:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
  4054e2:	88f3      	ldrh	r3, [r6, #6]
  4054e4:	1b5b      	subs	r3, r3, r5
  4054e6:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
  4054e8:	4b0b      	ldr	r3, [pc, #44]	; (405518 <Socket_ReadSocketData+0xa4>)
  4054ea:	681b      	ldr	r3, [r3, #0]
  4054ec:	2b00      	cmp	r3, #0
  4054ee:	d0e4      	beq.n	4054ba <Socket_ReadSocketData+0x46>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
  4054f0:	4b09      	ldr	r3, [pc, #36]	; (405518 <Socket_ReadSocketData+0xa4>)
  4054f2:	681b      	ldr	r3, [r3, #0]
  4054f4:	4632      	mov	r2, r6
  4054f6:	4651      	mov	r1, sl
  4054f8:	4648      	mov	r0, r9
  4054fa:	4798      	blx	r3
  4054fc:	e7dd      	b.n	4054ba <Socket_ReadSocketData+0x46>
  4054fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
  405502:	4806      	ldr	r0, [pc, #24]	; (40551c <Socket_ReadSocketData+0xa8>)
  405504:	4d06      	ldr	r5, [pc, #24]	; (405520 <Socket_ReadSocketData+0xac>)
  405506:	47a8      	blx	r5
  405508:	4621      	mov	r1, r4
  40550a:	4806      	ldr	r0, [pc, #24]	; (405524 <Socket_ReadSocketData+0xb0>)
  40550c:	47a8      	blx	r5
  40550e:	4806      	ldr	r0, [pc, #24]	; (405528 <Socket_ReadSocketData+0xb4>)
  405510:	47a8      	blx	r5
	}
}
  405512:	e7c7      	b.n	4054a4 <Socket_ReadSocketData+0x30>
  405514:	2040169c 	.word	0x2040169c
  405518:	2040174c 	.word	0x2040174c
  40551c:	0040de44 	.word	0x0040de44
  405520:	00407321 	.word	0x00407321
  405524:	0040e77c 	.word	0x0040e77c
  405528:	0040e928 	.word	0x0040e928
  40552c:	00403bad 	.word	0x00403bad

00405530 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{
  405530:	b5f0      	push	{r4, r5, r6, r7, lr}
  405532:	b099      	sub	sp, #100	; 0x64
  405534:	4614      	mov	r4, r2
	if(u8OpCode == SOCKET_CMD_BIND)
  405536:	2841      	cmp	r0, #65	; 0x41
  405538:	d049      	beq.n	4055ce <m2m_ip_cb+0x9e>
  40553a:	460d      	mov	r5, r1
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
  40553c:	2842      	cmp	r0, #66	; 0x42
  40553e:	d05f      	beq.n	405600 <m2m_ip_cb+0xd0>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
  405540:	2843      	cmp	r0, #67	; 0x43
  405542:	d075      	beq.n	405630 <m2m_ip_cb+0x100>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
  405544:	2844      	cmp	r0, #68	; 0x44
  405546:	f000 80b0 	beq.w	4056aa <m2m_ip_cb+0x17a>
  40554a:	284b      	cmp	r0, #75	; 0x4b
  40554c:	f000 80ad 	beq.w	4056aa <m2m_ip_cb+0x17a>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
  405550:	284a      	cmp	r0, #74	; 0x4a
  405552:	f000 80cc 	beq.w	4056ee <m2m_ip_cb+0x1be>
			strDnsReply.u32HostIP = strDnsReply.u32HostIP;
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
  405556:	f1a0 0346 	sub.w	r3, r0, #70	; 0x46
  40555a:	b2db      	uxtb	r3, r3
  40555c:	2b07      	cmp	r3, #7
  40555e:	f200 80f4 	bhi.w	40574a <m2m_ip_cb+0x21a>
  405562:	2285      	movs	r2, #133	; 0x85
  405564:	fa22 f303 	lsr.w	r3, r2, r3
  405568:	f013 0f01 	tst.w	r3, #1
  40556c:	f000 80ed 	beq.w	40574a <m2m_ip_cb+0x21a>
		tstrSocketRecvMsg	strRecvMsg;
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
		uint16				u16DataOffset;

		if(u8OpCode == SOCKET_CMD_RECVFROM)
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
  405570:	2848      	cmp	r0, #72	; 0x48
  405572:	bf14      	ite	ne
  405574:	2706      	movne	r7, #6
  405576:	2709      	moveq	r7, #9

		/* Read RECV REPLY data structure.
		*/
		u16ReadSize = sizeof(tstrRecvReply);
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
  405578:	2300      	movs	r3, #0
  40557a:	2210      	movs	r2, #16
  40557c:	a903      	add	r1, sp, #12
  40557e:	4620      	mov	r0, r4
  405580:	4e93      	ldr	r6, [pc, #588]	; (4057d0 <m2m_ip_cb+0x2a0>)
  405582:	47b0      	blx	r6
  405584:	2800      	cmp	r0, #0
  405586:	f040 80b0 	bne.w	4056ea <m2m_ip_cb+0x1ba>
		{
			uint16 u16SessionID = 0;

			sock			= strRecvReply.sock;
  40558a:	f99d 0018 	ldrsb.w	r0, [sp, #24]
			u16SessionID = strRecvReply.u16SessionID;
  40558e:	f8bd 101a 	ldrh.w	r1, [sp, #26]
			M2M_DBG("recv callback session ID = %d\r\n",u16SessionID);
			
			/* Reset the Socket RX Pending Flag.
			*/
			gastrSockets[sock].bIsRecvPending = 0;
  405592:	4a90      	ldr	r2, [pc, #576]	; (4057d4 <m2m_ip_cb+0x2a4>)
  405594:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  405598:	2300      	movs	r3, #0
  40559a:	7313      	strb	r3, [r2, #12]

			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
  40559c:	f9bd e014 	ldrsh.w	lr, [sp, #20]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
  4055a0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
  4055a4:	f8bd 600e 	ldrh.w	r6, [sp, #14]
  4055a8:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
  4055ac:	9e04      	ldr	r6, [sp, #16]
  4055ae:	960a      	str	r6, [sp, #40]	; 0x28

			if(u16SessionID == gastrSockets[sock].u16SessionID)
  4055b0:	88d2      	ldrh	r2, [r2, #6]
  4055b2:	b292      	uxth	r2, r2
  4055b4:	4291      	cmp	r1, r2
  4055b6:	f000 80ac 	beq.w	405712 <m2m_ip_cb+0x1e2>
				}
			}
			else
			{
				M2M_DBG("Discard recv callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
				if(u16ReadSize < u16BufferSize)
  4055ba:	2d10      	cmp	r5, #16
  4055bc:	f240 8095 	bls.w	4056ea <m2m_ip_cb+0x1ba>
					hif_receive(0, NULL, 0, 1);
  4055c0:	2301      	movs	r3, #1
  4055c2:	2200      	movs	r2, #0
  4055c4:	4611      	mov	r1, r2
  4055c6:	4610      	mov	r0, r2
  4055c8:	4c81      	ldr	r4, [pc, #516]	; (4057d0 <m2m_ip_cb+0x2a0>)
  4055ca:	47a0      	blx	r4
	{
  4055cc:	e08d      	b.n	4056ea <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
  4055ce:	2300      	movs	r3, #0
  4055d0:	2204      	movs	r2, #4
  4055d2:	a907      	add	r1, sp, #28
  4055d4:	4620      	mov	r0, r4
  4055d6:	4c7e      	ldr	r4, [pc, #504]	; (4057d0 <m2m_ip_cb+0x2a0>)
  4055d8:	47a0      	blx	r4
  4055da:	2800      	cmp	r0, #0
  4055dc:	f040 8085 	bne.w	4056ea <m2m_ip_cb+0x1ba>
			strBind.status = strBindReply.s8Status;
  4055e0:	f89d 301d 	ldrb.w	r3, [sp, #29]
  4055e4:	f88d 300c 	strb.w	r3, [sp, #12]
			if(gpfAppSocketCb)
  4055e8:	4b7b      	ldr	r3, [pc, #492]	; (4057d8 <m2m_ip_cb+0x2a8>)
  4055ea:	681b      	ldr	r3, [r3, #0]
  4055ec:	2b00      	cmp	r3, #0
  4055ee:	d07c      	beq.n	4056ea <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
  4055f0:	4b79      	ldr	r3, [pc, #484]	; (4057d8 <m2m_ip_cb+0x2a8>)
  4055f2:	681b      	ldr	r3, [r3, #0]
  4055f4:	aa03      	add	r2, sp, #12
  4055f6:	2101      	movs	r1, #1
  4055f8:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  4055fc:	4798      	blx	r3
  4055fe:	e074      	b.n	4056ea <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
  405600:	2300      	movs	r3, #0
  405602:	2204      	movs	r2, #4
  405604:	a907      	add	r1, sp, #28
  405606:	4620      	mov	r0, r4
  405608:	4c71      	ldr	r4, [pc, #452]	; (4057d0 <m2m_ip_cb+0x2a0>)
  40560a:	47a0      	blx	r4
  40560c:	2800      	cmp	r0, #0
  40560e:	d16c      	bne.n	4056ea <m2m_ip_cb+0x1ba>
			strListen.status = strListenReply.s8Status;
  405610:	f89d 301d 	ldrb.w	r3, [sp, #29]
  405614:	f88d 300c 	strb.w	r3, [sp, #12]
			if(gpfAppSocketCb)
  405618:	4b6f      	ldr	r3, [pc, #444]	; (4057d8 <m2m_ip_cb+0x2a8>)
  40561a:	681b      	ldr	r3, [r3, #0]
  40561c:	2b00      	cmp	r3, #0
  40561e:	d064      	beq.n	4056ea <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
  405620:	4b6d      	ldr	r3, [pc, #436]	; (4057d8 <m2m_ip_cb+0x2a8>)
  405622:	681b      	ldr	r3, [r3, #0]
  405624:	aa03      	add	r2, sp, #12
  405626:	2102      	movs	r1, #2
  405628:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  40562c:	4798      	blx	r3
  40562e:	e05c      	b.n	4056ea <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
  405630:	2300      	movs	r3, #0
  405632:	220c      	movs	r2, #12
  405634:	eb0d 0102 	add.w	r1, sp, r2
  405638:	4620      	mov	r0, r4
  40563a:	4c65      	ldr	r4, [pc, #404]	; (4057d0 <m2m_ip_cb+0x2a0>)
  40563c:	47a0      	blx	r4
  40563e:	2800      	cmp	r0, #0
  405640:	d153      	bne.n	4056ea <m2m_ip_cb+0x1ba>
			if(strAcceptReply.sConnectedSock >= 0)
  405642:	f99d 3015 	ldrsb.w	r3, [sp, #21]
  405646:	2b00      	cmp	r3, #0
  405648:	db19      	blt.n	40567e <m2m_ip_cb+0x14e>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 	= 0;
  40564a:	4a62      	ldr	r2, [pc, #392]	; (4057d4 <m2m_ip_cb+0x2a4>)
  40564c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
  405650:	2100      	movs	r1, #0
  405652:	72d1      	strb	r1, [r2, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 	= 1;
  405654:	2101      	movs	r1, #1
  405656:	7291      	strb	r1, [r2, #10]
				++gu16SessionID;
  405658:	4960      	ldr	r1, [pc, #384]	; (4057dc <m2m_ip_cb+0x2ac>)
  40565a:	880a      	ldrh	r2, [r1, #0]
  40565c:	3201      	adds	r2, #1
  40565e:	b292      	uxth	r2, r2
  405660:	800a      	strh	r2, [r1, #0]
				if(gu16SessionID == 0)
  405662:	880a      	ldrh	r2, [r1, #0]
  405664:	b292      	uxth	r2, r2
  405666:	b91a      	cbnz	r2, 405670 <m2m_ip_cb+0x140>
					++gu16SessionID;
  405668:	880a      	ldrh	r2, [r1, #0]
  40566a:	3201      	adds	r2, #1
  40566c:	b292      	uxth	r2, r2
  40566e:	800a      	strh	r2, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
  405670:	4a5a      	ldr	r2, [pc, #360]	; (4057dc <m2m_ip_cb+0x2ac>)
  405672:	8811      	ldrh	r1, [r2, #0]
  405674:	b289      	uxth	r1, r1
  405676:	4a57      	ldr	r2, [pc, #348]	; (4057d4 <m2m_ip_cb+0x2a4>)
  405678:	eb02 1203 	add.w	r2, r2, r3, lsl #4
  40567c:	80d1      	strh	r1, [r2, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
  40567e:	f88d 301c 	strb.w	r3, [sp, #28]
			strAccept.strAddr.sin_family		= AF_INET;
  405682:	2302      	movs	r3, #2
  405684:	f8ad 3020 	strh.w	r3, [sp, #32]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
  405688:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  40568c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
  405690:	9b04      	ldr	r3, [sp, #16]
  405692:	9309      	str	r3, [sp, #36]	; 0x24
			if(gpfAppSocketCb)
  405694:	4b50      	ldr	r3, [pc, #320]	; (4057d8 <m2m_ip_cb+0x2a8>)
  405696:	681b      	ldr	r3, [r3, #0]
  405698:	b33b      	cbz	r3, 4056ea <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
  40569a:	4b4f      	ldr	r3, [pc, #316]	; (4057d8 <m2m_ip_cb+0x2a8>)
  40569c:	681b      	ldr	r3, [r3, #0]
  40569e:	aa07      	add	r2, sp, #28
  4056a0:	2104      	movs	r1, #4
  4056a2:	f99d 0014 	ldrsb.w	r0, [sp, #20]
  4056a6:	4798      	blx	r3
  4056a8:	e01f      	b.n	4056ea <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
  4056aa:	2300      	movs	r3, #0
  4056ac:	2204      	movs	r2, #4
  4056ae:	a907      	add	r1, sp, #28
  4056b0:	4620      	mov	r0, r4
  4056b2:	4c47      	ldr	r4, [pc, #284]	; (4057d0 <m2m_ip_cb+0x2a0>)
  4056b4:	47a0      	blx	r4
  4056b6:	b9c0      	cbnz	r0, 4056ea <m2m_ip_cb+0x1ba>
			strConnMsg.sock		= strConnectReply.sock;
  4056b8:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  4056bc:	f88d 000c 	strb.w	r0, [sp, #12]
			strConnMsg.s8Error	= strConnectReply.s8Error;
  4056c0:	f99d 301d 	ldrsb.w	r3, [sp, #29]
  4056c4:	f88d 300d 	strb.w	r3, [sp, #13]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
  4056c8:	b93b      	cbnz	r3, 4056da <m2m_ip_cb+0x1aa>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
  4056ca:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  4056ce:	3b08      	subs	r3, #8
  4056d0:	b29b      	uxth	r3, r3
  4056d2:	4a40      	ldr	r2, [pc, #256]	; (4057d4 <m2m_ip_cb+0x2a4>)
  4056d4:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  4056d8:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
  4056da:	4b3f      	ldr	r3, [pc, #252]	; (4057d8 <m2m_ip_cb+0x2a8>)
  4056dc:	681b      	ldr	r3, [r3, #0]
  4056de:	b123      	cbz	r3, 4056ea <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
  4056e0:	4b3d      	ldr	r3, [pc, #244]	; (4057d8 <m2m_ip_cb+0x2a8>)
  4056e2:	681b      	ldr	r3, [r3, #0]
  4056e4:	aa03      	add	r2, sp, #12
  4056e6:	2105      	movs	r1, #5
  4056e8:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
  4056ea:	b019      	add	sp, #100	; 0x64
  4056ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
  4056ee:	2300      	movs	r3, #0
  4056f0:	2244      	movs	r2, #68	; 0x44
  4056f2:	a907      	add	r1, sp, #28
  4056f4:	4620      	mov	r0, r4
  4056f6:	4c36      	ldr	r4, [pc, #216]	; (4057d0 <m2m_ip_cb+0x2a0>)
  4056f8:	47a0      	blx	r4
  4056fa:	2800      	cmp	r0, #0
  4056fc:	d1f5      	bne.n	4056ea <m2m_ip_cb+0x1ba>
			if(gpfAppResolveCb)
  4056fe:	4b38      	ldr	r3, [pc, #224]	; (4057e0 <m2m_ip_cb+0x2b0>)
  405700:	681b      	ldr	r3, [r3, #0]
  405702:	2b00      	cmp	r3, #0
  405704:	d0f1      	beq.n	4056ea <m2m_ip_cb+0x1ba>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
  405706:	4b36      	ldr	r3, [pc, #216]	; (4057e0 <m2m_ip_cb+0x2b0>)
  405708:	681b      	ldr	r3, [r3, #0]
  40570a:	9917      	ldr	r1, [sp, #92]	; 0x5c
  40570c:	a807      	add	r0, sp, #28
  40570e:	4798      	blx	r3
  405710:	e7eb      	b.n	4056ea <m2m_ip_cb+0x1ba>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
  405712:	f1be 0f00 	cmp.w	lr, #0
  405716:	dd01      	ble.n	40571c <m2m_ip_cb+0x1ec>
  405718:	45ae      	cmp	lr, r5
  40571a:	db0d      	blt.n	405738 <m2m_ip_cb+0x208>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
  40571c:	f8ad e020 	strh.w	lr, [sp, #32]
					strRecvMsg.pu8Buffer		= NULL;
  405720:	2300      	movs	r3, #0
  405722:	9307      	str	r3, [sp, #28]
					if(gpfAppSocketCb)
  405724:	4b2c      	ldr	r3, [pc, #176]	; (4057d8 <m2m_ip_cb+0x2a8>)
  405726:	681b      	ldr	r3, [r3, #0]
  405728:	2b00      	cmp	r3, #0
  40572a:	d0de      	beq.n	4056ea <m2m_ip_cb+0x1ba>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
  40572c:	4b2a      	ldr	r3, [pc, #168]	; (4057d8 <m2m_ip_cb+0x2a8>)
  40572e:	681b      	ldr	r3, [r3, #0]
  405730:	aa07      	add	r2, sp, #28
  405732:	4639      	mov	r1, r7
  405734:	4798      	blx	r3
  405736:	e7d8      	b.n	4056ea <m2m_ip_cb+0x1ba>
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
  405738:	fa1f f28e 	uxth.w	r2, lr
  40573c:	9200      	str	r2, [sp, #0]
  40573e:	4423      	add	r3, r4
  405740:	463a      	mov	r2, r7
  405742:	a907      	add	r1, sp, #28
  405744:	4c27      	ldr	r4, [pc, #156]	; (4057e4 <m2m_ip_cb+0x2b4>)
  405746:	47a0      	blx	r4
  405748:	e7cf      	b.n	4056ea <m2m_ip_cb+0x1ba>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
  40574a:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
  40574e:	2b45      	cmp	r3, #69	; 0x45
  405750:	d019      	beq.n	405786 <m2m_ip_cb+0x256>
  405752:	284c      	cmp	r0, #76	; 0x4c
  405754:	d017      	beq.n	405786 <m2m_ip_cb+0x256>
	else if(u8OpCode == SOCKET_CMD_PING)
  405756:	2852      	cmp	r0, #82	; 0x52
  405758:	d1c7      	bne.n	4056ea <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
  40575a:	2301      	movs	r3, #1
  40575c:	2214      	movs	r2, #20
  40575e:	a907      	add	r1, sp, #28
  405760:	4620      	mov	r0, r4
  405762:	4c1b      	ldr	r4, [pc, #108]	; (4057d0 <m2m_ip_cb+0x2a0>)
  405764:	47a0      	blx	r4
  405766:	2800      	cmp	r0, #0
  405768:	d1bf      	bne.n	4056ea <m2m_ip_cb+0x1ba>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
  40576a:	4b1f      	ldr	r3, [pc, #124]	; (4057e8 <m2m_ip_cb+0x2b8>)
  40576c:	9a08      	ldr	r2, [sp, #32]
  40576e:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
  405770:	681b      	ldr	r3, [r3, #0]
  405772:	2b00      	cmp	r3, #0
  405774:	d0b9      	beq.n	4056ea <m2m_ip_cb+0x1ba>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
  405776:	4b1c      	ldr	r3, [pc, #112]	; (4057e8 <m2m_ip_cb+0x2b8>)
  405778:	681b      	ldr	r3, [r3, #0]
  40577a:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
  40577e:	9909      	ldr	r1, [sp, #36]	; 0x24
  405780:	9807      	ldr	r0, [sp, #28]
  405782:	4798      	blx	r3
}
  405784:	e7b1      	b.n	4056ea <m2m_ip_cb+0x1ba>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
  405786:	2847      	cmp	r0, #71	; 0x47
  405788:	bf14      	ite	ne
  40578a:	2507      	movne	r5, #7
  40578c:	2508      	moveq	r5, #8
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
  40578e:	2300      	movs	r3, #0
  405790:	2208      	movs	r2, #8
  405792:	a907      	add	r1, sp, #28
  405794:	4620      	mov	r0, r4
  405796:	4c0e      	ldr	r4, [pc, #56]	; (4057d0 <m2m_ip_cb+0x2a0>)
  405798:	47a0      	blx	r4
  40579a:	2800      	cmp	r0, #0
  40579c:	d1a5      	bne.n	4056ea <m2m_ip_cb+0x1ba>
			sock = strReply.sock;
  40579e:	f99d 001c 	ldrsb.w	r0, [sp, #28]
			u16SessionID = strReply.u16SessionID;
  4057a2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
  4057a6:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  4057aa:	f8ad 300c 	strh.w	r3, [sp, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
  4057ae:	4b09      	ldr	r3, [pc, #36]	; (4057d4 <m2m_ip_cb+0x2a4>)
  4057b0:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  4057b4:	88db      	ldrh	r3, [r3, #6]
  4057b6:	b29b      	uxth	r3, r3
  4057b8:	429a      	cmp	r2, r3
  4057ba:	d196      	bne.n	4056ea <m2m_ip_cb+0x1ba>
				if(gpfAppSocketCb)
  4057bc:	4b06      	ldr	r3, [pc, #24]	; (4057d8 <m2m_ip_cb+0x2a8>)
  4057be:	681b      	ldr	r3, [r3, #0]
  4057c0:	2b00      	cmp	r3, #0
  4057c2:	d092      	beq.n	4056ea <m2m_ip_cb+0x1ba>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
  4057c4:	4b04      	ldr	r3, [pc, #16]	; (4057d8 <m2m_ip_cb+0x2a8>)
  4057c6:	681b      	ldr	r3, [r3, #0]
  4057c8:	aa03      	add	r2, sp, #12
  4057ca:	4629      	mov	r1, r5
  4057cc:	4798      	blx	r3
	{
  4057ce:	e78c      	b.n	4056ea <m2m_ip_cb+0x1ba>
  4057d0:	00403bad 	.word	0x00403bad
  4057d4:	2040169c 	.word	0x2040169c
  4057d8:	2040174c 	.word	0x2040174c
  4057dc:	20400a7a 	.word	0x20400a7a
  4057e0:	20401754 	.word	0x20401754
  4057e4:	00405475 	.word	0x00405475
  4057e8:	20401750 	.word	0x20401750

004057ec <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
  4057ec:	b508      	push	{r3, lr}
	if(gbSocketInit==0)
  4057ee:	4b0a      	ldr	r3, [pc, #40]	; (405818 <socketInit+0x2c>)
  4057f0:	781b      	ldrb	r3, [r3, #0]
  4057f2:	b103      	cbz	r3, 4057f6 <socketInit+0xa>
  4057f4:	bd08      	pop	{r3, pc}
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
  4057f6:	22b0      	movs	r2, #176	; 0xb0
  4057f8:	2100      	movs	r1, #0
  4057fa:	4808      	ldr	r0, [pc, #32]	; (40581c <socketInit+0x30>)
  4057fc:	4b08      	ldr	r3, [pc, #32]	; (405820 <socketInit+0x34>)
  4057fe:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
  405800:	4908      	ldr	r1, [pc, #32]	; (405824 <socketInit+0x38>)
  405802:	2002      	movs	r0, #2
  405804:	4b08      	ldr	r3, [pc, #32]	; (405828 <socketInit+0x3c>)
  405806:	4798      	blx	r3
		gbSocketInit=1;
  405808:	2201      	movs	r2, #1
  40580a:	4b03      	ldr	r3, [pc, #12]	; (405818 <socketInit+0x2c>)
  40580c:	701a      	strb	r2, [r3, #0]
		gu16SessionID = 0;
  40580e:	2200      	movs	r2, #0
  405810:	4b06      	ldr	r3, [pc, #24]	; (40582c <socketInit+0x40>)
  405812:	801a      	strh	r2, [r3, #0]
	}
}
  405814:	e7ee      	b.n	4057f4 <socketInit+0x8>
  405816:	bf00      	nop
  405818:	20400a79 	.word	0x20400a79
  40581c:	2040169c 	.word	0x2040169c
  405820:	00403559 	.word	0x00403559
  405824:	00405531 	.word	0x00405531
  405828:	00403cc1 	.word	0x00403cc1
  40582c:	20400a7a 	.word	0x20400a7a

00405830 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
  405830:	4b02      	ldr	r3, [pc, #8]	; (40583c <registerSocketCallback+0xc>)
  405832:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
  405834:	4b02      	ldr	r3, [pc, #8]	; (405840 <registerSocketCallback+0x10>)
  405836:	6019      	str	r1, [r3, #0]
  405838:	4770      	bx	lr
  40583a:	bf00      	nop
  40583c:	2040174c 	.word	0x2040174c
  405840:	20401754 	.word	0x20401754

00405844 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
  405844:	b5f0      	push	{r4, r5, r6, r7, lr}
  405846:	b087      	sub	sp, #28
	SOCKET		sock = -1;
	uint8		u8Count,u8SocketCount = MAX_SOCKET;
	volatile tstrSocket	*pstrSock;
	
	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
  405848:	2802      	cmp	r0, #2
  40584a:	d158      	bne.n	4058fe <socket+0xba>
	{
		if(u8Type == SOCK_STREAM)
  40584c:	2901      	cmp	r1, #1
  40584e:	d059      	beq.n	405904 <socket+0xc0>
		{
			u8SocketCount = TCP_SOCK_MAX;
			u8Count = 0;
		}
		else if(u8Type == SOCK_DGRAM)
  405850:	2902      	cmp	r1, #2
  405852:	d116      	bne.n	405882 <socket+0x3e>
		{
			/*--- UDP SOCKET ---*/
			u8SocketCount = MAX_SOCKET;
  405854:	260b      	movs	r6, #11
			u8Count = TCP_SOCK_MAX;
  405856:	2407      	movs	r4, #7
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
  405858:	4625      	mov	r5, r4
			if(pstrSock->bIsUsed == 0)
  40585a:	4b2e      	ldr	r3, [pc, #184]	; (405914 <socket+0xd0>)
  40585c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  405860:	7a9b      	ldrb	r3, [r3, #10]
  405862:	2b00      	cmp	r3, #0
  405864:	d051      	beq.n	40590a <socket+0xc6>
  405866:	1c63      	adds	r3, r4, #1
  405868:	b2db      	uxtb	r3, r3
  40586a:	4f2a      	ldr	r7, [pc, #168]	; (405914 <socket+0xd0>)
		for(;u8Count < u8SocketCount; u8Count ++)
  40586c:	b2dc      	uxtb	r4, r3
  40586e:	42b4      	cmp	r4, r6
  405870:	d240      	bcs.n	4058f4 <socket+0xb0>
			pstrSock = &gastrSockets[u8Count];
  405872:	461d      	mov	r5, r3
			if(pstrSock->bIsUsed == 0)
  405874:	eb07 1103 	add.w	r1, r7, r3, lsl #4
  405878:	7a89      	ldrb	r1, [r1, #10]
  40587a:	1c58      	adds	r0, r3, #1
  40587c:	b121      	cbz	r1, 405888 <socket+0x44>
  40587e:	4603      	mov	r3, r0
  405880:	e7f4      	b.n	40586c <socket+0x28>
			return sock;
  405882:	f04f 34ff 	mov.w	r4, #4294967295
  405886:	e037      	b.n	4058f8 <socket+0xb4>
			pstrSock = &gastrSockets[u8Count];
  405888:	4822      	ldr	r0, [pc, #136]	; (405914 <socket+0xd0>)
  40588a:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  40588e:	4616      	mov	r6, r2
			{
				m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
  405890:	2210      	movs	r2, #16
  405892:	2100      	movs	r1, #0
  405894:	4b20      	ldr	r3, [pc, #128]	; (405918 <socket+0xd4>)
  405896:	4798      	blx	r3

				pstrSock->bIsUsed = 1;
  405898:	4b1e      	ldr	r3, [pc, #120]	; (405914 <socket+0xd0>)
  40589a:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  40589e:	2201      	movs	r2, #1
  4058a0:	729a      	strb	r2, [r3, #10]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
  4058a2:	4a1e      	ldr	r2, [pc, #120]	; (40591c <socket+0xd8>)
  4058a4:	8813      	ldrh	r3, [r2, #0]
  4058a6:	3301      	adds	r3, #1
  4058a8:	b29b      	uxth	r3, r3
  4058aa:	8013      	strh	r3, [r2, #0]
				if(gu16SessionID == 0)
  4058ac:	8813      	ldrh	r3, [r2, #0]
  4058ae:	b29b      	uxth	r3, r3
  4058b0:	b91b      	cbnz	r3, 4058ba <socket+0x76>
					++gu16SessionID;
  4058b2:	8813      	ldrh	r3, [r2, #0]
  4058b4:	3301      	adds	r3, #1
  4058b6:	b29b      	uxth	r3, r3
  4058b8:	8013      	strh	r3, [r2, #0]
				
				pstrSock->u16SessionID = gu16SessionID;
  4058ba:	4b18      	ldr	r3, [pc, #96]	; (40591c <socket+0xd8>)
  4058bc:	881a      	ldrh	r2, [r3, #0]
  4058be:	b292      	uxth	r2, r2
  4058c0:	4b14      	ldr	r3, [pc, #80]	; (405914 <socket+0xd0>)
  4058c2:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  4058c6:	80da      	strh	r2, [r3, #6]
				M2M_DBG("1 Socket %d session ID = %d\r\n",u8Count, gu16SessionID );
				sock = (SOCKET)u8Count;
  4058c8:	b264      	sxtb	r4, r4

				if(u8Flags & SOCKET_FLAGS_SSL)
  4058ca:	f016 0f01 	tst.w	r6, #1
  4058ce:	d013      	beq.n	4058f8 <socket+0xb4>
				{
					tstrSSLSocketCreateCmd	strSSLCreate;
					strSSLCreate.sslSock = sock;
  4058d0:	aa06      	add	r2, sp, #24
  4058d2:	f802 4d04 	strb.w	r4, [r2, #-4]!
					pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
  4058d6:	4b0f      	ldr	r3, [pc, #60]	; (405914 <socket+0xd0>)
  4058d8:	eb03 1505 	add.w	r5, r3, r5, lsl #4
  4058dc:	2321      	movs	r3, #33	; 0x21
  4058de:	72eb      	strb	r3, [r5, #11]
					SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
  4058e0:	2300      	movs	r3, #0
  4058e2:	9302      	str	r3, [sp, #8]
  4058e4:	9301      	str	r3, [sp, #4]
  4058e6:	9300      	str	r3, [sp, #0]
  4058e8:	2304      	movs	r3, #4
  4058ea:	2150      	movs	r1, #80	; 0x50
  4058ec:	2002      	movs	r0, #2
  4058ee:	4d0c      	ldr	r5, [pc, #48]	; (405920 <socket+0xdc>)
  4058f0:	47a8      	blx	r5
  4058f2:	e001      	b.n	4058f8 <socket+0xb4>
	SOCKET		sock = -1;
  4058f4:	f04f 34ff 	mov.w	r4, #4294967295
				break;
			}
		}
	}
	return sock;
}
  4058f8:	4620      	mov	r0, r4
  4058fa:	b007      	add	sp, #28
  4058fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SOCKET		sock = -1;
  4058fe:	f04f 34ff 	mov.w	r4, #4294967295
  405902:	e7f9      	b.n	4058f8 <socket+0xb4>
			u8SocketCount = TCP_SOCK_MAX;
  405904:	2607      	movs	r6, #7
			u8Count = 0;
  405906:	2400      	movs	r4, #0
  405908:	e7a6      	b.n	405858 <socket+0x14>
			pstrSock = &gastrSockets[u8Count];
  40590a:	4802      	ldr	r0, [pc, #8]	; (405914 <socket+0xd0>)
  40590c:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  405910:	e7bd      	b.n	40588e <socket+0x4a>
  405912:	bf00      	nop
  405914:	2040169c 	.word	0x2040169c
  405918:	00403559 	.word	0x00403559
  40591c:	20400a7a 	.word	0x20400a7a
  405920:	004036bd 	.word	0x004036bd

00405924 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
  405924:	b530      	push	{r4, r5, lr}
  405926:	b089      	sub	sp, #36	; 0x24
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
  405928:	1e04      	subs	r4, r0, #0
  40592a:	db36      	blt.n	40599a <connect+0x76>
  40592c:	2900      	cmp	r1, #0
  40592e:	d034      	beq.n	40599a <connect+0x76>
  405930:	4b1d      	ldr	r3, [pc, #116]	; (4059a8 <connect+0x84>)
  405932:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  405936:	7a9b      	ldrb	r3, [r3, #10]
  405938:	b2db      	uxtb	r3, r3
  40593a:	2a00      	cmp	r2, #0
  40593c:	d030      	beq.n	4059a0 <connect+0x7c>
  40593e:	2b01      	cmp	r3, #1
  405940:	d12e      	bne.n	4059a0 <connect+0x7c>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
  405942:	4b19      	ldr	r3, [pc, #100]	; (4059a8 <connect+0x84>)
  405944:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  405948:	7adb      	ldrb	r3, [r3, #11]
  40594a:	f013 0f01 	tst.w	r3, #1
  40594e:	d022      	beq.n	405996 <connect+0x72>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
  405950:	4b15      	ldr	r3, [pc, #84]	; (4059a8 <connect+0x84>)
  405952:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  405956:	7adb      	ldrb	r3, [r3, #11]
  405958:	f88d 301d 	strb.w	r3, [sp, #29]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
  40595c:	254b      	movs	r5, #75	; 0x4b
		}
		strConnect.sock = sock;
  40595e:	f88d 401c 	strb.w	r4, [sp, #28]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
  405962:	2208      	movs	r2, #8
  405964:	a805      	add	r0, sp, #20
  405966:	4b11      	ldr	r3, [pc, #68]	; (4059ac <connect+0x88>)
  405968:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
  40596a:	480f      	ldr	r0, [pc, #60]	; (4059a8 <connect+0x84>)
  40596c:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  405970:	88c3      	ldrh	r3, [r0, #6]
  405972:	f8ad 301e 	strh.w	r3, [sp, #30]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
  405976:	2300      	movs	r3, #0
  405978:	9302      	str	r3, [sp, #8]
  40597a:	9301      	str	r3, [sp, #4]
  40597c:	9300      	str	r3, [sp, #0]
  40597e:	230c      	movs	r3, #12
  405980:	aa05      	add	r2, sp, #20
  405982:	4629      	mov	r1, r5
  405984:	2002      	movs	r0, #2
  405986:	4c0a      	ldr	r4, [pc, #40]	; (4059b0 <connect+0x8c>)
  405988:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
  40598a:	2800      	cmp	r0, #0
		{
			s8Ret = SOCK_ERR_INVALID;
  40598c:	bf18      	it	ne
  40598e:	f06f 0008 	mvnne.w	r0, #8
		}
	}
	return s8Ret;
}
  405992:	b009      	add	sp, #36	; 0x24
  405994:	bd30      	pop	{r4, r5, pc}
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
  405996:	2544      	movs	r5, #68	; 0x44
  405998:	e7e1      	b.n	40595e <connect+0x3a>
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  40599a:	f06f 0005 	mvn.w	r0, #5
  40599e:	e7f8      	b.n	405992 <connect+0x6e>
  4059a0:	f06f 0005 	mvn.w	r0, #5
  4059a4:	e7f5      	b.n	405992 <connect+0x6e>
  4059a6:	bf00      	nop
  4059a8:	2040169c 	.word	0x2040169c
  4059ac:	00403545 	.word	0x00403545
  4059b0:	004036bd 	.word	0x004036bd

004059b4 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
  4059b4:	b530      	push	{r4, r5, lr}
  4059b6:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
  4059b8:	460c      	mov	r4, r1
  4059ba:	3100      	adds	r1, #0
  4059bc:	bf18      	it	ne
  4059be:	2101      	movne	r1, #1
  4059c0:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
  4059c4:	bf88      	it	hi
  4059c6:	2100      	movhi	r1, #0
  4059c8:	2900      	cmp	r1, #0
  4059ca:	d037      	beq.n	405a3c <send+0x88>
  4059cc:	2800      	cmp	r0, #0
  4059ce:	db35      	blt.n	405a3c <send+0x88>
  4059d0:	4b1d      	ldr	r3, [pc, #116]	; (405a48 <send+0x94>)
  4059d2:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  4059d6:	7a9b      	ldrb	r3, [r3, #10]
  4059d8:	b2db      	uxtb	r3, r3
  4059da:	2b01      	cmp	r3, #1
  4059dc:	d131      	bne.n	405a42 <send+0x8e>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
  4059de:	f88d 0010 	strb.w	r0, [sp, #16]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
  4059e2:	f8ad 2012 	strh.w	r2, [sp, #18]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
  4059e6:	4b18      	ldr	r3, [pc, #96]	; (405a48 <send+0x94>)
  4059e8:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  4059ec:	88db      	ldrh	r3, [r3, #6]
  4059ee:	f8ad 301c 	strh.w	r3, [sp, #28]

		if(sock >= TCP_SOCK_MAX)
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
  4059f2:	2807      	cmp	r0, #7
  4059f4:	bfb4      	ite	lt
  4059f6:	2550      	movlt	r5, #80	; 0x50
  4059f8:	2544      	movge	r5, #68	; 0x44
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  4059fa:	4b13      	ldr	r3, [pc, #76]	; (405a48 <send+0x94>)
  4059fc:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  405a00:	7adb      	ldrb	r3, [r3, #11]
  405a02:	f013 0f01 	tst.w	r3, #1
  405a06:	d017      	beq.n	405a38 <send+0x84>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
  405a08:	4b0f      	ldr	r3, [pc, #60]	; (405a48 <send+0x94>)
  405a0a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  405a0e:	8905      	ldrh	r5, [r0, #8]
  405a10:	b2ad      	uxth	r5, r5
			u8Cmd			= SOCKET_CMD_SSL_SEND;
  405a12:	214c      	movs	r1, #76	; 0x4c
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
  405a14:	9502      	str	r5, [sp, #8]
  405a16:	9201      	str	r2, [sp, #4]
  405a18:	9400      	str	r4, [sp, #0]
  405a1a:	2310      	movs	r3, #16
  405a1c:	eb0d 0203 	add.w	r2, sp, r3
  405a20:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  405a24:	2002      	movs	r0, #2
  405a26:	4c09      	ldr	r4, [pc, #36]	; (405a4c <send+0x98>)
  405a28:	47a0      	blx	r4
		if(s16Ret != SOCK_ERR_NO_ERROR)
  405a2a:	2800      	cmp	r0, #0
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
  405a2c:	bf0c      	ite	eq
  405a2e:	2000      	moveq	r0, #0
  405a30:	f06f 000d 	mvnne.w	r0, #13
		}
	}
	return s16Ret;
}
  405a34:	b009      	add	sp, #36	; 0x24
  405a36:	bd30      	pop	{r4, r5, pc}
		u8Cmd			= SOCKET_CMD_SEND;
  405a38:	2145      	movs	r1, #69	; 0x45
  405a3a:	e7eb      	b.n	405a14 <send+0x60>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  405a3c:	f06f 0005 	mvn.w	r0, #5
  405a40:	e7f8      	b.n	405a34 <send+0x80>
  405a42:	f06f 0005 	mvn.w	r0, #5
  405a46:	e7f5      	b.n	405a34 <send+0x80>
  405a48:	2040169c 	.word	0x2040169c
  405a4c:	004036bd 	.word	0x004036bd

00405a50 <recv>:
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
  405a50:	2900      	cmp	r1, #0
  405a52:	bf18      	it	ne
  405a54:	2a00      	cmpne	r2, #0
  405a56:	d044      	beq.n	405ae2 <recv+0x92>
{
  405a58:	b570      	push	{r4, r5, r6, lr}
  405a5a:	b086      	sub	sp, #24
  405a5c:	460e      	mov	r6, r1
  405a5e:	4615      	mov	r5, r2
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
  405a60:	2800      	cmp	r0, #0
  405a62:	db36      	blt.n	405ad2 <recv+0x82>
  405a64:	4a20      	ldr	r2, [pc, #128]	; (405ae8 <recv+0x98>)
  405a66:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  405a6a:	7a92      	ldrb	r2, [r2, #10]
  405a6c:	b2d2      	uxtb	r2, r2
  405a6e:	2a01      	cmp	r2, #1
  405a70:	d132      	bne.n	405ad8 <recv+0x88>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
  405a72:	4c1d      	ldr	r4, [pc, #116]	; (405ae8 <recv+0x98>)
  405a74:	0101      	lsls	r1, r0, #4
  405a76:	1862      	adds	r2, r4, r1
  405a78:	5066      	str	r6, [r4, r1]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
  405a7a:	8095      	strh	r5, [r2, #4]

		if(!gastrSockets[sock].bIsRecvPending)
  405a7c:	7b12      	ldrb	r2, [r2, #12]
  405a7e:	2a00      	cmp	r2, #0
  405a80:	d12d      	bne.n	405ade <recv+0x8e>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
  405a82:	eb04 1200 	add.w	r2, r4, r0, lsl #4
  405a86:	2101      	movs	r1, #1
  405a88:	7311      	strb	r1, [r2, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  405a8a:	7ad2      	ldrb	r2, [r2, #11]
  405a8c:	400a      	ands	r2, r1
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
  405a8e:	2a00      	cmp	r2, #0
  405a90:	bf0c      	ite	eq
  405a92:	2146      	moveq	r1, #70	; 0x46
  405a94:	214d      	movne	r1, #77	; 0x4d
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
  405a96:	b9d3      	cbnz	r3, 405ace <recv+0x7e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
  405a98:	f04f 33ff 	mov.w	r3, #4294967295
  405a9c:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
  405a9e:	f88d 0014 	strb.w	r0, [sp, #20]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
  405aa2:	4b11      	ldr	r3, [pc, #68]	; (405ae8 <recv+0x98>)
  405aa4:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  405aa8:	88c3      	ldrh	r3, [r0, #6]
  405aaa:	f8ad 3016 	strh.w	r3, [sp, #22]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
  405aae:	2300      	movs	r3, #0
  405ab0:	9302      	str	r3, [sp, #8]
  405ab2:	9301      	str	r3, [sp, #4]
  405ab4:	9300      	str	r3, [sp, #0]
  405ab6:	2308      	movs	r3, #8
  405ab8:	aa04      	add	r2, sp, #16
  405aba:	2002      	movs	r0, #2
  405abc:	4c0b      	ldr	r4, [pc, #44]	; (405aec <recv+0x9c>)
  405abe:	47a0      	blx	r4
			if(s16Ret != SOCK_ERR_NO_ERROR)
  405ac0:	2800      	cmp	r0, #0
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
  405ac2:	bf0c      	ite	eq
  405ac4:	2000      	moveq	r0, #0
  405ac6:	f06f 000d 	mvnne.w	r0, #13
			}
		}
	}
	return s16Ret;
}
  405aca:	b006      	add	sp, #24
  405acc:	bd70      	pop	{r4, r5, r6, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
  405ace:	9304      	str	r3, [sp, #16]
  405ad0:	e7e5      	b.n	405a9e <recv+0x4e>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  405ad2:	f06f 0005 	mvn.w	r0, #5
  405ad6:	e7f8      	b.n	405aca <recv+0x7a>
  405ad8:	f06f 0005 	mvn.w	r0, #5
  405adc:	e7f5      	b.n	405aca <recv+0x7a>
		s16Ret = SOCK_ERR_NO_ERROR;
  405ade:	2000      	movs	r0, #0
  405ae0:	e7f3      	b.n	405aca <recv+0x7a>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  405ae2:	f06f 0005 	mvn.w	r0, #5
}
  405ae6:	4770      	bx	lr
  405ae8:	2040169c 	.word	0x2040169c
  405aec:	004036bd 	.word	0x004036bd

00405af0 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
  405af0:	b530      	push	{r4, r5, lr}
  405af2:	b087      	sub	sp, #28
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
  405af4:	1e04      	subs	r4, r0, #0
  405af6:	db2f      	blt.n	405b58 <close+0x68>
  405af8:	4b1a      	ldr	r3, [pc, #104]	; (405b64 <close+0x74>)
  405afa:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  405afe:	7a9b      	ldrb	r3, [r3, #10]
  405b00:	b2db      	uxtb	r3, r3
  405b02:	2b01      	cmp	r3, #1
  405b04:	d12b      	bne.n	405b5e <close+0x6e>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
  405b06:	f88d 4014 	strb.w	r4, [sp, #20]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
  405b0a:	4b16      	ldr	r3, [pc, #88]	; (405b64 <close+0x74>)
  405b0c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  405b10:	88da      	ldrh	r2, [r3, #6]
  405b12:	f8ad 2016 	strh.w	r2, [sp, #22]
		
		gastrSockets[sock].bIsUsed = 0;
  405b16:	2200      	movs	r2, #0
  405b18:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
  405b1a:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  405b1c:	7adb      	ldrb	r3, [r3, #11]
  405b1e:	f003 0301 	and.w	r3, r3, #1
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
  405b22:	4293      	cmp	r3, r2
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
  405b24:	9202      	str	r2, [sp, #8]
  405b26:	9201      	str	r2, [sp, #4]
  405b28:	9200      	str	r2, [sp, #0]
  405b2a:	f04f 0304 	mov.w	r3, #4
  405b2e:	aa05      	add	r2, sp, #20
  405b30:	bf0c      	ite	eq
  405b32:	2149      	moveq	r1, #73	; 0x49
  405b34:	214e      	movne	r1, #78	; 0x4e
  405b36:	2002      	movs	r0, #2
  405b38:	4d0b      	ldr	r5, [pc, #44]	; (405b68 <close+0x78>)
  405b3a:	47a8      	blx	r5
		if(s8Ret != SOCK_ERR_NO_ERROR)
  405b3c:	1e05      	subs	r5, r0, #0
		{
			s8Ret = SOCK_ERR_INVALID;
  405b3e:	bf18      	it	ne
  405b40:	f06f 0508 	mvnne.w	r5, #8
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
  405b44:	2210      	movs	r2, #16
  405b46:	2100      	movs	r1, #0
  405b48:	4806      	ldr	r0, [pc, #24]	; (405b64 <close+0x74>)
  405b4a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  405b4e:	4b07      	ldr	r3, [pc, #28]	; (405b6c <close+0x7c>)
  405b50:	4798      	blx	r3
	}
	return s8Ret;
}
  405b52:	4628      	mov	r0, r5
  405b54:	b007      	add	sp, #28
  405b56:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  405b58:	f06f 0505 	mvn.w	r5, #5
  405b5c:	e7f9      	b.n	405b52 <close+0x62>
  405b5e:	f06f 0505 	mvn.w	r5, #5
  405b62:	e7f6      	b.n	405b52 <close+0x62>
  405b64:	2040169c 	.word	0x2040169c
  405b68:	004036bd 	.word	0x004036bd
  405b6c:	00403559 	.word	0x00403559

00405b70 <spi_flash_enable>:
/**
 *	@fn		spi_flash_enable
 *	@brief	Enable spi flash operations
 */
sint8 spi_flash_enable(uint8 enable)
{
  405b70:	b570      	push	{r4, r5, r6, lr}
  405b72:	b082      	sub	sp, #8
  405b74:	4605      	mov	r5, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
  405b76:	4b2b      	ldr	r3, [pc, #172]	; (405c24 <spi_flash_enable+0xb4>)
  405b78:	4798      	blx	r3
  405b7a:	f3c0 000b 	ubfx	r0, r0, #0, #12
  405b7e:	f5b0 7f68 	cmp.w	r0, #928	; 0x3a0
  405b82:	d203      	bcs.n	405b8c <spi_flash_enable+0x1c>
	sint8 s8Ret = M2M_SUCCESS;
  405b84:	2400      	movs	r4, #0
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
  405b86:	4620      	mov	r0, r4
  405b88:	b002      	add	sp, #8
  405b8a:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
  405b8c:	a901      	add	r1, sp, #4
  405b8e:	f241 4010 	movw	r0, #5136	; 0x1410
  405b92:	4b25      	ldr	r3, [pc, #148]	; (405c28 <spi_flash_enable+0xb8>)
  405b94:	4798      	blx	r3
		if(s8Ret != M2M_SUCCESS) {
  405b96:	4604      	mov	r4, r0
  405b98:	2800      	cmp	r0, #0
  405b9a:	d1f4      	bne.n	405b86 <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
  405b9c:	4b23      	ldr	r3, [pc, #140]	; (405c2c <spi_flash_enable+0xbc>)
  405b9e:	9a01      	ldr	r2, [sp, #4]
  405ba0:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
  405ba2:	4923      	ldr	r1, [pc, #140]	; (405c30 <spi_flash_enable+0xc0>)
  405ba4:	4319      	orrs	r1, r3
  405ba6:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
  405ba8:	f241 4010 	movw	r0, #5136	; 0x1410
  405bac:	4b21      	ldr	r3, [pc, #132]	; (405c34 <spi_flash_enable+0xc4>)
  405bae:	4798      	blx	r3
		if(enable) {
  405bb0:	b305      	cbz	r5, 405bf4 <spi_flash_enable+0x84>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
  405bb2:	2100      	movs	r1, #0
  405bb4:	4820      	ldr	r0, [pc, #128]	; (405c38 <spi_flash_enable+0xc8>)
  405bb6:	4d1f      	ldr	r5, [pc, #124]	; (405c34 <spi_flash_enable+0xc4>)
  405bb8:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
  405bba:	21ab      	movs	r1, #171	; 0xab
  405bbc:	481f      	ldr	r0, [pc, #124]	; (405c3c <spi_flash_enable+0xcc>)
  405bbe:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
  405bc0:	2101      	movs	r1, #1
  405bc2:	481f      	ldr	r0, [pc, #124]	; (405c40 <spi_flash_enable+0xd0>)
  405bc4:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
  405bc6:	2100      	movs	r1, #0
  405bc8:	481e      	ldr	r0, [pc, #120]	; (405c44 <spi_flash_enable+0xd4>)
  405bca:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
  405bcc:	2181      	movs	r1, #129	; 0x81
  405bce:	481e      	ldr	r0, [pc, #120]	; (405c48 <spi_flash_enable+0xd8>)
  405bd0:	47a8      	blx	r5
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
  405bd2:	4e1e      	ldr	r6, [pc, #120]	; (405c4c <spi_flash_enable+0xdc>)
  405bd4:	4d1e      	ldr	r5, [pc, #120]	; (405c50 <spi_flash_enable+0xe0>)
  405bd6:	4630      	mov	r0, r6
  405bd8:	47a8      	blx	r5
  405bda:	2801      	cmp	r0, #1
  405bdc:	d1fb      	bne.n	405bd6 <spi_flash_enable+0x66>
		u32Val &= ~((0x7777ul) << 12);
  405bde:	4913      	ldr	r1, [pc, #76]	; (405c2c <spi_flash_enable+0xbc>)
  405be0:	9b01      	ldr	r3, [sp, #4]
  405be2:	4019      	ands	r1, r3
		u32Val |= ((0x0010ul) << 12);
  405be4:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  405be8:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
  405bea:	f241 4010 	movw	r0, #5136	; 0x1410
  405bee:	4b11      	ldr	r3, [pc, #68]	; (405c34 <spi_flash_enable+0xc4>)
  405bf0:	4798      	blx	r3
  405bf2:	e7c8      	b.n	405b86 <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
  405bf4:	2100      	movs	r1, #0
  405bf6:	4810      	ldr	r0, [pc, #64]	; (405c38 <spi_flash_enable+0xc8>)
  405bf8:	4d0e      	ldr	r5, [pc, #56]	; (405c34 <spi_flash_enable+0xc4>)
  405bfa:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
  405bfc:	21b9      	movs	r1, #185	; 0xb9
  405bfe:	480f      	ldr	r0, [pc, #60]	; (405c3c <spi_flash_enable+0xcc>)
  405c00:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
  405c02:	2101      	movs	r1, #1
  405c04:	480e      	ldr	r0, [pc, #56]	; (405c40 <spi_flash_enable+0xd0>)
  405c06:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
  405c08:	2100      	movs	r1, #0
  405c0a:	480e      	ldr	r0, [pc, #56]	; (405c44 <spi_flash_enable+0xd4>)
  405c0c:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
  405c0e:	2181      	movs	r1, #129	; 0x81
  405c10:	480d      	ldr	r0, [pc, #52]	; (405c48 <spi_flash_enable+0xd8>)
  405c12:	47a8      	blx	r5
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
  405c14:	4e0d      	ldr	r6, [pc, #52]	; (405c4c <spi_flash_enable+0xdc>)
  405c16:	4d0e      	ldr	r5, [pc, #56]	; (405c50 <spi_flash_enable+0xe0>)
  405c18:	4630      	mov	r0, r6
  405c1a:	47a8      	blx	r5
  405c1c:	2801      	cmp	r0, #1
  405c1e:	d1fb      	bne.n	405c18 <spi_flash_enable+0xa8>
  405c20:	e7dd      	b.n	405bde <spi_flash_enable+0x6e>
  405c22:	bf00      	nop
  405c24:	00404585 	.word	0x00404585
  405c28:	00404881 	.word	0x00404881
  405c2c:	f8888fff 	.word	0xf8888fff
  405c30:	01111000 	.word	0x01111000
  405c34:	0040488d 	.word	0x0040488d
  405c38:	00010208 	.word	0x00010208
  405c3c:	0001020c 	.word	0x0001020c
  405c40:	00010214 	.word	0x00010214
  405c44:	0001021c 	.word	0x0001021c
  405c48:	00010204 	.word	0x00010204
  405c4c:	00010218 	.word	0x00010218
  405c50:	00404875 	.word	0x00404875

00405c54 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  405c54:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  405c56:	4810      	ldr	r0, [pc, #64]	; (405c98 <sysclk_init+0x44>)
  405c58:	4b10      	ldr	r3, [pc, #64]	; (405c9c <sysclk_init+0x48>)
  405c5a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  405c5c:	213e      	movs	r1, #62	; 0x3e
  405c5e:	2000      	movs	r0, #0
  405c60:	4b0f      	ldr	r3, [pc, #60]	; (405ca0 <sysclk_init+0x4c>)
  405c62:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  405c64:	4c0f      	ldr	r4, [pc, #60]	; (405ca4 <sysclk_init+0x50>)
  405c66:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  405c68:	2800      	cmp	r0, #0
  405c6a:	d0fc      	beq.n	405c66 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  405c6c:	4b0e      	ldr	r3, [pc, #56]	; (405ca8 <sysclk_init+0x54>)
  405c6e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  405c70:	4a0e      	ldr	r2, [pc, #56]	; (405cac <sysclk_init+0x58>)
  405c72:	4b0f      	ldr	r3, [pc, #60]	; (405cb0 <sysclk_init+0x5c>)
  405c74:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  405c76:	4c0f      	ldr	r4, [pc, #60]	; (405cb4 <sysclk_init+0x60>)
  405c78:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  405c7a:	2800      	cmp	r0, #0
  405c7c:	d0fc      	beq.n	405c78 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  405c7e:	2002      	movs	r0, #2
  405c80:	4b0d      	ldr	r3, [pc, #52]	; (405cb8 <sysclk_init+0x64>)
  405c82:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  405c84:	2000      	movs	r0, #0
  405c86:	4b0d      	ldr	r3, [pc, #52]	; (405cbc <sysclk_init+0x68>)
  405c88:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  405c8a:	4b0d      	ldr	r3, [pc, #52]	; (405cc0 <sysclk_init+0x6c>)
  405c8c:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  405c8e:	4802      	ldr	r0, [pc, #8]	; (405c98 <sysclk_init+0x44>)
  405c90:	4b02      	ldr	r3, [pc, #8]	; (405c9c <sysclk_init+0x48>)
  405c92:	4798      	blx	r3
  405c94:	bd10      	pop	{r4, pc}
  405c96:	bf00      	nop
  405c98:	11e1a300 	.word	0x11e1a300
  405c9c:	00406b05 	.word	0x00406b05
  405ca0:	004065cd 	.word	0x004065cd
  405ca4:	00406621 	.word	0x00406621
  405ca8:	00406631 	.word	0x00406631
  405cac:	20183f01 	.word	0x20183f01
  405cb0:	400e0600 	.word	0x400e0600
  405cb4:	00406641 	.word	0x00406641
  405cb8:	00406531 	.word	0x00406531
  405cbc:	00406569 	.word	0x00406569
  405cc0:	004069f9 	.word	0x004069f9

00405cc4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  405cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  405cc8:	b980      	cbnz	r0, 405cec <_read+0x28>
  405cca:	460c      	mov	r4, r1
  405ccc:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  405cce:	2a00      	cmp	r2, #0
  405cd0:	dd0f      	ble.n	405cf2 <_read+0x2e>
  405cd2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  405cd4:	4e08      	ldr	r6, [pc, #32]	; (405cf8 <_read+0x34>)
  405cd6:	4d09      	ldr	r5, [pc, #36]	; (405cfc <_read+0x38>)
  405cd8:	6830      	ldr	r0, [r6, #0]
  405cda:	4621      	mov	r1, r4
  405cdc:	682b      	ldr	r3, [r5, #0]
  405cde:	4798      	blx	r3
		ptr++;
  405ce0:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  405ce2:	42bc      	cmp	r4, r7
  405ce4:	d1f8      	bne.n	405cd8 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  405ce6:	4640      	mov	r0, r8
  405ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  405cec:	f04f 38ff 	mov.w	r8, #4294967295
  405cf0:	e7f9      	b.n	405ce6 <_read+0x22>
	for (; len > 0; --len) {
  405cf2:	4680      	mov	r8, r0
  405cf4:	e7f7      	b.n	405ce6 <_read+0x22>
  405cf6:	bf00      	nop
  405cf8:	20401760 	.word	0x20401760
  405cfc:	20401758 	.word	0x20401758

00405d00 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  405d00:	3801      	subs	r0, #1
  405d02:	2802      	cmp	r0, #2
  405d04:	d815      	bhi.n	405d32 <_write+0x32>
{
  405d06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405d0a:	460e      	mov	r6, r1
  405d0c:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  405d0e:	b19a      	cbz	r2, 405d38 <_write+0x38>
  405d10:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  405d12:	f8df 8038 	ldr.w	r8, [pc, #56]	; 405d4c <_write+0x4c>
  405d16:	4f0c      	ldr	r7, [pc, #48]	; (405d48 <_write+0x48>)
  405d18:	f8d8 0000 	ldr.w	r0, [r8]
  405d1c:	f815 1b01 	ldrb.w	r1, [r5], #1
  405d20:	683b      	ldr	r3, [r7, #0]
  405d22:	4798      	blx	r3
  405d24:	2800      	cmp	r0, #0
  405d26:	db0a      	blt.n	405d3e <_write+0x3e>
  405d28:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  405d2a:	3c01      	subs	r4, #1
  405d2c:	d1f4      	bne.n	405d18 <_write+0x18>
  405d2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  405d32:	f04f 30ff 	mov.w	r0, #4294967295
  405d36:	4770      	bx	lr
	for (; len != 0; --len) {
  405d38:	4610      	mov	r0, r2
  405d3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  405d3e:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  405d42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405d46:	bf00      	nop
  405d48:	2040175c 	.word	0x2040175c
  405d4c:	20401760 	.word	0x20401760

00405d50 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  405d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  405d52:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  405d56:	4bb8      	ldr	r3, [pc, #736]	; (406038 <board_init+0x2e8>)
  405d58:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dmb");
  405d5a:	f3bf 8f5f 	dmb	sy
		mpu_cal_mpu_region_size(ITCM_END_ADDRESS - ITCM_START_ADDRESS) |
  405d5e:	4fb7      	ldr	r7, [pc, #732]	; (40603c <board_init+0x2ec>)
  405d60:	4638      	mov	r0, r7
  405d62:	4db7      	ldr	r5, [pc, #732]	; (406040 <board_init+0x2f0>)
  405d64:	47a8      	blx	r5
	dw_region_attr =
  405d66:	4eb7      	ldr	r6, [pc, #732]	; (406044 <board_init+0x2f4>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  405d68:	ea40 0106 	orr.w	r1, r0, r6
  405d6c:	2011      	movs	r0, #17
  405d6e:	4cb6      	ldr	r4, [pc, #728]	; (406048 <board_init+0x2f8>)
  405d70:	47a0      	blx	r4
		mpu_cal_mpu_region_size(IFLASH_END_ADDRESS - IFLASH_START_ADDRESS) |
  405d72:	48b6      	ldr	r0, [pc, #728]	; (40604c <board_init+0x2fc>)
  405d74:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  405d76:	49b6      	ldr	r1, [pc, #728]	; (406050 <board_init+0x300>)
  405d78:	4301      	orrs	r1, r0
  405d7a:	48b6      	ldr	r0, [pc, #728]	; (406054 <board_init+0x304>)
  405d7c:	47a0      	blx	r4
		mpu_cal_mpu_region_size(DTCM_END_ADDRESS - DTCM_START_ADDRESS) |
  405d7e:	4638      	mov	r0, r7
  405d80:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  405d82:	ea40 0106 	orr.w	r1, r0, r6
  405d86:	48b4      	ldr	r0, [pc, #720]	; (406058 <board_init+0x308>)
  405d88:	47a0      	blx	r4
		mpu_cal_mpu_region_size(SRAM_FIRST_END_ADDRESS - SRAM_FIRST_START_ADDRESS)
  405d8a:	48b4      	ldr	r0, [pc, #720]	; (40605c <board_init+0x30c>)
  405d8c:	47a8      	blx	r5
	dw_region_attr =
  405d8e:	f106 7608 	add.w	r6, r6, #35651584	; 0x2200000
  405d92:	f506 3640 	add.w	r6, r6, #196608	; 0x30000
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  405d96:	ea40 0106 	orr.w	r1, r0, r6
  405d9a:	48b1      	ldr	r0, [pc, #708]	; (406060 <board_init+0x310>)
  405d9c:	47a0      	blx	r4
		mpu_cal_mpu_region_size(SRAM_SECOND_END_ADDRESS - SRAM_SECOND_START_ADDRESS) |
  405d9e:	48b1      	ldr	r0, [pc, #708]	; (406064 <board_init+0x314>)
  405da0:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  405da2:	ea40 0106 	orr.w	r1, r0, r6
  405da6:	48b0      	ldr	r0, [pc, #704]	; (406068 <board_init+0x318>)
  405da8:	47a0      	blx	r4
		mpu_cal_mpu_region_size(PERIPHERALS_END_ADDRESS - PERIPHERALS_START_ADDRESS)
  405daa:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
  405dae:	47a8      	blx	r5
	dw_region_attr = MPU_AP_FULL_ACCESS |
  405db0:	4eae      	ldr	r6, [pc, #696]	; (40606c <board_init+0x31c>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  405db2:	ea40 0106 	orr.w	r1, r0, r6
  405db6:	48ae      	ldr	r0, [pc, #696]	; (406070 <board_init+0x320>)
  405db8:	47a0      	blx	r4
		mpu_cal_mpu_region_size(EXT_EBI_END_ADDRESS - EXT_EBI_START_ADDRESS) |
  405dba:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
  405dbe:	47a8      	blx	r5
	dw_region_attr =
  405dc0:	4fac      	ldr	r7, [pc, #688]	; (406074 <board_init+0x324>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  405dc2:	ea40 0107 	orr.w	r1, r0, r7
  405dc6:	48ac      	ldr	r0, [pc, #688]	; (406078 <board_init+0x328>)
  405dc8:	47a0      	blx	r4
		mpu_cal_mpu_region_size(SDRAM_END_ADDRESS - SDRAM_START_ADDRESS) |
  405dca:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
  405dce:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  405dd0:	49aa      	ldr	r1, [pc, #680]	; (40607c <board_init+0x32c>)
  405dd2:	4301      	orrs	r1, r0
  405dd4:	48aa      	ldr	r0, [pc, #680]	; (406080 <board_init+0x330>)
  405dd6:	47a0      	blx	r4
		mpu_cal_mpu_region_size(QSPI_END_ADDRESS - QSPI_START_ADDRESS) |
  405dd8:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
  405ddc:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  405dde:	ea40 0107 	orr.w	r1, r0, r7
  405de2:	48a8      	ldr	r0, [pc, #672]	; (406084 <board_init+0x334>)
  405de4:	47a0      	blx	r4
		mpu_cal_mpu_region_size(USBHSRAM_END_ADDRESS - USBHSRAM_START_ADDRESS) |
  405de6:	48a8      	ldr	r0, [pc, #672]	; (406088 <board_init+0x338>)
  405de8:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  405dea:	ea40 0106 	orr.w	r1, r0, r6
  405dee:	48a7      	ldr	r0, [pc, #668]	; (40608c <board_init+0x33c>)
  405df0:	47a0      	blx	r4
	SCB->SHCSR |= (SCB_SHCSR_MEMFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk
  405df2:	4ca7      	ldr	r4, [pc, #668]	; (406090 <board_init+0x340>)
  405df4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  405df6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
  405dfa:	6263      	str	r3, [r4, #36]	; 0x24
	mpu_enable( MPU_ENABLE | MPU_PRIVDEFENA);
  405dfc:	2005      	movs	r0, #5
  405dfe:	4ba5      	ldr	r3, [pc, #660]	; (406094 <board_init+0x344>)
  405e00:	4798      	blx	r3
  __ASM volatile ("dsb");
  405e02:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  405e06:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb");
  405e0a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  405e0e:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  405e12:	2300      	movs	r3, #0
  405e14:	f8c4 3250 	str.w	r3, [r4, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  405e18:	6963      	ldr	r3, [r4, #20]
  405e1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  405e1e:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb");
  405e20:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  405e24:	f3bf 8f6f 	isb	sy
    ccsidr  = SCB->CCSIDR;
  405e28:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  405e2c:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  405e30:	f007 0007 	and.w	r0, r7, #7
  405e34:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  405e36:	f3c7 07c9 	ubfx	r7, r7, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  405e3a:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  405e3e:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  405e42:	f3bf 8f4f 	dsb	sy
  405e46:	f04f 34ff 	mov.w	r4, #4294967295
  405e4a:	fa04 fc00 	lsl.w	ip, r4, r0
  405e4e:	fa06 f000 	lsl.w	r0, r6, r0
  405e52:	fa04 f40e 	lsl.w	r4, r4, lr
  405e56:	fa07 fe0e 	lsl.w	lr, r7, lr
              SCB->DCISW = sw;
  405e5a:	4d8d      	ldr	r5, [pc, #564]	; (406090 <board_init+0x340>)
         int32_t tmpways = ways;
  405e5c:	463a      	mov	r2, r7
  405e5e:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  405e60:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  405e64:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  405e68:	3a01      	subs	r2, #1
  405e6a:	4423      	add	r3, r4
  405e6c:	f1b2 3fff 	cmp.w	r2, #4294967295
  405e70:	d1f6      	bne.n	405e60 <board_init+0x110>
        } while(sets--);
  405e72:	3e01      	subs	r6, #1
  405e74:	4460      	add	r0, ip
  405e76:	f1b6 3fff 	cmp.w	r6, #4294967295
  405e7a:	d1ef      	bne.n	405e5c <board_init+0x10c>
  405e7c:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  405e80:	4b83      	ldr	r3, [pc, #524]	; (406090 <board_init+0x340>)
  405e82:	695a      	ldr	r2, [r3, #20]
  405e84:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  405e88:	615a      	str	r2, [r3, #20]
  405e8a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  405e8e:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  405e92:	4a81      	ldr	r2, [pc, #516]	; (406098 <board_init+0x348>)
  405e94:	4981      	ldr	r1, [pc, #516]	; (40609c <board_init+0x34c>)
  405e96:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  405e98:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  405e9c:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  405e9e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  405ea2:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  405ea6:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  405eaa:	f022 0201 	bic.w	r2, r2, #1
  405eae:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  405eb2:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  405eb6:	f022 0201 	bic.w	r2, r2, #1
  405eba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  405ebe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  405ec2:	f3bf 8f6f 	isb	sy
  405ec6:	200a      	movs	r0, #10
  405ec8:	4c75      	ldr	r4, [pc, #468]	; (4060a0 <board_init+0x350>)
  405eca:	47a0      	blx	r4
  405ecc:	200b      	movs	r0, #11
  405ece:	47a0      	blx	r4
  405ed0:	200c      	movs	r0, #12
  405ed2:	47a0      	blx	r4
  405ed4:	2010      	movs	r0, #16
  405ed6:	47a0      	blx	r4
  405ed8:	2011      	movs	r0, #17
  405eda:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  405edc:	4a71      	ldr	r2, [pc, #452]	; (4060a4 <board_init+0x354>)
  405ede:	f44f 7380 	mov.w	r3, #256	; 0x100
  405ee2:	6113      	str	r3, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  405ee4:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  405ee8:	6313      	str	r3, [r2, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  405eea:	4b6f      	ldr	r3, [pc, #444]	; (4060a8 <board_init+0x358>)
  405eec:	f44f 6100 	mov.w	r1, #2048	; 0x800
  405ef0:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  405ef2:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  405ef6:	6659      	str	r1, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  405ef8:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  405efc:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  405efe:	6219      	str	r1, [r3, #32]
		base->PIO_IFSCER = mask;
  405f00:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  405f04:	6f18      	ldr	r0, [r3, #112]	; 0x70
  405f06:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
  405f0a:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  405f0c:	6f58      	ldr	r0, [r3, #116]	; 0x74
  405f0e:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
  405f12:	6758      	str	r0, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  405f14:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  405f18:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  405f1c:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  405f20:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  405f24:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  405f26:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  405f2a:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  405f2c:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  405f2e:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  405f32:	6f18      	ldr	r0, [r3, #112]	; 0x70
  405f34:	f420 1000 	bic.w	r0, r0, #2097152	; 0x200000
  405f38:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  405f3a:	6f58      	ldr	r0, [r3, #116]	; 0x74
  405f3c:	f420 1000 	bic.w	r0, r0, #2097152	; 0x200000
  405f40:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  405f42:	6059      	str	r1, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  405f44:	4859      	ldr	r0, [pc, #356]	; (4060ac <board_init+0x35c>)
  405f46:	f8d0 1114 	ldr.w	r1, [r0, #276]	; 0x114
  405f4a:	f041 0110 	orr.w	r1, r1, #16
  405f4e:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
		base->PIO_PUDR = mask;
  405f52:	4957      	ldr	r1, [pc, #348]	; (4060b0 <board_init+0x360>)
  405f54:	2010      	movs	r0, #16
  405f56:	6608      	str	r0, [r1, #96]	; 0x60
		base->PIO_PPDDR = mask;
  405f58:	f8c1 0090 	str.w	r0, [r1, #144]	; 0x90
		base->PIO_MDDR = mask;
  405f5c:	6548      	str	r0, [r1, #84]	; 0x54
		base->PIO_IFDR = mask;
  405f5e:	6248      	str	r0, [r1, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  405f60:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  405f64:	6f0c      	ldr	r4, [r1, #112]	; 0x70
  405f66:	4304      	orrs	r4, r0
  405f68:	670c      	str	r4, [r1, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  405f6a:	6f4c      	ldr	r4, [r1, #116]	; 0x74
  405f6c:	4304      	orrs	r4, r0
  405f6e:	674c      	str	r4, [r1, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  405f70:	6048      	str	r0, [r1, #4]
		base->PIO_PUDR = mask;
  405f72:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  405f76:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  405f78:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  405f7c:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  405f7e:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  405f80:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  405f84:	6f18      	ldr	r0, [r3, #112]	; 0x70
  405f86:	f020 5080 	bic.w	r0, r0, #268435456	; 0x10000000
  405f8a:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  405f8c:	6f58      	ldr	r0, [r3, #116]	; 0x74
  405f8e:	4308      	orrs	r0, r1
  405f90:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  405f92:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  405f94:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  405f98:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  405f9a:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  405f9e:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  405fa0:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  405fa2:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  405fa6:	6f18      	ldr	r0, [r3, #112]	; 0x70
  405fa8:	4308      	orrs	r0, r1
  405faa:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  405fac:	6f58      	ldr	r0, [r3, #116]	; 0x74
  405fae:	4308      	orrs	r0, r1
  405fb0:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  405fb2:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  405fb4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  405fb8:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  405fba:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  405fbe:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  405fc0:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  405fc2:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  405fc6:	6f18      	ldr	r0, [r3, #112]	; 0x70
  405fc8:	f020 4080 	bic.w	r0, r0, #1073741824	; 0x40000000
  405fcc:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  405fce:	6f58      	ldr	r0, [r3, #116]	; 0x74
  405fd0:	4308      	orrs	r0, r1
  405fd2:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  405fd4:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  405fd6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  405fda:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  405fdc:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  405fe0:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  405fe2:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  405fe4:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  405fe8:	6f18      	ldr	r0, [r3, #112]	; 0x70
  405fea:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
  405fee:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  405ff0:	6f58      	ldr	r0, [r3, #116]	; 0x74
  405ff2:	4308      	orrs	r0, r1
  405ff4:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  405ff6:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  405ff8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  405ffc:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  405ffe:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  406002:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  406004:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  406006:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40600a:	6f18      	ldr	r0, [r3, #112]	; 0x70
  40600c:	f020 6080 	bic.w	r0, r0, #67108864	; 0x4000000
  406010:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  406012:	6f58      	ldr	r0, [r3, #116]	; 0x74
  406014:	4308      	orrs	r0, r1
  406016:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  406018:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  40601a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40601e:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  406020:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  406024:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  406026:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  406028:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40602c:	6f18      	ldr	r0, [r3, #112]	; 0x70
  40602e:	f020 6000 	bic.w	r0, r0, #134217728	; 0x8000000
  406032:	6718      	str	r0, [r3, #112]	; 0x70
  406034:	e03e      	b.n	4060b4 <board_init+0x364>
  406036:	bf00      	nop
  406038:	400e1850 	.word	0x400e1850
  40603c:	003fffff 	.word	0x003fffff
  406040:	00406101 	.word	0x00406101
  406044:	01000001 	.word	0x01000001
  406048:	004060f5 	.word	0x004060f5
  40604c:	001fffff 	.word	0x001fffff
  406050:	06230001 	.word	0x06230001
  406054:	00400012 	.word	0x00400012
  406058:	20000013 	.word	0x20000013
  40605c:	0003ffff 	.word	0x0003ffff
  406060:	20400014 	.word	0x20400014
  406064:	0001ffff 	.word	0x0001ffff
  406068:	20440015 	.word	0x20440015
  40606c:	13010001 	.word	0x13010001
  406070:	40000016 	.word	0x40000016
  406074:	03000001 	.word	0x03000001
  406078:	60000017 	.word	0x60000017
  40607c:	03250001 	.word	0x03250001
  406080:	70000018 	.word	0x70000018
  406084:	80000019 	.word	0x80000019
  406088:	000fffff 	.word	0x000fffff
  40608c:	a010001a 	.word	0xa010001a
  406090:	e000ed00 	.word	0xe000ed00
  406094:	004060e9 	.word	0x004060e9
  406098:	400e0c00 	.word	0x400e0c00
  40609c:	5a00080c 	.word	0x5a00080c
  4060a0:	00406651 	.word	0x00406651
  4060a4:	400e1200 	.word	0x400e1200
  4060a8:	400e0e00 	.word	0x400e0e00
  4060ac:	40088000 	.word	0x40088000
  4060b0:	400e1000 	.word	0x400e1000
		base->PIO_ABCDSR[1] |= mask;
  4060b4:	6f58      	ldr	r0, [r3, #116]	; 0x74
  4060b6:	4308      	orrs	r0, r1
  4060b8:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4060ba:	6059      	str	r1, [r3, #4]
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4060bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  4060c0:	6153      	str	r3, [r2, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4060c2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		base->PIO_PUER = mask;
  4060c6:	6653      	str	r3, [r2, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4060c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  4060cc:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  4060ce:	6253      	str	r3, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4060d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4060d4:	6f13      	ldr	r3, [r2, #112]	; 0x70
  4060d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  4060da:	6713      	str	r3, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4060dc:	6f53      	ldr	r3, [r2, #116]	; 0x74
  4060de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  4060e2:	6753      	str	r3, [r2, #116]	; 0x74
  4060e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4060e6:	bf00      	nop

004060e8 <mpu_enable>:
 *
 * \param dwMPUEnable  Enable/Disable the memory region.
 */
void mpu_enable(uint32_t dw_mpu_enable)
{
	MPU->CTRL = dw_mpu_enable ;
  4060e8:	4b01      	ldr	r3, [pc, #4]	; (4060f0 <mpu_enable+0x8>)
  4060ea:	6058      	str	r0, [r3, #4]
  4060ec:	4770      	bx	lr
  4060ee:	bf00      	nop
  4060f0:	e000ed90 	.word	0xe000ed90

004060f4 <mpu_set_region>:
 * \param dwRegionBaseAddr  Memory region base address.
 * \param dwRegionAttr  Memory region attributes.
 */
void mpu_set_region(uint32_t dw_region_base_addr, uint32_t dw_region_attr)
{
	MPU->RBAR = dw_region_base_addr;
  4060f4:	4b01      	ldr	r3, [pc, #4]	; (4060fc <mpu_set_region+0x8>)
  4060f6:	60d8      	str	r0, [r3, #12]
	MPU->RASR = dw_region_attr;
  4060f8:	6119      	str	r1, [r3, #16]
  4060fa:	4770      	bx	lr
  4060fc:	e000ed90 	.word	0xe000ed90

00406100 <mpu_cal_mpu_region_size>:
{
	uint32_t dwRegionSize = 32;
	uint32_t dwReturnValue = 4;

	while( dwReturnValue < 31 ) {
		if( dw_actual_size_in_bytes <= dwRegionSize ) {
  406100:	2820      	cmp	r0, #32
  406102:	d909      	bls.n	406118 <mpu_cal_mpu_region_size+0x18>
  406104:	2304      	movs	r3, #4
  406106:	2220      	movs	r2, #32
			break;
		} else {
			dwReturnValue++;
  406108:	3301      	adds	r3, #1
		}
		dwRegionSize <<= 1;
  40610a:	0052      	lsls	r2, r2, #1
		if( dw_actual_size_in_bytes <= dwRegionSize ) {
  40610c:	4290      	cmp	r0, r2
  40610e:	d901      	bls.n	406114 <mpu_cal_mpu_region_size+0x14>
  406110:	2b1e      	cmp	r3, #30
  406112:	d9f9      	bls.n	406108 <mpu_cal_mpu_region_size+0x8>
	}

	return ( dwReturnValue << 1 );
}
  406114:	0058      	lsls	r0, r3, #1
  406116:	4770      	bx	lr
	uint32_t dwReturnValue = 4;
  406118:	2304      	movs	r3, #4
  40611a:	e7fb      	b.n	406114 <mpu_cal_mpu_region_size+0x14>

0040611c <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40611c:	b90a      	cbnz	r2, 406122 <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40611e:	6601      	str	r1, [r0, #96]	; 0x60
  406120:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  406122:	6641      	str	r1, [r0, #100]	; 0x64
  406124:	4770      	bx	lr

00406126 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  406126:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  406128:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40612c:	d03a      	beq.n	4061a4 <pio_set_peripheral+0x7e>
  40612e:	d813      	bhi.n	406158 <pio_set_peripheral+0x32>
  406130:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  406134:	d025      	beq.n	406182 <pio_set_peripheral+0x5c>
  406136:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  40613a:	d10a      	bne.n	406152 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40613c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40613e:	4313      	orrs	r3, r2
  406140:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  406142:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  406144:	6f41      	ldr	r1, [r0, #116]	; 0x74
  406146:	400b      	ands	r3, r1
  406148:	ea23 0302 	bic.w	r3, r3, r2
  40614c:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  40614e:	6042      	str	r2, [r0, #4]
  406150:	4770      	bx	lr
	switch (ul_type) {
  406152:	2900      	cmp	r1, #0
  406154:	d1fb      	bne.n	40614e <pio_set_peripheral+0x28>
  406156:	4770      	bx	lr
  406158:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40615c:	d021      	beq.n	4061a2 <pio_set_peripheral+0x7c>
  40615e:	d809      	bhi.n	406174 <pio_set_peripheral+0x4e>
  406160:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  406164:	d1f3      	bne.n	40614e <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  406166:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  406168:	4313      	orrs	r3, r2
  40616a:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  40616c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40616e:	4313      	orrs	r3, r2
  406170:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  406172:	e7ec      	b.n	40614e <pio_set_peripheral+0x28>
	switch (ul_type) {
  406174:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  406178:	d013      	beq.n	4061a2 <pio_set_peripheral+0x7c>
  40617a:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  40617e:	d010      	beq.n	4061a2 <pio_set_peripheral+0x7c>
  406180:	e7e5      	b.n	40614e <pio_set_peripheral+0x28>
{
  406182:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  406184:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  406186:	6f04      	ldr	r4, [r0, #112]	; 0x70
  406188:	43d3      	mvns	r3, r2
  40618a:	4021      	ands	r1, r4
  40618c:	461c      	mov	r4, r3
  40618e:	4019      	ands	r1, r3
  406190:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  406192:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  406194:	6f41      	ldr	r1, [r0, #116]	; 0x74
  406196:	400b      	ands	r3, r1
  406198:	4023      	ands	r3, r4
  40619a:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  40619c:	6042      	str	r2, [r0, #4]
}
  40619e:	f85d 4b04 	ldr.w	r4, [sp], #4
  4061a2:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  4061a4:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4061a6:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4061a8:	400b      	ands	r3, r1
  4061aa:	ea23 0302 	bic.w	r3, r3, r2
  4061ae:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4061b0:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4061b2:	4313      	orrs	r3, r2
  4061b4:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4061b6:	e7ca      	b.n	40614e <pio_set_peripheral+0x28>

004061b8 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4061b8:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4061ba:	f012 0f01 	tst.w	r2, #1
  4061be:	d10d      	bne.n	4061dc <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  4061c0:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4061c2:	f012 0f0a 	tst.w	r2, #10
  4061c6:	d00b      	beq.n	4061e0 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  4061c8:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  4061ca:	f012 0f02 	tst.w	r2, #2
  4061ce:	d109      	bne.n	4061e4 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  4061d0:	f012 0f08 	tst.w	r2, #8
  4061d4:	d008      	beq.n	4061e8 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  4061d6:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  4061da:	e005      	b.n	4061e8 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  4061dc:	6641      	str	r1, [r0, #100]	; 0x64
  4061de:	e7f0      	b.n	4061c2 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  4061e0:	6241      	str	r1, [r0, #36]	; 0x24
  4061e2:	e7f2      	b.n	4061ca <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  4061e4:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  4061e8:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4061ea:	6001      	str	r1, [r0, #0]
  4061ec:	4770      	bx	lr

004061ee <pio_set_output>:
{
  4061ee:	b410      	push	{r4}
  4061f0:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  4061f2:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4061f4:	b94c      	cbnz	r4, 40620a <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  4061f6:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  4061f8:	b14b      	cbz	r3, 40620e <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  4061fa:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  4061fc:	b94a      	cbnz	r2, 406212 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  4061fe:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  406200:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  406202:	6001      	str	r1, [r0, #0]
}
  406204:	f85d 4b04 	ldr.w	r4, [sp], #4
  406208:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  40620a:	6641      	str	r1, [r0, #100]	; 0x64
  40620c:	e7f4      	b.n	4061f8 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  40620e:	6541      	str	r1, [r0, #84]	; 0x54
  406210:	e7f4      	b.n	4061fc <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  406212:	6301      	str	r1, [r0, #48]	; 0x30
  406214:	e7f4      	b.n	406200 <pio_set_output+0x12>

00406216 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  406216:	f012 0f10 	tst.w	r2, #16
  40621a:	d012      	beq.n	406242 <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  40621c:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  406220:	f012 0f20 	tst.w	r2, #32
  406224:	d007      	beq.n	406236 <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  406226:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  40622a:	f012 0f40 	tst.w	r2, #64	; 0x40
  40622e:	d005      	beq.n	40623c <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  406230:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  406234:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  406236:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  40623a:	e7f6      	b.n	40622a <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  40623c:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  406240:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  406242:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  406246:	4770      	bx	lr

00406248 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  406248:	6401      	str	r1, [r0, #64]	; 0x40
  40624a:	4770      	bx	lr

0040624c <pio_disable_interrupt>:
	p_pio->PIO_IDR = ul_mask;
  40624c:	6441      	str	r1, [r0, #68]	; 0x44
  40624e:	4770      	bx	lr

00406250 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  406250:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  406252:	4770      	bx	lr

00406254 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  406254:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  406256:	4770      	bx	lr

00406258 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  406258:	b570      	push	{r4, r5, r6, lr}
  40625a:	b082      	sub	sp, #8
  40625c:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  40625e:	4c46      	ldr	r4, [pc, #280]	; (406378 <pio_configure_pin+0x120>)
  406260:	eb04 1450 	add.w	r4, r4, r0, lsr #5
  406264:	0264      	lsls	r4, r4, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  406266:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  40626a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40626e:	d059      	beq.n	406324 <pio_configure_pin+0xcc>
  406270:	d80a      	bhi.n	406288 <pio_configure_pin+0x30>
  406272:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  406276:	d02f      	beq.n	4062d8 <pio_configure_pin+0x80>
  406278:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40627c:	d03f      	beq.n	4062fe <pio_configure_pin+0xa6>
  40627e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  406282:	d016      	beq.n	4062b2 <pio_configure_pin+0x5a>
		return 0;
  406284:	2000      	movs	r0, #0
  406286:	e012      	b.n	4062ae <pio_configure_pin+0x56>
	switch (ul_flags & PIO_TYPE_Msk) {
  406288:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  40628c:	d05d      	beq.n	40634a <pio_configure_pin+0xf2>
  40628e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  406292:	d05a      	beq.n	40634a <pio_configure_pin+0xf2>
  406294:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  406298:	d1f4      	bne.n	406284 <pio_configure_pin+0x2c>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  40629a:	f000 011f 	and.w	r1, r0, #31
  40629e:	2601      	movs	r6, #1
  4062a0:	462a      	mov	r2, r5
  4062a2:	fa06 f101 	lsl.w	r1, r6, r1
  4062a6:	4620      	mov	r0, r4
  4062a8:	4b34      	ldr	r3, [pc, #208]	; (40637c <pio_configure_pin+0x124>)
  4062aa:	4798      	blx	r3
	return 1;
  4062ac:	4630      	mov	r0, r6
}
  4062ae:	b002      	add	sp, #8
  4062b0:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  4062b2:	f000 001f 	and.w	r0, r0, #31
  4062b6:	2601      	movs	r6, #1
  4062b8:	4086      	lsls	r6, r0
  4062ba:	4632      	mov	r2, r6
  4062bc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4062c0:	4620      	mov	r0, r4
  4062c2:	4b2f      	ldr	r3, [pc, #188]	; (406380 <pio_configure_pin+0x128>)
  4062c4:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4062c6:	f015 0f01 	tst.w	r5, #1
  4062ca:	d102      	bne.n	4062d2 <pio_configure_pin+0x7a>
		p_pio->PIO_PUDR = ul_mask;
  4062cc:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4062ce:	2001      	movs	r0, #1
  4062d0:	e7ed      	b.n	4062ae <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4062d2:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4062d4:	2001      	movs	r0, #1
  4062d6:	e7ea      	b.n	4062ae <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  4062d8:	f000 001f 	and.w	r0, r0, #31
  4062dc:	2601      	movs	r6, #1
  4062de:	4086      	lsls	r6, r0
  4062e0:	4632      	mov	r2, r6
  4062e2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4062e6:	4620      	mov	r0, r4
  4062e8:	4b25      	ldr	r3, [pc, #148]	; (406380 <pio_configure_pin+0x128>)
  4062ea:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4062ec:	f015 0f01 	tst.w	r5, #1
  4062f0:	d102      	bne.n	4062f8 <pio_configure_pin+0xa0>
		p_pio->PIO_PUDR = ul_mask;
  4062f2:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4062f4:	2001      	movs	r0, #1
  4062f6:	e7da      	b.n	4062ae <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4062f8:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4062fa:	2001      	movs	r0, #1
  4062fc:	e7d7      	b.n	4062ae <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  4062fe:	f000 001f 	and.w	r0, r0, #31
  406302:	2601      	movs	r6, #1
  406304:	4086      	lsls	r6, r0
  406306:	4632      	mov	r2, r6
  406308:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40630c:	4620      	mov	r0, r4
  40630e:	4b1c      	ldr	r3, [pc, #112]	; (406380 <pio_configure_pin+0x128>)
  406310:	4798      	blx	r3
	if (ul_pull_up_enable) {
  406312:	f015 0f01 	tst.w	r5, #1
  406316:	d102      	bne.n	40631e <pio_configure_pin+0xc6>
		p_pio->PIO_PUDR = ul_mask;
  406318:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  40631a:	2001      	movs	r0, #1
  40631c:	e7c7      	b.n	4062ae <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  40631e:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  406320:	2001      	movs	r0, #1
  406322:	e7c4      	b.n	4062ae <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  406324:	f000 001f 	and.w	r0, r0, #31
  406328:	2601      	movs	r6, #1
  40632a:	4086      	lsls	r6, r0
  40632c:	4632      	mov	r2, r6
  40632e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  406332:	4620      	mov	r0, r4
  406334:	4b12      	ldr	r3, [pc, #72]	; (406380 <pio_configure_pin+0x128>)
  406336:	4798      	blx	r3
	if (ul_pull_up_enable) {
  406338:	f015 0f01 	tst.w	r5, #1
  40633c:	d102      	bne.n	406344 <pio_configure_pin+0xec>
		p_pio->PIO_PUDR = ul_mask;
  40633e:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  406340:	2001      	movs	r0, #1
  406342:	e7b4      	b.n	4062ae <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  406344:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  406346:	2001      	movs	r0, #1
  406348:	e7b1      	b.n	4062ae <pio_configure_pin+0x56>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  40634a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40634e:	f000 011f 	and.w	r1, r0, #31
  406352:	2601      	movs	r6, #1
  406354:	ea05 0306 	and.w	r3, r5, r6
  406358:	9300      	str	r3, [sp, #0]
  40635a:	f3c5 0380 	ubfx	r3, r5, #2, #1
  40635e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  406362:	bf14      	ite	ne
  406364:	2200      	movne	r2, #0
  406366:	2201      	moveq	r2, #1
  406368:	fa06 f101 	lsl.w	r1, r6, r1
  40636c:	4620      	mov	r0, r4
  40636e:	4c05      	ldr	r4, [pc, #20]	; (406384 <pio_configure_pin+0x12c>)
  406370:	47a0      	blx	r4
	return 1;
  406372:	4630      	mov	r0, r6
		break;
  406374:	e79b      	b.n	4062ae <pio_configure_pin+0x56>
  406376:	bf00      	nop
  406378:	00200707 	.word	0x00200707
  40637c:	004061b9 	.word	0x004061b9
  406380:	00406127 	.word	0x00406127
  406384:	004061ef 	.word	0x004061ef

00406388 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  406388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40638c:	4604      	mov	r4, r0
  40638e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  406390:	4b0e      	ldr	r3, [pc, #56]	; (4063cc <pio_handler_process+0x44>)
  406392:	4798      	blx	r3
  406394:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  406396:	4620      	mov	r0, r4
  406398:	4b0d      	ldr	r3, [pc, #52]	; (4063d0 <pio_handler_process+0x48>)
  40639a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  40639c:	4005      	ands	r5, r0
  40639e:	d013      	beq.n	4063c8 <pio_handler_process+0x40>
  4063a0:	4c0c      	ldr	r4, [pc, #48]	; (4063d4 <pio_handler_process+0x4c>)
  4063a2:	f104 0660 	add.w	r6, r4, #96	; 0x60
  4063a6:	e003      	b.n	4063b0 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4063a8:	42b4      	cmp	r4, r6
  4063aa:	d00d      	beq.n	4063c8 <pio_handler_process+0x40>
  4063ac:	3410      	adds	r4, #16
		while (status != 0) {
  4063ae:	b15d      	cbz	r5, 4063c8 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  4063b0:	6820      	ldr	r0, [r4, #0]
  4063b2:	4540      	cmp	r0, r8
  4063b4:	d1f8      	bne.n	4063a8 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4063b6:	6861      	ldr	r1, [r4, #4]
  4063b8:	4229      	tst	r1, r5
  4063ba:	d0f5      	beq.n	4063a8 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4063bc:	68e3      	ldr	r3, [r4, #12]
  4063be:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4063c0:	6863      	ldr	r3, [r4, #4]
  4063c2:	ea25 0503 	bic.w	r5, r5, r3
  4063c6:	e7ef      	b.n	4063a8 <pio_handler_process+0x20>
  4063c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4063cc:	00406251 	.word	0x00406251
  4063d0:	00406255 	.word	0x00406255
  4063d4:	20400a7c 	.word	0x20400a7c

004063d8 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  4063d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  4063da:	4c18      	ldr	r4, [pc, #96]	; (40643c <pio_handler_set+0x64>)
  4063dc:	6826      	ldr	r6, [r4, #0]
  4063de:	2e06      	cmp	r6, #6
  4063e0:	d82a      	bhi.n	406438 <pio_handler_set+0x60>
  4063e2:	f04f 0c00 	mov.w	ip, #0
  4063e6:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  4063e8:	4f15      	ldr	r7, [pc, #84]	; (406440 <pio_handler_set+0x68>)
  4063ea:	e004      	b.n	4063f6 <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  4063ec:	3401      	adds	r4, #1
  4063ee:	b2e4      	uxtb	r4, r4
  4063f0:	46a4      	mov	ip, r4
  4063f2:	42a6      	cmp	r6, r4
  4063f4:	d309      	bcc.n	40640a <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  4063f6:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  4063f8:	0125      	lsls	r5, r4, #4
  4063fa:	597d      	ldr	r5, [r7, r5]
  4063fc:	428d      	cmp	r5, r1
  4063fe:	d1f5      	bne.n	4063ec <pio_handler_set+0x14>
  406400:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  406404:	686d      	ldr	r5, [r5, #4]
  406406:	4295      	cmp	r5, r2
  406408:	d1f0      	bne.n	4063ec <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  40640a:	4d0d      	ldr	r5, [pc, #52]	; (406440 <pio_handler_set+0x68>)
  40640c:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  406410:	eb05 040e 	add.w	r4, r5, lr
  406414:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  406418:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  40641a:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  40641c:	9906      	ldr	r1, [sp, #24]
  40641e:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  406420:	3601      	adds	r6, #1
  406422:	4566      	cmp	r6, ip
  406424:	d005      	beq.n	406432 <pio_handler_set+0x5a>
  406426:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  406428:	461a      	mov	r2, r3
  40642a:	4b06      	ldr	r3, [pc, #24]	; (406444 <pio_handler_set+0x6c>)
  40642c:	4798      	blx	r3

	return 0;
  40642e:	2000      	movs	r0, #0
  406430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  406432:	4902      	ldr	r1, [pc, #8]	; (40643c <pio_handler_set+0x64>)
  406434:	600e      	str	r6, [r1, #0]
  406436:	e7f6      	b.n	406426 <pio_handler_set+0x4e>
		return 1;
  406438:	2001      	movs	r0, #1
}
  40643a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40643c:	20400aec 	.word	0x20400aec
  406440:	20400a7c 	.word	0x20400a7c
  406444:	00406217 	.word	0x00406217

00406448 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  406448:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  40644a:	210a      	movs	r1, #10
  40644c:	4801      	ldr	r0, [pc, #4]	; (406454 <PIOA_Handler+0xc>)
  40644e:	4b02      	ldr	r3, [pc, #8]	; (406458 <PIOA_Handler+0x10>)
  406450:	4798      	blx	r3
  406452:	bd08      	pop	{r3, pc}
  406454:	400e0e00 	.word	0x400e0e00
  406458:	00406389 	.word	0x00406389

0040645c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  40645c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40645e:	210b      	movs	r1, #11
  406460:	4801      	ldr	r0, [pc, #4]	; (406468 <PIOB_Handler+0xc>)
  406462:	4b02      	ldr	r3, [pc, #8]	; (40646c <PIOB_Handler+0x10>)
  406464:	4798      	blx	r3
  406466:	bd08      	pop	{r3, pc}
  406468:	400e1000 	.word	0x400e1000
  40646c:	00406389 	.word	0x00406389

00406470 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  406470:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  406472:	210c      	movs	r1, #12
  406474:	4801      	ldr	r0, [pc, #4]	; (40647c <PIOC_Handler+0xc>)
  406476:	4b02      	ldr	r3, [pc, #8]	; (406480 <PIOC_Handler+0x10>)
  406478:	4798      	blx	r3
  40647a:	bd08      	pop	{r3, pc}
  40647c:	400e1200 	.word	0x400e1200
  406480:	00406389 	.word	0x00406389

00406484 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  406484:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  406486:	2110      	movs	r1, #16
  406488:	4801      	ldr	r0, [pc, #4]	; (406490 <PIOD_Handler+0xc>)
  40648a:	4b02      	ldr	r3, [pc, #8]	; (406494 <PIOD_Handler+0x10>)
  40648c:	4798      	blx	r3
  40648e:	bd08      	pop	{r3, pc}
  406490:	400e1400 	.word	0x400e1400
  406494:	00406389 	.word	0x00406389

00406498 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  406498:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  40649a:	2111      	movs	r1, #17
  40649c:	4801      	ldr	r0, [pc, #4]	; (4064a4 <PIOE_Handler+0xc>)
  40649e:	4b02      	ldr	r3, [pc, #8]	; (4064a8 <PIOE_Handler+0x10>)
  4064a0:	4798      	blx	r3
  4064a2:	bd08      	pop	{r3, pc}
  4064a4:	400e1600 	.word	0x400e1600
  4064a8:	00406389 	.word	0x00406389

004064ac <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  4064ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4064ae:	4606      	mov	r6, r0
  4064b0:	460d      	mov	r5, r1
  4064b2:	4614      	mov	r4, r2
	uint32_t bitmask = 0;

	bitmask = pio_get_interrupt_mask(p_pio);
  4064b4:	4b17      	ldr	r3, [pc, #92]	; (406514 <pio_handler_set_priority+0x68>)
  4064b6:	4798      	blx	r3
  4064b8:	4607      	mov	r7, r0
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  4064ba:	f04f 31ff 	mov.w	r1, #4294967295
  4064be:	4630      	mov	r0, r6
  4064c0:	4b15      	ldr	r3, [pc, #84]	; (406518 <pio_handler_set_priority+0x6c>)
  4064c2:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  4064c4:	4630      	mov	r0, r6
  4064c6:	4b15      	ldr	r3, [pc, #84]	; (40651c <pio_handler_set_priority+0x70>)
  4064c8:	4798      	blx	r3
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  4064ca:	fa5f fe85 	uxtb.w	lr, r5
  4064ce:	f00e 031f 	and.w	r3, lr, #31
  4064d2:	2201      	movs	r2, #1
  4064d4:	fa02 f303 	lsl.w	r3, r2, r3
  4064d8:	0968      	lsrs	r0, r5, #5
  4064da:	4911      	ldr	r1, [pc, #68]	; (406520 <pio_handler_set_priority+0x74>)
  4064dc:	eb01 0280 	add.w	r2, r1, r0, lsl #2
  4064e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4064e4:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
  if(IRQn < 0) {
  4064e8:	2d00      	cmp	r5, #0
  4064ea:	db0a      	blt.n	406502 <pio_handler_set_priority+0x56>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4064ec:	0164      	lsls	r4, r4, #5
  4064ee:	b2e4      	uxtb	r4, r4
  4064f0:	4a0c      	ldr	r2, [pc, #48]	; (406524 <pio_handler_set_priority+0x78>)
  4064f2:	5554      	strb	r4, [r2, r5]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4064f4:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
	NVIC_DisableIRQ(ul_irqn);
	NVIC_ClearPendingIRQ(ul_irqn);
	NVIC_SetPriority(ul_irqn, ul_priority);
	NVIC_EnableIRQ(ul_irqn);
	pio_enable_interrupt(p_pio, bitmask);
  4064f8:	4639      	mov	r1, r7
  4064fa:	4630      	mov	r0, r6
  4064fc:	4b0a      	ldr	r3, [pc, #40]	; (406528 <pio_handler_set_priority+0x7c>)
  4064fe:	4798      	blx	r3
  406500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  406502:	f00e 0e0f 	and.w	lr, lr, #15
  406506:	0164      	lsls	r4, r4, #5
  406508:	b2e4      	uxtb	r4, r4
  40650a:	4a08      	ldr	r2, [pc, #32]	; (40652c <pio_handler_set_priority+0x80>)
  40650c:	f802 400e 	strb.w	r4, [r2, lr]
  406510:	e7f0      	b.n	4064f4 <pio_handler_set_priority+0x48>
  406512:	bf00      	nop
  406514:	00406255 	.word	0x00406255
  406518:	0040624d 	.word	0x0040624d
  40651c:	00406251 	.word	0x00406251
  406520:	e000e100 	.word	0xe000e100
  406524:	e000e400 	.word	0xe000e400
  406528:	00406249 	.word	0x00406249
  40652c:	e000ed14 	.word	0xe000ed14

00406530 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  406530:	2803      	cmp	r0, #3
  406532:	d011      	beq.n	406558 <pmc_mck_set_division+0x28>
  406534:	2804      	cmp	r0, #4
  406536:	d012      	beq.n	40655e <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  406538:	2802      	cmp	r0, #2
  40653a:	bf0c      	ite	eq
  40653c:	f44f 7180 	moveq.w	r1, #256	; 0x100
  406540:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  406542:	4a08      	ldr	r2, [pc, #32]	; (406564 <pmc_mck_set_division+0x34>)
  406544:	6b13      	ldr	r3, [r2, #48]	; 0x30
  406546:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  40654a:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  40654c:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40654e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  406550:	f013 0f08 	tst.w	r3, #8
  406554:	d0fb      	beq.n	40654e <pmc_mck_set_division+0x1e>
}
  406556:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  406558:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  40655c:	e7f1      	b.n	406542 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  40655e:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  406562:	e7ee      	b.n	406542 <pmc_mck_set_division+0x12>
  406564:	400e0600 	.word	0x400e0600

00406568 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  406568:	4a17      	ldr	r2, [pc, #92]	; (4065c8 <pmc_switch_mck_to_pllack+0x60>)
  40656a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40656c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  406570:	4318      	orrs	r0, r3
  406572:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  406574:	6e93      	ldr	r3, [r2, #104]	; 0x68
  406576:	f013 0f08 	tst.w	r3, #8
  40657a:	d10a      	bne.n	406592 <pmc_switch_mck_to_pllack+0x2a>
  40657c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  406580:	4911      	ldr	r1, [pc, #68]	; (4065c8 <pmc_switch_mck_to_pllack+0x60>)
  406582:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  406584:	f012 0f08 	tst.w	r2, #8
  406588:	d103      	bne.n	406592 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40658a:	3b01      	subs	r3, #1
  40658c:	d1f9      	bne.n	406582 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  40658e:	2001      	movs	r0, #1
  406590:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  406592:	4a0d      	ldr	r2, [pc, #52]	; (4065c8 <pmc_switch_mck_to_pllack+0x60>)
  406594:	6b13      	ldr	r3, [r2, #48]	; 0x30
  406596:	f023 0303 	bic.w	r3, r3, #3
  40659a:	f043 0302 	orr.w	r3, r3, #2
  40659e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4065a0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4065a2:	f013 0f08 	tst.w	r3, #8
  4065a6:	d10a      	bne.n	4065be <pmc_switch_mck_to_pllack+0x56>
  4065a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4065ac:	4906      	ldr	r1, [pc, #24]	; (4065c8 <pmc_switch_mck_to_pllack+0x60>)
  4065ae:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4065b0:	f012 0f08 	tst.w	r2, #8
  4065b4:	d105      	bne.n	4065c2 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4065b6:	3b01      	subs	r3, #1
  4065b8:	d1f9      	bne.n	4065ae <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4065ba:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4065bc:	4770      	bx	lr
	return 0;
  4065be:	2000      	movs	r0, #0
  4065c0:	4770      	bx	lr
  4065c2:	2000      	movs	r0, #0
  4065c4:	4770      	bx	lr
  4065c6:	bf00      	nop
  4065c8:	400e0600 	.word	0x400e0600

004065cc <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4065cc:	b9a0      	cbnz	r0, 4065f8 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4065ce:	480e      	ldr	r0, [pc, #56]	; (406608 <pmc_switch_mainck_to_xtal+0x3c>)
  4065d0:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4065d2:	0209      	lsls	r1, r1, #8
  4065d4:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4065d6:	4a0d      	ldr	r2, [pc, #52]	; (40660c <pmc_switch_mainck_to_xtal+0x40>)
  4065d8:	401a      	ands	r2, r3
  4065da:	4b0d      	ldr	r3, [pc, #52]	; (406610 <pmc_switch_mainck_to_xtal+0x44>)
  4065dc:	4313      	orrs	r3, r2
  4065de:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4065e0:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4065e2:	4602      	mov	r2, r0
  4065e4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4065e6:	f013 0f01 	tst.w	r3, #1
  4065ea:	d0fb      	beq.n	4065e4 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4065ec:	4a06      	ldr	r2, [pc, #24]	; (406608 <pmc_switch_mainck_to_xtal+0x3c>)
  4065ee:	6a11      	ldr	r1, [r2, #32]
  4065f0:	4b08      	ldr	r3, [pc, #32]	; (406614 <pmc_switch_mainck_to_xtal+0x48>)
  4065f2:	430b      	orrs	r3, r1
  4065f4:	6213      	str	r3, [r2, #32]
  4065f6:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4065f8:	4903      	ldr	r1, [pc, #12]	; (406608 <pmc_switch_mainck_to_xtal+0x3c>)
  4065fa:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4065fc:	4a06      	ldr	r2, [pc, #24]	; (406618 <pmc_switch_mainck_to_xtal+0x4c>)
  4065fe:	401a      	ands	r2, r3
  406600:	4b06      	ldr	r3, [pc, #24]	; (40661c <pmc_switch_mainck_to_xtal+0x50>)
  406602:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  406604:	620b      	str	r3, [r1, #32]
  406606:	4770      	bx	lr
  406608:	400e0600 	.word	0x400e0600
  40660c:	ffc8fffc 	.word	0xffc8fffc
  406610:	00370001 	.word	0x00370001
  406614:	01370000 	.word	0x01370000
  406618:	fec8fffc 	.word	0xfec8fffc
  40661c:	01370002 	.word	0x01370002

00406620 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  406620:	4b02      	ldr	r3, [pc, #8]	; (40662c <pmc_osc_is_ready_mainck+0xc>)
  406622:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  406624:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  406628:	4770      	bx	lr
  40662a:	bf00      	nop
  40662c:	400e0600 	.word	0x400e0600

00406630 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  406630:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  406634:	4b01      	ldr	r3, [pc, #4]	; (40663c <pmc_disable_pllack+0xc>)
  406636:	629a      	str	r2, [r3, #40]	; 0x28
  406638:	4770      	bx	lr
  40663a:	bf00      	nop
  40663c:	400e0600 	.word	0x400e0600

00406640 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  406640:	4b02      	ldr	r3, [pc, #8]	; (40664c <pmc_is_locked_pllack+0xc>)
  406642:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  406644:	f000 0002 	and.w	r0, r0, #2
  406648:	4770      	bx	lr
  40664a:	bf00      	nop
  40664c:	400e0600 	.word	0x400e0600

00406650 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  406650:	283f      	cmp	r0, #63	; 0x3f
  406652:	d81e      	bhi.n	406692 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  406654:	281f      	cmp	r0, #31
  406656:	d80c      	bhi.n	406672 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  406658:	4b11      	ldr	r3, [pc, #68]	; (4066a0 <pmc_enable_periph_clk+0x50>)
  40665a:	699a      	ldr	r2, [r3, #24]
  40665c:	2301      	movs	r3, #1
  40665e:	4083      	lsls	r3, r0
  406660:	4393      	bics	r3, r2
  406662:	d018      	beq.n	406696 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  406664:	2301      	movs	r3, #1
  406666:	fa03 f000 	lsl.w	r0, r3, r0
  40666a:	4b0d      	ldr	r3, [pc, #52]	; (4066a0 <pmc_enable_periph_clk+0x50>)
  40666c:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40666e:	2000      	movs	r0, #0
  406670:	4770      	bx	lr
		ul_id -= 32;
  406672:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  406674:	4b0a      	ldr	r3, [pc, #40]	; (4066a0 <pmc_enable_periph_clk+0x50>)
  406676:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40667a:	2301      	movs	r3, #1
  40667c:	4083      	lsls	r3, r0
  40667e:	4393      	bics	r3, r2
  406680:	d00b      	beq.n	40669a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  406682:	2301      	movs	r3, #1
  406684:	fa03 f000 	lsl.w	r0, r3, r0
  406688:	4b05      	ldr	r3, [pc, #20]	; (4066a0 <pmc_enable_periph_clk+0x50>)
  40668a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  40668e:	2000      	movs	r0, #0
  406690:	4770      	bx	lr
		return 1;
  406692:	2001      	movs	r0, #1
  406694:	4770      	bx	lr
	return 0;
  406696:	2000      	movs	r0, #0
  406698:	4770      	bx	lr
  40669a:	2000      	movs	r0, #0
}
  40669c:	4770      	bx	lr
  40669e:	bf00      	nop
  4066a0:	400e0600 	.word	0x400e0600

004066a4 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  4066a4:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  4066a6:	4b07      	ldr	r3, [pc, #28]	; (4066c4 <spi_enable_clock+0x20>)
  4066a8:	4298      	cmp	r0, r3
  4066aa:	d003      	beq.n	4066b4 <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  4066ac:	4b06      	ldr	r3, [pc, #24]	; (4066c8 <spi_enable_clock+0x24>)
  4066ae:	4298      	cmp	r0, r3
  4066b0:	d004      	beq.n	4066bc <spi_enable_clock+0x18>
  4066b2:	bd08      	pop	{r3, pc}
  4066b4:	2015      	movs	r0, #21
  4066b6:	4b05      	ldr	r3, [pc, #20]	; (4066cc <spi_enable_clock+0x28>)
  4066b8:	4798      	blx	r3
  4066ba:	bd08      	pop	{r3, pc}
  4066bc:	202a      	movs	r0, #42	; 0x2a
  4066be:	4b03      	ldr	r3, [pc, #12]	; (4066cc <spi_enable_clock+0x28>)
  4066c0:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  4066c2:	e7f6      	b.n	4066b2 <spi_enable_clock+0xe>
  4066c4:	40008000 	.word	0x40008000
  4066c8:	40058000 	.word	0x40058000
  4066cc:	00406651 	.word	0x00406651

004066d0 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  4066d0:	6843      	ldr	r3, [r0, #4]
  4066d2:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  4066d6:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  4066d8:	6843      	ldr	r3, [r0, #4]
  4066da:	0409      	lsls	r1, r1, #16
  4066dc:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  4066e0:	4319      	orrs	r1, r3
  4066e2:	6041      	str	r1, [r0, #4]
  4066e4:	4770      	bx	lr

004066e6 <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
  4066e6:	b410      	push	{r4}
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
  4066e8:	f643 2399 	movw	r3, #15001	; 0x3a99
  4066ec:	6904      	ldr	r4, [r0, #16]
  4066ee:	f014 0f01 	tst.w	r4, #1
  4066f2:	d103      	bne.n	4066fc <spi_read+0x16>
		if (!timeout--) {
  4066f4:	3b01      	subs	r3, #1
  4066f6:	d1f9      	bne.n	4066ec <spi_read+0x6>
			return SPI_ERROR_TIMEOUT;
  4066f8:	2001      	movs	r0, #1
  4066fa:	e009      	b.n	406710 <spi_read+0x2a>
		}
	}

	reg_value = p_spi->SPI_RDR;
  4066fc:	6883      	ldr	r3, [r0, #8]
	if (p_spi->SPI_MR & SPI_MR_PS) {
  4066fe:	6840      	ldr	r0, [r0, #4]
	if (spi_get_peripheral_select_mode(p_spi)) {
  406700:	f010 0f02 	tst.w	r0, #2
  406704:	d002      	beq.n	40670c <spi_read+0x26>
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
  406706:	f3c3 4003 	ubfx	r0, r3, #16, #4
  40670a:	7010      	strb	r0, [r2, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
  40670c:	800b      	strh	r3, [r1, #0]

	return SPI_OK;
  40670e:	2000      	movs	r0, #0
}
  406710:	f85d 4b04 	ldr.w	r4, [sp], #4
  406714:	4770      	bx	lr

00406716 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  406716:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  406718:	f643 2499 	movw	r4, #15001	; 0x3a99
  40671c:	6905      	ldr	r5, [r0, #16]
  40671e:	f015 0f02 	tst.w	r5, #2
  406722:	d103      	bne.n	40672c <spi_write+0x16>
		if (!timeout--) {
  406724:	3c01      	subs	r4, #1
  406726:	d1f9      	bne.n	40671c <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  406728:	2001      	movs	r0, #1
  40672a:	e00c      	b.n	406746 <spi_write+0x30>
  40672c:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  40672e:	f014 0f02 	tst.w	r4, #2
  406732:	d006      	beq.n	406742 <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  406734:	0412      	lsls	r2, r2, #16
  406736:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  40673a:	4311      	orrs	r1, r2
		if (uc_last) {
  40673c:	b10b      	cbz	r3, 406742 <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  40673e:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  406742:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  406744:	2000      	movs	r0, #0
}
  406746:	bc30      	pop	{r4, r5}
  406748:	4770      	bx	lr

0040674a <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  40674a:	b932      	cbnz	r2, 40675a <spi_set_clock_polarity+0x10>
  40674c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  406750:	6b03      	ldr	r3, [r0, #48]	; 0x30
  406752:	f023 0301 	bic.w	r3, r3, #1
  406756:	6303      	str	r3, [r0, #48]	; 0x30
  406758:	4770      	bx	lr
  40675a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  40675e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  406760:	f043 0301 	orr.w	r3, r3, #1
  406764:	6303      	str	r3, [r0, #48]	; 0x30
  406766:	4770      	bx	lr

00406768 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  406768:	b932      	cbnz	r2, 406778 <spi_set_clock_phase+0x10>
  40676a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  40676e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  406770:	f023 0302 	bic.w	r3, r3, #2
  406774:	6303      	str	r3, [r0, #48]	; 0x30
  406776:	4770      	bx	lr
  406778:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  40677c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40677e:	f043 0302 	orr.w	r3, r3, #2
  406782:	6303      	str	r3, [r0, #48]	; 0x30
  406784:	4770      	bx	lr

00406786 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  406786:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  40678a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40678c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  406790:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  406792:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  406794:	431a      	orrs	r2, r3
  406796:	630a      	str	r2, [r1, #48]	; 0x30
  406798:	4770      	bx	lr

0040679a <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  40679a:	1e43      	subs	r3, r0, #1
  40679c:	4419      	add	r1, r3
  40679e:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  4067a2:	1e43      	subs	r3, r0, #1
  4067a4:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  4067a6:	bf94      	ite	ls
  4067a8:	b200      	sxthls	r0, r0
		return -1;
  4067aa:	f04f 30ff 	movhi.w	r0, #4294967295
}
  4067ae:	4770      	bx	lr

004067b0 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  4067b0:	b17a      	cbz	r2, 4067d2 <spi_set_baudrate_div+0x22>
{
  4067b2:	b410      	push	{r4}
  4067b4:	4614      	mov	r4, r2
  4067b6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  4067ba:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4067bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  4067c0:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  4067c2:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  4067c4:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  4067c8:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  4067ca:	2000      	movs	r0, #0
}
  4067cc:	f85d 4b04 	ldr.w	r4, [sp], #4
  4067d0:	4770      	bx	lr
        return -1;
  4067d2:	f04f 30ff 	mov.w	r0, #4294967295
  4067d6:	4770      	bx	lr

004067d8 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  4067d8:	b410      	push	{r4}
  4067da:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  4067de:	6b08      	ldr	r0, [r1, #48]	; 0x30
  4067e0:	b280      	uxth	r0, r0
  4067e2:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  4067e4:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  4067e6:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  4067ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4067ee:	630b      	str	r3, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  4067f0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4067f4:	4770      	bx	lr

004067f6 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4067f6:	6943      	ldr	r3, [r0, #20]
  4067f8:	f013 0f02 	tst.w	r3, #2
  4067fc:	d002      	beq.n	406804 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  4067fe:	61c1      	str	r1, [r0, #28]
	return 0;
  406800:	2000      	movs	r0, #0
  406802:	4770      	bx	lr
		return 1;
  406804:	2001      	movs	r0, #1
}
  406806:	4770      	bx	lr

00406808 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  406808:	6943      	ldr	r3, [r0, #20]
  40680a:	f013 0f01 	tst.w	r3, #1
  40680e:	d003      	beq.n	406818 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  406810:	6983      	ldr	r3, [r0, #24]
  406812:	700b      	strb	r3, [r1, #0]
	return 0;
  406814:	2000      	movs	r0, #0
  406816:	4770      	bx	lr
		return 1;
  406818:	2001      	movs	r0, #1
}
  40681a:	4770      	bx	lr

0040681c <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  40681c:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  40681e:	010b      	lsls	r3, r1, #4
  406820:	4293      	cmp	r3, r2
  406822:	d914      	bls.n	40684e <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  406824:	00c9      	lsls	r1, r1, #3
  406826:	084b      	lsrs	r3, r1, #1
  406828:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  40682c:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  406830:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  406832:	1e5c      	subs	r4, r3, #1
  406834:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  406838:	428c      	cmp	r4, r1
  40683a:	d901      	bls.n	406840 <usart_set_async_baudrate+0x24>
		return 1;
  40683c:	2001      	movs	r0, #1
  40683e:	e017      	b.n	406870 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  406840:	6841      	ldr	r1, [r0, #4]
  406842:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  406846:	6041      	str	r1, [r0, #4]
  406848:	e00c      	b.n	406864 <usart_set_async_baudrate+0x48>
		return 1;
  40684a:	2001      	movs	r0, #1
  40684c:	e010      	b.n	406870 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  40684e:	0859      	lsrs	r1, r3, #1
  406850:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  406854:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  406858:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40685a:	1e5c      	subs	r4, r3, #1
  40685c:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  406860:	428c      	cmp	r4, r1
  406862:	d8f2      	bhi.n	40684a <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  406864:	0412      	lsls	r2, r2, #16
  406866:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  40686a:	431a      	orrs	r2, r3
  40686c:	6202      	str	r2, [r0, #32]

	return 0;
  40686e:	2000      	movs	r0, #0
}
  406870:	f85d 4b04 	ldr.w	r4, [sp], #4
  406874:	4770      	bx	lr
	...

00406878 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  406878:	4b08      	ldr	r3, [pc, #32]	; (40689c <usart_reset+0x24>)
  40687a:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  40687e:	2300      	movs	r3, #0
  406880:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  406882:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  406884:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  406886:	2388      	movs	r3, #136	; 0x88
  406888:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  40688a:	2324      	movs	r3, #36	; 0x24
  40688c:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  40688e:	f44f 7380 	mov.w	r3, #256	; 0x100
  406892:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  406894:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  406898:	6003      	str	r3, [r0, #0]
  40689a:	4770      	bx	lr
  40689c:	55534100 	.word	0x55534100

004068a0 <usart_init_rs232>:
{
  4068a0:	b570      	push	{r4, r5, r6, lr}
  4068a2:	4605      	mov	r5, r0
  4068a4:	460c      	mov	r4, r1
  4068a6:	4616      	mov	r6, r2
	usart_reset(p_usart);
  4068a8:	4b0f      	ldr	r3, [pc, #60]	; (4068e8 <usart_init_rs232+0x48>)
  4068aa:	4798      	blx	r3
	ul_reg_val = 0;
  4068ac:	2200      	movs	r2, #0
  4068ae:	4b0f      	ldr	r3, [pc, #60]	; (4068ec <usart_init_rs232+0x4c>)
  4068b0:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  4068b2:	b1a4      	cbz	r4, 4068de <usart_init_rs232+0x3e>
  4068b4:	4632      	mov	r2, r6
  4068b6:	6821      	ldr	r1, [r4, #0]
  4068b8:	4628      	mov	r0, r5
  4068ba:	4b0d      	ldr	r3, [pc, #52]	; (4068f0 <usart_init_rs232+0x50>)
  4068bc:	4798      	blx	r3
  4068be:	4602      	mov	r2, r0
  4068c0:	b978      	cbnz	r0, 4068e2 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4068c2:	6863      	ldr	r3, [r4, #4]
  4068c4:	68a1      	ldr	r1, [r4, #8]
  4068c6:	430b      	orrs	r3, r1
  4068c8:	6921      	ldr	r1, [r4, #16]
  4068ca:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4068cc:	68e1      	ldr	r1, [r4, #12]
  4068ce:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4068d0:	4906      	ldr	r1, [pc, #24]	; (4068ec <usart_init_rs232+0x4c>)
  4068d2:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  4068d4:	6869      	ldr	r1, [r5, #4]
  4068d6:	430b      	orrs	r3, r1
  4068d8:	606b      	str	r3, [r5, #4]
}
  4068da:	4610      	mov	r0, r2
  4068dc:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  4068de:	2201      	movs	r2, #1
  4068e0:	e7fb      	b.n	4068da <usart_init_rs232+0x3a>
  4068e2:	2201      	movs	r2, #1
  4068e4:	e7f9      	b.n	4068da <usart_init_rs232+0x3a>
  4068e6:	bf00      	nop
  4068e8:	00406879 	.word	0x00406879
  4068ec:	20400af0 	.word	0x20400af0
  4068f0:	0040681d 	.word	0x0040681d

004068f4 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  4068f4:	2340      	movs	r3, #64	; 0x40
  4068f6:	6003      	str	r3, [r0, #0]
  4068f8:	4770      	bx	lr

004068fa <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  4068fa:	2310      	movs	r3, #16
  4068fc:	6003      	str	r3, [r0, #0]
  4068fe:	4770      	bx	lr

00406900 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  406900:	6943      	ldr	r3, [r0, #20]
  406902:	f013 0f02 	tst.w	r3, #2
  406906:	d004      	beq.n	406912 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  406908:	f3c1 0108 	ubfx	r1, r1, #0, #9
  40690c:	61c1      	str	r1, [r0, #28]
	return 0;
  40690e:	2000      	movs	r0, #0
  406910:	4770      	bx	lr
		return 1;
  406912:	2001      	movs	r0, #1
}
  406914:	4770      	bx	lr

00406916 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  406916:	6943      	ldr	r3, [r0, #20]
  406918:	f013 0f01 	tst.w	r3, #1
  40691c:	d005      	beq.n	40692a <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  40691e:	6983      	ldr	r3, [r0, #24]
  406920:	f3c3 0308 	ubfx	r3, r3, #0, #9
  406924:	600b      	str	r3, [r1, #0]
	return 0;
  406926:	2000      	movs	r0, #0
  406928:	4770      	bx	lr
		return 1;
  40692a:	2001      	movs	r0, #1
}
  40692c:	4770      	bx	lr

0040692e <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  40692e:	e7fe      	b.n	40692e <Dummy_Handler>

00406930 <Reset_Handler>:
{
  406930:	b500      	push	{lr}
  406932:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  406934:	4b25      	ldr	r3, [pc, #148]	; (4069cc <Reset_Handler+0x9c>)
  406936:	4a26      	ldr	r2, [pc, #152]	; (4069d0 <Reset_Handler+0xa0>)
  406938:	429a      	cmp	r2, r3
  40693a:	d010      	beq.n	40695e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  40693c:	4b25      	ldr	r3, [pc, #148]	; (4069d4 <Reset_Handler+0xa4>)
  40693e:	4a23      	ldr	r2, [pc, #140]	; (4069cc <Reset_Handler+0x9c>)
  406940:	429a      	cmp	r2, r3
  406942:	d20c      	bcs.n	40695e <Reset_Handler+0x2e>
  406944:	3b01      	subs	r3, #1
  406946:	1a9b      	subs	r3, r3, r2
  406948:	f023 0303 	bic.w	r3, r3, #3
  40694c:	3304      	adds	r3, #4
  40694e:	4413      	add	r3, r2
  406950:	491f      	ldr	r1, [pc, #124]	; (4069d0 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  406952:	f851 0b04 	ldr.w	r0, [r1], #4
  406956:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  40695a:	429a      	cmp	r2, r3
  40695c:	d1f9      	bne.n	406952 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  40695e:	4b1e      	ldr	r3, [pc, #120]	; (4069d8 <Reset_Handler+0xa8>)
  406960:	4a1e      	ldr	r2, [pc, #120]	; (4069dc <Reset_Handler+0xac>)
  406962:	429a      	cmp	r2, r3
  406964:	d20a      	bcs.n	40697c <Reset_Handler+0x4c>
  406966:	3b01      	subs	r3, #1
  406968:	1a9b      	subs	r3, r3, r2
  40696a:	f023 0303 	bic.w	r3, r3, #3
  40696e:	3304      	adds	r3, #4
  406970:	4413      	add	r3, r2
                *pDest++ = 0;
  406972:	2100      	movs	r1, #0
  406974:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  406978:	4293      	cmp	r3, r2
  40697a:	d1fb      	bne.n	406974 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40697c:	4a18      	ldr	r2, [pc, #96]	; (4069e0 <Reset_Handler+0xb0>)
  40697e:	4b19      	ldr	r3, [pc, #100]	; (4069e4 <Reset_Handler+0xb4>)
  406980:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  406984:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  406986:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40698a:	fab3 f383 	clz	r3, r3
  40698e:	095b      	lsrs	r3, r3, #5
  406990:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  406992:	b672      	cpsid	i
  __ASM volatile ("dmb");
  406994:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  406998:	2200      	movs	r2, #0
  40699a:	4b13      	ldr	r3, [pc, #76]	; (4069e8 <Reset_Handler+0xb8>)
  40699c:	701a      	strb	r2, [r3, #0]
	return flags;
  40699e:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4069a0:	4a12      	ldr	r2, [pc, #72]	; (4069ec <Reset_Handler+0xbc>)
  4069a2:	6813      	ldr	r3, [r2, #0]
  4069a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4069a8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  4069aa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4069ae:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4069b2:	b129      	cbz	r1, 4069c0 <Reset_Handler+0x90>
		cpu_irq_enable();
  4069b4:	2201      	movs	r2, #1
  4069b6:	4b0c      	ldr	r3, [pc, #48]	; (4069e8 <Reset_Handler+0xb8>)
  4069b8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  4069ba:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4069be:	b662      	cpsie	i
        __libc_init_array();
  4069c0:	4b0b      	ldr	r3, [pc, #44]	; (4069f0 <Reset_Handler+0xc0>)
  4069c2:	4798      	blx	r3
        main();
  4069c4:	4b0b      	ldr	r3, [pc, #44]	; (4069f4 <Reset_Handler+0xc4>)
  4069c6:	4798      	blx	r3
  4069c8:	e7fe      	b.n	4069c8 <Reset_Handler+0x98>
  4069ca:	bf00      	nop
  4069cc:	20400000 	.word	0x20400000
  4069d0:	0040ee34 	.word	0x0040ee34
  4069d4:	204009f4 	.word	0x204009f4
  4069d8:	204022d0 	.word	0x204022d0
  4069dc:	204009f4 	.word	0x204009f4
  4069e0:	e000ed00 	.word	0xe000ed00
  4069e4:	00400000 	.word	0x00400000
  4069e8:	20400038 	.word	0x20400038
  4069ec:	e000ed88 	.word	0xe000ed88
  4069f0:	004072d1 	.word	0x004072d1
  4069f4:	00406fb5 	.word	0x00406fb5

004069f8 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4069f8:	4b3b      	ldr	r3, [pc, #236]	; (406ae8 <SystemCoreClockUpdate+0xf0>)
  4069fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4069fc:	f003 0303 	and.w	r3, r3, #3
  406a00:	2b01      	cmp	r3, #1
  406a02:	d01d      	beq.n	406a40 <SystemCoreClockUpdate+0x48>
  406a04:	b183      	cbz	r3, 406a28 <SystemCoreClockUpdate+0x30>
  406a06:	2b02      	cmp	r3, #2
  406a08:	d036      	beq.n	406a78 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  406a0a:	4b37      	ldr	r3, [pc, #220]	; (406ae8 <SystemCoreClockUpdate+0xf0>)
  406a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  406a0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  406a12:	2b70      	cmp	r3, #112	; 0x70
  406a14:	d05f      	beq.n	406ad6 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  406a16:	4b34      	ldr	r3, [pc, #208]	; (406ae8 <SystemCoreClockUpdate+0xf0>)
  406a18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  406a1a:	4934      	ldr	r1, [pc, #208]	; (406aec <SystemCoreClockUpdate+0xf4>)
  406a1c:	f3c2 1202 	ubfx	r2, r2, #4, #3
  406a20:	680b      	ldr	r3, [r1, #0]
  406a22:	40d3      	lsrs	r3, r2
  406a24:	600b      	str	r3, [r1, #0]
  406a26:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  406a28:	4b31      	ldr	r3, [pc, #196]	; (406af0 <SystemCoreClockUpdate+0xf8>)
  406a2a:	695b      	ldr	r3, [r3, #20]
  406a2c:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  406a30:	bf14      	ite	ne
  406a32:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  406a36:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  406a3a:	4b2c      	ldr	r3, [pc, #176]	; (406aec <SystemCoreClockUpdate+0xf4>)
  406a3c:	601a      	str	r2, [r3, #0]
  406a3e:	e7e4      	b.n	406a0a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  406a40:	4b29      	ldr	r3, [pc, #164]	; (406ae8 <SystemCoreClockUpdate+0xf0>)
  406a42:	6a1b      	ldr	r3, [r3, #32]
  406a44:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  406a48:	d003      	beq.n	406a52 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  406a4a:	4a2a      	ldr	r2, [pc, #168]	; (406af4 <SystemCoreClockUpdate+0xfc>)
  406a4c:	4b27      	ldr	r3, [pc, #156]	; (406aec <SystemCoreClockUpdate+0xf4>)
  406a4e:	601a      	str	r2, [r3, #0]
  406a50:	e7db      	b.n	406a0a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  406a52:	4a29      	ldr	r2, [pc, #164]	; (406af8 <SystemCoreClockUpdate+0x100>)
  406a54:	4b25      	ldr	r3, [pc, #148]	; (406aec <SystemCoreClockUpdate+0xf4>)
  406a56:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  406a58:	4b23      	ldr	r3, [pc, #140]	; (406ae8 <SystemCoreClockUpdate+0xf0>)
  406a5a:	6a1b      	ldr	r3, [r3, #32]
  406a5c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  406a60:	2b10      	cmp	r3, #16
  406a62:	d005      	beq.n	406a70 <SystemCoreClockUpdate+0x78>
  406a64:	2b20      	cmp	r3, #32
  406a66:	d1d0      	bne.n	406a0a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  406a68:	4a22      	ldr	r2, [pc, #136]	; (406af4 <SystemCoreClockUpdate+0xfc>)
  406a6a:	4b20      	ldr	r3, [pc, #128]	; (406aec <SystemCoreClockUpdate+0xf4>)
  406a6c:	601a      	str	r2, [r3, #0]
          break;
  406a6e:	e7cc      	b.n	406a0a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  406a70:	4a22      	ldr	r2, [pc, #136]	; (406afc <SystemCoreClockUpdate+0x104>)
  406a72:	4b1e      	ldr	r3, [pc, #120]	; (406aec <SystemCoreClockUpdate+0xf4>)
  406a74:	601a      	str	r2, [r3, #0]
          break;
  406a76:	e7c8      	b.n	406a0a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  406a78:	4b1b      	ldr	r3, [pc, #108]	; (406ae8 <SystemCoreClockUpdate+0xf0>)
  406a7a:	6a1b      	ldr	r3, [r3, #32]
  406a7c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  406a80:	d016      	beq.n	406ab0 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  406a82:	4a1c      	ldr	r2, [pc, #112]	; (406af4 <SystemCoreClockUpdate+0xfc>)
  406a84:	4b19      	ldr	r3, [pc, #100]	; (406aec <SystemCoreClockUpdate+0xf4>)
  406a86:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  406a88:	4b17      	ldr	r3, [pc, #92]	; (406ae8 <SystemCoreClockUpdate+0xf0>)
  406a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  406a8c:	f003 0303 	and.w	r3, r3, #3
  406a90:	2b02      	cmp	r3, #2
  406a92:	d1ba      	bne.n	406a0a <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  406a94:	4a14      	ldr	r2, [pc, #80]	; (406ae8 <SystemCoreClockUpdate+0xf0>)
  406a96:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  406a98:	6a92      	ldr	r2, [r2, #40]	; 0x28
  406a9a:	4814      	ldr	r0, [pc, #80]	; (406aec <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  406a9c:	f3c1 410a 	ubfx	r1, r1, #16, #11
  406aa0:	6803      	ldr	r3, [r0, #0]
  406aa2:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  406aa6:	b2d2      	uxtb	r2, r2
  406aa8:	fbb3 f3f2 	udiv	r3, r3, r2
  406aac:	6003      	str	r3, [r0, #0]
  406aae:	e7ac      	b.n	406a0a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  406ab0:	4a11      	ldr	r2, [pc, #68]	; (406af8 <SystemCoreClockUpdate+0x100>)
  406ab2:	4b0e      	ldr	r3, [pc, #56]	; (406aec <SystemCoreClockUpdate+0xf4>)
  406ab4:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  406ab6:	4b0c      	ldr	r3, [pc, #48]	; (406ae8 <SystemCoreClockUpdate+0xf0>)
  406ab8:	6a1b      	ldr	r3, [r3, #32]
  406aba:	f003 0370 	and.w	r3, r3, #112	; 0x70
  406abe:	2b10      	cmp	r3, #16
  406ac0:	d005      	beq.n	406ace <SystemCoreClockUpdate+0xd6>
  406ac2:	2b20      	cmp	r3, #32
  406ac4:	d1e0      	bne.n	406a88 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  406ac6:	4a0b      	ldr	r2, [pc, #44]	; (406af4 <SystemCoreClockUpdate+0xfc>)
  406ac8:	4b08      	ldr	r3, [pc, #32]	; (406aec <SystemCoreClockUpdate+0xf4>)
  406aca:	601a      	str	r2, [r3, #0]
          break;
  406acc:	e7dc      	b.n	406a88 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  406ace:	4a0b      	ldr	r2, [pc, #44]	; (406afc <SystemCoreClockUpdate+0x104>)
  406ad0:	4b06      	ldr	r3, [pc, #24]	; (406aec <SystemCoreClockUpdate+0xf4>)
  406ad2:	601a      	str	r2, [r3, #0]
          break;
  406ad4:	e7d8      	b.n	406a88 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  406ad6:	4a05      	ldr	r2, [pc, #20]	; (406aec <SystemCoreClockUpdate+0xf4>)
  406ad8:	6813      	ldr	r3, [r2, #0]
  406ada:	4909      	ldr	r1, [pc, #36]	; (406b00 <SystemCoreClockUpdate+0x108>)
  406adc:	fba1 1303 	umull	r1, r3, r1, r3
  406ae0:	085b      	lsrs	r3, r3, #1
  406ae2:	6013      	str	r3, [r2, #0]
  406ae4:	4770      	bx	lr
  406ae6:	bf00      	nop
  406ae8:	400e0600 	.word	0x400e0600
  406aec:	2040003c 	.word	0x2040003c
  406af0:	400e1810 	.word	0x400e1810
  406af4:	00b71b00 	.word	0x00b71b00
  406af8:	003d0900 	.word	0x003d0900
  406afc:	007a1200 	.word	0x007a1200
  406b00:	aaaaaaab 	.word	0xaaaaaaab

00406b04 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  406b04:	4b12      	ldr	r3, [pc, #72]	; (406b50 <system_init_flash+0x4c>)
  406b06:	4298      	cmp	r0, r3
  406b08:	d911      	bls.n	406b2e <system_init_flash+0x2a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  406b0a:	4b12      	ldr	r3, [pc, #72]	; (406b54 <system_init_flash+0x50>)
  406b0c:	4298      	cmp	r0, r3
  406b0e:	d913      	bls.n	406b38 <system_init_flash+0x34>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  406b10:	4b11      	ldr	r3, [pc, #68]	; (406b58 <system_init_flash+0x54>)
  406b12:	4298      	cmp	r0, r3
  406b14:	d914      	bls.n	406b40 <system_init_flash+0x3c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  406b16:	4b11      	ldr	r3, [pc, #68]	; (406b5c <system_init_flash+0x58>)
  406b18:	4298      	cmp	r0, r3
  406b1a:	d915      	bls.n	406b48 <system_init_flash+0x44>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  406b1c:	4b10      	ldr	r3, [pc, #64]	; (406b60 <system_init_flash+0x5c>)
  406b1e:	4298      	cmp	r0, r3
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  406b20:	bf94      	ite	ls
  406b22:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  406b26:	4a0f      	ldrhi	r2, [pc, #60]	; (406b64 <system_init_flash+0x60>)
  406b28:	4b0f      	ldr	r3, [pc, #60]	; (406b68 <system_init_flash+0x64>)
  406b2a:	601a      	str	r2, [r3, #0]
  406b2c:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  406b2e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  406b32:	4b0d      	ldr	r3, [pc, #52]	; (406b68 <system_init_flash+0x64>)
  406b34:	601a      	str	r2, [r3, #0]
  406b36:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  406b38:	4a0c      	ldr	r2, [pc, #48]	; (406b6c <system_init_flash+0x68>)
  406b3a:	4b0b      	ldr	r3, [pc, #44]	; (406b68 <system_init_flash+0x64>)
  406b3c:	601a      	str	r2, [r3, #0]
  406b3e:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  406b40:	4a0b      	ldr	r2, [pc, #44]	; (406b70 <system_init_flash+0x6c>)
  406b42:	4b09      	ldr	r3, [pc, #36]	; (406b68 <system_init_flash+0x64>)
  406b44:	601a      	str	r2, [r3, #0]
  406b46:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  406b48:	4a0a      	ldr	r2, [pc, #40]	; (406b74 <system_init_flash+0x70>)
  406b4a:	4b07      	ldr	r3, [pc, #28]	; (406b68 <system_init_flash+0x64>)
  406b4c:	601a      	str	r2, [r3, #0]
  406b4e:	4770      	bx	lr
  406b50:	01312cff 	.word	0x01312cff
  406b54:	026259ff 	.word	0x026259ff
  406b58:	039386ff 	.word	0x039386ff
  406b5c:	04c4b3ff 	.word	0x04c4b3ff
  406b60:	05f5e0ff 	.word	0x05f5e0ff
  406b64:	04000500 	.word	0x04000500
  406b68:	400e0c00 	.word	0x400e0c00
  406b6c:	04000100 	.word	0x04000100
  406b70:	04000200 	.word	0x04000200
  406b74:	04000300 	.word	0x04000300

00406b78 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  406b78:	4b0a      	ldr	r3, [pc, #40]	; (406ba4 <_sbrk+0x2c>)
  406b7a:	681b      	ldr	r3, [r3, #0]
  406b7c:	b153      	cbz	r3, 406b94 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  406b7e:	4b09      	ldr	r3, [pc, #36]	; (406ba4 <_sbrk+0x2c>)
  406b80:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  406b82:	181a      	adds	r2, r3, r0
  406b84:	4908      	ldr	r1, [pc, #32]	; (406ba8 <_sbrk+0x30>)
  406b86:	4291      	cmp	r1, r2
  406b88:	db08      	blt.n	406b9c <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  406b8a:	4610      	mov	r0, r2
  406b8c:	4a05      	ldr	r2, [pc, #20]	; (406ba4 <_sbrk+0x2c>)
  406b8e:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  406b90:	4618      	mov	r0, r3
  406b92:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  406b94:	4a05      	ldr	r2, [pc, #20]	; (406bac <_sbrk+0x34>)
  406b96:	4b03      	ldr	r3, [pc, #12]	; (406ba4 <_sbrk+0x2c>)
  406b98:	601a      	str	r2, [r3, #0]
  406b9a:	e7f0      	b.n	406b7e <_sbrk+0x6>
		return (caddr_t) -1;	
  406b9c:	f04f 30ff 	mov.w	r0, #4294967295
}
  406ba0:	4770      	bx	lr
  406ba2:	bf00      	nop
  406ba4:	20400af4 	.word	0x20400af4
  406ba8:	2045fffc 	.word	0x2045fffc
  406bac:	204044d0 	.word	0x204044d0

00406bb0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  406bb0:	f04f 30ff 	mov.w	r0, #4294967295
  406bb4:	4770      	bx	lr

00406bb6 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  406bb6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  406bba:	604b      	str	r3, [r1, #4]

	return 0;
}
  406bbc:	2000      	movs	r0, #0
  406bbe:	4770      	bx	lr

00406bc0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  406bc0:	2001      	movs	r0, #1
  406bc2:	4770      	bx	lr

00406bc4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  406bc4:	2000      	movs	r0, #0
  406bc6:	4770      	bx	lr

00406bc8 <socket_cb>:
 *  - tstrSocketAcceptMsg
 *  - tstrSocketConnectMsg
 *  - tstrSocketRecvMsg
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
  406bc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406bcc:	4615      	mov	r5, r2
	switch (u8Msg) {
  406bce:	2906      	cmp	r1, #6
  406bd0:	d047      	beq.n	406c62 <socket_cb+0x9a>
  406bd2:	2907      	cmp	r1, #7
  406bd4:	d040      	beq.n	406c58 <socket_cb+0x90>
  406bd6:	2905      	cmp	r1, #5
  406bd8:	d001      	beq.n	406bde <socket_cb+0x16>
  406bda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   
  /* Socket connected */
  case SOCKET_MSG_CONNECT:
  {
    uint16_t rtn;
    memset(gau8ReceivedBuffer, 0, sizeof(gau8ReceivedBuffer));
  406bde:	4c3c      	ldr	r4, [pc, #240]	; (406cd0 <socket_cb+0x108>)
  406be0:	f240 52b4 	movw	r2, #1460	; 0x5b4
  406be4:	2100      	movs	r1, #0
  406be6:	4620      	mov	r0, r4
  406be8:	4b3a      	ldr	r3, [pc, #232]	; (406cd4 <socket_cb+0x10c>)
  406bea:	4798      	blx	r3
    sprintf((char *)gau8ReceivedBuffer, "%s%s", host_msg, HOST_MSG_SUFFIX);
  406bec:	4b3a      	ldr	r3, [pc, #232]	; (406cd8 <socket_cb+0x110>)
  406bee:	4a3b      	ldr	r2, [pc, #236]	; (406cdc <socket_cb+0x114>)
  406bf0:	493b      	ldr	r1, [pc, #236]	; (406ce0 <socket_cb+0x118>)
  406bf2:	4620      	mov	r0, r4
  406bf4:	4c3b      	ldr	r4, [pc, #236]	; (406ce4 <socket_cb+0x11c>)
  406bf6:	47a0      	blx	r4
    
    tstrSocketConnectMsg *pstrConnect = (tstrSocketConnectMsg *)pvMsg;
    if (pstrConnect && pstrConnect->s8Error >= 0) {
  406bf8:	b315      	cbz	r5, 406c40 <socket_cb+0x78>
  406bfa:	f995 3001 	ldrsb.w	r3, [r5, #1]
  406bfe:	2b00      	cmp	r3, #0
  406c00:	db1e      	blt.n	406c40 <socket_cb+0x78>
      printf("socket_cb: connect success!\r\n");
  406c02:	4839      	ldr	r0, [pc, #228]	; (406ce8 <socket_cb+0x120>)
  406c04:	4b39      	ldr	r3, [pc, #228]	; (406cec <socket_cb+0x124>)
  406c06:	4798      	blx	r3
      rtn = send(tcp_client_socket, gau8ReceivedBuffer, strlen((char *)gau8ReceivedBuffer), 0);
  406c08:	4c31      	ldr	r4, [pc, #196]	; (406cd0 <socket_cb+0x108>)
  406c0a:	4620      	mov	r0, r4
  406c0c:	4b38      	ldr	r3, [pc, #224]	; (406cf0 <socket_cb+0x128>)
  406c0e:	4798      	blx	r3
  406c10:	4d38      	ldr	r5, [pc, #224]	; (406cf4 <socket_cb+0x12c>)
  406c12:	2300      	movs	r3, #0
  406c14:	b282      	uxth	r2, r0
  406c16:	4621      	mov	r1, r4
  406c18:	f995 0000 	ldrsb.w	r0, [r5]
  406c1c:	4e36      	ldr	r6, [pc, #216]	; (406cf8 <socket_cb+0x130>)
  406c1e:	47b0      	blx	r6
      memset(gau8ReceivedBuffer, 0, MAIN_WIFI_M2M_BUFFER_SIZE);
  406c20:	f240 56b4 	movw	r6, #1460	; 0x5b4
  406c24:	4632      	mov	r2, r6
  406c26:	2100      	movs	r1, #0
  406c28:	4620      	mov	r0, r4
  406c2a:	4b2a      	ldr	r3, [pc, #168]	; (406cd4 <socket_cb+0x10c>)
  406c2c:	4798      	blx	r3
      recv(tcp_client_socket, gau8SocketTestBuffer, sizeof(gau8SocketTestBuffer), 0);  
  406c2e:	2300      	movs	r3, #0
  406c30:	4632      	mov	r2, r6
  406c32:	4932      	ldr	r1, [pc, #200]	; (406cfc <socket_cb+0x134>)
  406c34:	f995 0000 	ldrsb.w	r0, [r5]
  406c38:	4c31      	ldr	r4, [pc, #196]	; (406d00 <socket_cb+0x138>)
  406c3a:	47a0      	blx	r4
  406c3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      } else {
      printf("socket_cb: connect error!\r\n");
  406c40:	4830      	ldr	r0, [pc, #192]	; (406d04 <socket_cb+0x13c>)
  406c42:	4b2a      	ldr	r3, [pc, #168]	; (406cec <socket_cb+0x124>)
  406c44:	4798      	blx	r3
      close(tcp_client_socket);
  406c46:	4c2b      	ldr	r4, [pc, #172]	; (406cf4 <socket_cb+0x12c>)
  406c48:	f994 0000 	ldrsb.w	r0, [r4]
  406c4c:	4b2e      	ldr	r3, [pc, #184]	; (406d08 <socket_cb+0x140>)
  406c4e:	4798      	blx	r3
      tcp_client_socket = -1;
  406c50:	23ff      	movs	r3, #255	; 0xff
  406c52:	7023      	strb	r3, [r4, #0]
  406c54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  break;

	/* Message send */
	case SOCKET_MSG_SEND:
	{
		printf("socket_cb: send success!\r\n");
  406c58:	482c      	ldr	r0, [pc, #176]	; (406d0c <socket_cb+0x144>)
  406c5a:	4b24      	ldr	r3, [pc, #144]	; (406cec <socket_cb+0x124>)
  406c5c:	4798      	blx	r3
	  //printf("TCP Server Test Complete!\r\n");
		//printf("close socket\n");
		//close(tcp_client_socket);
		//close(tcp_server_socket);
	}
	break;
  406c5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    
    uint8_t  messageAck[64];
    uint16_t messageAckSize;
    uint8_t  command;
        
		if (pstrRecv && pstrRecv->s16BufferSize > 0) {
  406c62:	b34a      	cbz	r2, 406cb8 <socket_cb+0xf0>
  406c64:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
  406c68:	2b00      	cmp	r3, #0
  406c6a:	dd25      	ble.n	406cb8 <socket_cb+0xf0>
  406c6c:	2400      	movs	r4, #0
			
			
			uint8_t *temp;
			for (int j=0; j<pstrRecv->s16BufferSize; j++) {
				if (pstrRecv->pu8Buffer[j]=='{' && pstrRecv->pu8Buffer[j+1]=='"') {
					printf("ACHOU HAHA");
  406c6e:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 406d20 <socket_cb+0x158>
  406c72:	4f1e      	ldr	r7, [pc, #120]	; (406cec <socket_cb+0x124>)
					memcpy(server_info, &pstrRecv->pu8Buffer[j], MAIN_WIFI_M2M_BUFFER_SIZE);
  406c74:	4e26      	ldr	r6, [pc, #152]	; (406d10 <socket_cb+0x148>)
  406c76:	e004      	b.n	406c82 <socket_cb+0xba>
			for (int j=0; j<pstrRecv->s16BufferSize; j++) {
  406c78:	3401      	adds	r4, #1
  406c7a:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
  406c7e:	42a2      	cmp	r2, r4
  406c80:	dd11      	ble.n	406ca6 <socket_cb+0xde>
				if (pstrRecv->pu8Buffer[j]=='{' && pstrRecv->pu8Buffer[j+1]=='"') {
  406c82:	682b      	ldr	r3, [r5, #0]
  406c84:	5d1a      	ldrb	r2, [r3, r4]
  406c86:	2a7b      	cmp	r2, #123	; 0x7b
  406c88:	d1f6      	bne.n	406c78 <socket_cb+0xb0>
  406c8a:	4423      	add	r3, r4
  406c8c:	785b      	ldrb	r3, [r3, #1]
  406c8e:	2b22      	cmp	r3, #34	; 0x22
  406c90:	d1f2      	bne.n	406c78 <socket_cb+0xb0>
					printf("ACHOU HAHA");
  406c92:	4640      	mov	r0, r8
  406c94:	47b8      	blx	r7
					memcpy(server_info, &pstrRecv->pu8Buffer[j], MAIN_WIFI_M2M_BUFFER_SIZE);
  406c96:	6829      	ldr	r1, [r5, #0]
  406c98:	f240 52b4 	movw	r2, #1460	; 0x5b4
  406c9c:	4421      	add	r1, r4
  406c9e:	4630      	mov	r0, r6
  406ca0:	4b1c      	ldr	r3, [pc, #112]	; (406d14 <socket_cb+0x14c>)
  406ca2:	4798      	blx	r3
  406ca4:	e7e8      	b.n	406c78 <socket_cb+0xb0>
			}

			
       
      // limpa o buffer de recepcao e tx
      memset(pstrRecv->pu8Buffer, 0, pstrRecv->s16BufferSize); 
  406ca6:	2100      	movs	r1, #0
  406ca8:	6828      	ldr	r0, [r5, #0]
  406caa:	4b0a      	ldr	r3, [pc, #40]	; (406cd4 <socket_cb+0x10c>)
  406cac:	4798      	blx	r3
      //memset(pstrRecv->pu8Buffer, 0, pstrRecv->s16BufferSize); 
      
	//seta a flag reception
	reception_flag = 1;
  406cae:	2201      	movs	r2, #1
  406cb0:	4b19      	ldr	r3, [pc, #100]	; (406d18 <socket_cb+0x150>)
  406cb2:	701a      	strb	r2, [r3, #0]
		if (pstrRecv && pstrRecv->s16BufferSize > 0) {
  406cb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      
      // Requista novos dados
      //recv(tcp_client_socket, gau8SocketTestBuffer, sizeof(gau8SocketTestBuffer), 0);
      
 		} else {
			printf("socket_cb: recv error!\r\n");
  406cb8:	4818      	ldr	r0, [pc, #96]	; (406d1c <socket_cb+0x154>)
  406cba:	4b0c      	ldr	r3, [pc, #48]	; (406cec <socket_cb+0x124>)
  406cbc:	4798      	blx	r3
			close(tcp_client_socket);
  406cbe:	4c0d      	ldr	r4, [pc, #52]	; (406cf4 <socket_cb+0x12c>)
  406cc0:	f994 0000 	ldrsb.w	r0, [r4]
  406cc4:	4b10      	ldr	r3, [pc, #64]	; (406d08 <socket_cb+0x140>)
  406cc6:	4798      	blx	r3
			tcp_client_socket = -1;
  406cc8:	23ff      	movs	r3, #255	; 0xff
  406cca:	7023      	strb	r3, [r4, #0]
	break;

	default:
		break;
	}
}
  406ccc:	e785      	b.n	406bda <socket_cb+0x12>
  406cce:	bf00      	nop
  406cd0:	20400af8 	.word	0x20400af8
  406cd4:	004079ed 	.word	0x004079ed
  406cd8:	0040e9f8 	.word	0x0040e9f8
  406cdc:	20400040 	.word	0x20400040
  406ce0:	0040ea14 	.word	0x0040ea14
  406ce4:	00407c11 	.word	0x00407c11
  406ce8:	0040ea1c 	.word	0x0040ea1c
  406cec:	00407321 	.word	0x00407321
  406cf0:	00407c81 	.word	0x00407c81
  406cf4:	20400046 	.word	0x20400046
  406cf8:	004059b5 	.word	0x004059b5
  406cfc:	204010ac 	.word	0x204010ac
  406d00:	00405a51 	.word	0x00405a51
  406d04:	0040ea3c 	.word	0x0040ea3c
  406d08:	00405af1 	.word	0x00405af1
  406d0c:	0040ea58 	.word	0x0040ea58
  406d10:	20401d18 	.word	0x20401d18
  406d14:	004078b9 	.word	0x004078b9
  406d18:	20401660 	.word	0x20401660
  406d1c:	0040ea80 	.word	0x0040ea80
  406d20:	0040ea74 	.word	0x0040ea74

00406d24 <wifi_cb>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
  406d24:	b510      	push	{r4, lr}
  406d26:	b082      	sub	sp, #8
	switch (u8MsgType) {
  406d28:	282c      	cmp	r0, #44	; 0x2c
  406d2a:	d003      	beq.n	406d34 <wifi_cb+0x10>
  406d2c:	2832      	cmp	r0, #50	; 0x32
  406d2e:	d01b      	beq.n	406d68 <wifi_cb+0x44>
	break;

	default:
		break;
	}
}
  406d30:	b002      	add	sp, #8
  406d32:	bd10      	pop	{r4, pc}
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
  406d34:	780b      	ldrb	r3, [r1, #0]
  406d36:	2b01      	cmp	r3, #1
  406d38:	d010      	beq.n	406d5c <wifi_cb+0x38>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
  406d3a:	2b00      	cmp	r3, #0
  406d3c:	d1f8      	bne.n	406d30 <wifi_cb+0xc>
			printf("wifi_cb: M2M_WIFI_RESP_CON_STATE_CHANGED: DISCONNECTED\r\n");
  406d3e:	4811      	ldr	r0, [pc, #68]	; (406d84 <wifi_cb+0x60>)
  406d40:	4b11      	ldr	r3, [pc, #68]	; (406d88 <wifi_cb+0x64>)
  406d42:	4798      	blx	r3
			wifi_connected = 0;
  406d44:	2200      	movs	r2, #0
  406d46:	4b11      	ldr	r3, [pc, #68]	; (406d8c <wifi_cb+0x68>)
  406d48:	701a      	strb	r2, [r3, #0]
			m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
  406d4a:	23ff      	movs	r3, #255	; 0xff
  406d4c:	9300      	str	r3, [sp, #0]
  406d4e:	4b10      	ldr	r3, [pc, #64]	; (406d90 <wifi_cb+0x6c>)
  406d50:	2202      	movs	r2, #2
  406d52:	210a      	movs	r1, #10
  406d54:	480f      	ldr	r0, [pc, #60]	; (406d94 <wifi_cb+0x70>)
  406d56:	4c10      	ldr	r4, [pc, #64]	; (406d98 <wifi_cb+0x74>)
  406d58:	47a0      	blx	r4
  406d5a:	e7e9      	b.n	406d30 <wifi_cb+0xc>
			printf("wifi_cb: M2M_WIFI_RESP_CON_STATE_CHANGED: CONNECTED\r\n");
  406d5c:	480f      	ldr	r0, [pc, #60]	; (406d9c <wifi_cb+0x78>)
  406d5e:	4b0a      	ldr	r3, [pc, #40]	; (406d88 <wifi_cb+0x64>)
  406d60:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
  406d62:	4b0f      	ldr	r3, [pc, #60]	; (406da0 <wifi_cb+0x7c>)
  406d64:	4798      	blx	r3
  406d66:	e7e3      	b.n	406d30 <wifi_cb+0xc>
		wifi_connected = 1;
  406d68:	2201      	movs	r2, #1
  406d6a:	4b08      	ldr	r3, [pc, #32]	; (406d8c <wifi_cb+0x68>)
  406d6c:	701a      	strb	r2, [r3, #0]
		printf("wifi_cb: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
  406d6e:	788b      	ldrb	r3, [r1, #2]
  406d70:	784a      	ldrb	r2, [r1, #1]
  406d72:	7808      	ldrb	r0, [r1, #0]
  406d74:	78c9      	ldrb	r1, [r1, #3]
  406d76:	9100      	str	r1, [sp, #0]
  406d78:	4601      	mov	r1, r0
  406d7a:	480a      	ldr	r0, [pc, #40]	; (406da4 <wifi_cb+0x80>)
  406d7c:	4c02      	ldr	r4, [pc, #8]	; (406d88 <wifi_cb+0x64>)
  406d7e:	47a0      	blx	r4
}
  406d80:	e7d6      	b.n	406d30 <wifi_cb+0xc>
  406d82:	bf00      	nop
  406d84:	0040ead4 	.word	0x0040ead4
  406d88:	00407321 	.word	0x00407321
  406d8c:	20401661 	.word	0x20401661
  406d90:	0040eb10 	.word	0x0040eb10
  406d94:	0040eb1c 	.word	0x0040eb1c
  406d98:	00404395 	.word	0x00404395
  406d9c:	0040ea9c 	.word	0x0040ea9c
  406da0:	004043b1 	.word	0x004043b1
  406da4:	0040eb28 	.word	0x0040eb28

00406da8 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  406da8:	b5f0      	push	{r4, r5, r6, r7, lr}
  406daa:	b083      	sub	sp, #12
  406dac:	4605      	mov	r5, r0
  406dae:	460c      	mov	r4, r1
	uint32_t val = 0;
  406db0:	2300      	movs	r3, #0
  406db2:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  406db4:	4b2a      	ldr	r3, [pc, #168]	; (406e60 <usart_serial_getchar+0xb8>)
  406db6:	4298      	cmp	r0, r3
  406db8:	d013      	beq.n	406de2 <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  406dba:	4b2a      	ldr	r3, [pc, #168]	; (406e64 <usart_serial_getchar+0xbc>)
  406dbc:	4298      	cmp	r0, r3
  406dbe:	d018      	beq.n	406df2 <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  406dc0:	4b29      	ldr	r3, [pc, #164]	; (406e68 <usart_serial_getchar+0xc0>)
  406dc2:	4298      	cmp	r0, r3
  406dc4:	d01d      	beq.n	406e02 <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  406dc6:	4b29      	ldr	r3, [pc, #164]	; (406e6c <usart_serial_getchar+0xc4>)
  406dc8:	429d      	cmp	r5, r3
  406dca:	d022      	beq.n	406e12 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  406dcc:	4b28      	ldr	r3, [pc, #160]	; (406e70 <usart_serial_getchar+0xc8>)
  406dce:	429d      	cmp	r5, r3
  406dd0:	d027      	beq.n	406e22 <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  406dd2:	4b28      	ldr	r3, [pc, #160]	; (406e74 <usart_serial_getchar+0xcc>)
  406dd4:	429d      	cmp	r5, r3
  406dd6:	d02e      	beq.n	406e36 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  406dd8:	4b27      	ldr	r3, [pc, #156]	; (406e78 <usart_serial_getchar+0xd0>)
  406dda:	429d      	cmp	r5, r3
  406ddc:	d035      	beq.n	406e4a <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  406dde:	b003      	add	sp, #12
  406de0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  406de2:	461f      	mov	r7, r3
  406de4:	4e25      	ldr	r6, [pc, #148]	; (406e7c <usart_serial_getchar+0xd4>)
  406de6:	4621      	mov	r1, r4
  406de8:	4638      	mov	r0, r7
  406dea:	47b0      	blx	r6
  406dec:	2800      	cmp	r0, #0
  406dee:	d1fa      	bne.n	406de6 <usart_serial_getchar+0x3e>
  406df0:	e7e9      	b.n	406dc6 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  406df2:	461f      	mov	r7, r3
  406df4:	4e21      	ldr	r6, [pc, #132]	; (406e7c <usart_serial_getchar+0xd4>)
  406df6:	4621      	mov	r1, r4
  406df8:	4638      	mov	r0, r7
  406dfa:	47b0      	blx	r6
  406dfc:	2800      	cmp	r0, #0
  406dfe:	d1fa      	bne.n	406df6 <usart_serial_getchar+0x4e>
  406e00:	e7e4      	b.n	406dcc <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  406e02:	461f      	mov	r7, r3
  406e04:	4e1d      	ldr	r6, [pc, #116]	; (406e7c <usart_serial_getchar+0xd4>)
  406e06:	4621      	mov	r1, r4
  406e08:	4638      	mov	r0, r7
  406e0a:	47b0      	blx	r6
  406e0c:	2800      	cmp	r0, #0
  406e0e:	d1fa      	bne.n	406e06 <usart_serial_getchar+0x5e>
  406e10:	e7df      	b.n	406dd2 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  406e12:	461f      	mov	r7, r3
  406e14:	4e19      	ldr	r6, [pc, #100]	; (406e7c <usart_serial_getchar+0xd4>)
  406e16:	4621      	mov	r1, r4
  406e18:	4638      	mov	r0, r7
  406e1a:	47b0      	blx	r6
  406e1c:	2800      	cmp	r0, #0
  406e1e:	d1fa      	bne.n	406e16 <usart_serial_getchar+0x6e>
  406e20:	e7da      	b.n	406dd8 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  406e22:	461e      	mov	r6, r3
  406e24:	4d16      	ldr	r5, [pc, #88]	; (406e80 <usart_serial_getchar+0xd8>)
  406e26:	a901      	add	r1, sp, #4
  406e28:	4630      	mov	r0, r6
  406e2a:	47a8      	blx	r5
  406e2c:	2800      	cmp	r0, #0
  406e2e:	d1fa      	bne.n	406e26 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  406e30:	9b01      	ldr	r3, [sp, #4]
  406e32:	7023      	strb	r3, [r4, #0]
  406e34:	e7d3      	b.n	406dde <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  406e36:	461e      	mov	r6, r3
  406e38:	4d11      	ldr	r5, [pc, #68]	; (406e80 <usart_serial_getchar+0xd8>)
  406e3a:	a901      	add	r1, sp, #4
  406e3c:	4630      	mov	r0, r6
  406e3e:	47a8      	blx	r5
  406e40:	2800      	cmp	r0, #0
  406e42:	d1fa      	bne.n	406e3a <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  406e44:	9b01      	ldr	r3, [sp, #4]
  406e46:	7023      	strb	r3, [r4, #0]
  406e48:	e7c9      	b.n	406dde <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  406e4a:	461e      	mov	r6, r3
  406e4c:	4d0c      	ldr	r5, [pc, #48]	; (406e80 <usart_serial_getchar+0xd8>)
  406e4e:	a901      	add	r1, sp, #4
  406e50:	4630      	mov	r0, r6
  406e52:	47a8      	blx	r5
  406e54:	2800      	cmp	r0, #0
  406e56:	d1fa      	bne.n	406e4e <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  406e58:	9b01      	ldr	r3, [sp, #4]
  406e5a:	7023      	strb	r3, [r4, #0]
}
  406e5c:	e7bf      	b.n	406dde <usart_serial_getchar+0x36>
  406e5e:	bf00      	nop
  406e60:	400e0800 	.word	0x400e0800
  406e64:	400e0a00 	.word	0x400e0a00
  406e68:	400e1a00 	.word	0x400e1a00
  406e6c:	400e1c00 	.word	0x400e1c00
  406e70:	40024000 	.word	0x40024000
  406e74:	40028000 	.word	0x40028000
  406e78:	4002c000 	.word	0x4002c000
  406e7c:	00406809 	.word	0x00406809
  406e80:	00406917 	.word	0x00406917

00406e84 <usart_serial_putchar>:
{
  406e84:	b570      	push	{r4, r5, r6, lr}
  406e86:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  406e88:	4b2a      	ldr	r3, [pc, #168]	; (406f34 <usart_serial_putchar+0xb0>)
  406e8a:	4298      	cmp	r0, r3
  406e8c:	d013      	beq.n	406eb6 <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  406e8e:	4b2a      	ldr	r3, [pc, #168]	; (406f38 <usart_serial_putchar+0xb4>)
  406e90:	4298      	cmp	r0, r3
  406e92:	d019      	beq.n	406ec8 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  406e94:	4b29      	ldr	r3, [pc, #164]	; (406f3c <usart_serial_putchar+0xb8>)
  406e96:	4298      	cmp	r0, r3
  406e98:	d01f      	beq.n	406eda <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  406e9a:	4b29      	ldr	r3, [pc, #164]	; (406f40 <usart_serial_putchar+0xbc>)
  406e9c:	4298      	cmp	r0, r3
  406e9e:	d025      	beq.n	406eec <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  406ea0:	4b28      	ldr	r3, [pc, #160]	; (406f44 <usart_serial_putchar+0xc0>)
  406ea2:	4298      	cmp	r0, r3
  406ea4:	d02b      	beq.n	406efe <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  406ea6:	4b28      	ldr	r3, [pc, #160]	; (406f48 <usart_serial_putchar+0xc4>)
  406ea8:	4298      	cmp	r0, r3
  406eaa:	d031      	beq.n	406f10 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  406eac:	4b27      	ldr	r3, [pc, #156]	; (406f4c <usart_serial_putchar+0xc8>)
  406eae:	4298      	cmp	r0, r3
  406eb0:	d037      	beq.n	406f22 <usart_serial_putchar+0x9e>
	return 0;
  406eb2:	2000      	movs	r0, #0
}
  406eb4:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  406eb6:	461e      	mov	r6, r3
  406eb8:	4d25      	ldr	r5, [pc, #148]	; (406f50 <usart_serial_putchar+0xcc>)
  406eba:	4621      	mov	r1, r4
  406ebc:	4630      	mov	r0, r6
  406ebe:	47a8      	blx	r5
  406ec0:	2800      	cmp	r0, #0
  406ec2:	d1fa      	bne.n	406eba <usart_serial_putchar+0x36>
		return 1;
  406ec4:	2001      	movs	r0, #1
  406ec6:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  406ec8:	461e      	mov	r6, r3
  406eca:	4d21      	ldr	r5, [pc, #132]	; (406f50 <usart_serial_putchar+0xcc>)
  406ecc:	4621      	mov	r1, r4
  406ece:	4630      	mov	r0, r6
  406ed0:	47a8      	blx	r5
  406ed2:	2800      	cmp	r0, #0
  406ed4:	d1fa      	bne.n	406ecc <usart_serial_putchar+0x48>
		return 1;
  406ed6:	2001      	movs	r0, #1
  406ed8:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  406eda:	461e      	mov	r6, r3
  406edc:	4d1c      	ldr	r5, [pc, #112]	; (406f50 <usart_serial_putchar+0xcc>)
  406ede:	4621      	mov	r1, r4
  406ee0:	4630      	mov	r0, r6
  406ee2:	47a8      	blx	r5
  406ee4:	2800      	cmp	r0, #0
  406ee6:	d1fa      	bne.n	406ede <usart_serial_putchar+0x5a>
		return 1;
  406ee8:	2001      	movs	r0, #1
  406eea:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  406eec:	461e      	mov	r6, r3
  406eee:	4d18      	ldr	r5, [pc, #96]	; (406f50 <usart_serial_putchar+0xcc>)
  406ef0:	4621      	mov	r1, r4
  406ef2:	4630      	mov	r0, r6
  406ef4:	47a8      	blx	r5
  406ef6:	2800      	cmp	r0, #0
  406ef8:	d1fa      	bne.n	406ef0 <usart_serial_putchar+0x6c>
		return 1;
  406efa:	2001      	movs	r0, #1
  406efc:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  406efe:	461e      	mov	r6, r3
  406f00:	4d14      	ldr	r5, [pc, #80]	; (406f54 <usart_serial_putchar+0xd0>)
  406f02:	4621      	mov	r1, r4
  406f04:	4630      	mov	r0, r6
  406f06:	47a8      	blx	r5
  406f08:	2800      	cmp	r0, #0
  406f0a:	d1fa      	bne.n	406f02 <usart_serial_putchar+0x7e>
		return 1;
  406f0c:	2001      	movs	r0, #1
  406f0e:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  406f10:	461e      	mov	r6, r3
  406f12:	4d10      	ldr	r5, [pc, #64]	; (406f54 <usart_serial_putchar+0xd0>)
  406f14:	4621      	mov	r1, r4
  406f16:	4630      	mov	r0, r6
  406f18:	47a8      	blx	r5
  406f1a:	2800      	cmp	r0, #0
  406f1c:	d1fa      	bne.n	406f14 <usart_serial_putchar+0x90>
		return 1;
  406f1e:	2001      	movs	r0, #1
  406f20:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  406f22:	461e      	mov	r6, r3
  406f24:	4d0b      	ldr	r5, [pc, #44]	; (406f54 <usart_serial_putchar+0xd0>)
  406f26:	4621      	mov	r1, r4
  406f28:	4630      	mov	r0, r6
  406f2a:	47a8      	blx	r5
  406f2c:	2800      	cmp	r0, #0
  406f2e:	d1fa      	bne.n	406f26 <usart_serial_putchar+0xa2>
		return 1;
  406f30:	2001      	movs	r0, #1
  406f32:	bd70      	pop	{r4, r5, r6, pc}
  406f34:	400e0800 	.word	0x400e0800
  406f38:	400e0a00 	.word	0x400e0a00
  406f3c:	400e1a00 	.word	0x400e1a00
  406f40:	400e1c00 	.word	0x400e1c00
  406f44:	40024000 	.word	0x40024000
  406f48:	40028000 	.word	0x40028000
  406f4c:	4002c000 	.word	0x4002c000
  406f50:	004067f7 	.word	0x004067f7
  406f54:	00406901 	.word	0x00406901

00406f58 <info_parser>:
uint8_t **info_parser (uint8_t *info, int size) {
  406f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  406f5c:	4681      	mov	r9, r0
	uint8_t **file_names = malloc(sizeof(uint8_t *)*20);
  406f5e:	2050      	movs	r0, #80	; 0x50
  406f60:	4b11      	ldr	r3, [pc, #68]	; (406fa8 <info_parser+0x50>)
  406f62:	4798      	blx	r3
  406f64:	4682      	mov	sl, r0
	while ((t = (char) info[i]) != NULL) {
  406f66:	2400      	movs	r4, #0
  406f68:	f819 3004 	ldrb.w	r3, [r9, r4]
  406f6c:	b1cb      	cbz	r3, 406fa2 <info_parser+0x4a>
				printf("%c", t);
  406f6e:	f8df 8040 	ldr.w	r8, [pc, #64]	; 406fb0 <info_parser+0x58>
  406f72:	2701      	movs	r7, #1
  406f74:	4e0d      	ldr	r6, [pc, #52]	; (406fac <info_parser+0x54>)
  406f76:	e003      	b.n	406f80 <info_parser+0x28>
		i++;
  406f78:	3401      	adds	r4, #1
	while ((t = (char) info[i]) != NULL) {
  406f7a:	f819 3004 	ldrb.w	r3, [r9, r4]
  406f7e:	b183      	cbz	r3, 406fa2 <info_parser+0x4a>
		if (t == '{'){
  406f80:	2b7b      	cmp	r3, #123	; 0x7b
  406f82:	d1f9      	bne.n	406f78 <info_parser+0x20>
			while (t = (char) info [i] != ':') {
  406f84:	eb09 0504 	add.w	r5, r9, r4
  406f88:	f819 3004 	ldrb.w	r3, [r9, r4]
  406f8c:	2b3a      	cmp	r3, #58	; 0x3a
  406f8e:	d0f3      	beq.n	406f78 <info_parser+0x20>
				printf("%c", t);
  406f90:	4639      	mov	r1, r7
  406f92:	4640      	mov	r0, r8
  406f94:	47b0      	blx	r6
				i++;
  406f96:	3401      	adds	r4, #1
			while (t = (char) info [i] != ':') {
  406f98:	f815 3f01 	ldrb.w	r3, [r5, #1]!
  406f9c:	2b3a      	cmp	r3, #58	; 0x3a
  406f9e:	d1f7      	bne.n	406f90 <info_parser+0x38>
  406fa0:	e7ea      	b.n	406f78 <info_parser+0x20>
}
  406fa2:	4650      	mov	r0, sl
  406fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406fa8:	00407349 	.word	0x00407349
  406fac:	00407321 	.word	0x00407321
  406fb0:	0040e790 	.word	0x0040e790

00406fb4 <main>:
 * Initialize system, UART console, network then test function of TCP server.
 *
 * \return program return value.
 */
int main(void)
{
  406fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406fb8:	f5ad 7d2a 	sub.w	sp, sp, #680	; 0x2a8
	struct sockaddr_in addr;
	
	

	/* Initialize the board. */
	sysclk_init();
  406fbc:	4b84      	ldr	r3, [pc, #528]	; (4071d0 <main+0x21c>)
  406fbe:	4798      	blx	r3
	board_init();
  406fc0:	4b84      	ldr	r3, [pc, #528]	; (4071d4 <main+0x220>)
  406fc2:	4798      	blx	r3
  406fc4:	200e      	movs	r0, #14
  406fc6:	4e84      	ldr	r6, [pc, #528]	; (4071d8 <main+0x224>)
  406fc8:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  406fca:	4d84      	ldr	r5, [pc, #528]	; (4071dc <main+0x228>)
  406fcc:	4b84      	ldr	r3, [pc, #528]	; (4071e0 <main+0x22c>)
  406fce:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  406fd0:	4a84      	ldr	r2, [pc, #528]	; (4071e4 <main+0x230>)
  406fd2:	4b85      	ldr	r3, [pc, #532]	; (4071e8 <main+0x234>)
  406fd4:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  406fd6:	4a85      	ldr	r2, [pc, #532]	; (4071ec <main+0x238>)
  406fd8:	4b85      	ldr	r3, [pc, #532]	; (4071f0 <main+0x23c>)
  406fda:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  406fdc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  406fe0:	9302      	str	r3, [sp, #8]
	usart_settings.char_length = opt->charlength;
  406fe2:	23c0      	movs	r3, #192	; 0xc0
  406fe4:	9303      	str	r3, [sp, #12]
	usart_settings.parity_type = opt->paritytype;
  406fe6:	f44f 6300 	mov.w	r3, #2048	; 0x800
  406fea:	9304      	str	r3, [sp, #16]
	usart_settings.stop_bits= opt->stopbits;
  406fec:	2400      	movs	r4, #0
  406fee:	9405      	str	r4, [sp, #20]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  406ff0:	9406      	str	r4, [sp, #24]
  406ff2:	200e      	movs	r0, #14
  406ff4:	47b0      	blx	r6
		usart_init_rs232(p_usart, &usart_settings,
  406ff6:	4a7f      	ldr	r2, [pc, #508]	; (4071f4 <main+0x240>)
  406ff8:	a902      	add	r1, sp, #8
  406ffa:	4628      	mov	r0, r5
  406ffc:	4b7e      	ldr	r3, [pc, #504]	; (4071f8 <main+0x244>)
  406ffe:	4798      	blx	r3
		usart_enable_tx(p_usart);
  407000:	4628      	mov	r0, r5
  407002:	4b7e      	ldr	r3, [pc, #504]	; (4071fc <main+0x248>)
  407004:	4798      	blx	r3
		usart_enable_rx(p_usart);
  407006:	4628      	mov	r0, r5
  407008:	4b7d      	ldr	r3, [pc, #500]	; (407200 <main+0x24c>)
  40700a:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  40700c:	4e7d      	ldr	r6, [pc, #500]	; (407204 <main+0x250>)
  40700e:	6833      	ldr	r3, [r6, #0]
  407010:	4621      	mov	r1, r4
  407012:	6898      	ldr	r0, [r3, #8]
  407014:	4d7c      	ldr	r5, [pc, #496]	; (407208 <main+0x254>)
  407016:	47a8      	blx	r5
	setbuf(stdin, NULL);
  407018:	6833      	ldr	r3, [r6, #0]
  40701a:	4621      	mov	r1, r4
  40701c:	6858      	ldr	r0, [r3, #4]
  40701e:	47a8      	blx	r5

	/* Initialize the UART console. */
	configure_console();
	printf(STRING_HEADER);
  407020:	487a      	ldr	r0, [pc, #488]	; (40720c <main+0x258>)
  407022:	4d7b      	ldr	r5, [pc, #492]	; (407210 <main+0x25c>)
  407024:	47a8      	blx	r5

#ifdef WIFI_EN

	/* Initialize the BSP. */
	nm_bsp_init();
  407026:	4b7b      	ldr	r3, [pc, #492]	; (407214 <main+0x260>)
  407028:	4798      	blx	r3

	/* Initialize socket address structure. */
	addr.sin_family = AF_INET;
  40702a:	2302      	movs	r3, #2
  40702c:	f8ad 3280 	strh.w	r3, [sp, #640]	; 0x280
	addr.sin_port = _htons(MAIN_SERVER_PORT);
  407030:	f249 131f 	movw	r3, #37151	; 0x911f
  407034:	f8ad 3282 	strh.w	r3, [sp, #642]	; 0x282
	addr.sin_addr.s_addr = MAIN_SERVER_IP;
  407038:	4b77      	ldr	r3, [pc, #476]	; (407218 <main+0x264>)
  40703a:	93a1      	str	r3, [sp, #644]	; 0x284

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
  40703c:	94a5      	str	r4, [sp, #660]	; 0x294
  40703e:	94a6      	str	r4, [sp, #664]	; 0x298
  407040:	94a7      	str	r4, [sp, #668]	; 0x29c
  407042:	94a8      	str	r4, [sp, #672]	; 0x2a0
  407044:	94a9      	str	r4, [sp, #676]	; 0x2a4
		
	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_cb;
  407046:	4b75      	ldr	r3, [pc, #468]	; (40721c <main+0x268>)
  407048:	93a4      	str	r3, [sp, #656]	; 0x290
	ret = m2m_wifi_init(&param);
  40704a:	a8a4      	add	r0, sp, #656	; 0x290
  40704c:	4b74      	ldr	r3, [pc, #464]	; (407220 <main+0x26c>)
  40704e:	4798      	blx	r3
  407050:	4604      	mov	r4, r0
	printf("coco");
  407052:	4874      	ldr	r0, [pc, #464]	; (407224 <main+0x270>)
  407054:	47a8      	blx	r5
	if (M2M_SUCCESS != ret) {
  407056:	b11c      	cbz	r4, 407060 <main+0xac>
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
  407058:	4621      	mov	r1, r4
  40705a:	4873      	ldr	r0, [pc, #460]	; (407228 <main+0x274>)
  40705c:	47a8      	blx	r5
  40705e:	e7fe      	b.n	40705e <main+0xaa>
		}
	}
	

	/* Initialize socket module */
	socketInit();
  407060:	4b72      	ldr	r3, [pc, #456]	; (40722c <main+0x278>)
  407062:	4798      	blx	r3
	registerSocketCallback(socket_cb, NULL);
  407064:	2100      	movs	r1, #0
  407066:	4872      	ldr	r0, [pc, #456]	; (407230 <main+0x27c>)
  407068:	4b72      	ldr	r3, [pc, #456]	; (407234 <main+0x280>)
  40706a:	4798      	blx	r3

	/* Connect to router. */
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
  40706c:	23ff      	movs	r3, #255	; 0xff
  40706e:	9300      	str	r3, [sp, #0]
  407070:	4b71      	ldr	r3, [pc, #452]	; (407238 <main+0x284>)
  407072:	2202      	movs	r2, #2
  407074:	210a      	movs	r1, #10
  407076:	4871      	ldr	r0, [pc, #452]	; (40723c <main+0x288>)
  407078:	4c71      	ldr	r4, [pc, #452]	; (407240 <main+0x28c>)
  40707a:	47a0      	blx	r4
	
	while (!reception_flag) {
  40707c:	4e71      	ldr	r6, [pc, #452]	; (407244 <main+0x290>)
		/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
  40707e:	4d72      	ldr	r5, [pc, #456]	; (407248 <main+0x294>)

		if (wifi_connected == M2M_WIFI_CONNECTED) {
  407080:	4c72      	ldr	r4, [pc, #456]	; (40724c <main+0x298>)
	while (!reception_flag) {
  407082:	7833      	ldrb	r3, [r6, #0]
  407084:	bb43      	cbnz	r3, 4070d8 <main+0x124>
		m2m_wifi_handle_events(NULL);
  407086:	2000      	movs	r0, #0
  407088:	47a8      	blx	r5
		if (wifi_connected == M2M_WIFI_CONNECTED) {
  40708a:	7823      	ldrb	r3, [r4, #0]
  40708c:	2b01      	cmp	r3, #1
  40708e:	d1f8      	bne.n	407082 <main+0xce>
			if (tcp_client_socket < 0) {
  407090:	4b6f      	ldr	r3, [pc, #444]	; (407250 <main+0x29c>)
  407092:	f993 3000 	ldrsb.w	r3, [r3]
  407096:	2b00      	cmp	r3, #0
  407098:	daf3      	bge.n	407082 <main+0xce>
				if ((tcp_client_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
  40709a:	2200      	movs	r2, #0
  40709c:	2101      	movs	r1, #1
  40709e:	2002      	movs	r0, #2
  4070a0:	4b6c      	ldr	r3, [pc, #432]	; (407254 <main+0x2a0>)
  4070a2:	4798      	blx	r3
  4070a4:	4b6a      	ldr	r3, [pc, #424]	; (407250 <main+0x29c>)
  4070a6:	7018      	strb	r0, [r3, #0]
  4070a8:	2800      	cmp	r0, #0
  4070aa:	da03      	bge.n	4070b4 <main+0x100>
					printf("main: failed to create TCP client socket error!\r\n");
  4070ac:	486a      	ldr	r0, [pc, #424]	; (407258 <main+0x2a4>)
  4070ae:	4b58      	ldr	r3, [pc, #352]	; (407210 <main+0x25c>)
  4070b0:	4798      	blx	r3
					continue;
  4070b2:	e7e6      	b.n	407082 <main+0xce>
				}
				
				/* Connect TCP client socket. */
				if (connect(tcp_client_socket, (struct sockaddr *)&addr, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR ) {
  4070b4:	2210      	movs	r2, #16
  4070b6:	a9a0      	add	r1, sp, #640	; 0x280
  4070b8:	4b68      	ldr	r3, [pc, #416]	; (40725c <main+0x2a8>)
  4070ba:	4798      	blx	r3
  4070bc:	b140      	cbz	r0, 4070d0 <main+0x11c>
					printf("main: failed to connect socket error!\r\n");
  4070be:	4868      	ldr	r0, [pc, #416]	; (407260 <main+0x2ac>)
  4070c0:	4b53      	ldr	r3, [pc, #332]	; (407210 <main+0x25c>)
  4070c2:	4798      	blx	r3
					close(tcp_client_socket);
  4070c4:	4b62      	ldr	r3, [pc, #392]	; (407250 <main+0x29c>)
  4070c6:	f993 0000 	ldrsb.w	r0, [r3]
  4070ca:	4b66      	ldr	r3, [pc, #408]	; (407264 <main+0x2b0>)
  4070cc:	4798      	blx	r3
					continue;
  4070ce:	e7d8      	b.n	407082 <main+0xce>
					}else{
					printf("Conectado ! \n");
  4070d0:	4865      	ldr	r0, [pc, #404]	; (407268 <main+0x2b4>)
  4070d2:	4b4f      	ldr	r3, [pc, #316]	; (407210 <main+0x25c>)
  4070d4:	4798      	blx	r3
  4070d6:	e7d4      	b.n	407082 <main+0xce>
	}
#endif

	/** SDCARD */
	irq_initialize_vectors();
	cpu_irq_enable();
  4070d8:	2201      	movs	r2, #1
  4070da:	4b64      	ldr	r3, [pc, #400]	; (40726c <main+0x2b8>)
  4070dc:	701a      	strb	r2, [r3, #0]
  4070de:	f3bf 8f5f 	dmb	sy
  4070e2:	b662      	cpsie	i
		
	/* Initialize SD MMC stack */
	sd_mmc_init();
  4070e4:	4b62      	ldr	r3, [pc, #392]	; (407270 <main+0x2bc>)
  4070e6:	4798      	blx	r3
	printf("\x0C\n\r-- SD/MMC/SDIO Card Example on FatFs --\n\r");
  4070e8:	4862      	ldr	r0, [pc, #392]	; (407274 <main+0x2c0>)
  4070ea:	4c49      	ldr	r4, [pc, #292]	; (407210 <main+0x25c>)
  4070ec:	47a0      	blx	r4
		
	char card_info_name[] = "0:info.txt";
  4070ee:	4a62      	ldr	r2, [pc, #392]	; (407278 <main+0x2c4>)
  4070f0:	ab9d      	add	r3, sp, #628	; 0x274
  4070f2:	ca07      	ldmia	r2, {r0, r1, r2}
  4070f4:	c303      	stmia	r3!, {r0, r1}
  4070f6:	f823 2b02 	strh.w	r2, [r3], #2
  4070fa:	0c12      	lsrs	r2, r2, #16
  4070fc:	701a      	strb	r2, [r3, #0]
	FIL card_file;
	char temp_buffer[MAIN_WIFI_M2M_BUFFER_SIZE];
	uint8_t **file_names = malloc(sizeof(uint8_t *)*20);

		
	printf("Please plug an SD, MMC or SDIO card in slot.\n\r");
  4070fe:	485f      	ldr	r0, [pc, #380]	; (40727c <main+0x2c8>)
  407100:	47a0      	blx	r4
	/* Wait card present and ready */
	do {
		status = sd_mmc_test_unit_ready(0);
  407102:	4e5f      	ldr	r6, [pc, #380]	; (407280 <main+0x2cc>)
		if (CTRL_FAIL == status) {
			printf("Card install FAIL\n\r");
  407104:	4d5f      	ldr	r5, [pc, #380]	; (407284 <main+0x2d0>)
  407106:	e00a      	b.n	40711e <main+0x16a>
  407108:	4628      	mov	r0, r5
  40710a:	47a0      	blx	r4
			printf("Please unplug and re-plug the card.\n\r");
  40710c:	485e      	ldr	r0, [pc, #376]	; (407288 <main+0x2d4>)
  40710e:	47a0      	blx	r4
			while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
  407110:	f04f 0800 	mov.w	r8, #0
  407114:	4f5d      	ldr	r7, [pc, #372]	; (40728c <main+0x2d8>)
  407116:	4640      	mov	r0, r8
  407118:	47b8      	blx	r7
  40711a:	2802      	cmp	r0, #2
  40711c:	d1fb      	bne.n	407116 <main+0x162>
		status = sd_mmc_test_unit_ready(0);
  40711e:	2000      	movs	r0, #0
  407120:	47b0      	blx	r6
		if (CTRL_FAIL == status) {
  407122:	2801      	cmp	r0, #1
  407124:	d0f0      	beq.n	407108 <main+0x154>
			}
		}
	} while (CTRL_GOOD != status);
  407126:	2800      	cmp	r0, #0
  407128:	d1f9      	bne.n	40711e <main+0x16a>
		
	printf("Mount disk (f_mount)...\r\n");
  40712a:	4859      	ldr	r0, [pc, #356]	; (407290 <main+0x2dc>)
  40712c:	4b38      	ldr	r3, [pc, #224]	; (407210 <main+0x25c>)
  40712e:	4798      	blx	r3
	memset(&fs, 0, sizeof(FATFS));
  407130:	f44f 720c 	mov.w	r2, #560	; 0x230
  407134:	2100      	movs	r1, #0
  407136:	a811      	add	r0, sp, #68	; 0x44
  407138:	4b56      	ldr	r3, [pc, #344]	; (407294 <main+0x2e0>)
  40713a:	4798      	blx	r3
	res = f_mount(LUN_ID_SD_MMC_0_MEM, &fs);
  40713c:	a911      	add	r1, sp, #68	; 0x44
  40713e:	2000      	movs	r0, #0
  407140:	4b55      	ldr	r3, [pc, #340]	; (407298 <main+0x2e4>)
  407142:	4798      	blx	r3
	if (FR_INVALID_DRIVE == res) {
  407144:	280b      	cmp	r0, #11
  407146:	d011      	beq.n	40716c <main+0x1b8>
		printf("[FAIL] res %d\r\n", res);
		goto main_end_of_test;
	}
	printf("[OK]\r\n");	
  407148:	4854      	ldr	r0, [pc, #336]	; (40729c <main+0x2e8>)
  40714a:	4c31      	ldr	r4, [pc, #196]	; (407210 <main+0x25c>)
  40714c:	47a0      	blx	r4
	
	
	printf("Create info file (f_open)...\r\n");
  40714e:	4854      	ldr	r0, [pc, #336]	; (4072a0 <main+0x2ec>)
  407150:	47a0      	blx	r4
	card_info_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
  407152:	a9aa      	add	r1, sp, #680	; 0x2a8
  407154:	2330      	movs	r3, #48	; 0x30
  407156:	f801 3d34 	strb.w	r3, [r1, #-52]!
	res = f_open(&card_file,
  40715a:	220b      	movs	r2, #11
  40715c:	a808      	add	r0, sp, #32
  40715e:	4b51      	ldr	r3, [pc, #324]	; (4072a4 <main+0x2f0>)
  407160:	4798      	blx	r3
	(char const *)card_info_name,
	FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
	if (res != FR_OK) {
  407162:	4601      	mov	r1, r0
  407164:	b1a0      	cbz	r0, 407190 <main+0x1dc>
		printf("[FAIL] res %d\r\n", res);
  407166:	4850      	ldr	r0, [pc, #320]	; (4072a8 <main+0x2f4>)
  407168:	47a0      	blx	r4
		goto main_end_of_test;
  40716a:	e003      	b.n	407174 <main+0x1c0>
		printf("[FAIL] res %d\r\n", res);
  40716c:	210b      	movs	r1, #11
  40716e:	484e      	ldr	r0, [pc, #312]	; (4072a8 <main+0x2f4>)
  407170:	4b27      	ldr	r3, [pc, #156]	; (407210 <main+0x25c>)
  407172:	4798      	blx	r3
	


	
	main_end_of_test:
	printf("Please unplug the card.\n\r");
  407174:	484d      	ldr	r0, [pc, #308]	; (4072ac <main+0x2f8>)
  407176:	4b26      	ldr	r3, [pc, #152]	; (407210 <main+0x25c>)
  407178:	4798      	blx	r3
	while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
  40717a:	2500      	movs	r5, #0
  40717c:	4c43      	ldr	r4, [pc, #268]	; (40728c <main+0x2d8>)
  40717e:	4628      	mov	r0, r5
  407180:	47a0      	blx	r4
  407182:	2802      	cmp	r0, #2
  407184:	d1fb      	bne.n	40717e <main+0x1ca>
	}

	return 0;
}
  407186:	2000      	movs	r0, #0
  407188:	f50d 7d2a 	add.w	sp, sp, #680	; 0x2a8
  40718c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printf("[OK]\r\n");
  407190:	4d42      	ldr	r5, [pc, #264]	; (40729c <main+0x2e8>)
  407192:	4628      	mov	r0, r5
  407194:	4c1e      	ldr	r4, [pc, #120]	; (407210 <main+0x25c>)
  407196:	47a0      	blx	r4
	printf("Write to info file (f_puts)...\r\n");
  407198:	4845      	ldr	r0, [pc, #276]	; (4072b0 <main+0x2fc>)
  40719a:	47a0      	blx	r4
	f_puts(server_info, &card_file);
  40719c:	4e45      	ldr	r6, [pc, #276]	; (4072b4 <main+0x300>)
  40719e:	a908      	add	r1, sp, #32
  4071a0:	4630      	mov	r0, r6
  4071a2:	4b45      	ldr	r3, [pc, #276]	; (4072b8 <main+0x304>)
  4071a4:	4798      	blx	r3
	printf(server_info);
  4071a6:	4630      	mov	r0, r6
  4071a8:	47a0      	blx	r4
	printf("\r\n\r\n");
  4071aa:	4844      	ldr	r0, [pc, #272]	; (4072bc <main+0x308>)
  4071ac:	47a0      	blx	r4
	printf("Parsing...\r\n");
  4071ae:	4844      	ldr	r0, [pc, #272]	; (4072c0 <main+0x30c>)
  4071b0:	47a0      	blx	r4
	file_names = info_parser(server_info, sizeof(server_info));
  4071b2:	f240 51b4 	movw	r1, #1460	; 0x5b4
  4071b6:	4630      	mov	r0, r6
  4071b8:	4b42      	ldr	r3, [pc, #264]	; (4072c4 <main+0x310>)
  4071ba:	4798      	blx	r3
	printf("[OK]\r\n");
  4071bc:	4628      	mov	r0, r5
  4071be:	47a0      	blx	r4
	printf("Fechando arquivo \n");
  4071c0:	4841      	ldr	r0, [pc, #260]	; (4072c8 <main+0x314>)
  4071c2:	47a0      	blx	r4
    f_close(&card_file);
  4071c4:	a808      	add	r0, sp, #32
  4071c6:	4b41      	ldr	r3, [pc, #260]	; (4072cc <main+0x318>)
  4071c8:	4798      	blx	r3
	printf("[OK]\r\n");
  4071ca:	4628      	mov	r0, r5
  4071cc:	47a0      	blx	r4
  4071ce:	e7d1      	b.n	407174 <main+0x1c0>
  4071d0:	00405c55 	.word	0x00405c55
  4071d4:	00405d51 	.word	0x00405d51
  4071d8:	00406651 	.word	0x00406651
  4071dc:	40028000 	.word	0x40028000
  4071e0:	20401760 	.word	0x20401760
  4071e4:	00406e85 	.word	0x00406e85
  4071e8:	2040175c 	.word	0x2040175c
  4071ec:	00406da9 	.word	0x00406da9
  4071f0:	20401758 	.word	0x20401758
  4071f4:	08f0d180 	.word	0x08f0d180
  4071f8:	004068a1 	.word	0x004068a1
  4071fc:	004068f5 	.word	0x004068f5
  407200:	004068fb 	.word	0x004068fb
  407204:	20400048 	.word	0x20400048
  407208:	00407ab5 	.word	0x00407ab5
  40720c:	0040e794 	.word	0x0040e794
  407210:	00407321 	.word	0x00407321
  407214:	004031fd 	.word	0x004031fd
  407218:	6801a8c0 	.word	0x6801a8c0
  40721c:	00406d25 	.word	0x00406d25
  407220:	0040403d 	.word	0x0040403d
  407224:	0040e7f4 	.word	0x0040e7f4
  407228:	0040e7fc 	.word	0x0040e7fc
  40722c:	004057ed 	.word	0x004057ed
  407230:	00406bc9 	.word	0x00406bc9
  407234:	00405831 	.word	0x00405831
  407238:	0040eb10 	.word	0x0040eb10
  40723c:	0040eb1c 	.word	0x0040eb1c
  407240:	00404395 	.word	0x00404395
  407244:	20401660 	.word	0x20401660
  407248:	00404139 	.word	0x00404139
  40724c:	20401661 	.word	0x20401661
  407250:	20400046 	.word	0x20400046
  407254:	00405845 	.word	0x00405845
  407258:	0040e824 	.word	0x0040e824
  40725c:	00405925 	.word	0x00405925
  407260:	0040e858 	.word	0x0040e858
  407264:	00405af1 	.word	0x00405af1
  407268:	0040e880 	.word	0x0040e880
  40726c:	20400038 	.word	0x20400038
  407270:	0040035d 	.word	0x0040035d
  407274:	0040e890 	.word	0x0040e890
  407278:	0040e9ec 	.word	0x0040e9ec
  40727c:	0040e8c0 	.word	0x0040e8c0
  407280:	00400ed5 	.word	0x00400ed5
  407284:	0040e8f0 	.word	0x0040e8f0
  407288:	0040e904 	.word	0x0040e904
  40728c:	00400389 	.word	0x00400389
  407290:	0040e92c 	.word	0x0040e92c
  407294:	004079ed 	.word	0x004079ed
  407298:	00402c41 	.word	0x00402c41
  40729c:	0040e958 	.word	0x0040e958
  4072a0:	0040e960 	.word	0x0040e960
  4072a4:	00402c69 	.word	0x00402c69
  4072a8:	0040e948 	.word	0x0040e948
  4072ac:	0040e9d0 	.word	0x0040e9d0
  4072b0:	0040e980 	.word	0x0040e980
  4072b4:	20401d18 	.word	0x20401d18
  4072b8:	004030e5 	.word	0x004030e5
  4072bc:	0040e9a4 	.word	0x0040e9a4
  4072c0:	0040e9ac 	.word	0x0040e9ac
  4072c4:	00406f59 	.word	0x00406f59
  4072c8:	0040e9bc 	.word	0x0040e9bc
  4072cc:	004030a1 	.word	0x004030a1

004072d0 <__libc_init_array>:
  4072d0:	b570      	push	{r4, r5, r6, lr}
  4072d2:	4e0f      	ldr	r6, [pc, #60]	; (407310 <__libc_init_array+0x40>)
  4072d4:	4d0f      	ldr	r5, [pc, #60]	; (407314 <__libc_init_array+0x44>)
  4072d6:	1b76      	subs	r6, r6, r5
  4072d8:	10b6      	asrs	r6, r6, #2
  4072da:	bf18      	it	ne
  4072dc:	2400      	movne	r4, #0
  4072de:	d005      	beq.n	4072ec <__libc_init_array+0x1c>
  4072e0:	3401      	adds	r4, #1
  4072e2:	f855 3b04 	ldr.w	r3, [r5], #4
  4072e6:	4798      	blx	r3
  4072e8:	42a6      	cmp	r6, r4
  4072ea:	d1f9      	bne.n	4072e0 <__libc_init_array+0x10>
  4072ec:	4e0a      	ldr	r6, [pc, #40]	; (407318 <__libc_init_array+0x48>)
  4072ee:	4d0b      	ldr	r5, [pc, #44]	; (40731c <__libc_init_array+0x4c>)
  4072f0:	1b76      	subs	r6, r6, r5
  4072f2:	f007 fd89 	bl	40ee08 <_init>
  4072f6:	10b6      	asrs	r6, r6, #2
  4072f8:	bf18      	it	ne
  4072fa:	2400      	movne	r4, #0
  4072fc:	d006      	beq.n	40730c <__libc_init_array+0x3c>
  4072fe:	3401      	adds	r4, #1
  407300:	f855 3b04 	ldr.w	r3, [r5], #4
  407304:	4798      	blx	r3
  407306:	42a6      	cmp	r6, r4
  407308:	d1f9      	bne.n	4072fe <__libc_init_array+0x2e>
  40730a:	bd70      	pop	{r4, r5, r6, pc}
  40730c:	bd70      	pop	{r4, r5, r6, pc}
  40730e:	bf00      	nop
  407310:	0040ee14 	.word	0x0040ee14
  407314:	0040ee14 	.word	0x0040ee14
  407318:	0040ee1c 	.word	0x0040ee1c
  40731c:	0040ee14 	.word	0x0040ee14

00407320 <iprintf>:
  407320:	b40f      	push	{r0, r1, r2, r3}
  407322:	b500      	push	{lr}
  407324:	4907      	ldr	r1, [pc, #28]	; (407344 <iprintf+0x24>)
  407326:	b083      	sub	sp, #12
  407328:	ab04      	add	r3, sp, #16
  40732a:	6808      	ldr	r0, [r1, #0]
  40732c:	f853 2b04 	ldr.w	r2, [r3], #4
  407330:	6881      	ldr	r1, [r0, #8]
  407332:	9301      	str	r3, [sp, #4]
  407334:	f001 ff78 	bl	409228 <_vfiprintf_r>
  407338:	b003      	add	sp, #12
  40733a:	f85d eb04 	ldr.w	lr, [sp], #4
  40733e:	b004      	add	sp, #16
  407340:	4770      	bx	lr
  407342:	bf00      	nop
  407344:	20400048 	.word	0x20400048

00407348 <malloc>:
  407348:	4b02      	ldr	r3, [pc, #8]	; (407354 <malloc+0xc>)
  40734a:	4601      	mov	r1, r0
  40734c:	6818      	ldr	r0, [r3, #0]
  40734e:	f000 b803 	b.w	407358 <_malloc_r>
  407352:	bf00      	nop
  407354:	20400048 	.word	0x20400048

00407358 <_malloc_r>:
  407358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40735c:	f101 060b 	add.w	r6, r1, #11
  407360:	2e16      	cmp	r6, #22
  407362:	b083      	sub	sp, #12
  407364:	4605      	mov	r5, r0
  407366:	f240 809e 	bls.w	4074a6 <_malloc_r+0x14e>
  40736a:	f036 0607 	bics.w	r6, r6, #7
  40736e:	f100 80bd 	bmi.w	4074ec <_malloc_r+0x194>
  407372:	42b1      	cmp	r1, r6
  407374:	f200 80ba 	bhi.w	4074ec <_malloc_r+0x194>
  407378:	f000 fb86 	bl	407a88 <__malloc_lock>
  40737c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  407380:	f0c0 8293 	bcc.w	4078aa <_malloc_r+0x552>
  407384:	0a73      	lsrs	r3, r6, #9
  407386:	f000 80b8 	beq.w	4074fa <_malloc_r+0x1a2>
  40738a:	2b04      	cmp	r3, #4
  40738c:	f200 8179 	bhi.w	407682 <_malloc_r+0x32a>
  407390:	09b3      	lsrs	r3, r6, #6
  407392:	f103 0039 	add.w	r0, r3, #57	; 0x39
  407396:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40739a:	00c3      	lsls	r3, r0, #3
  40739c:	4fbf      	ldr	r7, [pc, #764]	; (40769c <_malloc_r+0x344>)
  40739e:	443b      	add	r3, r7
  4073a0:	f1a3 0108 	sub.w	r1, r3, #8
  4073a4:	685c      	ldr	r4, [r3, #4]
  4073a6:	42a1      	cmp	r1, r4
  4073a8:	d106      	bne.n	4073b8 <_malloc_r+0x60>
  4073aa:	e00c      	b.n	4073c6 <_malloc_r+0x6e>
  4073ac:	2a00      	cmp	r2, #0
  4073ae:	f280 80aa 	bge.w	407506 <_malloc_r+0x1ae>
  4073b2:	68e4      	ldr	r4, [r4, #12]
  4073b4:	42a1      	cmp	r1, r4
  4073b6:	d006      	beq.n	4073c6 <_malloc_r+0x6e>
  4073b8:	6863      	ldr	r3, [r4, #4]
  4073ba:	f023 0303 	bic.w	r3, r3, #3
  4073be:	1b9a      	subs	r2, r3, r6
  4073c0:	2a0f      	cmp	r2, #15
  4073c2:	ddf3      	ble.n	4073ac <_malloc_r+0x54>
  4073c4:	4670      	mov	r0, lr
  4073c6:	693c      	ldr	r4, [r7, #16]
  4073c8:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 4076b0 <_malloc_r+0x358>
  4073cc:	4574      	cmp	r4, lr
  4073ce:	f000 81ab 	beq.w	407728 <_malloc_r+0x3d0>
  4073d2:	6863      	ldr	r3, [r4, #4]
  4073d4:	f023 0303 	bic.w	r3, r3, #3
  4073d8:	1b9a      	subs	r2, r3, r6
  4073da:	2a0f      	cmp	r2, #15
  4073dc:	f300 8190 	bgt.w	407700 <_malloc_r+0x3a8>
  4073e0:	2a00      	cmp	r2, #0
  4073e2:	f8c7 e014 	str.w	lr, [r7, #20]
  4073e6:	f8c7 e010 	str.w	lr, [r7, #16]
  4073ea:	f280 809d 	bge.w	407528 <_malloc_r+0x1d0>
  4073ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4073f2:	f080 8161 	bcs.w	4076b8 <_malloc_r+0x360>
  4073f6:	08db      	lsrs	r3, r3, #3
  4073f8:	f103 0c01 	add.w	ip, r3, #1
  4073fc:	1099      	asrs	r1, r3, #2
  4073fe:	687a      	ldr	r2, [r7, #4]
  407400:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  407404:	f8c4 8008 	str.w	r8, [r4, #8]
  407408:	2301      	movs	r3, #1
  40740a:	408b      	lsls	r3, r1
  40740c:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  407410:	4313      	orrs	r3, r2
  407412:	3908      	subs	r1, #8
  407414:	60e1      	str	r1, [r4, #12]
  407416:	607b      	str	r3, [r7, #4]
  407418:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  40741c:	f8c8 400c 	str.w	r4, [r8, #12]
  407420:	1082      	asrs	r2, r0, #2
  407422:	2401      	movs	r4, #1
  407424:	4094      	lsls	r4, r2
  407426:	429c      	cmp	r4, r3
  407428:	f200 808b 	bhi.w	407542 <_malloc_r+0x1ea>
  40742c:	421c      	tst	r4, r3
  40742e:	d106      	bne.n	40743e <_malloc_r+0xe6>
  407430:	f020 0003 	bic.w	r0, r0, #3
  407434:	0064      	lsls	r4, r4, #1
  407436:	421c      	tst	r4, r3
  407438:	f100 0004 	add.w	r0, r0, #4
  40743c:	d0fa      	beq.n	407434 <_malloc_r+0xdc>
  40743e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  407442:	46cc      	mov	ip, r9
  407444:	4680      	mov	r8, r0
  407446:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40744a:	459c      	cmp	ip, r3
  40744c:	d107      	bne.n	40745e <_malloc_r+0x106>
  40744e:	e16d      	b.n	40772c <_malloc_r+0x3d4>
  407450:	2a00      	cmp	r2, #0
  407452:	f280 817b 	bge.w	40774c <_malloc_r+0x3f4>
  407456:	68db      	ldr	r3, [r3, #12]
  407458:	459c      	cmp	ip, r3
  40745a:	f000 8167 	beq.w	40772c <_malloc_r+0x3d4>
  40745e:	6859      	ldr	r1, [r3, #4]
  407460:	f021 0103 	bic.w	r1, r1, #3
  407464:	1b8a      	subs	r2, r1, r6
  407466:	2a0f      	cmp	r2, #15
  407468:	ddf2      	ble.n	407450 <_malloc_r+0xf8>
  40746a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40746e:	f8d3 8008 	ldr.w	r8, [r3, #8]
  407472:	9300      	str	r3, [sp, #0]
  407474:	199c      	adds	r4, r3, r6
  407476:	4628      	mov	r0, r5
  407478:	f046 0601 	orr.w	r6, r6, #1
  40747c:	f042 0501 	orr.w	r5, r2, #1
  407480:	605e      	str	r6, [r3, #4]
  407482:	f8c8 c00c 	str.w	ip, [r8, #12]
  407486:	f8cc 8008 	str.w	r8, [ip, #8]
  40748a:	617c      	str	r4, [r7, #20]
  40748c:	613c      	str	r4, [r7, #16]
  40748e:	f8c4 e00c 	str.w	lr, [r4, #12]
  407492:	f8c4 e008 	str.w	lr, [r4, #8]
  407496:	6065      	str	r5, [r4, #4]
  407498:	505a      	str	r2, [r3, r1]
  40749a:	f000 faf7 	bl	407a8c <__malloc_unlock>
  40749e:	9b00      	ldr	r3, [sp, #0]
  4074a0:	f103 0408 	add.w	r4, r3, #8
  4074a4:	e01e      	b.n	4074e4 <_malloc_r+0x18c>
  4074a6:	2910      	cmp	r1, #16
  4074a8:	d820      	bhi.n	4074ec <_malloc_r+0x194>
  4074aa:	f000 faed 	bl	407a88 <__malloc_lock>
  4074ae:	2610      	movs	r6, #16
  4074b0:	2318      	movs	r3, #24
  4074b2:	2002      	movs	r0, #2
  4074b4:	4f79      	ldr	r7, [pc, #484]	; (40769c <_malloc_r+0x344>)
  4074b6:	443b      	add	r3, r7
  4074b8:	f1a3 0208 	sub.w	r2, r3, #8
  4074bc:	685c      	ldr	r4, [r3, #4]
  4074be:	4294      	cmp	r4, r2
  4074c0:	f000 813d 	beq.w	40773e <_malloc_r+0x3e6>
  4074c4:	6863      	ldr	r3, [r4, #4]
  4074c6:	68e1      	ldr	r1, [r4, #12]
  4074c8:	68a6      	ldr	r6, [r4, #8]
  4074ca:	f023 0303 	bic.w	r3, r3, #3
  4074ce:	4423      	add	r3, r4
  4074d0:	4628      	mov	r0, r5
  4074d2:	685a      	ldr	r2, [r3, #4]
  4074d4:	60f1      	str	r1, [r6, #12]
  4074d6:	f042 0201 	orr.w	r2, r2, #1
  4074da:	608e      	str	r6, [r1, #8]
  4074dc:	605a      	str	r2, [r3, #4]
  4074de:	f000 fad5 	bl	407a8c <__malloc_unlock>
  4074e2:	3408      	adds	r4, #8
  4074e4:	4620      	mov	r0, r4
  4074e6:	b003      	add	sp, #12
  4074e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4074ec:	2400      	movs	r4, #0
  4074ee:	230c      	movs	r3, #12
  4074f0:	4620      	mov	r0, r4
  4074f2:	602b      	str	r3, [r5, #0]
  4074f4:	b003      	add	sp, #12
  4074f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4074fa:	2040      	movs	r0, #64	; 0x40
  4074fc:	f44f 7300 	mov.w	r3, #512	; 0x200
  407500:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  407504:	e74a      	b.n	40739c <_malloc_r+0x44>
  407506:	4423      	add	r3, r4
  407508:	68e1      	ldr	r1, [r4, #12]
  40750a:	685a      	ldr	r2, [r3, #4]
  40750c:	68a6      	ldr	r6, [r4, #8]
  40750e:	f042 0201 	orr.w	r2, r2, #1
  407512:	60f1      	str	r1, [r6, #12]
  407514:	4628      	mov	r0, r5
  407516:	608e      	str	r6, [r1, #8]
  407518:	605a      	str	r2, [r3, #4]
  40751a:	f000 fab7 	bl	407a8c <__malloc_unlock>
  40751e:	3408      	adds	r4, #8
  407520:	4620      	mov	r0, r4
  407522:	b003      	add	sp, #12
  407524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407528:	4423      	add	r3, r4
  40752a:	4628      	mov	r0, r5
  40752c:	685a      	ldr	r2, [r3, #4]
  40752e:	f042 0201 	orr.w	r2, r2, #1
  407532:	605a      	str	r2, [r3, #4]
  407534:	f000 faaa 	bl	407a8c <__malloc_unlock>
  407538:	3408      	adds	r4, #8
  40753a:	4620      	mov	r0, r4
  40753c:	b003      	add	sp, #12
  40753e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407542:	68bc      	ldr	r4, [r7, #8]
  407544:	6863      	ldr	r3, [r4, #4]
  407546:	f023 0803 	bic.w	r8, r3, #3
  40754a:	45b0      	cmp	r8, r6
  40754c:	d304      	bcc.n	407558 <_malloc_r+0x200>
  40754e:	eba8 0306 	sub.w	r3, r8, r6
  407552:	2b0f      	cmp	r3, #15
  407554:	f300 8085 	bgt.w	407662 <_malloc_r+0x30a>
  407558:	f8df 9158 	ldr.w	r9, [pc, #344]	; 4076b4 <_malloc_r+0x35c>
  40755c:	4b50      	ldr	r3, [pc, #320]	; (4076a0 <_malloc_r+0x348>)
  40755e:	f8d9 2000 	ldr.w	r2, [r9]
  407562:	681b      	ldr	r3, [r3, #0]
  407564:	3201      	adds	r2, #1
  407566:	4433      	add	r3, r6
  407568:	eb04 0a08 	add.w	sl, r4, r8
  40756c:	f000 8155 	beq.w	40781a <_malloc_r+0x4c2>
  407570:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  407574:	330f      	adds	r3, #15
  407576:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40757a:	f02b 0b0f 	bic.w	fp, fp, #15
  40757e:	4659      	mov	r1, fp
  407580:	4628      	mov	r0, r5
  407582:	f000 fa85 	bl	407a90 <_sbrk_r>
  407586:	1c41      	adds	r1, r0, #1
  407588:	4602      	mov	r2, r0
  40758a:	f000 80fc 	beq.w	407786 <_malloc_r+0x42e>
  40758e:	4582      	cmp	sl, r0
  407590:	f200 80f7 	bhi.w	407782 <_malloc_r+0x42a>
  407594:	4b43      	ldr	r3, [pc, #268]	; (4076a4 <_malloc_r+0x34c>)
  407596:	6819      	ldr	r1, [r3, #0]
  407598:	4459      	add	r1, fp
  40759a:	6019      	str	r1, [r3, #0]
  40759c:	f000 814d 	beq.w	40783a <_malloc_r+0x4e2>
  4075a0:	f8d9 0000 	ldr.w	r0, [r9]
  4075a4:	3001      	adds	r0, #1
  4075a6:	bf1b      	ittet	ne
  4075a8:	eba2 0a0a 	subne.w	sl, r2, sl
  4075ac:	4451      	addne	r1, sl
  4075ae:	f8c9 2000 	streq.w	r2, [r9]
  4075b2:	6019      	strne	r1, [r3, #0]
  4075b4:	f012 0107 	ands.w	r1, r2, #7
  4075b8:	f000 8115 	beq.w	4077e6 <_malloc_r+0x48e>
  4075bc:	f1c1 0008 	rsb	r0, r1, #8
  4075c0:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4075c4:	4402      	add	r2, r0
  4075c6:	3108      	adds	r1, #8
  4075c8:	eb02 090b 	add.w	r9, r2, fp
  4075cc:	f3c9 090b 	ubfx	r9, r9, #0, #12
  4075d0:	eba1 0909 	sub.w	r9, r1, r9
  4075d4:	4649      	mov	r1, r9
  4075d6:	4628      	mov	r0, r5
  4075d8:	9301      	str	r3, [sp, #4]
  4075da:	9200      	str	r2, [sp, #0]
  4075dc:	f000 fa58 	bl	407a90 <_sbrk_r>
  4075e0:	1c43      	adds	r3, r0, #1
  4075e2:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4075e6:	f000 8143 	beq.w	407870 <_malloc_r+0x518>
  4075ea:	1a80      	subs	r0, r0, r2
  4075ec:	4448      	add	r0, r9
  4075ee:	f040 0001 	orr.w	r0, r0, #1
  4075f2:	6819      	ldr	r1, [r3, #0]
  4075f4:	60ba      	str	r2, [r7, #8]
  4075f6:	4449      	add	r1, r9
  4075f8:	42bc      	cmp	r4, r7
  4075fa:	6050      	str	r0, [r2, #4]
  4075fc:	6019      	str	r1, [r3, #0]
  4075fe:	d017      	beq.n	407630 <_malloc_r+0x2d8>
  407600:	f1b8 0f0f 	cmp.w	r8, #15
  407604:	f240 80fb 	bls.w	4077fe <_malloc_r+0x4a6>
  407608:	6860      	ldr	r0, [r4, #4]
  40760a:	f1a8 020c 	sub.w	r2, r8, #12
  40760e:	f022 0207 	bic.w	r2, r2, #7
  407612:	eb04 0e02 	add.w	lr, r4, r2
  407616:	f000 0001 	and.w	r0, r0, #1
  40761a:	f04f 0c05 	mov.w	ip, #5
  40761e:	4310      	orrs	r0, r2
  407620:	2a0f      	cmp	r2, #15
  407622:	6060      	str	r0, [r4, #4]
  407624:	f8ce c004 	str.w	ip, [lr, #4]
  407628:	f8ce c008 	str.w	ip, [lr, #8]
  40762c:	f200 8117 	bhi.w	40785e <_malloc_r+0x506>
  407630:	4b1d      	ldr	r3, [pc, #116]	; (4076a8 <_malloc_r+0x350>)
  407632:	68bc      	ldr	r4, [r7, #8]
  407634:	681a      	ldr	r2, [r3, #0]
  407636:	4291      	cmp	r1, r2
  407638:	bf88      	it	hi
  40763a:	6019      	strhi	r1, [r3, #0]
  40763c:	4b1b      	ldr	r3, [pc, #108]	; (4076ac <_malloc_r+0x354>)
  40763e:	681a      	ldr	r2, [r3, #0]
  407640:	4291      	cmp	r1, r2
  407642:	6862      	ldr	r2, [r4, #4]
  407644:	bf88      	it	hi
  407646:	6019      	strhi	r1, [r3, #0]
  407648:	f022 0203 	bic.w	r2, r2, #3
  40764c:	4296      	cmp	r6, r2
  40764e:	eba2 0306 	sub.w	r3, r2, r6
  407652:	d801      	bhi.n	407658 <_malloc_r+0x300>
  407654:	2b0f      	cmp	r3, #15
  407656:	dc04      	bgt.n	407662 <_malloc_r+0x30a>
  407658:	4628      	mov	r0, r5
  40765a:	f000 fa17 	bl	407a8c <__malloc_unlock>
  40765e:	2400      	movs	r4, #0
  407660:	e740      	b.n	4074e4 <_malloc_r+0x18c>
  407662:	19a2      	adds	r2, r4, r6
  407664:	f043 0301 	orr.w	r3, r3, #1
  407668:	f046 0601 	orr.w	r6, r6, #1
  40766c:	6066      	str	r6, [r4, #4]
  40766e:	4628      	mov	r0, r5
  407670:	60ba      	str	r2, [r7, #8]
  407672:	6053      	str	r3, [r2, #4]
  407674:	f000 fa0a 	bl	407a8c <__malloc_unlock>
  407678:	3408      	adds	r4, #8
  40767a:	4620      	mov	r0, r4
  40767c:	b003      	add	sp, #12
  40767e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407682:	2b14      	cmp	r3, #20
  407684:	d971      	bls.n	40776a <_malloc_r+0x412>
  407686:	2b54      	cmp	r3, #84	; 0x54
  407688:	f200 80a3 	bhi.w	4077d2 <_malloc_r+0x47a>
  40768c:	0b33      	lsrs	r3, r6, #12
  40768e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  407692:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  407696:	00c3      	lsls	r3, r0, #3
  407698:	e680      	b.n	40739c <_malloc_r+0x44>
  40769a:	bf00      	nop
  40769c:	20400478 	.word	0x20400478
  4076a0:	20401694 	.word	0x20401694
  4076a4:	20401664 	.word	0x20401664
  4076a8:	2040168c 	.word	0x2040168c
  4076ac:	20401690 	.word	0x20401690
  4076b0:	20400480 	.word	0x20400480
  4076b4:	20400880 	.word	0x20400880
  4076b8:	0a5a      	lsrs	r2, r3, #9
  4076ba:	2a04      	cmp	r2, #4
  4076bc:	d95b      	bls.n	407776 <_malloc_r+0x41e>
  4076be:	2a14      	cmp	r2, #20
  4076c0:	f200 80ae 	bhi.w	407820 <_malloc_r+0x4c8>
  4076c4:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4076c8:	00c9      	lsls	r1, r1, #3
  4076ca:	325b      	adds	r2, #91	; 0x5b
  4076cc:	eb07 0c01 	add.w	ip, r7, r1
  4076d0:	5879      	ldr	r1, [r7, r1]
  4076d2:	f1ac 0c08 	sub.w	ip, ip, #8
  4076d6:	458c      	cmp	ip, r1
  4076d8:	f000 8088 	beq.w	4077ec <_malloc_r+0x494>
  4076dc:	684a      	ldr	r2, [r1, #4]
  4076de:	f022 0203 	bic.w	r2, r2, #3
  4076e2:	4293      	cmp	r3, r2
  4076e4:	d273      	bcs.n	4077ce <_malloc_r+0x476>
  4076e6:	6889      	ldr	r1, [r1, #8]
  4076e8:	458c      	cmp	ip, r1
  4076ea:	d1f7      	bne.n	4076dc <_malloc_r+0x384>
  4076ec:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4076f0:	687b      	ldr	r3, [r7, #4]
  4076f2:	60e2      	str	r2, [r4, #12]
  4076f4:	f8c4 c008 	str.w	ip, [r4, #8]
  4076f8:	6094      	str	r4, [r2, #8]
  4076fa:	f8cc 400c 	str.w	r4, [ip, #12]
  4076fe:	e68f      	b.n	407420 <_malloc_r+0xc8>
  407700:	19a1      	adds	r1, r4, r6
  407702:	f046 0c01 	orr.w	ip, r6, #1
  407706:	f042 0601 	orr.w	r6, r2, #1
  40770a:	f8c4 c004 	str.w	ip, [r4, #4]
  40770e:	4628      	mov	r0, r5
  407710:	6179      	str	r1, [r7, #20]
  407712:	6139      	str	r1, [r7, #16]
  407714:	f8c1 e00c 	str.w	lr, [r1, #12]
  407718:	f8c1 e008 	str.w	lr, [r1, #8]
  40771c:	604e      	str	r6, [r1, #4]
  40771e:	50e2      	str	r2, [r4, r3]
  407720:	f000 f9b4 	bl	407a8c <__malloc_unlock>
  407724:	3408      	adds	r4, #8
  407726:	e6dd      	b.n	4074e4 <_malloc_r+0x18c>
  407728:	687b      	ldr	r3, [r7, #4]
  40772a:	e679      	b.n	407420 <_malloc_r+0xc8>
  40772c:	f108 0801 	add.w	r8, r8, #1
  407730:	f018 0f03 	tst.w	r8, #3
  407734:	f10c 0c08 	add.w	ip, ip, #8
  407738:	f47f ae85 	bne.w	407446 <_malloc_r+0xee>
  40773c:	e02d      	b.n	40779a <_malloc_r+0x442>
  40773e:	68dc      	ldr	r4, [r3, #12]
  407740:	42a3      	cmp	r3, r4
  407742:	bf08      	it	eq
  407744:	3002      	addeq	r0, #2
  407746:	f43f ae3e 	beq.w	4073c6 <_malloc_r+0x6e>
  40774a:	e6bb      	b.n	4074c4 <_malloc_r+0x16c>
  40774c:	4419      	add	r1, r3
  40774e:	461c      	mov	r4, r3
  407750:	684a      	ldr	r2, [r1, #4]
  407752:	68db      	ldr	r3, [r3, #12]
  407754:	f854 6f08 	ldr.w	r6, [r4, #8]!
  407758:	f042 0201 	orr.w	r2, r2, #1
  40775c:	604a      	str	r2, [r1, #4]
  40775e:	4628      	mov	r0, r5
  407760:	60f3      	str	r3, [r6, #12]
  407762:	609e      	str	r6, [r3, #8]
  407764:	f000 f992 	bl	407a8c <__malloc_unlock>
  407768:	e6bc      	b.n	4074e4 <_malloc_r+0x18c>
  40776a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40776e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  407772:	00c3      	lsls	r3, r0, #3
  407774:	e612      	b.n	40739c <_malloc_r+0x44>
  407776:	099a      	lsrs	r2, r3, #6
  407778:	f102 0139 	add.w	r1, r2, #57	; 0x39
  40777c:	00c9      	lsls	r1, r1, #3
  40777e:	3238      	adds	r2, #56	; 0x38
  407780:	e7a4      	b.n	4076cc <_malloc_r+0x374>
  407782:	42bc      	cmp	r4, r7
  407784:	d054      	beq.n	407830 <_malloc_r+0x4d8>
  407786:	68bc      	ldr	r4, [r7, #8]
  407788:	6862      	ldr	r2, [r4, #4]
  40778a:	f022 0203 	bic.w	r2, r2, #3
  40778e:	e75d      	b.n	40764c <_malloc_r+0x2f4>
  407790:	f859 3908 	ldr.w	r3, [r9], #-8
  407794:	4599      	cmp	r9, r3
  407796:	f040 8086 	bne.w	4078a6 <_malloc_r+0x54e>
  40779a:	f010 0f03 	tst.w	r0, #3
  40779e:	f100 30ff 	add.w	r0, r0, #4294967295
  4077a2:	d1f5      	bne.n	407790 <_malloc_r+0x438>
  4077a4:	687b      	ldr	r3, [r7, #4]
  4077a6:	ea23 0304 	bic.w	r3, r3, r4
  4077aa:	607b      	str	r3, [r7, #4]
  4077ac:	0064      	lsls	r4, r4, #1
  4077ae:	429c      	cmp	r4, r3
  4077b0:	f63f aec7 	bhi.w	407542 <_malloc_r+0x1ea>
  4077b4:	2c00      	cmp	r4, #0
  4077b6:	f43f aec4 	beq.w	407542 <_malloc_r+0x1ea>
  4077ba:	421c      	tst	r4, r3
  4077bc:	4640      	mov	r0, r8
  4077be:	f47f ae3e 	bne.w	40743e <_malloc_r+0xe6>
  4077c2:	0064      	lsls	r4, r4, #1
  4077c4:	421c      	tst	r4, r3
  4077c6:	f100 0004 	add.w	r0, r0, #4
  4077ca:	d0fa      	beq.n	4077c2 <_malloc_r+0x46a>
  4077cc:	e637      	b.n	40743e <_malloc_r+0xe6>
  4077ce:	468c      	mov	ip, r1
  4077d0:	e78c      	b.n	4076ec <_malloc_r+0x394>
  4077d2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4077d6:	d815      	bhi.n	407804 <_malloc_r+0x4ac>
  4077d8:	0bf3      	lsrs	r3, r6, #15
  4077da:	f103 0078 	add.w	r0, r3, #120	; 0x78
  4077de:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4077e2:	00c3      	lsls	r3, r0, #3
  4077e4:	e5da      	b.n	40739c <_malloc_r+0x44>
  4077e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4077ea:	e6ed      	b.n	4075c8 <_malloc_r+0x270>
  4077ec:	687b      	ldr	r3, [r7, #4]
  4077ee:	1092      	asrs	r2, r2, #2
  4077f0:	2101      	movs	r1, #1
  4077f2:	fa01 f202 	lsl.w	r2, r1, r2
  4077f6:	4313      	orrs	r3, r2
  4077f8:	607b      	str	r3, [r7, #4]
  4077fa:	4662      	mov	r2, ip
  4077fc:	e779      	b.n	4076f2 <_malloc_r+0x39a>
  4077fe:	2301      	movs	r3, #1
  407800:	6053      	str	r3, [r2, #4]
  407802:	e729      	b.n	407658 <_malloc_r+0x300>
  407804:	f240 5254 	movw	r2, #1364	; 0x554
  407808:	4293      	cmp	r3, r2
  40780a:	d822      	bhi.n	407852 <_malloc_r+0x4fa>
  40780c:	0cb3      	lsrs	r3, r6, #18
  40780e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  407812:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  407816:	00c3      	lsls	r3, r0, #3
  407818:	e5c0      	b.n	40739c <_malloc_r+0x44>
  40781a:	f103 0b10 	add.w	fp, r3, #16
  40781e:	e6ae      	b.n	40757e <_malloc_r+0x226>
  407820:	2a54      	cmp	r2, #84	; 0x54
  407822:	d829      	bhi.n	407878 <_malloc_r+0x520>
  407824:	0b1a      	lsrs	r2, r3, #12
  407826:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40782a:	00c9      	lsls	r1, r1, #3
  40782c:	326e      	adds	r2, #110	; 0x6e
  40782e:	e74d      	b.n	4076cc <_malloc_r+0x374>
  407830:	4b20      	ldr	r3, [pc, #128]	; (4078b4 <_malloc_r+0x55c>)
  407832:	6819      	ldr	r1, [r3, #0]
  407834:	4459      	add	r1, fp
  407836:	6019      	str	r1, [r3, #0]
  407838:	e6b2      	b.n	4075a0 <_malloc_r+0x248>
  40783a:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40783e:	2800      	cmp	r0, #0
  407840:	f47f aeae 	bne.w	4075a0 <_malloc_r+0x248>
  407844:	eb08 030b 	add.w	r3, r8, fp
  407848:	68ba      	ldr	r2, [r7, #8]
  40784a:	f043 0301 	orr.w	r3, r3, #1
  40784e:	6053      	str	r3, [r2, #4]
  407850:	e6ee      	b.n	407630 <_malloc_r+0x2d8>
  407852:	207f      	movs	r0, #127	; 0x7f
  407854:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  407858:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  40785c:	e59e      	b.n	40739c <_malloc_r+0x44>
  40785e:	f104 0108 	add.w	r1, r4, #8
  407862:	4628      	mov	r0, r5
  407864:	9300      	str	r3, [sp, #0]
  407866:	f003 fd53 	bl	40b310 <_free_r>
  40786a:	9b00      	ldr	r3, [sp, #0]
  40786c:	6819      	ldr	r1, [r3, #0]
  40786e:	e6df      	b.n	407630 <_malloc_r+0x2d8>
  407870:	2001      	movs	r0, #1
  407872:	f04f 0900 	mov.w	r9, #0
  407876:	e6bc      	b.n	4075f2 <_malloc_r+0x29a>
  407878:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40787c:	d805      	bhi.n	40788a <_malloc_r+0x532>
  40787e:	0bda      	lsrs	r2, r3, #15
  407880:	f102 0178 	add.w	r1, r2, #120	; 0x78
  407884:	00c9      	lsls	r1, r1, #3
  407886:	3277      	adds	r2, #119	; 0x77
  407888:	e720      	b.n	4076cc <_malloc_r+0x374>
  40788a:	f240 5154 	movw	r1, #1364	; 0x554
  40788e:	428a      	cmp	r2, r1
  407890:	d805      	bhi.n	40789e <_malloc_r+0x546>
  407892:	0c9a      	lsrs	r2, r3, #18
  407894:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  407898:	00c9      	lsls	r1, r1, #3
  40789a:	327c      	adds	r2, #124	; 0x7c
  40789c:	e716      	b.n	4076cc <_malloc_r+0x374>
  40789e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  4078a2:	227e      	movs	r2, #126	; 0x7e
  4078a4:	e712      	b.n	4076cc <_malloc_r+0x374>
  4078a6:	687b      	ldr	r3, [r7, #4]
  4078a8:	e780      	b.n	4077ac <_malloc_r+0x454>
  4078aa:	08f0      	lsrs	r0, r6, #3
  4078ac:	f106 0308 	add.w	r3, r6, #8
  4078b0:	e600      	b.n	4074b4 <_malloc_r+0x15c>
  4078b2:	bf00      	nop
  4078b4:	20401664 	.word	0x20401664

004078b8 <memcpy>:
  4078b8:	4684      	mov	ip, r0
  4078ba:	ea41 0300 	orr.w	r3, r1, r0
  4078be:	f013 0303 	ands.w	r3, r3, #3
  4078c2:	d16d      	bne.n	4079a0 <memcpy+0xe8>
  4078c4:	3a40      	subs	r2, #64	; 0x40
  4078c6:	d341      	bcc.n	40794c <memcpy+0x94>
  4078c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4078cc:	f840 3b04 	str.w	r3, [r0], #4
  4078d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4078d4:	f840 3b04 	str.w	r3, [r0], #4
  4078d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4078dc:	f840 3b04 	str.w	r3, [r0], #4
  4078e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4078e4:	f840 3b04 	str.w	r3, [r0], #4
  4078e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4078ec:	f840 3b04 	str.w	r3, [r0], #4
  4078f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4078f4:	f840 3b04 	str.w	r3, [r0], #4
  4078f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4078fc:	f840 3b04 	str.w	r3, [r0], #4
  407900:	f851 3b04 	ldr.w	r3, [r1], #4
  407904:	f840 3b04 	str.w	r3, [r0], #4
  407908:	f851 3b04 	ldr.w	r3, [r1], #4
  40790c:	f840 3b04 	str.w	r3, [r0], #4
  407910:	f851 3b04 	ldr.w	r3, [r1], #4
  407914:	f840 3b04 	str.w	r3, [r0], #4
  407918:	f851 3b04 	ldr.w	r3, [r1], #4
  40791c:	f840 3b04 	str.w	r3, [r0], #4
  407920:	f851 3b04 	ldr.w	r3, [r1], #4
  407924:	f840 3b04 	str.w	r3, [r0], #4
  407928:	f851 3b04 	ldr.w	r3, [r1], #4
  40792c:	f840 3b04 	str.w	r3, [r0], #4
  407930:	f851 3b04 	ldr.w	r3, [r1], #4
  407934:	f840 3b04 	str.w	r3, [r0], #4
  407938:	f851 3b04 	ldr.w	r3, [r1], #4
  40793c:	f840 3b04 	str.w	r3, [r0], #4
  407940:	f851 3b04 	ldr.w	r3, [r1], #4
  407944:	f840 3b04 	str.w	r3, [r0], #4
  407948:	3a40      	subs	r2, #64	; 0x40
  40794a:	d2bd      	bcs.n	4078c8 <memcpy+0x10>
  40794c:	3230      	adds	r2, #48	; 0x30
  40794e:	d311      	bcc.n	407974 <memcpy+0xbc>
  407950:	f851 3b04 	ldr.w	r3, [r1], #4
  407954:	f840 3b04 	str.w	r3, [r0], #4
  407958:	f851 3b04 	ldr.w	r3, [r1], #4
  40795c:	f840 3b04 	str.w	r3, [r0], #4
  407960:	f851 3b04 	ldr.w	r3, [r1], #4
  407964:	f840 3b04 	str.w	r3, [r0], #4
  407968:	f851 3b04 	ldr.w	r3, [r1], #4
  40796c:	f840 3b04 	str.w	r3, [r0], #4
  407970:	3a10      	subs	r2, #16
  407972:	d2ed      	bcs.n	407950 <memcpy+0x98>
  407974:	320c      	adds	r2, #12
  407976:	d305      	bcc.n	407984 <memcpy+0xcc>
  407978:	f851 3b04 	ldr.w	r3, [r1], #4
  40797c:	f840 3b04 	str.w	r3, [r0], #4
  407980:	3a04      	subs	r2, #4
  407982:	d2f9      	bcs.n	407978 <memcpy+0xc0>
  407984:	3204      	adds	r2, #4
  407986:	d008      	beq.n	40799a <memcpy+0xe2>
  407988:	07d2      	lsls	r2, r2, #31
  40798a:	bf1c      	itt	ne
  40798c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  407990:	f800 3b01 	strbne.w	r3, [r0], #1
  407994:	d301      	bcc.n	40799a <memcpy+0xe2>
  407996:	880b      	ldrh	r3, [r1, #0]
  407998:	8003      	strh	r3, [r0, #0]
  40799a:	4660      	mov	r0, ip
  40799c:	4770      	bx	lr
  40799e:	bf00      	nop
  4079a0:	2a08      	cmp	r2, #8
  4079a2:	d313      	bcc.n	4079cc <memcpy+0x114>
  4079a4:	078b      	lsls	r3, r1, #30
  4079a6:	d08d      	beq.n	4078c4 <memcpy+0xc>
  4079a8:	f010 0303 	ands.w	r3, r0, #3
  4079ac:	d08a      	beq.n	4078c4 <memcpy+0xc>
  4079ae:	f1c3 0304 	rsb	r3, r3, #4
  4079b2:	1ad2      	subs	r2, r2, r3
  4079b4:	07db      	lsls	r3, r3, #31
  4079b6:	bf1c      	itt	ne
  4079b8:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4079bc:	f800 3b01 	strbne.w	r3, [r0], #1
  4079c0:	d380      	bcc.n	4078c4 <memcpy+0xc>
  4079c2:	f831 3b02 	ldrh.w	r3, [r1], #2
  4079c6:	f820 3b02 	strh.w	r3, [r0], #2
  4079ca:	e77b      	b.n	4078c4 <memcpy+0xc>
  4079cc:	3a04      	subs	r2, #4
  4079ce:	d3d9      	bcc.n	407984 <memcpy+0xcc>
  4079d0:	3a01      	subs	r2, #1
  4079d2:	f811 3b01 	ldrb.w	r3, [r1], #1
  4079d6:	f800 3b01 	strb.w	r3, [r0], #1
  4079da:	d2f9      	bcs.n	4079d0 <memcpy+0x118>
  4079dc:	780b      	ldrb	r3, [r1, #0]
  4079de:	7003      	strb	r3, [r0, #0]
  4079e0:	784b      	ldrb	r3, [r1, #1]
  4079e2:	7043      	strb	r3, [r0, #1]
  4079e4:	788b      	ldrb	r3, [r1, #2]
  4079e6:	7083      	strb	r3, [r0, #2]
  4079e8:	4660      	mov	r0, ip
  4079ea:	4770      	bx	lr

004079ec <memset>:
  4079ec:	b470      	push	{r4, r5, r6}
  4079ee:	0786      	lsls	r6, r0, #30
  4079f0:	d046      	beq.n	407a80 <memset+0x94>
  4079f2:	1e54      	subs	r4, r2, #1
  4079f4:	2a00      	cmp	r2, #0
  4079f6:	d041      	beq.n	407a7c <memset+0x90>
  4079f8:	b2ca      	uxtb	r2, r1
  4079fa:	4603      	mov	r3, r0
  4079fc:	e002      	b.n	407a04 <memset+0x18>
  4079fe:	f114 34ff 	adds.w	r4, r4, #4294967295
  407a02:	d33b      	bcc.n	407a7c <memset+0x90>
  407a04:	f803 2b01 	strb.w	r2, [r3], #1
  407a08:	079d      	lsls	r5, r3, #30
  407a0a:	d1f8      	bne.n	4079fe <memset+0x12>
  407a0c:	2c03      	cmp	r4, #3
  407a0e:	d92e      	bls.n	407a6e <memset+0x82>
  407a10:	b2cd      	uxtb	r5, r1
  407a12:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  407a16:	2c0f      	cmp	r4, #15
  407a18:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  407a1c:	d919      	bls.n	407a52 <memset+0x66>
  407a1e:	f103 0210 	add.w	r2, r3, #16
  407a22:	4626      	mov	r6, r4
  407a24:	3e10      	subs	r6, #16
  407a26:	2e0f      	cmp	r6, #15
  407a28:	f842 5c10 	str.w	r5, [r2, #-16]
  407a2c:	f842 5c0c 	str.w	r5, [r2, #-12]
  407a30:	f842 5c08 	str.w	r5, [r2, #-8]
  407a34:	f842 5c04 	str.w	r5, [r2, #-4]
  407a38:	f102 0210 	add.w	r2, r2, #16
  407a3c:	d8f2      	bhi.n	407a24 <memset+0x38>
  407a3e:	f1a4 0210 	sub.w	r2, r4, #16
  407a42:	f022 020f 	bic.w	r2, r2, #15
  407a46:	f004 040f 	and.w	r4, r4, #15
  407a4a:	3210      	adds	r2, #16
  407a4c:	2c03      	cmp	r4, #3
  407a4e:	4413      	add	r3, r2
  407a50:	d90d      	bls.n	407a6e <memset+0x82>
  407a52:	461e      	mov	r6, r3
  407a54:	4622      	mov	r2, r4
  407a56:	3a04      	subs	r2, #4
  407a58:	2a03      	cmp	r2, #3
  407a5a:	f846 5b04 	str.w	r5, [r6], #4
  407a5e:	d8fa      	bhi.n	407a56 <memset+0x6a>
  407a60:	1f22      	subs	r2, r4, #4
  407a62:	f022 0203 	bic.w	r2, r2, #3
  407a66:	3204      	adds	r2, #4
  407a68:	4413      	add	r3, r2
  407a6a:	f004 0403 	and.w	r4, r4, #3
  407a6e:	b12c      	cbz	r4, 407a7c <memset+0x90>
  407a70:	b2c9      	uxtb	r1, r1
  407a72:	441c      	add	r4, r3
  407a74:	f803 1b01 	strb.w	r1, [r3], #1
  407a78:	429c      	cmp	r4, r3
  407a7a:	d1fb      	bne.n	407a74 <memset+0x88>
  407a7c:	bc70      	pop	{r4, r5, r6}
  407a7e:	4770      	bx	lr
  407a80:	4614      	mov	r4, r2
  407a82:	4603      	mov	r3, r0
  407a84:	e7c2      	b.n	407a0c <memset+0x20>
  407a86:	bf00      	nop

00407a88 <__malloc_lock>:
  407a88:	4770      	bx	lr
  407a8a:	bf00      	nop

00407a8c <__malloc_unlock>:
  407a8c:	4770      	bx	lr
  407a8e:	bf00      	nop

00407a90 <_sbrk_r>:
  407a90:	b538      	push	{r3, r4, r5, lr}
  407a92:	4c07      	ldr	r4, [pc, #28]	; (407ab0 <_sbrk_r+0x20>)
  407a94:	2300      	movs	r3, #0
  407a96:	4605      	mov	r5, r0
  407a98:	4608      	mov	r0, r1
  407a9a:	6023      	str	r3, [r4, #0]
  407a9c:	f7ff f86c 	bl	406b78 <_sbrk>
  407aa0:	1c43      	adds	r3, r0, #1
  407aa2:	d000      	beq.n	407aa6 <_sbrk_r+0x16>
  407aa4:	bd38      	pop	{r3, r4, r5, pc}
  407aa6:	6823      	ldr	r3, [r4, #0]
  407aa8:	2b00      	cmp	r3, #0
  407aaa:	d0fb      	beq.n	407aa4 <_sbrk_r+0x14>
  407aac:	602b      	str	r3, [r5, #0]
  407aae:	bd38      	pop	{r3, r4, r5, pc}
  407ab0:	204022cc 	.word	0x204022cc

00407ab4 <setbuf>:
  407ab4:	2900      	cmp	r1, #0
  407ab6:	bf0c      	ite	eq
  407ab8:	2202      	moveq	r2, #2
  407aba:	2200      	movne	r2, #0
  407abc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  407ac0:	f000 b800 	b.w	407ac4 <setvbuf>

00407ac4 <setvbuf>:
  407ac4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  407ac8:	4c50      	ldr	r4, [pc, #320]	; (407c0c <setvbuf+0x148>)
  407aca:	6825      	ldr	r5, [r4, #0]
  407acc:	b083      	sub	sp, #12
  407ace:	4604      	mov	r4, r0
  407ad0:	460f      	mov	r7, r1
  407ad2:	4690      	mov	r8, r2
  407ad4:	461e      	mov	r6, r3
  407ad6:	b115      	cbz	r5, 407ade <setvbuf+0x1a>
  407ad8:	6bab      	ldr	r3, [r5, #56]	; 0x38
  407ada:	2b00      	cmp	r3, #0
  407adc:	d077      	beq.n	407bce <setvbuf+0x10a>
  407ade:	f1b8 0f02 	cmp.w	r8, #2
  407ae2:	d004      	beq.n	407aee <setvbuf+0x2a>
  407ae4:	f1b8 0f01 	cmp.w	r8, #1
  407ae8:	d87d      	bhi.n	407be6 <setvbuf+0x122>
  407aea:	2e00      	cmp	r6, #0
  407aec:	db7b      	blt.n	407be6 <setvbuf+0x122>
  407aee:	4621      	mov	r1, r4
  407af0:	4628      	mov	r0, r5
  407af2:	f003 faa3 	bl	40b03c <_fflush_r>
  407af6:	6b21      	ldr	r1, [r4, #48]	; 0x30
  407af8:	b141      	cbz	r1, 407b0c <setvbuf+0x48>
  407afa:	f104 0340 	add.w	r3, r4, #64	; 0x40
  407afe:	4299      	cmp	r1, r3
  407b00:	d002      	beq.n	407b08 <setvbuf+0x44>
  407b02:	4628      	mov	r0, r5
  407b04:	f003 fc04 	bl	40b310 <_free_r>
  407b08:	2300      	movs	r3, #0
  407b0a:	6323      	str	r3, [r4, #48]	; 0x30
  407b0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407b10:	2200      	movs	r2, #0
  407b12:	61a2      	str	r2, [r4, #24]
  407b14:	6062      	str	r2, [r4, #4]
  407b16:	061a      	lsls	r2, r3, #24
  407b18:	d452      	bmi.n	407bc0 <setvbuf+0xfc>
  407b1a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  407b1e:	f023 0303 	bic.w	r3, r3, #3
  407b22:	f1b8 0f02 	cmp.w	r8, #2
  407b26:	81a3      	strh	r3, [r4, #12]
  407b28:	d037      	beq.n	407b9a <setvbuf+0xd6>
  407b2a:	ab01      	add	r3, sp, #4
  407b2c:	466a      	mov	r2, sp
  407b2e:	4621      	mov	r1, r4
  407b30:	4628      	mov	r0, r5
  407b32:	f003 fe91 	bl	40b858 <__swhatbuf_r>
  407b36:	89a3      	ldrh	r3, [r4, #12]
  407b38:	4318      	orrs	r0, r3
  407b3a:	81a0      	strh	r0, [r4, #12]
  407b3c:	b316      	cbz	r6, 407b84 <setvbuf+0xc0>
  407b3e:	b317      	cbz	r7, 407b86 <setvbuf+0xc2>
  407b40:	6bab      	ldr	r3, [r5, #56]	; 0x38
  407b42:	2b00      	cmp	r3, #0
  407b44:	d04b      	beq.n	407bde <setvbuf+0x11a>
  407b46:	9b00      	ldr	r3, [sp, #0]
  407b48:	6027      	str	r7, [r4, #0]
  407b4a:	429e      	cmp	r6, r3
  407b4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407b50:	6127      	str	r7, [r4, #16]
  407b52:	bf1c      	itt	ne
  407b54:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
  407b58:	81a3      	strhne	r3, [r4, #12]
  407b5a:	f1b8 0f01 	cmp.w	r8, #1
  407b5e:	bf04      	itt	eq
  407b60:	f043 0301 	orreq.w	r3, r3, #1
  407b64:	81a3      	strheq	r3, [r4, #12]
  407b66:	b29b      	uxth	r3, r3
  407b68:	f013 0008 	ands.w	r0, r3, #8
  407b6c:	6166      	str	r6, [r4, #20]
  407b6e:	d023      	beq.n	407bb8 <setvbuf+0xf4>
  407b70:	f013 0001 	ands.w	r0, r3, #1
  407b74:	d02f      	beq.n	407bd6 <setvbuf+0x112>
  407b76:	2000      	movs	r0, #0
  407b78:	4276      	negs	r6, r6
  407b7a:	61a6      	str	r6, [r4, #24]
  407b7c:	60a0      	str	r0, [r4, #8]
  407b7e:	b003      	add	sp, #12
  407b80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  407b84:	9e00      	ldr	r6, [sp, #0]
  407b86:	4630      	mov	r0, r6
  407b88:	f7ff fbde 	bl	407348 <malloc>
  407b8c:	4607      	mov	r7, r0
  407b8e:	b368      	cbz	r0, 407bec <setvbuf+0x128>
  407b90:	89a3      	ldrh	r3, [r4, #12]
  407b92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  407b96:	81a3      	strh	r3, [r4, #12]
  407b98:	e7d2      	b.n	407b40 <setvbuf+0x7c>
  407b9a:	2000      	movs	r0, #0
  407b9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
  407ba0:	f043 0302 	orr.w	r3, r3, #2
  407ba4:	2500      	movs	r5, #0
  407ba6:	2101      	movs	r1, #1
  407ba8:	81a3      	strh	r3, [r4, #12]
  407baa:	60a5      	str	r5, [r4, #8]
  407bac:	6022      	str	r2, [r4, #0]
  407bae:	6122      	str	r2, [r4, #16]
  407bb0:	6161      	str	r1, [r4, #20]
  407bb2:	b003      	add	sp, #12
  407bb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  407bb8:	60a0      	str	r0, [r4, #8]
  407bba:	b003      	add	sp, #12
  407bbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  407bc0:	6921      	ldr	r1, [r4, #16]
  407bc2:	4628      	mov	r0, r5
  407bc4:	f003 fba4 	bl	40b310 <_free_r>
  407bc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407bcc:	e7a5      	b.n	407b1a <setvbuf+0x56>
  407bce:	4628      	mov	r0, r5
  407bd0:	f003 fac8 	bl	40b164 <__sinit>
  407bd4:	e783      	b.n	407ade <setvbuf+0x1a>
  407bd6:	60a6      	str	r6, [r4, #8]
  407bd8:	b003      	add	sp, #12
  407bda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  407bde:	4628      	mov	r0, r5
  407be0:	f003 fac0 	bl	40b164 <__sinit>
  407be4:	e7af      	b.n	407b46 <setvbuf+0x82>
  407be6:	f04f 30ff 	mov.w	r0, #4294967295
  407bea:	e7e2      	b.n	407bb2 <setvbuf+0xee>
  407bec:	f8dd 9000 	ldr.w	r9, [sp]
  407bf0:	45b1      	cmp	r9, r6
  407bf2:	d006      	beq.n	407c02 <setvbuf+0x13e>
  407bf4:	4648      	mov	r0, r9
  407bf6:	f7ff fba7 	bl	407348 <malloc>
  407bfa:	4607      	mov	r7, r0
  407bfc:	b108      	cbz	r0, 407c02 <setvbuf+0x13e>
  407bfe:	464e      	mov	r6, r9
  407c00:	e7c6      	b.n	407b90 <setvbuf+0xcc>
  407c02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407c06:	f04f 30ff 	mov.w	r0, #4294967295
  407c0a:	e7c7      	b.n	407b9c <setvbuf+0xd8>
  407c0c:	20400048 	.word	0x20400048

00407c10 <sprintf>:
  407c10:	b40e      	push	{r1, r2, r3}
  407c12:	b5f0      	push	{r4, r5, r6, r7, lr}
  407c14:	b09c      	sub	sp, #112	; 0x70
  407c16:	ab21      	add	r3, sp, #132	; 0x84
  407c18:	490f      	ldr	r1, [pc, #60]	; (407c58 <sprintf+0x48>)
  407c1a:	f853 2b04 	ldr.w	r2, [r3], #4
  407c1e:	9301      	str	r3, [sp, #4]
  407c20:	4605      	mov	r5, r0
  407c22:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  407c26:	6808      	ldr	r0, [r1, #0]
  407c28:	9502      	str	r5, [sp, #8]
  407c2a:	f44f 7702 	mov.w	r7, #520	; 0x208
  407c2e:	f64f 76ff 	movw	r6, #65535	; 0xffff
  407c32:	a902      	add	r1, sp, #8
  407c34:	9506      	str	r5, [sp, #24]
  407c36:	f8ad 7014 	strh.w	r7, [sp, #20]
  407c3a:	9404      	str	r4, [sp, #16]
  407c3c:	9407      	str	r4, [sp, #28]
  407c3e:	f8ad 6016 	strh.w	r6, [sp, #22]
  407c42:	f000 f88b 	bl	407d5c <_svfprintf_r>
  407c46:	9b02      	ldr	r3, [sp, #8]
  407c48:	2200      	movs	r2, #0
  407c4a:	701a      	strb	r2, [r3, #0]
  407c4c:	b01c      	add	sp, #112	; 0x70
  407c4e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  407c52:	b003      	add	sp, #12
  407c54:	4770      	bx	lr
  407c56:	bf00      	nop
  407c58:	20400048 	.word	0x20400048
	...

00407c80 <strlen>:
  407c80:	f890 f000 	pld	[r0]
  407c84:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  407c88:	f020 0107 	bic.w	r1, r0, #7
  407c8c:	f06f 0c00 	mvn.w	ip, #0
  407c90:	f010 0407 	ands.w	r4, r0, #7
  407c94:	f891 f020 	pld	[r1, #32]
  407c98:	f040 8049 	bne.w	407d2e <strlen+0xae>
  407c9c:	f04f 0400 	mov.w	r4, #0
  407ca0:	f06f 0007 	mvn.w	r0, #7
  407ca4:	e9d1 2300 	ldrd	r2, r3, [r1]
  407ca8:	f891 f040 	pld	[r1, #64]	; 0x40
  407cac:	f100 0008 	add.w	r0, r0, #8
  407cb0:	fa82 f24c 	uadd8	r2, r2, ip
  407cb4:	faa4 f28c 	sel	r2, r4, ip
  407cb8:	fa83 f34c 	uadd8	r3, r3, ip
  407cbc:	faa2 f38c 	sel	r3, r2, ip
  407cc0:	bb4b      	cbnz	r3, 407d16 <strlen+0x96>
  407cc2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  407cc6:	fa82 f24c 	uadd8	r2, r2, ip
  407cca:	f100 0008 	add.w	r0, r0, #8
  407cce:	faa4 f28c 	sel	r2, r4, ip
  407cd2:	fa83 f34c 	uadd8	r3, r3, ip
  407cd6:	faa2 f38c 	sel	r3, r2, ip
  407cda:	b9e3      	cbnz	r3, 407d16 <strlen+0x96>
  407cdc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  407ce0:	fa82 f24c 	uadd8	r2, r2, ip
  407ce4:	f100 0008 	add.w	r0, r0, #8
  407ce8:	faa4 f28c 	sel	r2, r4, ip
  407cec:	fa83 f34c 	uadd8	r3, r3, ip
  407cf0:	faa2 f38c 	sel	r3, r2, ip
  407cf4:	b97b      	cbnz	r3, 407d16 <strlen+0x96>
  407cf6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  407cfa:	f101 0120 	add.w	r1, r1, #32
  407cfe:	fa82 f24c 	uadd8	r2, r2, ip
  407d02:	f100 0008 	add.w	r0, r0, #8
  407d06:	faa4 f28c 	sel	r2, r4, ip
  407d0a:	fa83 f34c 	uadd8	r3, r3, ip
  407d0e:	faa2 f38c 	sel	r3, r2, ip
  407d12:	2b00      	cmp	r3, #0
  407d14:	d0c6      	beq.n	407ca4 <strlen+0x24>
  407d16:	2a00      	cmp	r2, #0
  407d18:	bf04      	itt	eq
  407d1a:	3004      	addeq	r0, #4
  407d1c:	461a      	moveq	r2, r3
  407d1e:	ba12      	rev	r2, r2
  407d20:	fab2 f282 	clz	r2, r2
  407d24:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  407d28:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  407d2c:	4770      	bx	lr
  407d2e:	e9d1 2300 	ldrd	r2, r3, [r1]
  407d32:	f004 0503 	and.w	r5, r4, #3
  407d36:	f1c4 0000 	rsb	r0, r4, #0
  407d3a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  407d3e:	f014 0f04 	tst.w	r4, #4
  407d42:	f891 f040 	pld	[r1, #64]	; 0x40
  407d46:	fa0c f505 	lsl.w	r5, ip, r5
  407d4a:	ea62 0205 	orn	r2, r2, r5
  407d4e:	bf1c      	itt	ne
  407d50:	ea63 0305 	ornne	r3, r3, r5
  407d54:	4662      	movne	r2, ip
  407d56:	f04f 0400 	mov.w	r4, #0
  407d5a:	e7a9      	b.n	407cb0 <strlen+0x30>

00407d5c <_svfprintf_r>:
  407d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407d60:	b0c3      	sub	sp, #268	; 0x10c
  407d62:	460c      	mov	r4, r1
  407d64:	910b      	str	r1, [sp, #44]	; 0x2c
  407d66:	4692      	mov	sl, r2
  407d68:	930f      	str	r3, [sp, #60]	; 0x3c
  407d6a:	900c      	str	r0, [sp, #48]	; 0x30
  407d6c:	f003 fd66 	bl	40b83c <_localeconv_r>
  407d70:	6803      	ldr	r3, [r0, #0]
  407d72:	931a      	str	r3, [sp, #104]	; 0x68
  407d74:	4618      	mov	r0, r3
  407d76:	f7ff ff83 	bl	407c80 <strlen>
  407d7a:	89a3      	ldrh	r3, [r4, #12]
  407d7c:	9019      	str	r0, [sp, #100]	; 0x64
  407d7e:	0619      	lsls	r1, r3, #24
  407d80:	d503      	bpl.n	407d8a <_svfprintf_r+0x2e>
  407d82:	6923      	ldr	r3, [r4, #16]
  407d84:	2b00      	cmp	r3, #0
  407d86:	f001 8001 	beq.w	408d8c <_svfprintf_r+0x1030>
  407d8a:	2300      	movs	r3, #0
  407d8c:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  407d90:	9313      	str	r3, [sp, #76]	; 0x4c
  407d92:	9314      	str	r3, [sp, #80]	; 0x50
  407d94:	9315      	str	r3, [sp, #84]	; 0x54
  407d96:	9327      	str	r3, [sp, #156]	; 0x9c
  407d98:	9326      	str	r3, [sp, #152]	; 0x98
  407d9a:	9318      	str	r3, [sp, #96]	; 0x60
  407d9c:	931b      	str	r3, [sp, #108]	; 0x6c
  407d9e:	9309      	str	r3, [sp, #36]	; 0x24
  407da0:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  407da4:	46c8      	mov	r8, r9
  407da6:	9316      	str	r3, [sp, #88]	; 0x58
  407da8:	9317      	str	r3, [sp, #92]	; 0x5c
  407daa:	f89a 3000 	ldrb.w	r3, [sl]
  407dae:	4654      	mov	r4, sl
  407db0:	b1e3      	cbz	r3, 407dec <_svfprintf_r+0x90>
  407db2:	2b25      	cmp	r3, #37	; 0x25
  407db4:	d102      	bne.n	407dbc <_svfprintf_r+0x60>
  407db6:	e019      	b.n	407dec <_svfprintf_r+0x90>
  407db8:	2b25      	cmp	r3, #37	; 0x25
  407dba:	d003      	beq.n	407dc4 <_svfprintf_r+0x68>
  407dbc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  407dc0:	2b00      	cmp	r3, #0
  407dc2:	d1f9      	bne.n	407db8 <_svfprintf_r+0x5c>
  407dc4:	eba4 050a 	sub.w	r5, r4, sl
  407dc8:	b185      	cbz	r5, 407dec <_svfprintf_r+0x90>
  407dca:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407dcc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  407dce:	f8c8 a000 	str.w	sl, [r8]
  407dd2:	3301      	adds	r3, #1
  407dd4:	442a      	add	r2, r5
  407dd6:	2b07      	cmp	r3, #7
  407dd8:	f8c8 5004 	str.w	r5, [r8, #4]
  407ddc:	9227      	str	r2, [sp, #156]	; 0x9c
  407dde:	9326      	str	r3, [sp, #152]	; 0x98
  407de0:	dc7f      	bgt.n	407ee2 <_svfprintf_r+0x186>
  407de2:	f108 0808 	add.w	r8, r8, #8
  407de6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407de8:	442b      	add	r3, r5
  407dea:	9309      	str	r3, [sp, #36]	; 0x24
  407dec:	7823      	ldrb	r3, [r4, #0]
  407dee:	2b00      	cmp	r3, #0
  407df0:	d07f      	beq.n	407ef2 <_svfprintf_r+0x196>
  407df2:	2300      	movs	r3, #0
  407df4:	461a      	mov	r2, r3
  407df6:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  407dfa:	4619      	mov	r1, r3
  407dfc:	930d      	str	r3, [sp, #52]	; 0x34
  407dfe:	469b      	mov	fp, r3
  407e00:	f04f 30ff 	mov.w	r0, #4294967295
  407e04:	7863      	ldrb	r3, [r4, #1]
  407e06:	900a      	str	r0, [sp, #40]	; 0x28
  407e08:	f104 0a01 	add.w	sl, r4, #1
  407e0c:	f10a 0a01 	add.w	sl, sl, #1
  407e10:	f1a3 0020 	sub.w	r0, r3, #32
  407e14:	2858      	cmp	r0, #88	; 0x58
  407e16:	f200 83c0 	bhi.w	40859a <_svfprintf_r+0x83e>
  407e1a:	e8df f010 	tbh	[pc, r0, lsl #1]
  407e1e:	0238      	.short	0x0238
  407e20:	03be03be 	.word	0x03be03be
  407e24:	03be0240 	.word	0x03be0240
  407e28:	03be03be 	.word	0x03be03be
  407e2c:	03be03be 	.word	0x03be03be
  407e30:	024503be 	.word	0x024503be
  407e34:	03be0203 	.word	0x03be0203
  407e38:	026b005d 	.word	0x026b005d
  407e3c:	028603be 	.word	0x028603be
  407e40:	039c039c 	.word	0x039c039c
  407e44:	039c039c 	.word	0x039c039c
  407e48:	039c039c 	.word	0x039c039c
  407e4c:	039c039c 	.word	0x039c039c
  407e50:	03be039c 	.word	0x03be039c
  407e54:	03be03be 	.word	0x03be03be
  407e58:	03be03be 	.word	0x03be03be
  407e5c:	03be03be 	.word	0x03be03be
  407e60:	03be03be 	.word	0x03be03be
  407e64:	033703be 	.word	0x033703be
  407e68:	03be0357 	.word	0x03be0357
  407e6c:	03be0357 	.word	0x03be0357
  407e70:	03be03be 	.word	0x03be03be
  407e74:	039703be 	.word	0x039703be
  407e78:	03be03be 	.word	0x03be03be
  407e7c:	03be03ac 	.word	0x03be03ac
  407e80:	03be03be 	.word	0x03be03be
  407e84:	03be03be 	.word	0x03be03be
  407e88:	03be0259 	.word	0x03be0259
  407e8c:	031e03be 	.word	0x031e03be
  407e90:	03be03be 	.word	0x03be03be
  407e94:	03be03be 	.word	0x03be03be
  407e98:	03be03be 	.word	0x03be03be
  407e9c:	03be03be 	.word	0x03be03be
  407ea0:	03be03be 	.word	0x03be03be
  407ea4:	02db02c6 	.word	0x02db02c6
  407ea8:	03570357 	.word	0x03570357
  407eac:	028b0357 	.word	0x028b0357
  407eb0:	03be02db 	.word	0x03be02db
  407eb4:	029003be 	.word	0x029003be
  407eb8:	029d03be 	.word	0x029d03be
  407ebc:	02b401cc 	.word	0x02b401cc
  407ec0:	03be0208 	.word	0x03be0208
  407ec4:	03be01e1 	.word	0x03be01e1
  407ec8:	03be007e 	.word	0x03be007e
  407ecc:	020d03be 	.word	0x020d03be
  407ed0:	980d      	ldr	r0, [sp, #52]	; 0x34
  407ed2:	930f      	str	r3, [sp, #60]	; 0x3c
  407ed4:	4240      	negs	r0, r0
  407ed6:	900d      	str	r0, [sp, #52]	; 0x34
  407ed8:	f04b 0b04 	orr.w	fp, fp, #4
  407edc:	f89a 3000 	ldrb.w	r3, [sl]
  407ee0:	e794      	b.n	407e0c <_svfprintf_r+0xb0>
  407ee2:	aa25      	add	r2, sp, #148	; 0x94
  407ee4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407ee6:	980c      	ldr	r0, [sp, #48]	; 0x30
  407ee8:	f004 fada 	bl	40c4a0 <__ssprint_r>
  407eec:	b940      	cbnz	r0, 407f00 <_svfprintf_r+0x1a4>
  407eee:	46c8      	mov	r8, r9
  407ef0:	e779      	b.n	407de6 <_svfprintf_r+0x8a>
  407ef2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  407ef4:	b123      	cbz	r3, 407f00 <_svfprintf_r+0x1a4>
  407ef6:	980c      	ldr	r0, [sp, #48]	; 0x30
  407ef8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407efa:	aa25      	add	r2, sp, #148	; 0x94
  407efc:	f004 fad0 	bl	40c4a0 <__ssprint_r>
  407f00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  407f02:	899b      	ldrh	r3, [r3, #12]
  407f04:	f013 0f40 	tst.w	r3, #64	; 0x40
  407f08:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407f0a:	bf18      	it	ne
  407f0c:	f04f 33ff 	movne.w	r3, #4294967295
  407f10:	9309      	str	r3, [sp, #36]	; 0x24
  407f12:	9809      	ldr	r0, [sp, #36]	; 0x24
  407f14:	b043      	add	sp, #268	; 0x10c
  407f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407f1a:	f01b 0f20 	tst.w	fp, #32
  407f1e:	9311      	str	r3, [sp, #68]	; 0x44
  407f20:	f040 81dd 	bne.w	4082de <_svfprintf_r+0x582>
  407f24:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407f26:	f01b 0f10 	tst.w	fp, #16
  407f2a:	4613      	mov	r3, r2
  407f2c:	f040 856c 	bne.w	408a08 <_svfprintf_r+0xcac>
  407f30:	f01b 0f40 	tst.w	fp, #64	; 0x40
  407f34:	f000 8568 	beq.w	408a08 <_svfprintf_r+0xcac>
  407f38:	8814      	ldrh	r4, [r2, #0]
  407f3a:	3204      	adds	r2, #4
  407f3c:	2500      	movs	r5, #0
  407f3e:	2301      	movs	r3, #1
  407f40:	920f      	str	r2, [sp, #60]	; 0x3c
  407f42:	2700      	movs	r7, #0
  407f44:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  407f48:	990a      	ldr	r1, [sp, #40]	; 0x28
  407f4a:	1c4a      	adds	r2, r1, #1
  407f4c:	f000 8265 	beq.w	40841a <_svfprintf_r+0x6be>
  407f50:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  407f54:	9207      	str	r2, [sp, #28]
  407f56:	ea54 0205 	orrs.w	r2, r4, r5
  407f5a:	f040 8264 	bne.w	408426 <_svfprintf_r+0x6ca>
  407f5e:	2900      	cmp	r1, #0
  407f60:	f040 8439 	bne.w	4087d6 <_svfprintf_r+0xa7a>
  407f64:	2b00      	cmp	r3, #0
  407f66:	f040 84d4 	bne.w	408912 <_svfprintf_r+0xbb6>
  407f6a:	f01b 0301 	ands.w	r3, fp, #1
  407f6e:	930e      	str	r3, [sp, #56]	; 0x38
  407f70:	f000 8602 	beq.w	408b78 <_svfprintf_r+0xe1c>
  407f74:	ae42      	add	r6, sp, #264	; 0x108
  407f76:	2330      	movs	r3, #48	; 0x30
  407f78:	f806 3d41 	strb.w	r3, [r6, #-65]!
  407f7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407f7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  407f80:	4293      	cmp	r3, r2
  407f82:	bfb8      	it	lt
  407f84:	4613      	movlt	r3, r2
  407f86:	9308      	str	r3, [sp, #32]
  407f88:	2300      	movs	r3, #0
  407f8a:	9312      	str	r3, [sp, #72]	; 0x48
  407f8c:	b117      	cbz	r7, 407f94 <_svfprintf_r+0x238>
  407f8e:	9b08      	ldr	r3, [sp, #32]
  407f90:	3301      	adds	r3, #1
  407f92:	9308      	str	r3, [sp, #32]
  407f94:	9b07      	ldr	r3, [sp, #28]
  407f96:	f013 0302 	ands.w	r3, r3, #2
  407f9a:	9310      	str	r3, [sp, #64]	; 0x40
  407f9c:	d002      	beq.n	407fa4 <_svfprintf_r+0x248>
  407f9e:	9b08      	ldr	r3, [sp, #32]
  407fa0:	3302      	adds	r3, #2
  407fa2:	9308      	str	r3, [sp, #32]
  407fa4:	9b07      	ldr	r3, [sp, #28]
  407fa6:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  407faa:	f040 830d 	bne.w	4085c8 <_svfprintf_r+0x86c>
  407fae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407fb0:	9a08      	ldr	r2, [sp, #32]
  407fb2:	eba3 0b02 	sub.w	fp, r3, r2
  407fb6:	f1bb 0f00 	cmp.w	fp, #0
  407fba:	f340 8305 	ble.w	4085c8 <_svfprintf_r+0x86c>
  407fbe:	f1bb 0f10 	cmp.w	fp, #16
  407fc2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407fc4:	9a26      	ldr	r2, [sp, #152]	; 0x98
  407fc6:	dd29      	ble.n	40801c <_svfprintf_r+0x2c0>
  407fc8:	4643      	mov	r3, r8
  407fca:	4621      	mov	r1, r4
  407fcc:	46a8      	mov	r8, r5
  407fce:	2710      	movs	r7, #16
  407fd0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  407fd2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  407fd4:	e006      	b.n	407fe4 <_svfprintf_r+0x288>
  407fd6:	f1ab 0b10 	sub.w	fp, fp, #16
  407fda:	f1bb 0f10 	cmp.w	fp, #16
  407fde:	f103 0308 	add.w	r3, r3, #8
  407fe2:	dd18      	ble.n	408016 <_svfprintf_r+0x2ba>
  407fe4:	3201      	adds	r2, #1
  407fe6:	48b7      	ldr	r0, [pc, #732]	; (4082c4 <_svfprintf_r+0x568>)
  407fe8:	9226      	str	r2, [sp, #152]	; 0x98
  407fea:	3110      	adds	r1, #16
  407fec:	2a07      	cmp	r2, #7
  407fee:	9127      	str	r1, [sp, #156]	; 0x9c
  407ff0:	e883 0081 	stmia.w	r3, {r0, r7}
  407ff4:	ddef      	ble.n	407fd6 <_svfprintf_r+0x27a>
  407ff6:	aa25      	add	r2, sp, #148	; 0x94
  407ff8:	4629      	mov	r1, r5
  407ffa:	4620      	mov	r0, r4
  407ffc:	f004 fa50 	bl	40c4a0 <__ssprint_r>
  408000:	2800      	cmp	r0, #0
  408002:	f47f af7d 	bne.w	407f00 <_svfprintf_r+0x1a4>
  408006:	f1ab 0b10 	sub.w	fp, fp, #16
  40800a:	f1bb 0f10 	cmp.w	fp, #16
  40800e:	9927      	ldr	r1, [sp, #156]	; 0x9c
  408010:	9a26      	ldr	r2, [sp, #152]	; 0x98
  408012:	464b      	mov	r3, r9
  408014:	dce6      	bgt.n	407fe4 <_svfprintf_r+0x288>
  408016:	4645      	mov	r5, r8
  408018:	460c      	mov	r4, r1
  40801a:	4698      	mov	r8, r3
  40801c:	3201      	adds	r2, #1
  40801e:	4ba9      	ldr	r3, [pc, #676]	; (4082c4 <_svfprintf_r+0x568>)
  408020:	9226      	str	r2, [sp, #152]	; 0x98
  408022:	445c      	add	r4, fp
  408024:	2a07      	cmp	r2, #7
  408026:	9427      	str	r4, [sp, #156]	; 0x9c
  408028:	e888 0808 	stmia.w	r8, {r3, fp}
  40802c:	f300 8495 	bgt.w	40895a <_svfprintf_r+0xbfe>
  408030:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  408034:	f108 0808 	add.w	r8, r8, #8
  408038:	b177      	cbz	r7, 408058 <_svfprintf_r+0x2fc>
  40803a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40803c:	3301      	adds	r3, #1
  40803e:	3401      	adds	r4, #1
  408040:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  408044:	2201      	movs	r2, #1
  408046:	2b07      	cmp	r3, #7
  408048:	9427      	str	r4, [sp, #156]	; 0x9c
  40804a:	9326      	str	r3, [sp, #152]	; 0x98
  40804c:	e888 0006 	stmia.w	r8, {r1, r2}
  408050:	f300 83d8 	bgt.w	408804 <_svfprintf_r+0xaa8>
  408054:	f108 0808 	add.w	r8, r8, #8
  408058:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40805a:	b16b      	cbz	r3, 408078 <_svfprintf_r+0x31c>
  40805c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40805e:	3301      	adds	r3, #1
  408060:	3402      	adds	r4, #2
  408062:	a91e      	add	r1, sp, #120	; 0x78
  408064:	2202      	movs	r2, #2
  408066:	2b07      	cmp	r3, #7
  408068:	9427      	str	r4, [sp, #156]	; 0x9c
  40806a:	9326      	str	r3, [sp, #152]	; 0x98
  40806c:	e888 0006 	stmia.w	r8, {r1, r2}
  408070:	f300 83d3 	bgt.w	40881a <_svfprintf_r+0xabe>
  408074:	f108 0808 	add.w	r8, r8, #8
  408078:	2d80      	cmp	r5, #128	; 0x80
  40807a:	f000 8313 	beq.w	4086a4 <_svfprintf_r+0x948>
  40807e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408080:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  408082:	1a9f      	subs	r7, r3, r2
  408084:	2f00      	cmp	r7, #0
  408086:	dd36      	ble.n	4080f6 <_svfprintf_r+0x39a>
  408088:	2f10      	cmp	r7, #16
  40808a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40808c:	4d8e      	ldr	r5, [pc, #568]	; (4082c8 <_svfprintf_r+0x56c>)
  40808e:	dd27      	ble.n	4080e0 <_svfprintf_r+0x384>
  408090:	4642      	mov	r2, r8
  408092:	4621      	mov	r1, r4
  408094:	46b0      	mov	r8, r6
  408096:	f04f 0b10 	mov.w	fp, #16
  40809a:	462e      	mov	r6, r5
  40809c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40809e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4080a0:	e004      	b.n	4080ac <_svfprintf_r+0x350>
  4080a2:	3f10      	subs	r7, #16
  4080a4:	2f10      	cmp	r7, #16
  4080a6:	f102 0208 	add.w	r2, r2, #8
  4080aa:	dd15      	ble.n	4080d8 <_svfprintf_r+0x37c>
  4080ac:	3301      	adds	r3, #1
  4080ae:	3110      	adds	r1, #16
  4080b0:	2b07      	cmp	r3, #7
  4080b2:	9127      	str	r1, [sp, #156]	; 0x9c
  4080b4:	9326      	str	r3, [sp, #152]	; 0x98
  4080b6:	e882 0840 	stmia.w	r2, {r6, fp}
  4080ba:	ddf2      	ble.n	4080a2 <_svfprintf_r+0x346>
  4080bc:	aa25      	add	r2, sp, #148	; 0x94
  4080be:	4629      	mov	r1, r5
  4080c0:	4620      	mov	r0, r4
  4080c2:	f004 f9ed 	bl	40c4a0 <__ssprint_r>
  4080c6:	2800      	cmp	r0, #0
  4080c8:	f47f af1a 	bne.w	407f00 <_svfprintf_r+0x1a4>
  4080cc:	3f10      	subs	r7, #16
  4080ce:	2f10      	cmp	r7, #16
  4080d0:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4080d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4080d4:	464a      	mov	r2, r9
  4080d6:	dce9      	bgt.n	4080ac <_svfprintf_r+0x350>
  4080d8:	4635      	mov	r5, r6
  4080da:	460c      	mov	r4, r1
  4080dc:	4646      	mov	r6, r8
  4080de:	4690      	mov	r8, r2
  4080e0:	3301      	adds	r3, #1
  4080e2:	443c      	add	r4, r7
  4080e4:	2b07      	cmp	r3, #7
  4080e6:	9427      	str	r4, [sp, #156]	; 0x9c
  4080e8:	9326      	str	r3, [sp, #152]	; 0x98
  4080ea:	e888 00a0 	stmia.w	r8, {r5, r7}
  4080ee:	f300 837e 	bgt.w	4087ee <_svfprintf_r+0xa92>
  4080f2:	f108 0808 	add.w	r8, r8, #8
  4080f6:	9b07      	ldr	r3, [sp, #28]
  4080f8:	05df      	lsls	r7, r3, #23
  4080fa:	f100 8267 	bmi.w	4085cc <_svfprintf_r+0x870>
  4080fe:	9b26      	ldr	r3, [sp, #152]	; 0x98
  408100:	990e      	ldr	r1, [sp, #56]	; 0x38
  408102:	f8c8 6000 	str.w	r6, [r8]
  408106:	3301      	adds	r3, #1
  408108:	440c      	add	r4, r1
  40810a:	2b07      	cmp	r3, #7
  40810c:	9427      	str	r4, [sp, #156]	; 0x9c
  40810e:	f8c8 1004 	str.w	r1, [r8, #4]
  408112:	9326      	str	r3, [sp, #152]	; 0x98
  408114:	f300 834a 	bgt.w	4087ac <_svfprintf_r+0xa50>
  408118:	f108 0808 	add.w	r8, r8, #8
  40811c:	9b07      	ldr	r3, [sp, #28]
  40811e:	075b      	lsls	r3, r3, #29
  408120:	d53a      	bpl.n	408198 <_svfprintf_r+0x43c>
  408122:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408124:	9a08      	ldr	r2, [sp, #32]
  408126:	1a9d      	subs	r5, r3, r2
  408128:	2d00      	cmp	r5, #0
  40812a:	dd35      	ble.n	408198 <_svfprintf_r+0x43c>
  40812c:	2d10      	cmp	r5, #16
  40812e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  408130:	dd20      	ble.n	408174 <_svfprintf_r+0x418>
  408132:	2610      	movs	r6, #16
  408134:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  408136:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  40813a:	e004      	b.n	408146 <_svfprintf_r+0x3ea>
  40813c:	3d10      	subs	r5, #16
  40813e:	2d10      	cmp	r5, #16
  408140:	f108 0808 	add.w	r8, r8, #8
  408144:	dd16      	ble.n	408174 <_svfprintf_r+0x418>
  408146:	3301      	adds	r3, #1
  408148:	4a5e      	ldr	r2, [pc, #376]	; (4082c4 <_svfprintf_r+0x568>)
  40814a:	9326      	str	r3, [sp, #152]	; 0x98
  40814c:	3410      	adds	r4, #16
  40814e:	2b07      	cmp	r3, #7
  408150:	9427      	str	r4, [sp, #156]	; 0x9c
  408152:	e888 0044 	stmia.w	r8, {r2, r6}
  408156:	ddf1      	ble.n	40813c <_svfprintf_r+0x3e0>
  408158:	aa25      	add	r2, sp, #148	; 0x94
  40815a:	4659      	mov	r1, fp
  40815c:	4638      	mov	r0, r7
  40815e:	f004 f99f 	bl	40c4a0 <__ssprint_r>
  408162:	2800      	cmp	r0, #0
  408164:	f47f aecc 	bne.w	407f00 <_svfprintf_r+0x1a4>
  408168:	3d10      	subs	r5, #16
  40816a:	2d10      	cmp	r5, #16
  40816c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40816e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  408170:	46c8      	mov	r8, r9
  408172:	dce8      	bgt.n	408146 <_svfprintf_r+0x3ea>
  408174:	3301      	adds	r3, #1
  408176:	4a53      	ldr	r2, [pc, #332]	; (4082c4 <_svfprintf_r+0x568>)
  408178:	9326      	str	r3, [sp, #152]	; 0x98
  40817a:	442c      	add	r4, r5
  40817c:	2b07      	cmp	r3, #7
  40817e:	9427      	str	r4, [sp, #156]	; 0x9c
  408180:	e888 0024 	stmia.w	r8, {r2, r5}
  408184:	dd08      	ble.n	408198 <_svfprintf_r+0x43c>
  408186:	aa25      	add	r2, sp, #148	; 0x94
  408188:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40818a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40818c:	f004 f988 	bl	40c4a0 <__ssprint_r>
  408190:	2800      	cmp	r0, #0
  408192:	f47f aeb5 	bne.w	407f00 <_svfprintf_r+0x1a4>
  408196:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  408198:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40819a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40819c:	9908      	ldr	r1, [sp, #32]
  40819e:	428a      	cmp	r2, r1
  4081a0:	bfac      	ite	ge
  4081a2:	189b      	addge	r3, r3, r2
  4081a4:	185b      	addlt	r3, r3, r1
  4081a6:	9309      	str	r3, [sp, #36]	; 0x24
  4081a8:	2c00      	cmp	r4, #0
  4081aa:	f040 830a 	bne.w	4087c2 <_svfprintf_r+0xa66>
  4081ae:	2300      	movs	r3, #0
  4081b0:	9326      	str	r3, [sp, #152]	; 0x98
  4081b2:	46c8      	mov	r8, r9
  4081b4:	e5f9      	b.n	407daa <_svfprintf_r+0x4e>
  4081b6:	9311      	str	r3, [sp, #68]	; 0x44
  4081b8:	f01b 0320 	ands.w	r3, fp, #32
  4081bc:	f040 81e2 	bne.w	408584 <_svfprintf_r+0x828>
  4081c0:	f01b 0210 	ands.w	r2, fp, #16
  4081c4:	f040 842c 	bne.w	408a20 <_svfprintf_r+0xcc4>
  4081c8:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  4081cc:	f000 8428 	beq.w	408a20 <_svfprintf_r+0xcc4>
  4081d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4081d2:	4613      	mov	r3, r2
  4081d4:	460a      	mov	r2, r1
  4081d6:	3204      	adds	r2, #4
  4081d8:	880c      	ldrh	r4, [r1, #0]
  4081da:	920f      	str	r2, [sp, #60]	; 0x3c
  4081dc:	2500      	movs	r5, #0
  4081de:	e6b0      	b.n	407f42 <_svfprintf_r+0x1e6>
  4081e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4081e2:	9311      	str	r3, [sp, #68]	; 0x44
  4081e4:	6816      	ldr	r6, [r2, #0]
  4081e6:	2400      	movs	r4, #0
  4081e8:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  4081ec:	1d15      	adds	r5, r2, #4
  4081ee:	2e00      	cmp	r6, #0
  4081f0:	f000 86a5 	beq.w	408f3e <_svfprintf_r+0x11e2>
  4081f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4081f6:	1c53      	adds	r3, r2, #1
  4081f8:	f000 8607 	beq.w	408e0a <_svfprintf_r+0x10ae>
  4081fc:	4621      	mov	r1, r4
  4081fe:	4630      	mov	r0, r6
  408200:	f003 fbb6 	bl	40b970 <memchr>
  408204:	2800      	cmp	r0, #0
  408206:	f000 86df 	beq.w	408fc8 <_svfprintf_r+0x126c>
  40820a:	1b83      	subs	r3, r0, r6
  40820c:	930e      	str	r3, [sp, #56]	; 0x38
  40820e:	940a      	str	r4, [sp, #40]	; 0x28
  408210:	950f      	str	r5, [sp, #60]	; 0x3c
  408212:	f8cd b01c 	str.w	fp, [sp, #28]
  408216:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40821a:	9308      	str	r3, [sp, #32]
  40821c:	9412      	str	r4, [sp, #72]	; 0x48
  40821e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  408222:	e6b3      	b.n	407f8c <_svfprintf_r+0x230>
  408224:	f89a 3000 	ldrb.w	r3, [sl]
  408228:	2201      	movs	r2, #1
  40822a:	212b      	movs	r1, #43	; 0x2b
  40822c:	e5ee      	b.n	407e0c <_svfprintf_r+0xb0>
  40822e:	f04b 0b20 	orr.w	fp, fp, #32
  408232:	f89a 3000 	ldrb.w	r3, [sl]
  408236:	e5e9      	b.n	407e0c <_svfprintf_r+0xb0>
  408238:	9311      	str	r3, [sp, #68]	; 0x44
  40823a:	2a00      	cmp	r2, #0
  40823c:	f040 878d 	bne.w	40915a <_svfprintf_r+0x13fe>
  408240:	4b22      	ldr	r3, [pc, #136]	; (4082cc <_svfprintf_r+0x570>)
  408242:	9318      	str	r3, [sp, #96]	; 0x60
  408244:	f01b 0f20 	tst.w	fp, #32
  408248:	f040 8111 	bne.w	40846e <_svfprintf_r+0x712>
  40824c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40824e:	f01b 0f10 	tst.w	fp, #16
  408252:	4613      	mov	r3, r2
  408254:	f040 83df 	bne.w	408a16 <_svfprintf_r+0xcba>
  408258:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40825c:	f000 83db 	beq.w	408a16 <_svfprintf_r+0xcba>
  408260:	3304      	adds	r3, #4
  408262:	8814      	ldrh	r4, [r2, #0]
  408264:	930f      	str	r3, [sp, #60]	; 0x3c
  408266:	2500      	movs	r5, #0
  408268:	f01b 0f01 	tst.w	fp, #1
  40826c:	f000 810c 	beq.w	408488 <_svfprintf_r+0x72c>
  408270:	ea54 0305 	orrs.w	r3, r4, r5
  408274:	f000 8108 	beq.w	408488 <_svfprintf_r+0x72c>
  408278:	2330      	movs	r3, #48	; 0x30
  40827a:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  40827e:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  408282:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  408286:	f04b 0b02 	orr.w	fp, fp, #2
  40828a:	2302      	movs	r3, #2
  40828c:	e659      	b.n	407f42 <_svfprintf_r+0x1e6>
  40828e:	f89a 3000 	ldrb.w	r3, [sl]
  408292:	2900      	cmp	r1, #0
  408294:	f47f adba 	bne.w	407e0c <_svfprintf_r+0xb0>
  408298:	2201      	movs	r2, #1
  40829a:	2120      	movs	r1, #32
  40829c:	e5b6      	b.n	407e0c <_svfprintf_r+0xb0>
  40829e:	f04b 0b01 	orr.w	fp, fp, #1
  4082a2:	f89a 3000 	ldrb.w	r3, [sl]
  4082a6:	e5b1      	b.n	407e0c <_svfprintf_r+0xb0>
  4082a8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  4082aa:	6823      	ldr	r3, [r4, #0]
  4082ac:	930d      	str	r3, [sp, #52]	; 0x34
  4082ae:	4618      	mov	r0, r3
  4082b0:	2800      	cmp	r0, #0
  4082b2:	4623      	mov	r3, r4
  4082b4:	f103 0304 	add.w	r3, r3, #4
  4082b8:	f6ff ae0a 	blt.w	407ed0 <_svfprintf_r+0x174>
  4082bc:	930f      	str	r3, [sp, #60]	; 0x3c
  4082be:	f89a 3000 	ldrb.w	r3, [sl]
  4082c2:	e5a3      	b.n	407e0c <_svfprintf_r+0xb0>
  4082c4:	0040eba8 	.word	0x0040eba8
  4082c8:	0040ebb8 	.word	0x0040ebb8
  4082cc:	0040eb88 	.word	0x0040eb88
  4082d0:	f04b 0b10 	orr.w	fp, fp, #16
  4082d4:	f01b 0f20 	tst.w	fp, #32
  4082d8:	9311      	str	r3, [sp, #68]	; 0x44
  4082da:	f43f ae23 	beq.w	407f24 <_svfprintf_r+0x1c8>
  4082de:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4082e0:	3507      	adds	r5, #7
  4082e2:	f025 0307 	bic.w	r3, r5, #7
  4082e6:	f103 0208 	add.w	r2, r3, #8
  4082ea:	e9d3 4500 	ldrd	r4, r5, [r3]
  4082ee:	920f      	str	r2, [sp, #60]	; 0x3c
  4082f0:	2301      	movs	r3, #1
  4082f2:	e626      	b.n	407f42 <_svfprintf_r+0x1e6>
  4082f4:	f89a 3000 	ldrb.w	r3, [sl]
  4082f8:	2b2a      	cmp	r3, #42	; 0x2a
  4082fa:	f10a 0401 	add.w	r4, sl, #1
  4082fe:	f000 871f 	beq.w	409140 <_svfprintf_r+0x13e4>
  408302:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  408306:	2809      	cmp	r0, #9
  408308:	46a2      	mov	sl, r4
  40830a:	f200 86ab 	bhi.w	409064 <_svfprintf_r+0x1308>
  40830e:	2300      	movs	r3, #0
  408310:	461c      	mov	r4, r3
  408312:	f81a 3b01 	ldrb.w	r3, [sl], #1
  408316:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40831a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  40831e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  408322:	2809      	cmp	r0, #9
  408324:	d9f5      	bls.n	408312 <_svfprintf_r+0x5b6>
  408326:	940a      	str	r4, [sp, #40]	; 0x28
  408328:	e572      	b.n	407e10 <_svfprintf_r+0xb4>
  40832a:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  40832e:	f89a 3000 	ldrb.w	r3, [sl]
  408332:	e56b      	b.n	407e0c <_svfprintf_r+0xb0>
  408334:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  408338:	f89a 3000 	ldrb.w	r3, [sl]
  40833c:	e566      	b.n	407e0c <_svfprintf_r+0xb0>
  40833e:	f89a 3000 	ldrb.w	r3, [sl]
  408342:	2b6c      	cmp	r3, #108	; 0x6c
  408344:	bf03      	ittte	eq
  408346:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  40834a:	f04b 0b20 	orreq.w	fp, fp, #32
  40834e:	f10a 0a01 	addeq.w	sl, sl, #1
  408352:	f04b 0b10 	orrne.w	fp, fp, #16
  408356:	e559      	b.n	407e0c <_svfprintf_r+0xb0>
  408358:	2a00      	cmp	r2, #0
  40835a:	f040 8709 	bne.w	409170 <_svfprintf_r+0x1414>
  40835e:	f01b 0f20 	tst.w	fp, #32
  408362:	f040 84f7 	bne.w	408d54 <_svfprintf_r+0xff8>
  408366:	f01b 0f10 	tst.w	fp, #16
  40836a:	f040 84aa 	bne.w	408cc2 <_svfprintf_r+0xf66>
  40836e:	f01b 0f40 	tst.w	fp, #64	; 0x40
  408372:	f000 84a6 	beq.w	408cc2 <_svfprintf_r+0xf66>
  408376:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  408378:	6813      	ldr	r3, [r2, #0]
  40837a:	3204      	adds	r2, #4
  40837c:	920f      	str	r2, [sp, #60]	; 0x3c
  40837e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  408382:	801a      	strh	r2, [r3, #0]
  408384:	e511      	b.n	407daa <_svfprintf_r+0x4e>
  408386:	990f      	ldr	r1, [sp, #60]	; 0x3c
  408388:	4bb2      	ldr	r3, [pc, #712]	; (408654 <_svfprintf_r+0x8f8>)
  40838a:	680c      	ldr	r4, [r1, #0]
  40838c:	9318      	str	r3, [sp, #96]	; 0x60
  40838e:	2230      	movs	r2, #48	; 0x30
  408390:	2378      	movs	r3, #120	; 0x78
  408392:	3104      	adds	r1, #4
  408394:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  408398:	9311      	str	r3, [sp, #68]	; 0x44
  40839a:	f04b 0b02 	orr.w	fp, fp, #2
  40839e:	910f      	str	r1, [sp, #60]	; 0x3c
  4083a0:	2500      	movs	r5, #0
  4083a2:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  4083a6:	2302      	movs	r3, #2
  4083a8:	e5cb      	b.n	407f42 <_svfprintf_r+0x1e6>
  4083aa:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4083ac:	9311      	str	r3, [sp, #68]	; 0x44
  4083ae:	680a      	ldr	r2, [r1, #0]
  4083b0:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  4083b4:	2300      	movs	r3, #0
  4083b6:	460a      	mov	r2, r1
  4083b8:	461f      	mov	r7, r3
  4083ba:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4083be:	3204      	adds	r2, #4
  4083c0:	2301      	movs	r3, #1
  4083c2:	9308      	str	r3, [sp, #32]
  4083c4:	f8cd b01c 	str.w	fp, [sp, #28]
  4083c8:	970a      	str	r7, [sp, #40]	; 0x28
  4083ca:	9712      	str	r7, [sp, #72]	; 0x48
  4083cc:	920f      	str	r2, [sp, #60]	; 0x3c
  4083ce:	930e      	str	r3, [sp, #56]	; 0x38
  4083d0:	ae28      	add	r6, sp, #160	; 0xa0
  4083d2:	e5df      	b.n	407f94 <_svfprintf_r+0x238>
  4083d4:	9311      	str	r3, [sp, #68]	; 0x44
  4083d6:	2a00      	cmp	r2, #0
  4083d8:	f040 86e2 	bne.w	4091a0 <_svfprintf_r+0x1444>
  4083dc:	f01b 0f20 	tst.w	fp, #32
  4083e0:	d15d      	bne.n	40849e <_svfprintf_r+0x742>
  4083e2:	f01b 0f10 	tst.w	fp, #16
  4083e6:	f040 8306 	bne.w	4089f6 <_svfprintf_r+0xc9a>
  4083ea:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4083ee:	f000 8302 	beq.w	4089f6 <_svfprintf_r+0xc9a>
  4083f2:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4083f4:	f9b1 4000 	ldrsh.w	r4, [r1]
  4083f8:	3104      	adds	r1, #4
  4083fa:	17e5      	asrs	r5, r4, #31
  4083fc:	4622      	mov	r2, r4
  4083fe:	462b      	mov	r3, r5
  408400:	910f      	str	r1, [sp, #60]	; 0x3c
  408402:	2a00      	cmp	r2, #0
  408404:	f173 0300 	sbcs.w	r3, r3, #0
  408408:	db58      	blt.n	4084bc <_svfprintf_r+0x760>
  40840a:	990a      	ldr	r1, [sp, #40]	; 0x28
  40840c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  408410:	1c4a      	adds	r2, r1, #1
  408412:	f04f 0301 	mov.w	r3, #1
  408416:	f47f ad9b 	bne.w	407f50 <_svfprintf_r+0x1f4>
  40841a:	ea54 0205 	orrs.w	r2, r4, r5
  40841e:	f000 81dc 	beq.w	4087da <_svfprintf_r+0xa7e>
  408422:	f8cd b01c 	str.w	fp, [sp, #28]
  408426:	2b01      	cmp	r3, #1
  408428:	f000 8278 	beq.w	40891c <_svfprintf_r+0xbc0>
  40842c:	2b02      	cmp	r3, #2
  40842e:	f040 8203 	bne.w	408838 <_svfprintf_r+0xadc>
  408432:	9818      	ldr	r0, [sp, #96]	; 0x60
  408434:	464e      	mov	r6, r9
  408436:	0923      	lsrs	r3, r4, #4
  408438:	f004 010f 	and.w	r1, r4, #15
  40843c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  408440:	092a      	lsrs	r2, r5, #4
  408442:	461c      	mov	r4, r3
  408444:	4615      	mov	r5, r2
  408446:	5c43      	ldrb	r3, [r0, r1]
  408448:	f806 3d01 	strb.w	r3, [r6, #-1]!
  40844c:	ea54 0305 	orrs.w	r3, r4, r5
  408450:	d1f1      	bne.n	408436 <_svfprintf_r+0x6da>
  408452:	eba9 0306 	sub.w	r3, r9, r6
  408456:	930e      	str	r3, [sp, #56]	; 0x38
  408458:	e590      	b.n	407f7c <_svfprintf_r+0x220>
  40845a:	9311      	str	r3, [sp, #68]	; 0x44
  40845c:	2a00      	cmp	r2, #0
  40845e:	f040 869b 	bne.w	409198 <_svfprintf_r+0x143c>
  408462:	4b7d      	ldr	r3, [pc, #500]	; (408658 <_svfprintf_r+0x8fc>)
  408464:	9318      	str	r3, [sp, #96]	; 0x60
  408466:	f01b 0f20 	tst.w	fp, #32
  40846a:	f43f aeef 	beq.w	40824c <_svfprintf_r+0x4f0>
  40846e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  408470:	3507      	adds	r5, #7
  408472:	f025 0307 	bic.w	r3, r5, #7
  408476:	f103 0208 	add.w	r2, r3, #8
  40847a:	f01b 0f01 	tst.w	fp, #1
  40847e:	920f      	str	r2, [sp, #60]	; 0x3c
  408480:	e9d3 4500 	ldrd	r4, r5, [r3]
  408484:	f47f aef4 	bne.w	408270 <_svfprintf_r+0x514>
  408488:	2302      	movs	r3, #2
  40848a:	e55a      	b.n	407f42 <_svfprintf_r+0x1e6>
  40848c:	9311      	str	r3, [sp, #68]	; 0x44
  40848e:	2a00      	cmp	r2, #0
  408490:	f040 867e 	bne.w	409190 <_svfprintf_r+0x1434>
  408494:	f04b 0b10 	orr.w	fp, fp, #16
  408498:	f01b 0f20 	tst.w	fp, #32
  40849c:	d0a1      	beq.n	4083e2 <_svfprintf_r+0x686>
  40849e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4084a0:	3507      	adds	r5, #7
  4084a2:	f025 0507 	bic.w	r5, r5, #7
  4084a6:	e9d5 2300 	ldrd	r2, r3, [r5]
  4084aa:	2a00      	cmp	r2, #0
  4084ac:	f105 0108 	add.w	r1, r5, #8
  4084b0:	461d      	mov	r5, r3
  4084b2:	f173 0300 	sbcs.w	r3, r3, #0
  4084b6:	910f      	str	r1, [sp, #60]	; 0x3c
  4084b8:	4614      	mov	r4, r2
  4084ba:	daa6      	bge.n	40840a <_svfprintf_r+0x6ae>
  4084bc:	272d      	movs	r7, #45	; 0x2d
  4084be:	4264      	negs	r4, r4
  4084c0:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  4084c4:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4084c8:	2301      	movs	r3, #1
  4084ca:	e53d      	b.n	407f48 <_svfprintf_r+0x1ec>
  4084cc:	9311      	str	r3, [sp, #68]	; 0x44
  4084ce:	2a00      	cmp	r2, #0
  4084d0:	f040 865a 	bne.w	409188 <_svfprintf_r+0x142c>
  4084d4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4084d6:	3507      	adds	r5, #7
  4084d8:	f025 0307 	bic.w	r3, r5, #7
  4084dc:	f103 0208 	add.w	r2, r3, #8
  4084e0:	920f      	str	r2, [sp, #60]	; 0x3c
  4084e2:	681a      	ldr	r2, [r3, #0]
  4084e4:	9214      	str	r2, [sp, #80]	; 0x50
  4084e6:	685b      	ldr	r3, [r3, #4]
  4084e8:	9315      	str	r3, [sp, #84]	; 0x54
  4084ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4084ec:	9d14      	ldr	r5, [sp, #80]	; 0x50
  4084ee:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  4084f2:	4628      	mov	r0, r5
  4084f4:	4621      	mov	r1, r4
  4084f6:	f04f 32ff 	mov.w	r2, #4294967295
  4084fa:	4b58      	ldr	r3, [pc, #352]	; (40865c <_svfprintf_r+0x900>)
  4084fc:	f004 fe6c 	bl	40d1d8 <__aeabi_dcmpun>
  408500:	2800      	cmp	r0, #0
  408502:	f040 8348 	bne.w	408b96 <_svfprintf_r+0xe3a>
  408506:	4628      	mov	r0, r5
  408508:	4621      	mov	r1, r4
  40850a:	f04f 32ff 	mov.w	r2, #4294967295
  40850e:	4b53      	ldr	r3, [pc, #332]	; (40865c <_svfprintf_r+0x900>)
  408510:	f004 fe44 	bl	40d19c <__aeabi_dcmple>
  408514:	2800      	cmp	r0, #0
  408516:	f040 833e 	bne.w	408b96 <_svfprintf_r+0xe3a>
  40851a:	a814      	add	r0, sp, #80	; 0x50
  40851c:	c80f      	ldmia	r0, {r0, r1, r2, r3}
  40851e:	f004 fe33 	bl	40d188 <__aeabi_dcmplt>
  408522:	2800      	cmp	r0, #0
  408524:	f040 852f 	bne.w	408f86 <_svfprintf_r+0x122a>
  408528:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40852c:	4e4c      	ldr	r6, [pc, #304]	; (408660 <_svfprintf_r+0x904>)
  40852e:	4b4d      	ldr	r3, [pc, #308]	; (408664 <_svfprintf_r+0x908>)
  408530:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  408534:	9007      	str	r0, [sp, #28]
  408536:	9811      	ldr	r0, [sp, #68]	; 0x44
  408538:	2203      	movs	r2, #3
  40853a:	2100      	movs	r1, #0
  40853c:	9208      	str	r2, [sp, #32]
  40853e:	910a      	str	r1, [sp, #40]	; 0x28
  408540:	2847      	cmp	r0, #71	; 0x47
  408542:	bfd8      	it	le
  408544:	461e      	movle	r6, r3
  408546:	920e      	str	r2, [sp, #56]	; 0x38
  408548:	9112      	str	r1, [sp, #72]	; 0x48
  40854a:	e51f      	b.n	407f8c <_svfprintf_r+0x230>
  40854c:	f04b 0b08 	orr.w	fp, fp, #8
  408550:	f89a 3000 	ldrb.w	r3, [sl]
  408554:	e45a      	b.n	407e0c <_svfprintf_r+0xb0>
  408556:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40855a:	2300      	movs	r3, #0
  40855c:	461c      	mov	r4, r3
  40855e:	f81a 3b01 	ldrb.w	r3, [sl], #1
  408562:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  408566:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  40856a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40856e:	2809      	cmp	r0, #9
  408570:	d9f5      	bls.n	40855e <_svfprintf_r+0x802>
  408572:	940d      	str	r4, [sp, #52]	; 0x34
  408574:	e44c      	b.n	407e10 <_svfprintf_r+0xb4>
  408576:	f04b 0b10 	orr.w	fp, fp, #16
  40857a:	9311      	str	r3, [sp, #68]	; 0x44
  40857c:	f01b 0320 	ands.w	r3, fp, #32
  408580:	f43f ae1e 	beq.w	4081c0 <_svfprintf_r+0x464>
  408584:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  408586:	3507      	adds	r5, #7
  408588:	f025 0307 	bic.w	r3, r5, #7
  40858c:	f103 0208 	add.w	r2, r3, #8
  408590:	e9d3 4500 	ldrd	r4, r5, [r3]
  408594:	920f      	str	r2, [sp, #60]	; 0x3c
  408596:	2300      	movs	r3, #0
  408598:	e4d3      	b.n	407f42 <_svfprintf_r+0x1e6>
  40859a:	9311      	str	r3, [sp, #68]	; 0x44
  40859c:	2a00      	cmp	r2, #0
  40859e:	f040 85e0 	bne.w	409162 <_svfprintf_r+0x1406>
  4085a2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4085a4:	2a00      	cmp	r2, #0
  4085a6:	f43f aca4 	beq.w	407ef2 <_svfprintf_r+0x196>
  4085aa:	2300      	movs	r3, #0
  4085ac:	2101      	movs	r1, #1
  4085ae:	461f      	mov	r7, r3
  4085b0:	9108      	str	r1, [sp, #32]
  4085b2:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  4085b6:	f8cd b01c 	str.w	fp, [sp, #28]
  4085ba:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4085be:	930a      	str	r3, [sp, #40]	; 0x28
  4085c0:	9312      	str	r3, [sp, #72]	; 0x48
  4085c2:	910e      	str	r1, [sp, #56]	; 0x38
  4085c4:	ae28      	add	r6, sp, #160	; 0xa0
  4085c6:	e4e5      	b.n	407f94 <_svfprintf_r+0x238>
  4085c8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4085ca:	e535      	b.n	408038 <_svfprintf_r+0x2dc>
  4085cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4085ce:	2b65      	cmp	r3, #101	; 0x65
  4085d0:	f340 80a6 	ble.w	408720 <_svfprintf_r+0x9c4>
  4085d4:	a814      	add	r0, sp, #80	; 0x50
  4085d6:	c80f      	ldmia	r0, {r0, r1, r2, r3}
  4085d8:	f004 fdcc 	bl	40d174 <__aeabi_dcmpeq>
  4085dc:	2800      	cmp	r0, #0
  4085de:	f000 814f 	beq.w	408880 <_svfprintf_r+0xb24>
  4085e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4085e4:	4a20      	ldr	r2, [pc, #128]	; (408668 <_svfprintf_r+0x90c>)
  4085e6:	f8c8 2000 	str.w	r2, [r8]
  4085ea:	3301      	adds	r3, #1
  4085ec:	3401      	adds	r4, #1
  4085ee:	2201      	movs	r2, #1
  4085f0:	2b07      	cmp	r3, #7
  4085f2:	9427      	str	r4, [sp, #156]	; 0x9c
  4085f4:	9326      	str	r3, [sp, #152]	; 0x98
  4085f6:	f8c8 2004 	str.w	r2, [r8, #4]
  4085fa:	f300 836a 	bgt.w	408cd2 <_svfprintf_r+0xf76>
  4085fe:	f108 0808 	add.w	r8, r8, #8
  408602:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  408604:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  408606:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  408608:	4293      	cmp	r3, r2
  40860a:	db03      	blt.n	408614 <_svfprintf_r+0x8b8>
  40860c:	9b07      	ldr	r3, [sp, #28]
  40860e:	07dd      	lsls	r5, r3, #31
  408610:	f57f ad84 	bpl.w	40811c <_svfprintf_r+0x3c0>
  408614:	9b26      	ldr	r3, [sp, #152]	; 0x98
  408616:	9919      	ldr	r1, [sp, #100]	; 0x64
  408618:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40861a:	f8c8 2000 	str.w	r2, [r8]
  40861e:	3301      	adds	r3, #1
  408620:	440c      	add	r4, r1
  408622:	2b07      	cmp	r3, #7
  408624:	f8c8 1004 	str.w	r1, [r8, #4]
  408628:	9427      	str	r4, [sp, #156]	; 0x9c
  40862a:	9326      	str	r3, [sp, #152]	; 0x98
  40862c:	f300 839e 	bgt.w	408d6c <_svfprintf_r+0x1010>
  408630:	f108 0808 	add.w	r8, r8, #8
  408634:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  408636:	1e5e      	subs	r6, r3, #1
  408638:	2e00      	cmp	r6, #0
  40863a:	f77f ad6f 	ble.w	40811c <_svfprintf_r+0x3c0>
  40863e:	2e10      	cmp	r6, #16
  408640:	9b26      	ldr	r3, [sp, #152]	; 0x98
  408642:	4d0a      	ldr	r5, [pc, #40]	; (40866c <_svfprintf_r+0x910>)
  408644:	f340 81f5 	ble.w	408a32 <_svfprintf_r+0xcd6>
  408648:	4622      	mov	r2, r4
  40864a:	2710      	movs	r7, #16
  40864c:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  408650:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  408652:	e013      	b.n	40867c <_svfprintf_r+0x920>
  408654:	0040eb88 	.word	0x0040eb88
  408658:	0040eb74 	.word	0x0040eb74
  40865c:	7fefffff 	.word	0x7fefffff
  408660:	0040eb68 	.word	0x0040eb68
  408664:	0040eb64 	.word	0x0040eb64
  408668:	0040eba4 	.word	0x0040eba4
  40866c:	0040ebb8 	.word	0x0040ebb8
  408670:	f108 0808 	add.w	r8, r8, #8
  408674:	3e10      	subs	r6, #16
  408676:	2e10      	cmp	r6, #16
  408678:	f340 81da 	ble.w	408a30 <_svfprintf_r+0xcd4>
  40867c:	3301      	adds	r3, #1
  40867e:	3210      	adds	r2, #16
  408680:	2b07      	cmp	r3, #7
  408682:	9227      	str	r2, [sp, #156]	; 0x9c
  408684:	9326      	str	r3, [sp, #152]	; 0x98
  408686:	e888 00a0 	stmia.w	r8, {r5, r7}
  40868a:	ddf1      	ble.n	408670 <_svfprintf_r+0x914>
  40868c:	aa25      	add	r2, sp, #148	; 0x94
  40868e:	4621      	mov	r1, r4
  408690:	4658      	mov	r0, fp
  408692:	f003 ff05 	bl	40c4a0 <__ssprint_r>
  408696:	2800      	cmp	r0, #0
  408698:	f47f ac32 	bne.w	407f00 <_svfprintf_r+0x1a4>
  40869c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40869e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4086a0:	46c8      	mov	r8, r9
  4086a2:	e7e7      	b.n	408674 <_svfprintf_r+0x918>
  4086a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4086a6:	9a08      	ldr	r2, [sp, #32]
  4086a8:	1a9f      	subs	r7, r3, r2
  4086aa:	2f00      	cmp	r7, #0
  4086ac:	f77f ace7 	ble.w	40807e <_svfprintf_r+0x322>
  4086b0:	2f10      	cmp	r7, #16
  4086b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4086b4:	4db6      	ldr	r5, [pc, #728]	; (408990 <_svfprintf_r+0xc34>)
  4086b6:	dd27      	ble.n	408708 <_svfprintf_r+0x9ac>
  4086b8:	4642      	mov	r2, r8
  4086ba:	4621      	mov	r1, r4
  4086bc:	46b0      	mov	r8, r6
  4086be:	f04f 0b10 	mov.w	fp, #16
  4086c2:	462e      	mov	r6, r5
  4086c4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4086c6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4086c8:	e004      	b.n	4086d4 <_svfprintf_r+0x978>
  4086ca:	3f10      	subs	r7, #16
  4086cc:	2f10      	cmp	r7, #16
  4086ce:	f102 0208 	add.w	r2, r2, #8
  4086d2:	dd15      	ble.n	408700 <_svfprintf_r+0x9a4>
  4086d4:	3301      	adds	r3, #1
  4086d6:	3110      	adds	r1, #16
  4086d8:	2b07      	cmp	r3, #7
  4086da:	9127      	str	r1, [sp, #156]	; 0x9c
  4086dc:	9326      	str	r3, [sp, #152]	; 0x98
  4086de:	e882 0840 	stmia.w	r2, {r6, fp}
  4086e2:	ddf2      	ble.n	4086ca <_svfprintf_r+0x96e>
  4086e4:	aa25      	add	r2, sp, #148	; 0x94
  4086e6:	4629      	mov	r1, r5
  4086e8:	4620      	mov	r0, r4
  4086ea:	f003 fed9 	bl	40c4a0 <__ssprint_r>
  4086ee:	2800      	cmp	r0, #0
  4086f0:	f47f ac06 	bne.w	407f00 <_svfprintf_r+0x1a4>
  4086f4:	3f10      	subs	r7, #16
  4086f6:	2f10      	cmp	r7, #16
  4086f8:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4086fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4086fc:	464a      	mov	r2, r9
  4086fe:	dce9      	bgt.n	4086d4 <_svfprintf_r+0x978>
  408700:	4635      	mov	r5, r6
  408702:	460c      	mov	r4, r1
  408704:	4646      	mov	r6, r8
  408706:	4690      	mov	r8, r2
  408708:	3301      	adds	r3, #1
  40870a:	443c      	add	r4, r7
  40870c:	2b07      	cmp	r3, #7
  40870e:	9427      	str	r4, [sp, #156]	; 0x9c
  408710:	9326      	str	r3, [sp, #152]	; 0x98
  408712:	e888 00a0 	stmia.w	r8, {r5, r7}
  408716:	f300 8232 	bgt.w	408b7e <_svfprintf_r+0xe22>
  40871a:	f108 0808 	add.w	r8, r8, #8
  40871e:	e4ae      	b.n	40807e <_svfprintf_r+0x322>
  408720:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  408722:	9f26      	ldr	r7, [sp, #152]	; 0x98
  408724:	2b01      	cmp	r3, #1
  408726:	f340 81fe 	ble.w	408b26 <_svfprintf_r+0xdca>
  40872a:	3701      	adds	r7, #1
  40872c:	3401      	adds	r4, #1
  40872e:	2301      	movs	r3, #1
  408730:	2f07      	cmp	r7, #7
  408732:	9427      	str	r4, [sp, #156]	; 0x9c
  408734:	9726      	str	r7, [sp, #152]	; 0x98
  408736:	f8c8 6000 	str.w	r6, [r8]
  40873a:	f8c8 3004 	str.w	r3, [r8, #4]
  40873e:	f300 8203 	bgt.w	408b48 <_svfprintf_r+0xdec>
  408742:	f108 0808 	add.w	r8, r8, #8
  408746:	9a19      	ldr	r2, [sp, #100]	; 0x64
  408748:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  40874a:	f8c8 3000 	str.w	r3, [r8]
  40874e:	3701      	adds	r7, #1
  408750:	4414      	add	r4, r2
  408752:	2f07      	cmp	r7, #7
  408754:	9427      	str	r4, [sp, #156]	; 0x9c
  408756:	9726      	str	r7, [sp, #152]	; 0x98
  408758:	f8c8 2004 	str.w	r2, [r8, #4]
  40875c:	f300 8200 	bgt.w	408b60 <_svfprintf_r+0xe04>
  408760:	f108 0808 	add.w	r8, r8, #8
  408764:	a814      	add	r0, sp, #80	; 0x50
  408766:	c80f      	ldmia	r0, {r0, r1, r2, r3}
  408768:	f004 fd04 	bl	40d174 <__aeabi_dcmpeq>
  40876c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40876e:	2800      	cmp	r0, #0
  408770:	f040 8101 	bne.w	408976 <_svfprintf_r+0xc1a>
  408774:	3b01      	subs	r3, #1
  408776:	3701      	adds	r7, #1
  408778:	3601      	adds	r6, #1
  40877a:	441c      	add	r4, r3
  40877c:	2f07      	cmp	r7, #7
  40877e:	9726      	str	r7, [sp, #152]	; 0x98
  408780:	9427      	str	r4, [sp, #156]	; 0x9c
  408782:	f8c8 6000 	str.w	r6, [r8]
  408786:	f8c8 3004 	str.w	r3, [r8, #4]
  40878a:	f300 8128 	bgt.w	4089de <_svfprintf_r+0xc82>
  40878e:	f108 0808 	add.w	r8, r8, #8
  408792:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  408794:	f8c8 2004 	str.w	r2, [r8, #4]
  408798:	3701      	adds	r7, #1
  40879a:	4414      	add	r4, r2
  40879c:	ab21      	add	r3, sp, #132	; 0x84
  40879e:	2f07      	cmp	r7, #7
  4087a0:	9427      	str	r4, [sp, #156]	; 0x9c
  4087a2:	9726      	str	r7, [sp, #152]	; 0x98
  4087a4:	f8c8 3000 	str.w	r3, [r8]
  4087a8:	f77f acb6 	ble.w	408118 <_svfprintf_r+0x3bc>
  4087ac:	aa25      	add	r2, sp, #148	; 0x94
  4087ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4087b0:	980c      	ldr	r0, [sp, #48]	; 0x30
  4087b2:	f003 fe75 	bl	40c4a0 <__ssprint_r>
  4087b6:	2800      	cmp	r0, #0
  4087b8:	f47f aba2 	bne.w	407f00 <_svfprintf_r+0x1a4>
  4087bc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4087be:	46c8      	mov	r8, r9
  4087c0:	e4ac      	b.n	40811c <_svfprintf_r+0x3c0>
  4087c2:	aa25      	add	r2, sp, #148	; 0x94
  4087c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4087c6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4087c8:	f003 fe6a 	bl	40c4a0 <__ssprint_r>
  4087cc:	2800      	cmp	r0, #0
  4087ce:	f43f acee 	beq.w	4081ae <_svfprintf_r+0x452>
  4087d2:	f7ff bb95 	b.w	407f00 <_svfprintf_r+0x1a4>
  4087d6:	f8dd b01c 	ldr.w	fp, [sp, #28]
  4087da:	2b01      	cmp	r3, #1
  4087dc:	f000 8135 	beq.w	408a4a <_svfprintf_r+0xcee>
  4087e0:	2b02      	cmp	r3, #2
  4087e2:	d125      	bne.n	408830 <_svfprintf_r+0xad4>
  4087e4:	f8cd b01c 	str.w	fp, [sp, #28]
  4087e8:	2400      	movs	r4, #0
  4087ea:	2500      	movs	r5, #0
  4087ec:	e621      	b.n	408432 <_svfprintf_r+0x6d6>
  4087ee:	aa25      	add	r2, sp, #148	; 0x94
  4087f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4087f2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4087f4:	f003 fe54 	bl	40c4a0 <__ssprint_r>
  4087f8:	2800      	cmp	r0, #0
  4087fa:	f47f ab81 	bne.w	407f00 <_svfprintf_r+0x1a4>
  4087fe:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  408800:	46c8      	mov	r8, r9
  408802:	e478      	b.n	4080f6 <_svfprintf_r+0x39a>
  408804:	aa25      	add	r2, sp, #148	; 0x94
  408806:	990b      	ldr	r1, [sp, #44]	; 0x2c
  408808:	980c      	ldr	r0, [sp, #48]	; 0x30
  40880a:	f003 fe49 	bl	40c4a0 <__ssprint_r>
  40880e:	2800      	cmp	r0, #0
  408810:	f47f ab76 	bne.w	407f00 <_svfprintf_r+0x1a4>
  408814:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  408816:	46c8      	mov	r8, r9
  408818:	e41e      	b.n	408058 <_svfprintf_r+0x2fc>
  40881a:	aa25      	add	r2, sp, #148	; 0x94
  40881c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40881e:	980c      	ldr	r0, [sp, #48]	; 0x30
  408820:	f003 fe3e 	bl	40c4a0 <__ssprint_r>
  408824:	2800      	cmp	r0, #0
  408826:	f47f ab6b 	bne.w	407f00 <_svfprintf_r+0x1a4>
  40882a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40882c:	46c8      	mov	r8, r9
  40882e:	e423      	b.n	408078 <_svfprintf_r+0x31c>
  408830:	f8cd b01c 	str.w	fp, [sp, #28]
  408834:	2400      	movs	r4, #0
  408836:	2500      	movs	r5, #0
  408838:	4649      	mov	r1, r9
  40883a:	e000      	b.n	40883e <_svfprintf_r+0xae2>
  40883c:	4631      	mov	r1, r6
  40883e:	08e2      	lsrs	r2, r4, #3
  408840:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  408844:	08e8      	lsrs	r0, r5, #3
  408846:	f004 0307 	and.w	r3, r4, #7
  40884a:	4605      	mov	r5, r0
  40884c:	4614      	mov	r4, r2
  40884e:	3330      	adds	r3, #48	; 0x30
  408850:	ea54 0205 	orrs.w	r2, r4, r5
  408854:	f801 3c01 	strb.w	r3, [r1, #-1]
  408858:	f101 36ff 	add.w	r6, r1, #4294967295
  40885c:	d1ee      	bne.n	40883c <_svfprintf_r+0xae0>
  40885e:	9a07      	ldr	r2, [sp, #28]
  408860:	07d2      	lsls	r2, r2, #31
  408862:	f57f adf6 	bpl.w	408452 <_svfprintf_r+0x6f6>
  408866:	2b30      	cmp	r3, #48	; 0x30
  408868:	f43f adf3 	beq.w	408452 <_svfprintf_r+0x6f6>
  40886c:	3902      	subs	r1, #2
  40886e:	2330      	movs	r3, #48	; 0x30
  408870:	f806 3c01 	strb.w	r3, [r6, #-1]
  408874:	eba9 0301 	sub.w	r3, r9, r1
  408878:	930e      	str	r3, [sp, #56]	; 0x38
  40887a:	460e      	mov	r6, r1
  40887c:	f7ff bb7e 	b.w	407f7c <_svfprintf_r+0x220>
  408880:	991f      	ldr	r1, [sp, #124]	; 0x7c
  408882:	2900      	cmp	r1, #0
  408884:	f340 822f 	ble.w	408ce6 <_svfprintf_r+0xf8a>
  408888:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40888a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40888c:	4293      	cmp	r3, r2
  40888e:	bfa8      	it	ge
  408890:	4613      	movge	r3, r2
  408892:	2b00      	cmp	r3, #0
  408894:	461f      	mov	r7, r3
  408896:	dd0d      	ble.n	4088b4 <_svfprintf_r+0xb58>
  408898:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40889a:	f8c8 6000 	str.w	r6, [r8]
  40889e:	3301      	adds	r3, #1
  4088a0:	443c      	add	r4, r7
  4088a2:	2b07      	cmp	r3, #7
  4088a4:	9427      	str	r4, [sp, #156]	; 0x9c
  4088a6:	f8c8 7004 	str.w	r7, [r8, #4]
  4088aa:	9326      	str	r3, [sp, #152]	; 0x98
  4088ac:	f300 8320 	bgt.w	408ef0 <_svfprintf_r+0x1194>
  4088b0:	f108 0808 	add.w	r8, r8, #8
  4088b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4088b6:	2f00      	cmp	r7, #0
  4088b8:	bfa8      	it	ge
  4088ba:	1bdb      	subge	r3, r3, r7
  4088bc:	2b00      	cmp	r3, #0
  4088be:	461f      	mov	r7, r3
  4088c0:	f340 80d7 	ble.w	408a72 <_svfprintf_r+0xd16>
  4088c4:	2f10      	cmp	r7, #16
  4088c6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4088c8:	4d31      	ldr	r5, [pc, #196]	; (408990 <_svfprintf_r+0xc34>)
  4088ca:	f340 81ee 	ble.w	408caa <_svfprintf_r+0xf4e>
  4088ce:	4642      	mov	r2, r8
  4088d0:	4621      	mov	r1, r4
  4088d2:	46b0      	mov	r8, r6
  4088d4:	f04f 0b10 	mov.w	fp, #16
  4088d8:	462e      	mov	r6, r5
  4088da:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4088dc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4088de:	e004      	b.n	4088ea <_svfprintf_r+0xb8e>
  4088e0:	3208      	adds	r2, #8
  4088e2:	3f10      	subs	r7, #16
  4088e4:	2f10      	cmp	r7, #16
  4088e6:	f340 81dc 	ble.w	408ca2 <_svfprintf_r+0xf46>
  4088ea:	3301      	adds	r3, #1
  4088ec:	3110      	adds	r1, #16
  4088ee:	2b07      	cmp	r3, #7
  4088f0:	9127      	str	r1, [sp, #156]	; 0x9c
  4088f2:	9326      	str	r3, [sp, #152]	; 0x98
  4088f4:	e882 0840 	stmia.w	r2, {r6, fp}
  4088f8:	ddf2      	ble.n	4088e0 <_svfprintf_r+0xb84>
  4088fa:	aa25      	add	r2, sp, #148	; 0x94
  4088fc:	4629      	mov	r1, r5
  4088fe:	4620      	mov	r0, r4
  408900:	f003 fdce 	bl	40c4a0 <__ssprint_r>
  408904:	2800      	cmp	r0, #0
  408906:	f47f aafb 	bne.w	407f00 <_svfprintf_r+0x1a4>
  40890a:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40890c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40890e:	464a      	mov	r2, r9
  408910:	e7e7      	b.n	4088e2 <_svfprintf_r+0xb86>
  408912:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408914:	930e      	str	r3, [sp, #56]	; 0x38
  408916:	464e      	mov	r6, r9
  408918:	f7ff bb30 	b.w	407f7c <_svfprintf_r+0x220>
  40891c:	2d00      	cmp	r5, #0
  40891e:	bf08      	it	eq
  408920:	2c0a      	cmpeq	r4, #10
  408922:	f0c0 8090 	bcc.w	408a46 <_svfprintf_r+0xcea>
  408926:	464e      	mov	r6, r9
  408928:	4620      	mov	r0, r4
  40892a:	4629      	mov	r1, r5
  40892c:	220a      	movs	r2, #10
  40892e:	2300      	movs	r3, #0
  408930:	f004 fc90 	bl	40d254 <__aeabi_uldivmod>
  408934:	3230      	adds	r2, #48	; 0x30
  408936:	f806 2d01 	strb.w	r2, [r6, #-1]!
  40893a:	4620      	mov	r0, r4
  40893c:	4629      	mov	r1, r5
  40893e:	2300      	movs	r3, #0
  408940:	220a      	movs	r2, #10
  408942:	f004 fc87 	bl	40d254 <__aeabi_uldivmod>
  408946:	4604      	mov	r4, r0
  408948:	460d      	mov	r5, r1
  40894a:	ea54 0305 	orrs.w	r3, r4, r5
  40894e:	d1eb      	bne.n	408928 <_svfprintf_r+0xbcc>
  408950:	eba9 0306 	sub.w	r3, r9, r6
  408954:	930e      	str	r3, [sp, #56]	; 0x38
  408956:	f7ff bb11 	b.w	407f7c <_svfprintf_r+0x220>
  40895a:	aa25      	add	r2, sp, #148	; 0x94
  40895c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40895e:	980c      	ldr	r0, [sp, #48]	; 0x30
  408960:	f003 fd9e 	bl	40c4a0 <__ssprint_r>
  408964:	2800      	cmp	r0, #0
  408966:	f47f aacb 	bne.w	407f00 <_svfprintf_r+0x1a4>
  40896a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40896e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  408970:	46c8      	mov	r8, r9
  408972:	f7ff bb61 	b.w	408038 <_svfprintf_r+0x2dc>
  408976:	1e5e      	subs	r6, r3, #1
  408978:	2e00      	cmp	r6, #0
  40897a:	f77f af0a 	ble.w	408792 <_svfprintf_r+0xa36>
  40897e:	2e10      	cmp	r6, #16
  408980:	4d03      	ldr	r5, [pc, #12]	; (408990 <_svfprintf_r+0xc34>)
  408982:	dd23      	ble.n	4089cc <_svfprintf_r+0xc70>
  408984:	4622      	mov	r2, r4
  408986:	f04f 0b10 	mov.w	fp, #16
  40898a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40898c:	e007      	b.n	40899e <_svfprintf_r+0xc42>
  40898e:	bf00      	nop
  408990:	0040ebb8 	.word	0x0040ebb8
  408994:	3e10      	subs	r6, #16
  408996:	2e10      	cmp	r6, #16
  408998:	f108 0808 	add.w	r8, r8, #8
  40899c:	dd15      	ble.n	4089ca <_svfprintf_r+0xc6e>
  40899e:	3701      	adds	r7, #1
  4089a0:	3210      	adds	r2, #16
  4089a2:	2f07      	cmp	r7, #7
  4089a4:	9227      	str	r2, [sp, #156]	; 0x9c
  4089a6:	9726      	str	r7, [sp, #152]	; 0x98
  4089a8:	e888 0820 	stmia.w	r8, {r5, fp}
  4089ac:	ddf2      	ble.n	408994 <_svfprintf_r+0xc38>
  4089ae:	aa25      	add	r2, sp, #148	; 0x94
  4089b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4089b2:	4620      	mov	r0, r4
  4089b4:	f003 fd74 	bl	40c4a0 <__ssprint_r>
  4089b8:	2800      	cmp	r0, #0
  4089ba:	f47f aaa1 	bne.w	407f00 <_svfprintf_r+0x1a4>
  4089be:	3e10      	subs	r6, #16
  4089c0:	2e10      	cmp	r6, #16
  4089c2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4089c4:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4089c6:	46c8      	mov	r8, r9
  4089c8:	dce9      	bgt.n	40899e <_svfprintf_r+0xc42>
  4089ca:	4614      	mov	r4, r2
  4089cc:	3701      	adds	r7, #1
  4089ce:	4434      	add	r4, r6
  4089d0:	2f07      	cmp	r7, #7
  4089d2:	9427      	str	r4, [sp, #156]	; 0x9c
  4089d4:	9726      	str	r7, [sp, #152]	; 0x98
  4089d6:	e888 0060 	stmia.w	r8, {r5, r6}
  4089da:	f77f aed8 	ble.w	40878e <_svfprintf_r+0xa32>
  4089de:	aa25      	add	r2, sp, #148	; 0x94
  4089e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4089e2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4089e4:	f003 fd5c 	bl	40c4a0 <__ssprint_r>
  4089e8:	2800      	cmp	r0, #0
  4089ea:	f47f aa89 	bne.w	407f00 <_svfprintf_r+0x1a4>
  4089ee:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4089f0:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4089f2:	46c8      	mov	r8, r9
  4089f4:	e6cd      	b.n	408792 <_svfprintf_r+0xa36>
  4089f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4089f8:	6814      	ldr	r4, [r2, #0]
  4089fa:	4613      	mov	r3, r2
  4089fc:	3304      	adds	r3, #4
  4089fe:	17e5      	asrs	r5, r4, #31
  408a00:	930f      	str	r3, [sp, #60]	; 0x3c
  408a02:	4622      	mov	r2, r4
  408a04:	462b      	mov	r3, r5
  408a06:	e4fc      	b.n	408402 <_svfprintf_r+0x6a6>
  408a08:	3204      	adds	r2, #4
  408a0a:	681c      	ldr	r4, [r3, #0]
  408a0c:	920f      	str	r2, [sp, #60]	; 0x3c
  408a0e:	2301      	movs	r3, #1
  408a10:	2500      	movs	r5, #0
  408a12:	f7ff ba96 	b.w	407f42 <_svfprintf_r+0x1e6>
  408a16:	681c      	ldr	r4, [r3, #0]
  408a18:	3304      	adds	r3, #4
  408a1a:	930f      	str	r3, [sp, #60]	; 0x3c
  408a1c:	2500      	movs	r5, #0
  408a1e:	e423      	b.n	408268 <_svfprintf_r+0x50c>
  408a20:	990f      	ldr	r1, [sp, #60]	; 0x3c
  408a22:	460a      	mov	r2, r1
  408a24:	3204      	adds	r2, #4
  408a26:	680c      	ldr	r4, [r1, #0]
  408a28:	920f      	str	r2, [sp, #60]	; 0x3c
  408a2a:	2500      	movs	r5, #0
  408a2c:	f7ff ba89 	b.w	407f42 <_svfprintf_r+0x1e6>
  408a30:	4614      	mov	r4, r2
  408a32:	3301      	adds	r3, #1
  408a34:	4434      	add	r4, r6
  408a36:	2b07      	cmp	r3, #7
  408a38:	9427      	str	r4, [sp, #156]	; 0x9c
  408a3a:	9326      	str	r3, [sp, #152]	; 0x98
  408a3c:	e888 0060 	stmia.w	r8, {r5, r6}
  408a40:	f77f ab6a 	ble.w	408118 <_svfprintf_r+0x3bc>
  408a44:	e6b2      	b.n	4087ac <_svfprintf_r+0xa50>
  408a46:	f8dd b01c 	ldr.w	fp, [sp, #28]
  408a4a:	f8cd b01c 	str.w	fp, [sp, #28]
  408a4e:	ae42      	add	r6, sp, #264	; 0x108
  408a50:	3430      	adds	r4, #48	; 0x30
  408a52:	2301      	movs	r3, #1
  408a54:	f806 4d41 	strb.w	r4, [r6, #-65]!
  408a58:	930e      	str	r3, [sp, #56]	; 0x38
  408a5a:	f7ff ba8f 	b.w	407f7c <_svfprintf_r+0x220>
  408a5e:	aa25      	add	r2, sp, #148	; 0x94
  408a60:	990b      	ldr	r1, [sp, #44]	; 0x2c
  408a62:	980c      	ldr	r0, [sp, #48]	; 0x30
  408a64:	f003 fd1c 	bl	40c4a0 <__ssprint_r>
  408a68:	2800      	cmp	r0, #0
  408a6a:	f47f aa49 	bne.w	407f00 <_svfprintf_r+0x1a4>
  408a6e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  408a70:	46c8      	mov	r8, r9
  408a72:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  408a74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  408a76:	429a      	cmp	r2, r3
  408a78:	db44      	blt.n	408b04 <_svfprintf_r+0xda8>
  408a7a:	9b07      	ldr	r3, [sp, #28]
  408a7c:	07d9      	lsls	r1, r3, #31
  408a7e:	d441      	bmi.n	408b04 <_svfprintf_r+0xda8>
  408a80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  408a82:	9812      	ldr	r0, [sp, #72]	; 0x48
  408a84:	1a9a      	subs	r2, r3, r2
  408a86:	1a1d      	subs	r5, r3, r0
  408a88:	4295      	cmp	r5, r2
  408a8a:	bfa8      	it	ge
  408a8c:	4615      	movge	r5, r2
  408a8e:	2d00      	cmp	r5, #0
  408a90:	dd0e      	ble.n	408ab0 <_svfprintf_r+0xd54>
  408a92:	9926      	ldr	r1, [sp, #152]	; 0x98
  408a94:	f8c8 5004 	str.w	r5, [r8, #4]
  408a98:	3101      	adds	r1, #1
  408a9a:	4406      	add	r6, r0
  408a9c:	442c      	add	r4, r5
  408a9e:	2907      	cmp	r1, #7
  408aa0:	f8c8 6000 	str.w	r6, [r8]
  408aa4:	9427      	str	r4, [sp, #156]	; 0x9c
  408aa6:	9126      	str	r1, [sp, #152]	; 0x98
  408aa8:	f300 823b 	bgt.w	408f22 <_svfprintf_r+0x11c6>
  408aac:	f108 0808 	add.w	r8, r8, #8
  408ab0:	2d00      	cmp	r5, #0
  408ab2:	bfac      	ite	ge
  408ab4:	1b56      	subge	r6, r2, r5
  408ab6:	4616      	movlt	r6, r2
  408ab8:	2e00      	cmp	r6, #0
  408aba:	f77f ab2f 	ble.w	40811c <_svfprintf_r+0x3c0>
  408abe:	2e10      	cmp	r6, #16
  408ac0:	9b26      	ldr	r3, [sp, #152]	; 0x98
  408ac2:	4db0      	ldr	r5, [pc, #704]	; (408d84 <_svfprintf_r+0x1028>)
  408ac4:	ddb5      	ble.n	408a32 <_svfprintf_r+0xcd6>
  408ac6:	4622      	mov	r2, r4
  408ac8:	2710      	movs	r7, #16
  408aca:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  408ace:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  408ad0:	e004      	b.n	408adc <_svfprintf_r+0xd80>
  408ad2:	f108 0808 	add.w	r8, r8, #8
  408ad6:	3e10      	subs	r6, #16
  408ad8:	2e10      	cmp	r6, #16
  408ada:	dda9      	ble.n	408a30 <_svfprintf_r+0xcd4>
  408adc:	3301      	adds	r3, #1
  408ade:	3210      	adds	r2, #16
  408ae0:	2b07      	cmp	r3, #7
  408ae2:	9227      	str	r2, [sp, #156]	; 0x9c
  408ae4:	9326      	str	r3, [sp, #152]	; 0x98
  408ae6:	e888 00a0 	stmia.w	r8, {r5, r7}
  408aea:	ddf2      	ble.n	408ad2 <_svfprintf_r+0xd76>
  408aec:	aa25      	add	r2, sp, #148	; 0x94
  408aee:	4621      	mov	r1, r4
  408af0:	4658      	mov	r0, fp
  408af2:	f003 fcd5 	bl	40c4a0 <__ssprint_r>
  408af6:	2800      	cmp	r0, #0
  408af8:	f47f aa02 	bne.w	407f00 <_svfprintf_r+0x1a4>
  408afc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  408afe:	9b26      	ldr	r3, [sp, #152]	; 0x98
  408b00:	46c8      	mov	r8, r9
  408b02:	e7e8      	b.n	408ad6 <_svfprintf_r+0xd7a>
  408b04:	9b26      	ldr	r3, [sp, #152]	; 0x98
  408b06:	9819      	ldr	r0, [sp, #100]	; 0x64
  408b08:	991a      	ldr	r1, [sp, #104]	; 0x68
  408b0a:	f8c8 1000 	str.w	r1, [r8]
  408b0e:	3301      	adds	r3, #1
  408b10:	4404      	add	r4, r0
  408b12:	2b07      	cmp	r3, #7
  408b14:	9427      	str	r4, [sp, #156]	; 0x9c
  408b16:	f8c8 0004 	str.w	r0, [r8, #4]
  408b1a:	9326      	str	r3, [sp, #152]	; 0x98
  408b1c:	f300 81f5 	bgt.w	408f0a <_svfprintf_r+0x11ae>
  408b20:	f108 0808 	add.w	r8, r8, #8
  408b24:	e7ac      	b.n	408a80 <_svfprintf_r+0xd24>
  408b26:	9b07      	ldr	r3, [sp, #28]
  408b28:	07da      	lsls	r2, r3, #31
  408b2a:	f53f adfe 	bmi.w	40872a <_svfprintf_r+0x9ce>
  408b2e:	3701      	adds	r7, #1
  408b30:	3401      	adds	r4, #1
  408b32:	2301      	movs	r3, #1
  408b34:	2f07      	cmp	r7, #7
  408b36:	9427      	str	r4, [sp, #156]	; 0x9c
  408b38:	9726      	str	r7, [sp, #152]	; 0x98
  408b3a:	f8c8 6000 	str.w	r6, [r8]
  408b3e:	f8c8 3004 	str.w	r3, [r8, #4]
  408b42:	f77f ae24 	ble.w	40878e <_svfprintf_r+0xa32>
  408b46:	e74a      	b.n	4089de <_svfprintf_r+0xc82>
  408b48:	aa25      	add	r2, sp, #148	; 0x94
  408b4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  408b4c:	980c      	ldr	r0, [sp, #48]	; 0x30
  408b4e:	f003 fca7 	bl	40c4a0 <__ssprint_r>
  408b52:	2800      	cmp	r0, #0
  408b54:	f47f a9d4 	bne.w	407f00 <_svfprintf_r+0x1a4>
  408b58:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  408b5a:	9f26      	ldr	r7, [sp, #152]	; 0x98
  408b5c:	46c8      	mov	r8, r9
  408b5e:	e5f2      	b.n	408746 <_svfprintf_r+0x9ea>
  408b60:	aa25      	add	r2, sp, #148	; 0x94
  408b62:	990b      	ldr	r1, [sp, #44]	; 0x2c
  408b64:	980c      	ldr	r0, [sp, #48]	; 0x30
  408b66:	f003 fc9b 	bl	40c4a0 <__ssprint_r>
  408b6a:	2800      	cmp	r0, #0
  408b6c:	f47f a9c8 	bne.w	407f00 <_svfprintf_r+0x1a4>
  408b70:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  408b72:	9f26      	ldr	r7, [sp, #152]	; 0x98
  408b74:	46c8      	mov	r8, r9
  408b76:	e5f5      	b.n	408764 <_svfprintf_r+0xa08>
  408b78:	464e      	mov	r6, r9
  408b7a:	f7ff b9ff 	b.w	407f7c <_svfprintf_r+0x220>
  408b7e:	aa25      	add	r2, sp, #148	; 0x94
  408b80:	990b      	ldr	r1, [sp, #44]	; 0x2c
  408b82:	980c      	ldr	r0, [sp, #48]	; 0x30
  408b84:	f003 fc8c 	bl	40c4a0 <__ssprint_r>
  408b88:	2800      	cmp	r0, #0
  408b8a:	f47f a9b9 	bne.w	407f00 <_svfprintf_r+0x1a4>
  408b8e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  408b90:	46c8      	mov	r8, r9
  408b92:	f7ff ba74 	b.w	40807e <_svfprintf_r+0x322>
  408b96:	9c14      	ldr	r4, [sp, #80]	; 0x50
  408b98:	4622      	mov	r2, r4
  408b9a:	4620      	mov	r0, r4
  408b9c:	9c15      	ldr	r4, [sp, #84]	; 0x54
  408b9e:	4623      	mov	r3, r4
  408ba0:	4621      	mov	r1, r4
  408ba2:	f004 fb19 	bl	40d1d8 <__aeabi_dcmpun>
  408ba6:	2800      	cmp	r0, #0
  408ba8:	f040 8286 	bne.w	4090b8 <_svfprintf_r+0x135c>
  408bac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408bae:	3301      	adds	r3, #1
  408bb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408bb2:	f023 0320 	bic.w	r3, r3, #32
  408bb6:	930e      	str	r3, [sp, #56]	; 0x38
  408bb8:	f000 81e2 	beq.w	408f80 <_svfprintf_r+0x1224>
  408bbc:	2b47      	cmp	r3, #71	; 0x47
  408bbe:	f000 811e 	beq.w	408dfe <_svfprintf_r+0x10a2>
  408bc2:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  408bc6:	9307      	str	r3, [sp, #28]
  408bc8:	9b15      	ldr	r3, [sp, #84]	; 0x54
  408bca:	1e1f      	subs	r7, r3, #0
  408bcc:	9b14      	ldr	r3, [sp, #80]	; 0x50
  408bce:	9308      	str	r3, [sp, #32]
  408bd0:	bfbb      	ittet	lt
  408bd2:	463b      	movlt	r3, r7
  408bd4:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  408bd8:	2300      	movge	r3, #0
  408bda:	232d      	movlt	r3, #45	; 0x2d
  408bdc:	9310      	str	r3, [sp, #64]	; 0x40
  408bde:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408be0:	2b66      	cmp	r3, #102	; 0x66
  408be2:	f000 81bb 	beq.w	408f5c <_svfprintf_r+0x1200>
  408be6:	2b46      	cmp	r3, #70	; 0x46
  408be8:	f000 80df 	beq.w	408daa <_svfprintf_r+0x104e>
  408bec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  408bee:	9a08      	ldr	r2, [sp, #32]
  408bf0:	2b45      	cmp	r3, #69	; 0x45
  408bf2:	bf0c      	ite	eq
  408bf4:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  408bf6:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  408bf8:	a823      	add	r0, sp, #140	; 0x8c
  408bfa:	a920      	add	r1, sp, #128	; 0x80
  408bfc:	bf08      	it	eq
  408bfe:	1c5d      	addeq	r5, r3, #1
  408c00:	9004      	str	r0, [sp, #16]
  408c02:	9103      	str	r1, [sp, #12]
  408c04:	a81f      	add	r0, sp, #124	; 0x7c
  408c06:	2102      	movs	r1, #2
  408c08:	463b      	mov	r3, r7
  408c0a:	9002      	str	r0, [sp, #8]
  408c0c:	9501      	str	r5, [sp, #4]
  408c0e:	9100      	str	r1, [sp, #0]
  408c10:	980c      	ldr	r0, [sp, #48]	; 0x30
  408c12:	f001 fa49 	bl	40a0a8 <_dtoa_r>
  408c16:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408c18:	2b67      	cmp	r3, #103	; 0x67
  408c1a:	4606      	mov	r6, r0
  408c1c:	f040 81e0 	bne.w	408fe0 <_svfprintf_r+0x1284>
  408c20:	f01b 0f01 	tst.w	fp, #1
  408c24:	f000 8246 	beq.w	4090b4 <_svfprintf_r+0x1358>
  408c28:	1974      	adds	r4, r6, r5
  408c2a:	9a16      	ldr	r2, [sp, #88]	; 0x58
  408c2c:	9808      	ldr	r0, [sp, #32]
  408c2e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  408c30:	4639      	mov	r1, r7
  408c32:	f004 fa9f 	bl	40d174 <__aeabi_dcmpeq>
  408c36:	2800      	cmp	r0, #0
  408c38:	f040 8165 	bne.w	408f06 <_svfprintf_r+0x11aa>
  408c3c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  408c3e:	42a3      	cmp	r3, r4
  408c40:	d206      	bcs.n	408c50 <_svfprintf_r+0xef4>
  408c42:	2130      	movs	r1, #48	; 0x30
  408c44:	1c5a      	adds	r2, r3, #1
  408c46:	9223      	str	r2, [sp, #140]	; 0x8c
  408c48:	7019      	strb	r1, [r3, #0]
  408c4a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  408c4c:	429c      	cmp	r4, r3
  408c4e:	d8f9      	bhi.n	408c44 <_svfprintf_r+0xee8>
  408c50:	1b9b      	subs	r3, r3, r6
  408c52:	9313      	str	r3, [sp, #76]	; 0x4c
  408c54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  408c56:	2b47      	cmp	r3, #71	; 0x47
  408c58:	f000 80e9 	beq.w	408e2e <_svfprintf_r+0x10d2>
  408c5c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408c5e:	2b65      	cmp	r3, #101	; 0x65
  408c60:	f340 81cd 	ble.w	408ffe <_svfprintf_r+0x12a2>
  408c64:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408c66:	2b66      	cmp	r3, #102	; 0x66
  408c68:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  408c6a:	9312      	str	r3, [sp, #72]	; 0x48
  408c6c:	f000 819e 	beq.w	408fac <_svfprintf_r+0x1250>
  408c70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  408c72:	9a12      	ldr	r2, [sp, #72]	; 0x48
  408c74:	4619      	mov	r1, r3
  408c76:	4291      	cmp	r1, r2
  408c78:	f300 818a 	bgt.w	408f90 <_svfprintf_r+0x1234>
  408c7c:	f01b 0f01 	tst.w	fp, #1
  408c80:	f040 8213 	bne.w	4090aa <_svfprintf_r+0x134e>
  408c84:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  408c88:	9308      	str	r3, [sp, #32]
  408c8a:	2367      	movs	r3, #103	; 0x67
  408c8c:	920e      	str	r2, [sp, #56]	; 0x38
  408c8e:	9311      	str	r3, [sp, #68]	; 0x44
  408c90:	9b10      	ldr	r3, [sp, #64]	; 0x40
  408c92:	2b00      	cmp	r3, #0
  408c94:	f040 80c4 	bne.w	408e20 <_svfprintf_r+0x10c4>
  408c98:	930a      	str	r3, [sp, #40]	; 0x28
  408c9a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  408c9e:	f7ff b975 	b.w	407f8c <_svfprintf_r+0x230>
  408ca2:	4635      	mov	r5, r6
  408ca4:	460c      	mov	r4, r1
  408ca6:	4646      	mov	r6, r8
  408ca8:	4690      	mov	r8, r2
  408caa:	3301      	adds	r3, #1
  408cac:	443c      	add	r4, r7
  408cae:	2b07      	cmp	r3, #7
  408cb0:	9427      	str	r4, [sp, #156]	; 0x9c
  408cb2:	9326      	str	r3, [sp, #152]	; 0x98
  408cb4:	e888 00a0 	stmia.w	r8, {r5, r7}
  408cb8:	f73f aed1 	bgt.w	408a5e <_svfprintf_r+0xd02>
  408cbc:	f108 0808 	add.w	r8, r8, #8
  408cc0:	e6d7      	b.n	408a72 <_svfprintf_r+0xd16>
  408cc2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  408cc4:	6813      	ldr	r3, [r2, #0]
  408cc6:	3204      	adds	r2, #4
  408cc8:	920f      	str	r2, [sp, #60]	; 0x3c
  408cca:	9a09      	ldr	r2, [sp, #36]	; 0x24
  408ccc:	601a      	str	r2, [r3, #0]
  408cce:	f7ff b86c 	b.w	407daa <_svfprintf_r+0x4e>
  408cd2:	aa25      	add	r2, sp, #148	; 0x94
  408cd4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  408cd6:	980c      	ldr	r0, [sp, #48]	; 0x30
  408cd8:	f003 fbe2 	bl	40c4a0 <__ssprint_r>
  408cdc:	2800      	cmp	r0, #0
  408cde:	f47f a90f 	bne.w	407f00 <_svfprintf_r+0x1a4>
  408ce2:	46c8      	mov	r8, r9
  408ce4:	e48d      	b.n	408602 <_svfprintf_r+0x8a6>
  408ce6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  408ce8:	4a27      	ldr	r2, [pc, #156]	; (408d88 <_svfprintf_r+0x102c>)
  408cea:	f8c8 2000 	str.w	r2, [r8]
  408cee:	3301      	adds	r3, #1
  408cf0:	3401      	adds	r4, #1
  408cf2:	2201      	movs	r2, #1
  408cf4:	2b07      	cmp	r3, #7
  408cf6:	9427      	str	r4, [sp, #156]	; 0x9c
  408cf8:	9326      	str	r3, [sp, #152]	; 0x98
  408cfa:	f8c8 2004 	str.w	r2, [r8, #4]
  408cfe:	dc72      	bgt.n	408de6 <_svfprintf_r+0x108a>
  408d00:	f108 0808 	add.w	r8, r8, #8
  408d04:	b929      	cbnz	r1, 408d12 <_svfprintf_r+0xfb6>
  408d06:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  408d08:	b91b      	cbnz	r3, 408d12 <_svfprintf_r+0xfb6>
  408d0a:	9b07      	ldr	r3, [sp, #28]
  408d0c:	07d8      	lsls	r0, r3, #31
  408d0e:	f57f aa05 	bpl.w	40811c <_svfprintf_r+0x3c0>
  408d12:	9b26      	ldr	r3, [sp, #152]	; 0x98
  408d14:	9819      	ldr	r0, [sp, #100]	; 0x64
  408d16:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  408d18:	f8c8 2000 	str.w	r2, [r8]
  408d1c:	3301      	adds	r3, #1
  408d1e:	4602      	mov	r2, r0
  408d20:	4422      	add	r2, r4
  408d22:	2b07      	cmp	r3, #7
  408d24:	9227      	str	r2, [sp, #156]	; 0x9c
  408d26:	f8c8 0004 	str.w	r0, [r8, #4]
  408d2a:	9326      	str	r3, [sp, #152]	; 0x98
  408d2c:	f300 818d 	bgt.w	40904a <_svfprintf_r+0x12ee>
  408d30:	f108 0808 	add.w	r8, r8, #8
  408d34:	2900      	cmp	r1, #0
  408d36:	f2c0 8165 	blt.w	409004 <_svfprintf_r+0x12a8>
  408d3a:	9913      	ldr	r1, [sp, #76]	; 0x4c
  408d3c:	f8c8 6000 	str.w	r6, [r8]
  408d40:	3301      	adds	r3, #1
  408d42:	188c      	adds	r4, r1, r2
  408d44:	2b07      	cmp	r3, #7
  408d46:	9427      	str	r4, [sp, #156]	; 0x9c
  408d48:	9326      	str	r3, [sp, #152]	; 0x98
  408d4a:	f8c8 1004 	str.w	r1, [r8, #4]
  408d4e:	f77f a9e3 	ble.w	408118 <_svfprintf_r+0x3bc>
  408d52:	e52b      	b.n	4087ac <_svfprintf_r+0xa50>
  408d54:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  408d56:	9909      	ldr	r1, [sp, #36]	; 0x24
  408d58:	6813      	ldr	r3, [r2, #0]
  408d5a:	17cd      	asrs	r5, r1, #31
  408d5c:	4608      	mov	r0, r1
  408d5e:	3204      	adds	r2, #4
  408d60:	4629      	mov	r1, r5
  408d62:	920f      	str	r2, [sp, #60]	; 0x3c
  408d64:	e9c3 0100 	strd	r0, r1, [r3]
  408d68:	f7ff b81f 	b.w	407daa <_svfprintf_r+0x4e>
  408d6c:	aa25      	add	r2, sp, #148	; 0x94
  408d6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  408d70:	980c      	ldr	r0, [sp, #48]	; 0x30
  408d72:	f003 fb95 	bl	40c4a0 <__ssprint_r>
  408d76:	2800      	cmp	r0, #0
  408d78:	f47f a8c2 	bne.w	407f00 <_svfprintf_r+0x1a4>
  408d7c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  408d7e:	46c8      	mov	r8, r9
  408d80:	e458      	b.n	408634 <_svfprintf_r+0x8d8>
  408d82:	bf00      	nop
  408d84:	0040ebb8 	.word	0x0040ebb8
  408d88:	0040eba4 	.word	0x0040eba4
  408d8c:	2140      	movs	r1, #64	; 0x40
  408d8e:	980c      	ldr	r0, [sp, #48]	; 0x30
  408d90:	f7fe fae2 	bl	407358 <_malloc_r>
  408d94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  408d96:	6010      	str	r0, [r2, #0]
  408d98:	6110      	str	r0, [r2, #16]
  408d9a:	2800      	cmp	r0, #0
  408d9c:	f000 81ec 	beq.w	409178 <_svfprintf_r+0x141c>
  408da0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  408da2:	2340      	movs	r3, #64	; 0x40
  408da4:	6153      	str	r3, [r2, #20]
  408da6:	f7fe bff0 	b.w	407d8a <_svfprintf_r+0x2e>
  408daa:	a823      	add	r0, sp, #140	; 0x8c
  408dac:	a920      	add	r1, sp, #128	; 0x80
  408dae:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  408db0:	9004      	str	r0, [sp, #16]
  408db2:	9103      	str	r1, [sp, #12]
  408db4:	a81f      	add	r0, sp, #124	; 0x7c
  408db6:	2103      	movs	r1, #3
  408db8:	9002      	str	r0, [sp, #8]
  408dba:	9a08      	ldr	r2, [sp, #32]
  408dbc:	9401      	str	r4, [sp, #4]
  408dbe:	463b      	mov	r3, r7
  408dc0:	9100      	str	r1, [sp, #0]
  408dc2:	980c      	ldr	r0, [sp, #48]	; 0x30
  408dc4:	f001 f970 	bl	40a0a8 <_dtoa_r>
  408dc8:	4625      	mov	r5, r4
  408dca:	4606      	mov	r6, r0
  408dcc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408dce:	2b46      	cmp	r3, #70	; 0x46
  408dd0:	eb06 0405 	add.w	r4, r6, r5
  408dd4:	f47f af29 	bne.w	408c2a <_svfprintf_r+0xece>
  408dd8:	7833      	ldrb	r3, [r6, #0]
  408dda:	2b30      	cmp	r3, #48	; 0x30
  408ddc:	f000 8172 	beq.w	4090c4 <_svfprintf_r+0x1368>
  408de0:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  408de2:	442c      	add	r4, r5
  408de4:	e721      	b.n	408c2a <_svfprintf_r+0xece>
  408de6:	aa25      	add	r2, sp, #148	; 0x94
  408de8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  408dea:	980c      	ldr	r0, [sp, #48]	; 0x30
  408dec:	f003 fb58 	bl	40c4a0 <__ssprint_r>
  408df0:	2800      	cmp	r0, #0
  408df2:	f47f a885 	bne.w	407f00 <_svfprintf_r+0x1a4>
  408df6:	991f      	ldr	r1, [sp, #124]	; 0x7c
  408df8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  408dfa:	46c8      	mov	r8, r9
  408dfc:	e782      	b.n	408d04 <_svfprintf_r+0xfa8>
  408dfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408e00:	2b00      	cmp	r3, #0
  408e02:	bf08      	it	eq
  408e04:	2301      	moveq	r3, #1
  408e06:	930a      	str	r3, [sp, #40]	; 0x28
  408e08:	e6db      	b.n	408bc2 <_svfprintf_r+0xe66>
  408e0a:	4630      	mov	r0, r6
  408e0c:	940a      	str	r4, [sp, #40]	; 0x28
  408e0e:	f7fe ff37 	bl	407c80 <strlen>
  408e12:	950f      	str	r5, [sp, #60]	; 0x3c
  408e14:	900e      	str	r0, [sp, #56]	; 0x38
  408e16:	f8cd b01c 	str.w	fp, [sp, #28]
  408e1a:	4603      	mov	r3, r0
  408e1c:	f7ff b9fb 	b.w	408216 <_svfprintf_r+0x4ba>
  408e20:	272d      	movs	r7, #45	; 0x2d
  408e22:	2300      	movs	r3, #0
  408e24:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  408e28:	930a      	str	r3, [sp, #40]	; 0x28
  408e2a:	f7ff b8b0 	b.w	407f8e <_svfprintf_r+0x232>
  408e2e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  408e30:	9312      	str	r3, [sp, #72]	; 0x48
  408e32:	461a      	mov	r2, r3
  408e34:	3303      	adds	r3, #3
  408e36:	db04      	blt.n	408e42 <_svfprintf_r+0x10e6>
  408e38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408e3a:	4619      	mov	r1, r3
  408e3c:	4291      	cmp	r1, r2
  408e3e:	f6bf af17 	bge.w	408c70 <_svfprintf_r+0xf14>
  408e42:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408e44:	3b02      	subs	r3, #2
  408e46:	9311      	str	r3, [sp, #68]	; 0x44
  408e48:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  408e4c:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  408e50:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408e52:	3b01      	subs	r3, #1
  408e54:	2b00      	cmp	r3, #0
  408e56:	931f      	str	r3, [sp, #124]	; 0x7c
  408e58:	bfbd      	ittte	lt
  408e5a:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  408e5c:	f1c3 0301 	rsblt	r3, r3, #1
  408e60:	222d      	movlt	r2, #45	; 0x2d
  408e62:	222b      	movge	r2, #43	; 0x2b
  408e64:	2b09      	cmp	r3, #9
  408e66:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  408e6a:	f340 8116 	ble.w	40909a <_svfprintf_r+0x133e>
  408e6e:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  408e72:	4620      	mov	r0, r4
  408e74:	4dad      	ldr	r5, [pc, #692]	; (40912c <_svfprintf_r+0x13d0>)
  408e76:	e000      	b.n	408e7a <_svfprintf_r+0x111e>
  408e78:	4610      	mov	r0, r2
  408e7a:	fb85 1203 	smull	r1, r2, r5, r3
  408e7e:	17d9      	asrs	r1, r3, #31
  408e80:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  408e84:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  408e88:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  408e8c:	3230      	adds	r2, #48	; 0x30
  408e8e:	2909      	cmp	r1, #9
  408e90:	f800 2c01 	strb.w	r2, [r0, #-1]
  408e94:	460b      	mov	r3, r1
  408e96:	f100 32ff 	add.w	r2, r0, #4294967295
  408e9a:	dced      	bgt.n	408e78 <_svfprintf_r+0x111c>
  408e9c:	3330      	adds	r3, #48	; 0x30
  408e9e:	3802      	subs	r0, #2
  408ea0:	b2d9      	uxtb	r1, r3
  408ea2:	4284      	cmp	r4, r0
  408ea4:	f802 1c01 	strb.w	r1, [r2, #-1]
  408ea8:	f240 815f 	bls.w	40916a <_svfprintf_r+0x140e>
  408eac:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  408eb0:	4613      	mov	r3, r2
  408eb2:	e001      	b.n	408eb8 <_svfprintf_r+0x115c>
  408eb4:	f813 1b01 	ldrb.w	r1, [r3], #1
  408eb8:	f800 1b01 	strb.w	r1, [r0], #1
  408ebc:	42a3      	cmp	r3, r4
  408ebe:	d1f9      	bne.n	408eb4 <_svfprintf_r+0x1158>
  408ec0:	3301      	adds	r3, #1
  408ec2:	1a9b      	subs	r3, r3, r2
  408ec4:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  408ec8:	4413      	add	r3, r2
  408eca:	aa21      	add	r2, sp, #132	; 0x84
  408ecc:	1a9b      	subs	r3, r3, r2
  408ece:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  408ed0:	931b      	str	r3, [sp, #108]	; 0x6c
  408ed2:	2a01      	cmp	r2, #1
  408ed4:	4413      	add	r3, r2
  408ed6:	930e      	str	r3, [sp, #56]	; 0x38
  408ed8:	f340 8113 	ble.w	409102 <_svfprintf_r+0x13a6>
  408edc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  408ede:	9a19      	ldr	r2, [sp, #100]	; 0x64
  408ee0:	4413      	add	r3, r2
  408ee2:	930e      	str	r3, [sp, #56]	; 0x38
  408ee4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  408ee8:	9308      	str	r3, [sp, #32]
  408eea:	2300      	movs	r3, #0
  408eec:	9312      	str	r3, [sp, #72]	; 0x48
  408eee:	e6cf      	b.n	408c90 <_svfprintf_r+0xf34>
  408ef0:	aa25      	add	r2, sp, #148	; 0x94
  408ef2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  408ef4:	980c      	ldr	r0, [sp, #48]	; 0x30
  408ef6:	f003 fad3 	bl	40c4a0 <__ssprint_r>
  408efa:	2800      	cmp	r0, #0
  408efc:	f47f a800 	bne.w	407f00 <_svfprintf_r+0x1a4>
  408f00:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  408f02:	46c8      	mov	r8, r9
  408f04:	e4d6      	b.n	4088b4 <_svfprintf_r+0xb58>
  408f06:	4623      	mov	r3, r4
  408f08:	e6a2      	b.n	408c50 <_svfprintf_r+0xef4>
  408f0a:	aa25      	add	r2, sp, #148	; 0x94
  408f0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  408f0e:	980c      	ldr	r0, [sp, #48]	; 0x30
  408f10:	f003 fac6 	bl	40c4a0 <__ssprint_r>
  408f14:	2800      	cmp	r0, #0
  408f16:	f47e aff3 	bne.w	407f00 <_svfprintf_r+0x1a4>
  408f1a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  408f1c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  408f1e:	46c8      	mov	r8, r9
  408f20:	e5ae      	b.n	408a80 <_svfprintf_r+0xd24>
  408f22:	aa25      	add	r2, sp, #148	; 0x94
  408f24:	990b      	ldr	r1, [sp, #44]	; 0x2c
  408f26:	980c      	ldr	r0, [sp, #48]	; 0x30
  408f28:	f003 faba 	bl	40c4a0 <__ssprint_r>
  408f2c:	2800      	cmp	r0, #0
  408f2e:	f47e afe7 	bne.w	407f00 <_svfprintf_r+0x1a4>
  408f32:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  408f34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  408f36:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  408f38:	1a9a      	subs	r2, r3, r2
  408f3a:	46c8      	mov	r8, r9
  408f3c:	e5b8      	b.n	408ab0 <_svfprintf_r+0xd54>
  408f3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408f40:	9612      	str	r6, [sp, #72]	; 0x48
  408f42:	2b06      	cmp	r3, #6
  408f44:	bf28      	it	cs
  408f46:	2306      	movcs	r3, #6
  408f48:	960a      	str	r6, [sp, #40]	; 0x28
  408f4a:	4637      	mov	r7, r6
  408f4c:	9308      	str	r3, [sp, #32]
  408f4e:	950f      	str	r5, [sp, #60]	; 0x3c
  408f50:	f8cd b01c 	str.w	fp, [sp, #28]
  408f54:	930e      	str	r3, [sp, #56]	; 0x38
  408f56:	4e76      	ldr	r6, [pc, #472]	; (409130 <_svfprintf_r+0x13d4>)
  408f58:	f7ff b818 	b.w	407f8c <_svfprintf_r+0x230>
  408f5c:	a823      	add	r0, sp, #140	; 0x8c
  408f5e:	a920      	add	r1, sp, #128	; 0x80
  408f60:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  408f62:	9004      	str	r0, [sp, #16]
  408f64:	9103      	str	r1, [sp, #12]
  408f66:	a81f      	add	r0, sp, #124	; 0x7c
  408f68:	2103      	movs	r1, #3
  408f6a:	9002      	str	r0, [sp, #8]
  408f6c:	9a08      	ldr	r2, [sp, #32]
  408f6e:	9501      	str	r5, [sp, #4]
  408f70:	463b      	mov	r3, r7
  408f72:	9100      	str	r1, [sp, #0]
  408f74:	980c      	ldr	r0, [sp, #48]	; 0x30
  408f76:	f001 f897 	bl	40a0a8 <_dtoa_r>
  408f7a:	4606      	mov	r6, r0
  408f7c:	1944      	adds	r4, r0, r5
  408f7e:	e72b      	b.n	408dd8 <_svfprintf_r+0x107c>
  408f80:	2306      	movs	r3, #6
  408f82:	930a      	str	r3, [sp, #40]	; 0x28
  408f84:	e61d      	b.n	408bc2 <_svfprintf_r+0xe66>
  408f86:	272d      	movs	r7, #45	; 0x2d
  408f88:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  408f8c:	f7ff bace 	b.w	40852c <_svfprintf_r+0x7d0>
  408f90:	9a19      	ldr	r2, [sp, #100]	; 0x64
  408f92:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  408f94:	4413      	add	r3, r2
  408f96:	9a12      	ldr	r2, [sp, #72]	; 0x48
  408f98:	930e      	str	r3, [sp, #56]	; 0x38
  408f9a:	2a00      	cmp	r2, #0
  408f9c:	f340 80aa 	ble.w	4090f4 <_svfprintf_r+0x1398>
  408fa0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  408fa4:	9308      	str	r3, [sp, #32]
  408fa6:	2367      	movs	r3, #103	; 0x67
  408fa8:	9311      	str	r3, [sp, #68]	; 0x44
  408faa:	e671      	b.n	408c90 <_svfprintf_r+0xf34>
  408fac:	2b00      	cmp	r3, #0
  408fae:	f340 80b2 	ble.w	409116 <_svfprintf_r+0x13ba>
  408fb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  408fb4:	2a00      	cmp	r2, #0
  408fb6:	f040 8093 	bne.w	4090e0 <_svfprintf_r+0x1384>
  408fba:	f01b 0f01 	tst.w	fp, #1
  408fbe:	f040 808f 	bne.w	4090e0 <_svfprintf_r+0x1384>
  408fc2:	9308      	str	r3, [sp, #32]
  408fc4:	930e      	str	r3, [sp, #56]	; 0x38
  408fc6:	e663      	b.n	408c90 <_svfprintf_r+0xf34>
  408fc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408fca:	9308      	str	r3, [sp, #32]
  408fcc:	930e      	str	r3, [sp, #56]	; 0x38
  408fce:	900a      	str	r0, [sp, #40]	; 0x28
  408fd0:	950f      	str	r5, [sp, #60]	; 0x3c
  408fd2:	f8cd b01c 	str.w	fp, [sp, #28]
  408fd6:	9012      	str	r0, [sp, #72]	; 0x48
  408fd8:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  408fdc:	f7fe bfd6 	b.w	407f8c <_svfprintf_r+0x230>
  408fe0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408fe2:	2b47      	cmp	r3, #71	; 0x47
  408fe4:	f47f ae20 	bne.w	408c28 <_svfprintf_r+0xecc>
  408fe8:	f01b 0f01 	tst.w	fp, #1
  408fec:	f47f aeee 	bne.w	408dcc <_svfprintf_r+0x1070>
  408ff0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  408ff2:	1b9b      	subs	r3, r3, r6
  408ff4:	9313      	str	r3, [sp, #76]	; 0x4c
  408ff6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  408ff8:	2b47      	cmp	r3, #71	; 0x47
  408ffa:	f43f af18 	beq.w	408e2e <_svfprintf_r+0x10d2>
  408ffe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  409000:	9312      	str	r3, [sp, #72]	; 0x48
  409002:	e721      	b.n	408e48 <_svfprintf_r+0x10ec>
  409004:	424f      	negs	r7, r1
  409006:	3110      	adds	r1, #16
  409008:	4d4a      	ldr	r5, [pc, #296]	; (409134 <_svfprintf_r+0x13d8>)
  40900a:	da2f      	bge.n	40906c <_svfprintf_r+0x1310>
  40900c:	2410      	movs	r4, #16
  40900e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  409012:	e004      	b.n	40901e <_svfprintf_r+0x12c2>
  409014:	f108 0808 	add.w	r8, r8, #8
  409018:	3f10      	subs	r7, #16
  40901a:	2f10      	cmp	r7, #16
  40901c:	dd26      	ble.n	40906c <_svfprintf_r+0x1310>
  40901e:	3301      	adds	r3, #1
  409020:	3210      	adds	r2, #16
  409022:	2b07      	cmp	r3, #7
  409024:	9227      	str	r2, [sp, #156]	; 0x9c
  409026:	9326      	str	r3, [sp, #152]	; 0x98
  409028:	f8c8 5000 	str.w	r5, [r8]
  40902c:	f8c8 4004 	str.w	r4, [r8, #4]
  409030:	ddf0      	ble.n	409014 <_svfprintf_r+0x12b8>
  409032:	aa25      	add	r2, sp, #148	; 0x94
  409034:	990b      	ldr	r1, [sp, #44]	; 0x2c
  409036:	4658      	mov	r0, fp
  409038:	f003 fa32 	bl	40c4a0 <__ssprint_r>
  40903c:	2800      	cmp	r0, #0
  40903e:	f47e af5f 	bne.w	407f00 <_svfprintf_r+0x1a4>
  409042:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  409044:	9b26      	ldr	r3, [sp, #152]	; 0x98
  409046:	46c8      	mov	r8, r9
  409048:	e7e6      	b.n	409018 <_svfprintf_r+0x12bc>
  40904a:	aa25      	add	r2, sp, #148	; 0x94
  40904c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40904e:	980c      	ldr	r0, [sp, #48]	; 0x30
  409050:	f003 fa26 	bl	40c4a0 <__ssprint_r>
  409054:	2800      	cmp	r0, #0
  409056:	f47e af53 	bne.w	407f00 <_svfprintf_r+0x1a4>
  40905a:	991f      	ldr	r1, [sp, #124]	; 0x7c
  40905c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40905e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  409060:	46c8      	mov	r8, r9
  409062:	e667      	b.n	408d34 <_svfprintf_r+0xfd8>
  409064:	2000      	movs	r0, #0
  409066:	900a      	str	r0, [sp, #40]	; 0x28
  409068:	f7fe bed2 	b.w	407e10 <_svfprintf_r+0xb4>
  40906c:	3301      	adds	r3, #1
  40906e:	443a      	add	r2, r7
  409070:	2b07      	cmp	r3, #7
  409072:	e888 00a0 	stmia.w	r8, {r5, r7}
  409076:	9227      	str	r2, [sp, #156]	; 0x9c
  409078:	9326      	str	r3, [sp, #152]	; 0x98
  40907a:	f108 0808 	add.w	r8, r8, #8
  40907e:	f77f ae5c 	ble.w	408d3a <_svfprintf_r+0xfde>
  409082:	aa25      	add	r2, sp, #148	; 0x94
  409084:	990b      	ldr	r1, [sp, #44]	; 0x2c
  409086:	980c      	ldr	r0, [sp, #48]	; 0x30
  409088:	f003 fa0a 	bl	40c4a0 <__ssprint_r>
  40908c:	2800      	cmp	r0, #0
  40908e:	f47e af37 	bne.w	407f00 <_svfprintf_r+0x1a4>
  409092:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  409094:	9b26      	ldr	r3, [sp, #152]	; 0x98
  409096:	46c8      	mov	r8, r9
  409098:	e64f      	b.n	408d3a <_svfprintf_r+0xfde>
  40909a:	3330      	adds	r3, #48	; 0x30
  40909c:	2230      	movs	r2, #48	; 0x30
  40909e:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  4090a2:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  4090a6:	ab22      	add	r3, sp, #136	; 0x88
  4090a8:	e70f      	b.n	408eca <_svfprintf_r+0x116e>
  4090aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4090ac:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4090ae:	4413      	add	r3, r2
  4090b0:	930e      	str	r3, [sp, #56]	; 0x38
  4090b2:	e775      	b.n	408fa0 <_svfprintf_r+0x1244>
  4090b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4090b6:	e5cb      	b.n	408c50 <_svfprintf_r+0xef4>
  4090b8:	4e1f      	ldr	r6, [pc, #124]	; (409138 <_svfprintf_r+0x13dc>)
  4090ba:	4b20      	ldr	r3, [pc, #128]	; (40913c <_svfprintf_r+0x13e0>)
  4090bc:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4090c0:	f7ff ba36 	b.w	408530 <_svfprintf_r+0x7d4>
  4090c4:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4090c6:	9808      	ldr	r0, [sp, #32]
  4090c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4090ca:	4639      	mov	r1, r7
  4090cc:	f004 f852 	bl	40d174 <__aeabi_dcmpeq>
  4090d0:	2800      	cmp	r0, #0
  4090d2:	f47f ae85 	bne.w	408de0 <_svfprintf_r+0x1084>
  4090d6:	f1c5 0501 	rsb	r5, r5, #1
  4090da:	951f      	str	r5, [sp, #124]	; 0x7c
  4090dc:	442c      	add	r4, r5
  4090de:	e5a4      	b.n	408c2a <_svfprintf_r+0xece>
  4090e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4090e2:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4090e4:	4413      	add	r3, r2
  4090e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4090e8:	441a      	add	r2, r3
  4090ea:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  4090ee:	920e      	str	r2, [sp, #56]	; 0x38
  4090f0:	9308      	str	r3, [sp, #32]
  4090f2:	e5cd      	b.n	408c90 <_svfprintf_r+0xf34>
  4090f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4090f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4090f8:	f1c3 0301 	rsb	r3, r3, #1
  4090fc:	441a      	add	r2, r3
  4090fe:	4613      	mov	r3, r2
  409100:	e7d6      	b.n	4090b0 <_svfprintf_r+0x1354>
  409102:	f01b 0301 	ands.w	r3, fp, #1
  409106:	9312      	str	r3, [sp, #72]	; 0x48
  409108:	f47f aee8 	bne.w	408edc <_svfprintf_r+0x1180>
  40910c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40910e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  409112:	9308      	str	r3, [sp, #32]
  409114:	e5bc      	b.n	408c90 <_svfprintf_r+0xf34>
  409116:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409118:	b913      	cbnz	r3, 409120 <_svfprintf_r+0x13c4>
  40911a:	f01b 0f01 	tst.w	fp, #1
  40911e:	d002      	beq.n	409126 <_svfprintf_r+0x13ca>
  409120:	9b19      	ldr	r3, [sp, #100]	; 0x64
  409122:	3301      	adds	r3, #1
  409124:	e7df      	b.n	4090e6 <_svfprintf_r+0x138a>
  409126:	2301      	movs	r3, #1
  409128:	e74b      	b.n	408fc2 <_svfprintf_r+0x1266>
  40912a:	bf00      	nop
  40912c:	66666667 	.word	0x66666667
  409130:	0040eb9c 	.word	0x0040eb9c
  409134:	0040ebb8 	.word	0x0040ebb8
  409138:	0040eb70 	.word	0x0040eb70
  40913c:	0040eb6c 	.word	0x0040eb6c
  409140:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  409142:	f89a 3001 	ldrb.w	r3, [sl, #1]
  409146:	6828      	ldr	r0, [r5, #0]
  409148:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  40914c:	900a      	str	r0, [sp, #40]	; 0x28
  40914e:	4628      	mov	r0, r5
  409150:	3004      	adds	r0, #4
  409152:	46a2      	mov	sl, r4
  409154:	900f      	str	r0, [sp, #60]	; 0x3c
  409156:	f7fe be59 	b.w	407e0c <_svfprintf_r+0xb0>
  40915a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40915e:	f7ff b86f 	b.w	408240 <_svfprintf_r+0x4e4>
  409162:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  409166:	f7ff ba1c 	b.w	4085a2 <_svfprintf_r+0x846>
  40916a:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  40916e:	e6ac      	b.n	408eca <_svfprintf_r+0x116e>
  409170:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  409174:	f7ff b8f3 	b.w	40835e <_svfprintf_r+0x602>
  409178:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40917a:	230c      	movs	r3, #12
  40917c:	6013      	str	r3, [r2, #0]
  40917e:	f04f 33ff 	mov.w	r3, #4294967295
  409182:	9309      	str	r3, [sp, #36]	; 0x24
  409184:	f7fe bec5 	b.w	407f12 <_svfprintf_r+0x1b6>
  409188:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40918c:	f7ff b9a2 	b.w	4084d4 <_svfprintf_r+0x778>
  409190:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  409194:	f7ff b97e 	b.w	408494 <_svfprintf_r+0x738>
  409198:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40919c:	f7ff b961 	b.w	408462 <_svfprintf_r+0x706>
  4091a0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4091a4:	f7ff b91a 	b.w	4083dc <_svfprintf_r+0x680>

004091a8 <__sprint_r.part.0>:
  4091a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4091ac:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  4091ae:	049c      	lsls	r4, r3, #18
  4091b0:	4693      	mov	fp, r2
  4091b2:	d52f      	bpl.n	409214 <__sprint_r.part.0+0x6c>
  4091b4:	6893      	ldr	r3, [r2, #8]
  4091b6:	6812      	ldr	r2, [r2, #0]
  4091b8:	b353      	cbz	r3, 409210 <__sprint_r.part.0+0x68>
  4091ba:	460e      	mov	r6, r1
  4091bc:	4607      	mov	r7, r0
  4091be:	f102 0908 	add.w	r9, r2, #8
  4091c2:	e919 0420 	ldmdb	r9, {r5, sl}
  4091c6:	ea5f 089a 	movs.w	r8, sl, lsr #2
  4091ca:	d017      	beq.n	4091fc <__sprint_r.part.0+0x54>
  4091cc:	3d04      	subs	r5, #4
  4091ce:	2400      	movs	r4, #0
  4091d0:	e001      	b.n	4091d6 <__sprint_r.part.0+0x2e>
  4091d2:	45a0      	cmp	r8, r4
  4091d4:	d010      	beq.n	4091f8 <__sprint_r.part.0+0x50>
  4091d6:	4632      	mov	r2, r6
  4091d8:	f855 1f04 	ldr.w	r1, [r5, #4]!
  4091dc:	4638      	mov	r0, r7
  4091de:	f002 f835 	bl	40b24c <_fputwc_r>
  4091e2:	1c43      	adds	r3, r0, #1
  4091e4:	f104 0401 	add.w	r4, r4, #1
  4091e8:	d1f3      	bne.n	4091d2 <__sprint_r.part.0+0x2a>
  4091ea:	2300      	movs	r3, #0
  4091ec:	f8cb 3008 	str.w	r3, [fp, #8]
  4091f0:	f8cb 3004 	str.w	r3, [fp, #4]
  4091f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4091f8:	f8db 3008 	ldr.w	r3, [fp, #8]
  4091fc:	f02a 0a03 	bic.w	sl, sl, #3
  409200:	eba3 030a 	sub.w	r3, r3, sl
  409204:	f8cb 3008 	str.w	r3, [fp, #8]
  409208:	f109 0908 	add.w	r9, r9, #8
  40920c:	2b00      	cmp	r3, #0
  40920e:	d1d8      	bne.n	4091c2 <__sprint_r.part.0+0x1a>
  409210:	2000      	movs	r0, #0
  409212:	e7ea      	b.n	4091ea <__sprint_r.part.0+0x42>
  409214:	f002 f962 	bl	40b4dc <__sfvwrite_r>
  409218:	2300      	movs	r3, #0
  40921a:	f8cb 3008 	str.w	r3, [fp, #8]
  40921e:	f8cb 3004 	str.w	r3, [fp, #4]
  409222:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409226:	bf00      	nop

00409228 <_vfiprintf_r>:
  409228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40922c:	b0ad      	sub	sp, #180	; 0xb4
  40922e:	461d      	mov	r5, r3
  409230:	9101      	str	r1, [sp, #4]
  409232:	4691      	mov	r9, r2
  409234:	9308      	str	r3, [sp, #32]
  409236:	9006      	str	r0, [sp, #24]
  409238:	b118      	cbz	r0, 409242 <_vfiprintf_r+0x1a>
  40923a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40923c:	2b00      	cmp	r3, #0
  40923e:	f000 80e0 	beq.w	409402 <_vfiprintf_r+0x1da>
  409242:	9c01      	ldr	r4, [sp, #4]
  409244:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
  409248:	b281      	uxth	r1, r0
  40924a:	048b      	lsls	r3, r1, #18
  40924c:	d407      	bmi.n	40925e <_vfiprintf_r+0x36>
  40924e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  409250:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  409254:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  409258:	81a1      	strh	r1, [r4, #12]
  40925a:	6663      	str	r3, [r4, #100]	; 0x64
  40925c:	b289      	uxth	r1, r1
  40925e:	070f      	lsls	r7, r1, #28
  409260:	f140 80b1 	bpl.w	4093c6 <_vfiprintf_r+0x19e>
  409264:	9b01      	ldr	r3, [sp, #4]
  409266:	691b      	ldr	r3, [r3, #16]
  409268:	2b00      	cmp	r3, #0
  40926a:	f000 80ac 	beq.w	4093c6 <_vfiprintf_r+0x19e>
  40926e:	f001 011a 	and.w	r1, r1, #26
  409272:	290a      	cmp	r1, #10
  409274:	f000 80b5 	beq.w	4093e2 <_vfiprintf_r+0x1ba>
  409278:	2300      	movs	r3, #0
  40927a:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
  40927e:	930b      	str	r3, [sp, #44]	; 0x2c
  409280:	9311      	str	r3, [sp, #68]	; 0x44
  409282:	9310      	str	r3, [sp, #64]	; 0x40
  409284:	9304      	str	r3, [sp, #16]
  409286:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  40928a:	46da      	mov	sl, fp
  40928c:	f899 3000 	ldrb.w	r3, [r9]
  409290:	464c      	mov	r4, r9
  409292:	b1fb      	cbz	r3, 4092d4 <_vfiprintf_r+0xac>
  409294:	2b25      	cmp	r3, #37	; 0x25
  409296:	d102      	bne.n	40929e <_vfiprintf_r+0x76>
  409298:	e01c      	b.n	4092d4 <_vfiprintf_r+0xac>
  40929a:	2b25      	cmp	r3, #37	; 0x25
  40929c:	d003      	beq.n	4092a6 <_vfiprintf_r+0x7e>
  40929e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4092a2:	2b00      	cmp	r3, #0
  4092a4:	d1f9      	bne.n	40929a <_vfiprintf_r+0x72>
  4092a6:	eba4 0509 	sub.w	r5, r4, r9
  4092aa:	b19d      	cbz	r5, 4092d4 <_vfiprintf_r+0xac>
  4092ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4092ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4092b0:	f8ca 9000 	str.w	r9, [sl]
  4092b4:	3301      	adds	r3, #1
  4092b6:	442a      	add	r2, r5
  4092b8:	2b07      	cmp	r3, #7
  4092ba:	f8ca 5004 	str.w	r5, [sl, #4]
  4092be:	9211      	str	r2, [sp, #68]	; 0x44
  4092c0:	9310      	str	r3, [sp, #64]	; 0x40
  4092c2:	dd7a      	ble.n	4093ba <_vfiprintf_r+0x192>
  4092c4:	2a00      	cmp	r2, #0
  4092c6:	f040 848f 	bne.w	409be8 <_vfiprintf_r+0x9c0>
  4092ca:	9b04      	ldr	r3, [sp, #16]
  4092cc:	9210      	str	r2, [sp, #64]	; 0x40
  4092ce:	442b      	add	r3, r5
  4092d0:	46da      	mov	sl, fp
  4092d2:	9304      	str	r3, [sp, #16]
  4092d4:	7823      	ldrb	r3, [r4, #0]
  4092d6:	2b00      	cmp	r3, #0
  4092d8:	f000 83b1 	beq.w	409a3e <_vfiprintf_r+0x816>
  4092dc:	2000      	movs	r0, #0
  4092de:	f04f 0300 	mov.w	r3, #0
  4092e2:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  4092e6:	f104 0901 	add.w	r9, r4, #1
  4092ea:	7862      	ldrb	r2, [r4, #1]
  4092ec:	4605      	mov	r5, r0
  4092ee:	4606      	mov	r6, r0
  4092f0:	4603      	mov	r3, r0
  4092f2:	f04f 34ff 	mov.w	r4, #4294967295
  4092f6:	f109 0901 	add.w	r9, r9, #1
  4092fa:	f1a2 0120 	sub.w	r1, r2, #32
  4092fe:	2958      	cmp	r1, #88	; 0x58
  409300:	f200 830e 	bhi.w	409920 <_vfiprintf_r+0x6f8>
  409304:	e8df f011 	tbh	[pc, r1, lsl #1]
  409308:	030c0237 	.word	0x030c0237
  40930c:	02eb030c 	.word	0x02eb030c
  409310:	030c030c 	.word	0x030c030c
  409314:	030c030c 	.word	0x030c030c
  409318:	030c030c 	.word	0x030c030c
  40931c:	02f0029e 	.word	0x02f0029e
  409320:	0082030c 	.word	0x0082030c
  409324:	030c0277 	.word	0x030c0277
  409328:	01d401cf 	.word	0x01d401cf
  40932c:	01d401d4 	.word	0x01d401d4
  409330:	01d401d4 	.word	0x01d401d4
  409334:	01d401d4 	.word	0x01d401d4
  409338:	01d401d4 	.word	0x01d401d4
  40933c:	030c030c 	.word	0x030c030c
  409340:	030c030c 	.word	0x030c030c
  409344:	030c030c 	.word	0x030c030c
  409348:	030c030c 	.word	0x030c030c
  40934c:	030c030c 	.word	0x030c030c
  409350:	030c023f 	.word	0x030c023f
  409354:	030c030c 	.word	0x030c030c
  409358:	030c030c 	.word	0x030c030c
  40935c:	030c030c 	.word	0x030c030c
  409360:	030c030c 	.word	0x030c030c
  409364:	0246030c 	.word	0x0246030c
  409368:	030c030c 	.word	0x030c030c
  40936c:	030c030c 	.word	0x030c030c
  409370:	024a030c 	.word	0x024a030c
  409374:	030c030c 	.word	0x030c030c
  409378:	030c0252 	.word	0x030c0252
  40937c:	030c030c 	.word	0x030c030c
  409380:	030c030c 	.word	0x030c030c
  409384:	030c030c 	.word	0x030c030c
  409388:	030c030c 	.word	0x030c030c
  40938c:	01e2030c 	.word	0x01e2030c
  409390:	030c01f6 	.word	0x030c01f6
  409394:	030c030c 	.word	0x030c030c
  409398:	01f60307 	.word	0x01f60307
  40939c:	030c030c 	.word	0x030c030c
  4093a0:	030c0291 	.word	0x030c0291
  4093a4:	008702f5 	.word	0x008702f5
  4093a8:	02c302b1 	.word	0x02c302b1
  4093ac:	02c8030c 	.word	0x02c8030c
  4093b0:	01bd030c 	.word	0x01bd030c
  4093b4:	030c030c 	.word	0x030c030c
  4093b8:	02aa      	.short	0x02aa
  4093ba:	f10a 0a08 	add.w	sl, sl, #8
  4093be:	9b04      	ldr	r3, [sp, #16]
  4093c0:	442b      	add	r3, r5
  4093c2:	9304      	str	r3, [sp, #16]
  4093c4:	e786      	b.n	4092d4 <_vfiprintf_r+0xac>
  4093c6:	9c01      	ldr	r4, [sp, #4]
  4093c8:	9806      	ldr	r0, [sp, #24]
  4093ca:	4621      	mov	r1, r4
  4093cc:	f000 fd62 	bl	409e94 <__swsetup_r>
  4093d0:	2800      	cmp	r0, #0
  4093d2:	f040 8340 	bne.w	409a56 <_vfiprintf_r+0x82e>
  4093d6:	89a1      	ldrh	r1, [r4, #12]
  4093d8:	f001 011a 	and.w	r1, r1, #26
  4093dc:	290a      	cmp	r1, #10
  4093de:	f47f af4b 	bne.w	409278 <_vfiprintf_r+0x50>
  4093e2:	9901      	ldr	r1, [sp, #4]
  4093e4:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
  4093e8:	2b00      	cmp	r3, #0
  4093ea:	f6ff af45 	blt.w	409278 <_vfiprintf_r+0x50>
  4093ee:	462b      	mov	r3, r5
  4093f0:	464a      	mov	r2, r9
  4093f2:	9806      	ldr	r0, [sp, #24]
  4093f4:	f000 fd18 	bl	409e28 <__sbprintf>
  4093f8:	9004      	str	r0, [sp, #16]
  4093fa:	9804      	ldr	r0, [sp, #16]
  4093fc:	b02d      	add	sp, #180	; 0xb4
  4093fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409402:	f001 feaf 	bl	40b164 <__sinit>
  409406:	e71c      	b.n	409242 <_vfiprintf_r+0x1a>
  409408:	4276      	negs	r6, r6
  40940a:	9208      	str	r2, [sp, #32]
  40940c:	f043 0304 	orr.w	r3, r3, #4
  409410:	f899 2000 	ldrb.w	r2, [r9]
  409414:	e76f      	b.n	4092f6 <_vfiprintf_r+0xce>
  409416:	9607      	str	r6, [sp, #28]
  409418:	f013 0220 	ands.w	r2, r3, #32
  40941c:	f040 845a 	bne.w	409cd4 <_vfiprintf_r+0xaac>
  409420:	f013 0110 	ands.w	r1, r3, #16
  409424:	f040 83f1 	bne.w	409c0a <_vfiprintf_r+0x9e2>
  409428:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  40942c:	f000 83ed 	beq.w	409c0a <_vfiprintf_r+0x9e2>
  409430:	9808      	ldr	r0, [sp, #32]
  409432:	460a      	mov	r2, r1
  409434:	4601      	mov	r1, r0
  409436:	3104      	adds	r1, #4
  409438:	8806      	ldrh	r6, [r0, #0]
  40943a:	9108      	str	r1, [sp, #32]
  40943c:	2700      	movs	r7, #0
  40943e:	f04f 0100 	mov.w	r1, #0
  409442:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  409446:	2500      	movs	r5, #0
  409448:	1c61      	adds	r1, r4, #1
  40944a:	f000 8175 	beq.w	409738 <_vfiprintf_r+0x510>
  40944e:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  409452:	9103      	str	r1, [sp, #12]
  409454:	ea56 0107 	orrs.w	r1, r6, r7
  409458:	f040 8173 	bne.w	409742 <_vfiprintf_r+0x51a>
  40945c:	2c00      	cmp	r4, #0
  40945e:	f040 8356 	bne.w	409b0e <_vfiprintf_r+0x8e6>
  409462:	2a00      	cmp	r2, #0
  409464:	f040 83b2 	bne.w	409bcc <_vfiprintf_r+0x9a4>
  409468:	f013 0301 	ands.w	r3, r3, #1
  40946c:	9305      	str	r3, [sp, #20]
  40946e:	f000 8447 	beq.w	409d00 <_vfiprintf_r+0xad8>
  409472:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
  409476:	2330      	movs	r3, #48	; 0x30
  409478:	f808 3d41 	strb.w	r3, [r8, #-65]!
  40947c:	9b05      	ldr	r3, [sp, #20]
  40947e:	42a3      	cmp	r3, r4
  409480:	bfb8      	it	lt
  409482:	4623      	movlt	r3, r4
  409484:	9302      	str	r3, [sp, #8]
  409486:	b10d      	cbz	r5, 40948c <_vfiprintf_r+0x264>
  409488:	3301      	adds	r3, #1
  40948a:	9302      	str	r3, [sp, #8]
  40948c:	9b03      	ldr	r3, [sp, #12]
  40948e:	f013 0302 	ands.w	r3, r3, #2
  409492:	9309      	str	r3, [sp, #36]	; 0x24
  409494:	d002      	beq.n	40949c <_vfiprintf_r+0x274>
  409496:	9b02      	ldr	r3, [sp, #8]
  409498:	3302      	adds	r3, #2
  40949a:	9302      	str	r3, [sp, #8]
  40949c:	9b03      	ldr	r3, [sp, #12]
  40949e:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  4094a2:	930a      	str	r3, [sp, #40]	; 0x28
  4094a4:	f040 8263 	bne.w	40996e <_vfiprintf_r+0x746>
  4094a8:	9b07      	ldr	r3, [sp, #28]
  4094aa:	9a02      	ldr	r2, [sp, #8]
  4094ac:	1a9d      	subs	r5, r3, r2
  4094ae:	2d00      	cmp	r5, #0
  4094b0:	f340 825d 	ble.w	40996e <_vfiprintf_r+0x746>
  4094b4:	2d10      	cmp	r5, #16
  4094b6:	f340 8477 	ble.w	409da8 <_vfiprintf_r+0xb80>
  4094ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4094bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4094be:	4eb9      	ldr	r6, [pc, #740]	; (4097a4 <_vfiprintf_r+0x57c>)
  4094c0:	46d6      	mov	lr, sl
  4094c2:	2710      	movs	r7, #16
  4094c4:	46a2      	mov	sl, r4
  4094c6:	4619      	mov	r1, r3
  4094c8:	9c06      	ldr	r4, [sp, #24]
  4094ca:	e007      	b.n	4094dc <_vfiprintf_r+0x2b4>
  4094cc:	f101 0c02 	add.w	ip, r1, #2
  4094d0:	f10e 0e08 	add.w	lr, lr, #8
  4094d4:	4601      	mov	r1, r0
  4094d6:	3d10      	subs	r5, #16
  4094d8:	2d10      	cmp	r5, #16
  4094da:	dd11      	ble.n	409500 <_vfiprintf_r+0x2d8>
  4094dc:	1c48      	adds	r0, r1, #1
  4094de:	3210      	adds	r2, #16
  4094e0:	2807      	cmp	r0, #7
  4094e2:	9211      	str	r2, [sp, #68]	; 0x44
  4094e4:	e88e 00c0 	stmia.w	lr, {r6, r7}
  4094e8:	9010      	str	r0, [sp, #64]	; 0x40
  4094ea:	ddef      	ble.n	4094cc <_vfiprintf_r+0x2a4>
  4094ec:	2a00      	cmp	r2, #0
  4094ee:	f040 8231 	bne.w	409954 <_vfiprintf_r+0x72c>
  4094f2:	3d10      	subs	r5, #16
  4094f4:	2d10      	cmp	r5, #16
  4094f6:	4611      	mov	r1, r2
  4094f8:	f04f 0c01 	mov.w	ip, #1
  4094fc:	46de      	mov	lr, fp
  4094fe:	dced      	bgt.n	4094dc <_vfiprintf_r+0x2b4>
  409500:	4654      	mov	r4, sl
  409502:	4661      	mov	r1, ip
  409504:	46f2      	mov	sl, lr
  409506:	442a      	add	r2, r5
  409508:	2907      	cmp	r1, #7
  40950a:	9211      	str	r2, [sp, #68]	; 0x44
  40950c:	f8ca 6000 	str.w	r6, [sl]
  409510:	f8ca 5004 	str.w	r5, [sl, #4]
  409514:	9110      	str	r1, [sp, #64]	; 0x40
  409516:	f300 82e6 	bgt.w	409ae6 <_vfiprintf_r+0x8be>
  40951a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40951e:	f10a 0a08 	add.w	sl, sl, #8
  409522:	1c48      	adds	r0, r1, #1
  409524:	2d00      	cmp	r5, #0
  409526:	f040 822a 	bne.w	40997e <_vfiprintf_r+0x756>
  40952a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40952c:	2b00      	cmp	r3, #0
  40952e:	f000 8244 	beq.w	4099ba <_vfiprintf_r+0x792>
  409532:	3202      	adds	r2, #2
  409534:	a90e      	add	r1, sp, #56	; 0x38
  409536:	2302      	movs	r3, #2
  409538:	2807      	cmp	r0, #7
  40953a:	9211      	str	r2, [sp, #68]	; 0x44
  40953c:	9010      	str	r0, [sp, #64]	; 0x40
  40953e:	e88a 000a 	stmia.w	sl, {r1, r3}
  409542:	f340 8236 	ble.w	4099b2 <_vfiprintf_r+0x78a>
  409546:	2a00      	cmp	r2, #0
  409548:	f040 838b 	bne.w	409c62 <_vfiprintf_r+0xa3a>
  40954c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40954e:	2b80      	cmp	r3, #128	; 0x80
  409550:	f04f 0001 	mov.w	r0, #1
  409554:	4611      	mov	r1, r2
  409556:	46da      	mov	sl, fp
  409558:	f040 8233 	bne.w	4099c2 <_vfiprintf_r+0x79a>
  40955c:	9b07      	ldr	r3, [sp, #28]
  40955e:	9d02      	ldr	r5, [sp, #8]
  409560:	1b5e      	subs	r6, r3, r5
  409562:	2e00      	cmp	r6, #0
  409564:	f340 822d 	ble.w	4099c2 <_vfiprintf_r+0x79a>
  409568:	2e10      	cmp	r6, #16
  40956a:	4d8f      	ldr	r5, [pc, #572]	; (4097a8 <_vfiprintf_r+0x580>)
  40956c:	f340 842f 	ble.w	409dce <_vfiprintf_r+0xba6>
  409570:	46d4      	mov	ip, sl
  409572:	2710      	movs	r7, #16
  409574:	46a2      	mov	sl, r4
  409576:	9c06      	ldr	r4, [sp, #24]
  409578:	e007      	b.n	40958a <_vfiprintf_r+0x362>
  40957a:	f101 0e02 	add.w	lr, r1, #2
  40957e:	f10c 0c08 	add.w	ip, ip, #8
  409582:	4601      	mov	r1, r0
  409584:	3e10      	subs	r6, #16
  409586:	2e10      	cmp	r6, #16
  409588:	dd11      	ble.n	4095ae <_vfiprintf_r+0x386>
  40958a:	1c48      	adds	r0, r1, #1
  40958c:	3210      	adds	r2, #16
  40958e:	2807      	cmp	r0, #7
  409590:	9211      	str	r2, [sp, #68]	; 0x44
  409592:	e88c 00a0 	stmia.w	ip, {r5, r7}
  409596:	9010      	str	r0, [sp, #64]	; 0x40
  409598:	ddef      	ble.n	40957a <_vfiprintf_r+0x352>
  40959a:	2a00      	cmp	r2, #0
  40959c:	f040 8296 	bne.w	409acc <_vfiprintf_r+0x8a4>
  4095a0:	3e10      	subs	r6, #16
  4095a2:	2e10      	cmp	r6, #16
  4095a4:	f04f 0e01 	mov.w	lr, #1
  4095a8:	4611      	mov	r1, r2
  4095aa:	46dc      	mov	ip, fp
  4095ac:	dced      	bgt.n	40958a <_vfiprintf_r+0x362>
  4095ae:	4654      	mov	r4, sl
  4095b0:	46e2      	mov	sl, ip
  4095b2:	4432      	add	r2, r6
  4095b4:	f1be 0f07 	cmp.w	lr, #7
  4095b8:	9211      	str	r2, [sp, #68]	; 0x44
  4095ba:	e88a 0060 	stmia.w	sl, {r5, r6}
  4095be:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  4095c2:	f300 835b 	bgt.w	409c7c <_vfiprintf_r+0xa54>
  4095c6:	9b05      	ldr	r3, [sp, #20]
  4095c8:	1ae4      	subs	r4, r4, r3
  4095ca:	2c00      	cmp	r4, #0
  4095cc:	f10a 0a08 	add.w	sl, sl, #8
  4095d0:	f10e 0001 	add.w	r0, lr, #1
  4095d4:	4671      	mov	r1, lr
  4095d6:	f300 81f9 	bgt.w	4099cc <_vfiprintf_r+0x7a4>
  4095da:	9905      	ldr	r1, [sp, #20]
  4095dc:	f8ca 8000 	str.w	r8, [sl]
  4095e0:	440a      	add	r2, r1
  4095e2:	2807      	cmp	r0, #7
  4095e4:	9211      	str	r2, [sp, #68]	; 0x44
  4095e6:	f8ca 1004 	str.w	r1, [sl, #4]
  4095ea:	9010      	str	r0, [sp, #64]	; 0x40
  4095ec:	f340 8255 	ble.w	409a9a <_vfiprintf_r+0x872>
  4095f0:	2a00      	cmp	r2, #0
  4095f2:	f040 82ee 	bne.w	409bd2 <_vfiprintf_r+0x9aa>
  4095f6:	9b03      	ldr	r3, [sp, #12]
  4095f8:	9210      	str	r2, [sp, #64]	; 0x40
  4095fa:	0758      	lsls	r0, r3, #29
  4095fc:	d538      	bpl.n	409670 <_vfiprintf_r+0x448>
  4095fe:	9b07      	ldr	r3, [sp, #28]
  409600:	9902      	ldr	r1, [sp, #8]
  409602:	1a5c      	subs	r4, r3, r1
  409604:	2c00      	cmp	r4, #0
  409606:	f340 82ba 	ble.w	409b7e <_vfiprintf_r+0x956>
  40960a:	46da      	mov	sl, fp
  40960c:	2c10      	cmp	r4, #16
  40960e:	f340 83da 	ble.w	409dc6 <_vfiprintf_r+0xb9e>
  409612:	9910      	ldr	r1, [sp, #64]	; 0x40
  409614:	4e63      	ldr	r6, [pc, #396]	; (4097a4 <_vfiprintf_r+0x57c>)
  409616:	9f06      	ldr	r7, [sp, #24]
  409618:	f8dd 8004 	ldr.w	r8, [sp, #4]
  40961c:	2510      	movs	r5, #16
  40961e:	e006      	b.n	40962e <_vfiprintf_r+0x406>
  409620:	1c88      	adds	r0, r1, #2
  409622:	f10a 0a08 	add.w	sl, sl, #8
  409626:	4619      	mov	r1, r3
  409628:	3c10      	subs	r4, #16
  40962a:	2c10      	cmp	r4, #16
  40962c:	dd13      	ble.n	409656 <_vfiprintf_r+0x42e>
  40962e:	1c4b      	adds	r3, r1, #1
  409630:	3210      	adds	r2, #16
  409632:	2b07      	cmp	r3, #7
  409634:	9211      	str	r2, [sp, #68]	; 0x44
  409636:	f8ca 6000 	str.w	r6, [sl]
  40963a:	f8ca 5004 	str.w	r5, [sl, #4]
  40963e:	9310      	str	r3, [sp, #64]	; 0x40
  409640:	ddee      	ble.n	409620 <_vfiprintf_r+0x3f8>
  409642:	2a00      	cmp	r2, #0
  409644:	f040 820b 	bne.w	409a5e <_vfiprintf_r+0x836>
  409648:	3c10      	subs	r4, #16
  40964a:	2c10      	cmp	r4, #16
  40964c:	f04f 0001 	mov.w	r0, #1
  409650:	4611      	mov	r1, r2
  409652:	46da      	mov	sl, fp
  409654:	dceb      	bgt.n	40962e <_vfiprintf_r+0x406>
  409656:	4422      	add	r2, r4
  409658:	2807      	cmp	r0, #7
  40965a:	9211      	str	r2, [sp, #68]	; 0x44
  40965c:	f8ca 6000 	str.w	r6, [sl]
  409660:	f8ca 4004 	str.w	r4, [sl, #4]
  409664:	9010      	str	r0, [sp, #64]	; 0x40
  409666:	f340 8223 	ble.w	409ab0 <_vfiprintf_r+0x888>
  40966a:	2a00      	cmp	r2, #0
  40966c:	f040 8367 	bne.w	409d3e <_vfiprintf_r+0xb16>
  409670:	9b04      	ldr	r3, [sp, #16]
  409672:	9a07      	ldr	r2, [sp, #28]
  409674:	9902      	ldr	r1, [sp, #8]
  409676:	428a      	cmp	r2, r1
  409678:	bfac      	ite	ge
  40967a:	189b      	addge	r3, r3, r2
  40967c:	185b      	addlt	r3, r3, r1
  40967e:	9304      	str	r3, [sp, #16]
  409680:	e21f      	b.n	409ac2 <_vfiprintf_r+0x89a>
  409682:	9607      	str	r6, [sp, #28]
  409684:	069e      	lsls	r6, r3, #26
  409686:	f100 8319 	bmi.w	409cbc <_vfiprintf_r+0xa94>
  40968a:	9908      	ldr	r1, [sp, #32]
  40968c:	06dd      	lsls	r5, r3, #27
  40968e:	460a      	mov	r2, r1
  409690:	f100 82b5 	bmi.w	409bfe <_vfiprintf_r+0x9d6>
  409694:	0658      	lsls	r0, r3, #25
  409696:	f140 82b2 	bpl.w	409bfe <_vfiprintf_r+0x9d6>
  40969a:	880e      	ldrh	r6, [r1, #0]
  40969c:	3104      	adds	r1, #4
  40969e:	2700      	movs	r7, #0
  4096a0:	2201      	movs	r2, #1
  4096a2:	9108      	str	r1, [sp, #32]
  4096a4:	e6cb      	b.n	40943e <_vfiprintf_r+0x216>
  4096a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4096aa:	f899 2000 	ldrb.w	r2, [r9]
  4096ae:	e622      	b.n	4092f6 <_vfiprintf_r+0xce>
  4096b0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4096b4:	2600      	movs	r6, #0
  4096b6:	f819 2b01 	ldrb.w	r2, [r9], #1
  4096ba:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4096be:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  4096c2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4096c6:	2909      	cmp	r1, #9
  4096c8:	d9f5      	bls.n	4096b6 <_vfiprintf_r+0x48e>
  4096ca:	e616      	b.n	4092fa <_vfiprintf_r+0xd2>
  4096cc:	9908      	ldr	r1, [sp, #32]
  4096ce:	9607      	str	r6, [sp, #28]
  4096d0:	680a      	ldr	r2, [r1, #0]
  4096d2:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4096d6:	f04f 0000 	mov.w	r0, #0
  4096da:	460a      	mov	r2, r1
  4096dc:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  4096e0:	3204      	adds	r2, #4
  4096e2:	2001      	movs	r0, #1
  4096e4:	9002      	str	r0, [sp, #8]
  4096e6:	9208      	str	r2, [sp, #32]
  4096e8:	9005      	str	r0, [sp, #20]
  4096ea:	f10d 0848 	add.w	r8, sp, #72	; 0x48
  4096ee:	9303      	str	r3, [sp, #12]
  4096f0:	2400      	movs	r4, #0
  4096f2:	e6cb      	b.n	40948c <_vfiprintf_r+0x264>
  4096f4:	9607      	str	r6, [sp, #28]
  4096f6:	2800      	cmp	r0, #0
  4096f8:	f040 8382 	bne.w	409e00 <_vfiprintf_r+0xbd8>
  4096fc:	069e      	lsls	r6, r3, #26
  4096fe:	f100 82d1 	bmi.w	409ca4 <_vfiprintf_r+0xa7c>
  409702:	06dd      	lsls	r5, r3, #27
  409704:	f100 828d 	bmi.w	409c22 <_vfiprintf_r+0x9fa>
  409708:	0658      	lsls	r0, r3, #25
  40970a:	f140 828a 	bpl.w	409c22 <_vfiprintf_r+0x9fa>
  40970e:	9d08      	ldr	r5, [sp, #32]
  409710:	f9b5 6000 	ldrsh.w	r6, [r5]
  409714:	462a      	mov	r2, r5
  409716:	17f7      	asrs	r7, r6, #31
  409718:	3204      	adds	r2, #4
  40971a:	4630      	mov	r0, r6
  40971c:	4639      	mov	r1, r7
  40971e:	9208      	str	r2, [sp, #32]
  409720:	2800      	cmp	r0, #0
  409722:	f171 0200 	sbcs.w	r2, r1, #0
  409726:	f2c0 82ee 	blt.w	409d06 <_vfiprintf_r+0xade>
  40972a:	1c61      	adds	r1, r4, #1
  40972c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  409730:	f04f 0201 	mov.w	r2, #1
  409734:	f47f ae8b 	bne.w	40944e <_vfiprintf_r+0x226>
  409738:	ea56 0107 	orrs.w	r1, r6, r7
  40973c:	f000 81e8 	beq.w	409b10 <_vfiprintf_r+0x8e8>
  409740:	9303      	str	r3, [sp, #12]
  409742:	2a01      	cmp	r2, #1
  409744:	f000 8225 	beq.w	409b92 <_vfiprintf_r+0x96a>
  409748:	2a02      	cmp	r2, #2
  40974a:	f040 81f5 	bne.w	409b38 <_vfiprintf_r+0x910>
  40974e:	980b      	ldr	r0, [sp, #44]	; 0x2c
  409750:	46d8      	mov	r8, fp
  409752:	0933      	lsrs	r3, r6, #4
  409754:	f006 010f 	and.w	r1, r6, #15
  409758:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  40975c:	093a      	lsrs	r2, r7, #4
  40975e:	461e      	mov	r6, r3
  409760:	4617      	mov	r7, r2
  409762:	5c43      	ldrb	r3, [r0, r1]
  409764:	f808 3d01 	strb.w	r3, [r8, #-1]!
  409768:	ea56 0307 	orrs.w	r3, r6, r7
  40976c:	d1f1      	bne.n	409752 <_vfiprintf_r+0x52a>
  40976e:	ebab 0308 	sub.w	r3, fp, r8
  409772:	9305      	str	r3, [sp, #20]
  409774:	e682      	b.n	40947c <_vfiprintf_r+0x254>
  409776:	f899 2000 	ldrb.w	r2, [r9]
  40977a:	2d00      	cmp	r5, #0
  40977c:	f47f adbb 	bne.w	4092f6 <_vfiprintf_r+0xce>
  409780:	2001      	movs	r0, #1
  409782:	2520      	movs	r5, #32
  409784:	e5b7      	b.n	4092f6 <_vfiprintf_r+0xce>
  409786:	9607      	str	r6, [sp, #28]
  409788:	2800      	cmp	r0, #0
  40978a:	f040 8336 	bne.w	409dfa <_vfiprintf_r+0xbd2>
  40978e:	f043 0310 	orr.w	r3, r3, #16
  409792:	e7b3      	b.n	4096fc <_vfiprintf_r+0x4d4>
  409794:	9607      	str	r6, [sp, #28]
  409796:	f043 0310 	orr.w	r3, r3, #16
  40979a:	e63d      	b.n	409418 <_vfiprintf_r+0x1f0>
  40979c:	9607      	str	r6, [sp, #28]
  40979e:	f043 0310 	orr.w	r3, r3, #16
  4097a2:	e76f      	b.n	409684 <_vfiprintf_r+0x45c>
  4097a4:	0040ebc8 	.word	0x0040ebc8
  4097a8:	0040ebd8 	.word	0x0040ebd8
  4097ac:	9607      	str	r6, [sp, #28]
  4097ae:	2800      	cmp	r0, #0
  4097b0:	f040 832c 	bne.w	409e0c <_vfiprintf_r+0xbe4>
  4097b4:	49b0      	ldr	r1, [pc, #704]	; (409a78 <_vfiprintf_r+0x850>)
  4097b6:	910b      	str	r1, [sp, #44]	; 0x2c
  4097b8:	069f      	lsls	r7, r3, #26
  4097ba:	f100 8297 	bmi.w	409cec <_vfiprintf_r+0xac4>
  4097be:	9808      	ldr	r0, [sp, #32]
  4097c0:	06de      	lsls	r6, r3, #27
  4097c2:	4601      	mov	r1, r0
  4097c4:	f100 8228 	bmi.w	409c18 <_vfiprintf_r+0x9f0>
  4097c8:	065d      	lsls	r5, r3, #25
  4097ca:	f140 8225 	bpl.w	409c18 <_vfiprintf_r+0x9f0>
  4097ce:	3104      	adds	r1, #4
  4097d0:	8806      	ldrh	r6, [r0, #0]
  4097d2:	9108      	str	r1, [sp, #32]
  4097d4:	2700      	movs	r7, #0
  4097d6:	07d8      	lsls	r0, r3, #31
  4097d8:	f140 81d9 	bpl.w	409b8e <_vfiprintf_r+0x966>
  4097dc:	ea56 0107 	orrs.w	r1, r6, r7
  4097e0:	f000 81d5 	beq.w	409b8e <_vfiprintf_r+0x966>
  4097e4:	2130      	movs	r1, #48	; 0x30
  4097e6:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4097ea:	f043 0302 	orr.w	r3, r3, #2
  4097ee:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4097f2:	2202      	movs	r2, #2
  4097f4:	e623      	b.n	40943e <_vfiprintf_r+0x216>
  4097f6:	f899 2000 	ldrb.w	r2, [r9]
  4097fa:	2a2a      	cmp	r2, #42	; 0x2a
  4097fc:	f109 0701 	add.w	r7, r9, #1
  409800:	f000 82f0 	beq.w	409de4 <_vfiprintf_r+0xbbc>
  409804:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  409808:	2909      	cmp	r1, #9
  40980a:	46b9      	mov	r9, r7
  40980c:	f04f 0400 	mov.w	r4, #0
  409810:	f63f ad73 	bhi.w	4092fa <_vfiprintf_r+0xd2>
  409814:	f819 2b01 	ldrb.w	r2, [r9], #1
  409818:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40981c:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  409820:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  409824:	2909      	cmp	r1, #9
  409826:	d9f5      	bls.n	409814 <_vfiprintf_r+0x5ec>
  409828:	e567      	b.n	4092fa <_vfiprintf_r+0xd2>
  40982a:	f899 2000 	ldrb.w	r2, [r9]
  40982e:	2a6c      	cmp	r2, #108	; 0x6c
  409830:	bf03      	ittte	eq
  409832:	f899 2001 	ldrbeq.w	r2, [r9, #1]
  409836:	f043 0320 	orreq.w	r3, r3, #32
  40983a:	f109 0901 	addeq.w	r9, r9, #1
  40983e:	f043 0310 	orrne.w	r3, r3, #16
  409842:	e558      	b.n	4092f6 <_vfiprintf_r+0xce>
  409844:	9908      	ldr	r1, [sp, #32]
  409846:	680e      	ldr	r6, [r1, #0]
  409848:	460a      	mov	r2, r1
  40984a:	2e00      	cmp	r6, #0
  40984c:	f102 0204 	add.w	r2, r2, #4
  409850:	f6ff adda 	blt.w	409408 <_vfiprintf_r+0x1e0>
  409854:	9208      	str	r2, [sp, #32]
  409856:	f899 2000 	ldrb.w	r2, [r9]
  40985a:	e54c      	b.n	4092f6 <_vfiprintf_r+0xce>
  40985c:	9607      	str	r6, [sp, #28]
  40985e:	2800      	cmp	r0, #0
  409860:	f040 82da 	bne.w	409e18 <_vfiprintf_r+0xbf0>
  409864:	4985      	ldr	r1, [pc, #532]	; (409a7c <_vfiprintf_r+0x854>)
  409866:	910b      	str	r1, [sp, #44]	; 0x2c
  409868:	e7a6      	b.n	4097b8 <_vfiprintf_r+0x590>
  40986a:	9808      	ldr	r0, [sp, #32]
  40986c:	4a83      	ldr	r2, [pc, #524]	; (409a7c <_vfiprintf_r+0x854>)
  40986e:	9607      	str	r6, [sp, #28]
  409870:	920b      	str	r2, [sp, #44]	; 0x2c
  409872:	6806      	ldr	r6, [r0, #0]
  409874:	2278      	movs	r2, #120	; 0x78
  409876:	2130      	movs	r1, #48	; 0x30
  409878:	3004      	adds	r0, #4
  40987a:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  40987e:	f043 0302 	orr.w	r3, r3, #2
  409882:	9008      	str	r0, [sp, #32]
  409884:	2700      	movs	r7, #0
  409886:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  40988a:	2202      	movs	r2, #2
  40988c:	e5d7      	b.n	40943e <_vfiprintf_r+0x216>
  40988e:	f043 0320 	orr.w	r3, r3, #32
  409892:	f899 2000 	ldrb.w	r2, [r9]
  409896:	e52e      	b.n	4092f6 <_vfiprintf_r+0xce>
  409898:	9908      	ldr	r1, [sp, #32]
  40989a:	9607      	str	r6, [sp, #28]
  40989c:	f8d1 8000 	ldr.w	r8, [r1]
  4098a0:	f04f 0200 	mov.w	r2, #0
  4098a4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4098a8:	1d0e      	adds	r6, r1, #4
  4098aa:	f1b8 0f00 	cmp.w	r8, #0
  4098ae:	f000 8281 	beq.w	409db4 <_vfiprintf_r+0xb8c>
  4098b2:	1c67      	adds	r7, r4, #1
  4098b4:	f000 8260 	beq.w	409d78 <_vfiprintf_r+0xb50>
  4098b8:	4622      	mov	r2, r4
  4098ba:	2100      	movs	r1, #0
  4098bc:	4640      	mov	r0, r8
  4098be:	9302      	str	r3, [sp, #8]
  4098c0:	f002 f856 	bl	40b970 <memchr>
  4098c4:	9b02      	ldr	r3, [sp, #8]
  4098c6:	2800      	cmp	r0, #0
  4098c8:	f000 8284 	beq.w	409dd4 <_vfiprintf_r+0xbac>
  4098cc:	eba0 0208 	sub.w	r2, r0, r8
  4098d0:	9205      	str	r2, [sp, #20]
  4098d2:	9608      	str	r6, [sp, #32]
  4098d4:	9303      	str	r3, [sp, #12]
  4098d6:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4098da:	2400      	movs	r4, #0
  4098dc:	e5ce      	b.n	40947c <_vfiprintf_r+0x254>
  4098de:	f043 0301 	orr.w	r3, r3, #1
  4098e2:	f899 2000 	ldrb.w	r2, [r9]
  4098e6:	e506      	b.n	4092f6 <_vfiprintf_r+0xce>
  4098e8:	f899 2000 	ldrb.w	r2, [r9]
  4098ec:	2001      	movs	r0, #1
  4098ee:	252b      	movs	r5, #43	; 0x2b
  4098f0:	e501      	b.n	4092f6 <_vfiprintf_r+0xce>
  4098f2:	2800      	cmp	r0, #0
  4098f4:	f040 8287 	bne.w	409e06 <_vfiprintf_r+0xbde>
  4098f8:	0699      	lsls	r1, r3, #26
  4098fa:	f100 8231 	bmi.w	409d60 <_vfiprintf_r+0xb38>
  4098fe:	06da      	lsls	r2, r3, #27
  409900:	d421      	bmi.n	409946 <_vfiprintf_r+0x71e>
  409902:	065b      	lsls	r3, r3, #25
  409904:	d51f      	bpl.n	409946 <_vfiprintf_r+0x71e>
  409906:	9a08      	ldr	r2, [sp, #32]
  409908:	6813      	ldr	r3, [r2, #0]
  40990a:	3204      	adds	r2, #4
  40990c:	9208      	str	r2, [sp, #32]
  40990e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  409912:	801a      	strh	r2, [r3, #0]
  409914:	e4ba      	b.n	40928c <_vfiprintf_r+0x64>
  409916:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40991a:	f899 2000 	ldrb.w	r2, [r9]
  40991e:	e4ea      	b.n	4092f6 <_vfiprintf_r+0xce>
  409920:	9607      	str	r6, [sp, #28]
  409922:	2800      	cmp	r0, #0
  409924:	f040 8275 	bne.w	409e12 <_vfiprintf_r+0xbea>
  409928:	2a00      	cmp	r2, #0
  40992a:	f000 8088 	beq.w	409a3e <_vfiprintf_r+0x816>
  40992e:	2101      	movs	r1, #1
  409930:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  409934:	f04f 0200 	mov.w	r2, #0
  409938:	9102      	str	r1, [sp, #8]
  40993a:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  40993e:	9105      	str	r1, [sp, #20]
  409940:	f10d 0848 	add.w	r8, sp, #72	; 0x48
  409944:	e6d3      	b.n	4096ee <_vfiprintf_r+0x4c6>
  409946:	9a08      	ldr	r2, [sp, #32]
  409948:	6813      	ldr	r3, [r2, #0]
  40994a:	3204      	adds	r2, #4
  40994c:	9208      	str	r2, [sp, #32]
  40994e:	9a04      	ldr	r2, [sp, #16]
  409950:	601a      	str	r2, [r3, #0]
  409952:	e49b      	b.n	40928c <_vfiprintf_r+0x64>
  409954:	aa0f      	add	r2, sp, #60	; 0x3c
  409956:	9901      	ldr	r1, [sp, #4]
  409958:	4620      	mov	r0, r4
  40995a:	f7ff fc25 	bl	4091a8 <__sprint_r.part.0>
  40995e:	2800      	cmp	r0, #0
  409960:	d174      	bne.n	409a4c <_vfiprintf_r+0x824>
  409962:	9910      	ldr	r1, [sp, #64]	; 0x40
  409964:	9a11      	ldr	r2, [sp, #68]	; 0x44
  409966:	f101 0c01 	add.w	ip, r1, #1
  40996a:	46de      	mov	lr, fp
  40996c:	e5b3      	b.n	4094d6 <_vfiprintf_r+0x2ae>
  40996e:	9910      	ldr	r1, [sp, #64]	; 0x40
  409970:	9a11      	ldr	r2, [sp, #68]	; 0x44
  409972:	1c48      	adds	r0, r1, #1
  409974:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  409978:	2d00      	cmp	r5, #0
  40997a:	f43f add6 	beq.w	40952a <_vfiprintf_r+0x302>
  40997e:	3201      	adds	r2, #1
  409980:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  409984:	2101      	movs	r1, #1
  409986:	2807      	cmp	r0, #7
  409988:	9211      	str	r2, [sp, #68]	; 0x44
  40998a:	9010      	str	r0, [sp, #64]	; 0x40
  40998c:	f8ca 5000 	str.w	r5, [sl]
  409990:	f8ca 1004 	str.w	r1, [sl, #4]
  409994:	f340 80b6 	ble.w	409b04 <_vfiprintf_r+0x8dc>
  409998:	2a00      	cmp	r2, #0
  40999a:	f040 8155 	bne.w	409c48 <_vfiprintf_r+0xa20>
  40999e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4099a0:	2b00      	cmp	r3, #0
  4099a2:	f43f add3 	beq.w	40954c <_vfiprintf_r+0x324>
  4099a6:	ab0e      	add	r3, sp, #56	; 0x38
  4099a8:	2202      	movs	r2, #2
  4099aa:	4608      	mov	r0, r1
  4099ac:	931c      	str	r3, [sp, #112]	; 0x70
  4099ae:	921d      	str	r2, [sp, #116]	; 0x74
  4099b0:	46da      	mov	sl, fp
  4099b2:	4601      	mov	r1, r0
  4099b4:	f10a 0a08 	add.w	sl, sl, #8
  4099b8:	3001      	adds	r0, #1
  4099ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4099bc:	2b80      	cmp	r3, #128	; 0x80
  4099be:	f43f adcd 	beq.w	40955c <_vfiprintf_r+0x334>
  4099c2:	9b05      	ldr	r3, [sp, #20]
  4099c4:	1ae4      	subs	r4, r4, r3
  4099c6:	2c00      	cmp	r4, #0
  4099c8:	f77f ae07 	ble.w	4095da <_vfiprintf_r+0x3b2>
  4099cc:	2c10      	cmp	r4, #16
  4099ce:	4d2c      	ldr	r5, [pc, #176]	; (409a80 <_vfiprintf_r+0x858>)
  4099d0:	dd1d      	ble.n	409a0e <_vfiprintf_r+0x7e6>
  4099d2:	46d6      	mov	lr, sl
  4099d4:	2610      	movs	r6, #16
  4099d6:	9f06      	ldr	r7, [sp, #24]
  4099d8:	f8dd a004 	ldr.w	sl, [sp, #4]
  4099dc:	e006      	b.n	4099ec <_vfiprintf_r+0x7c4>
  4099de:	1c88      	adds	r0, r1, #2
  4099e0:	f10e 0e08 	add.w	lr, lr, #8
  4099e4:	4619      	mov	r1, r3
  4099e6:	3c10      	subs	r4, #16
  4099e8:	2c10      	cmp	r4, #16
  4099ea:	dd0f      	ble.n	409a0c <_vfiprintf_r+0x7e4>
  4099ec:	1c4b      	adds	r3, r1, #1
  4099ee:	3210      	adds	r2, #16
  4099f0:	2b07      	cmp	r3, #7
  4099f2:	9211      	str	r2, [sp, #68]	; 0x44
  4099f4:	e88e 0060 	stmia.w	lr, {r5, r6}
  4099f8:	9310      	str	r3, [sp, #64]	; 0x40
  4099fa:	ddf0      	ble.n	4099de <_vfiprintf_r+0x7b6>
  4099fc:	b9a2      	cbnz	r2, 409a28 <_vfiprintf_r+0x800>
  4099fe:	3c10      	subs	r4, #16
  409a00:	2c10      	cmp	r4, #16
  409a02:	f04f 0001 	mov.w	r0, #1
  409a06:	4611      	mov	r1, r2
  409a08:	46de      	mov	lr, fp
  409a0a:	dcef      	bgt.n	4099ec <_vfiprintf_r+0x7c4>
  409a0c:	46f2      	mov	sl, lr
  409a0e:	4422      	add	r2, r4
  409a10:	2807      	cmp	r0, #7
  409a12:	9211      	str	r2, [sp, #68]	; 0x44
  409a14:	f8ca 5000 	str.w	r5, [sl]
  409a18:	f8ca 4004 	str.w	r4, [sl, #4]
  409a1c:	9010      	str	r0, [sp, #64]	; 0x40
  409a1e:	dc31      	bgt.n	409a84 <_vfiprintf_r+0x85c>
  409a20:	f10a 0a08 	add.w	sl, sl, #8
  409a24:	3001      	adds	r0, #1
  409a26:	e5d8      	b.n	4095da <_vfiprintf_r+0x3b2>
  409a28:	aa0f      	add	r2, sp, #60	; 0x3c
  409a2a:	4651      	mov	r1, sl
  409a2c:	4638      	mov	r0, r7
  409a2e:	f7ff fbbb 	bl	4091a8 <__sprint_r.part.0>
  409a32:	b958      	cbnz	r0, 409a4c <_vfiprintf_r+0x824>
  409a34:	9910      	ldr	r1, [sp, #64]	; 0x40
  409a36:	9a11      	ldr	r2, [sp, #68]	; 0x44
  409a38:	1c48      	adds	r0, r1, #1
  409a3a:	46de      	mov	lr, fp
  409a3c:	e7d3      	b.n	4099e6 <_vfiprintf_r+0x7be>
  409a3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  409a40:	b123      	cbz	r3, 409a4c <_vfiprintf_r+0x824>
  409a42:	9806      	ldr	r0, [sp, #24]
  409a44:	9901      	ldr	r1, [sp, #4]
  409a46:	aa0f      	add	r2, sp, #60	; 0x3c
  409a48:	f7ff fbae 	bl	4091a8 <__sprint_r.part.0>
  409a4c:	9b01      	ldr	r3, [sp, #4]
  409a4e:	899b      	ldrh	r3, [r3, #12]
  409a50:	065b      	lsls	r3, r3, #25
  409a52:	f57f acd2 	bpl.w	4093fa <_vfiprintf_r+0x1d2>
  409a56:	f04f 33ff 	mov.w	r3, #4294967295
  409a5a:	9304      	str	r3, [sp, #16]
  409a5c:	e4cd      	b.n	4093fa <_vfiprintf_r+0x1d2>
  409a5e:	aa0f      	add	r2, sp, #60	; 0x3c
  409a60:	4641      	mov	r1, r8
  409a62:	4638      	mov	r0, r7
  409a64:	f7ff fba0 	bl	4091a8 <__sprint_r.part.0>
  409a68:	2800      	cmp	r0, #0
  409a6a:	d1ef      	bne.n	409a4c <_vfiprintf_r+0x824>
  409a6c:	9910      	ldr	r1, [sp, #64]	; 0x40
  409a6e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  409a70:	1c48      	adds	r0, r1, #1
  409a72:	46da      	mov	sl, fp
  409a74:	e5d8      	b.n	409628 <_vfiprintf_r+0x400>
  409a76:	bf00      	nop
  409a78:	0040eb74 	.word	0x0040eb74
  409a7c:	0040eb88 	.word	0x0040eb88
  409a80:	0040ebd8 	.word	0x0040ebd8
  409a84:	2a00      	cmp	r2, #0
  409a86:	f040 8100 	bne.w	409c8a <_vfiprintf_r+0xa62>
  409a8a:	9a05      	ldr	r2, [sp, #20]
  409a8c:	921d      	str	r2, [sp, #116]	; 0x74
  409a8e:	2301      	movs	r3, #1
  409a90:	9211      	str	r2, [sp, #68]	; 0x44
  409a92:	f8cd 8070 	str.w	r8, [sp, #112]	; 0x70
  409a96:	9310      	str	r3, [sp, #64]	; 0x40
  409a98:	46da      	mov	sl, fp
  409a9a:	f10a 0a08 	add.w	sl, sl, #8
  409a9e:	9b03      	ldr	r3, [sp, #12]
  409aa0:	0759      	lsls	r1, r3, #29
  409aa2:	d505      	bpl.n	409ab0 <_vfiprintf_r+0x888>
  409aa4:	9b07      	ldr	r3, [sp, #28]
  409aa6:	9902      	ldr	r1, [sp, #8]
  409aa8:	1a5c      	subs	r4, r3, r1
  409aaa:	2c00      	cmp	r4, #0
  409aac:	f73f adae 	bgt.w	40960c <_vfiprintf_r+0x3e4>
  409ab0:	9b04      	ldr	r3, [sp, #16]
  409ab2:	9907      	ldr	r1, [sp, #28]
  409ab4:	9802      	ldr	r0, [sp, #8]
  409ab6:	4281      	cmp	r1, r0
  409ab8:	bfac      	ite	ge
  409aba:	185b      	addge	r3, r3, r1
  409abc:	181b      	addlt	r3, r3, r0
  409abe:	9304      	str	r3, [sp, #16]
  409ac0:	bb7a      	cbnz	r2, 409b22 <_vfiprintf_r+0x8fa>
  409ac2:	2300      	movs	r3, #0
  409ac4:	9310      	str	r3, [sp, #64]	; 0x40
  409ac6:	46da      	mov	sl, fp
  409ac8:	f7ff bbe0 	b.w	40928c <_vfiprintf_r+0x64>
  409acc:	aa0f      	add	r2, sp, #60	; 0x3c
  409ace:	9901      	ldr	r1, [sp, #4]
  409ad0:	4620      	mov	r0, r4
  409ad2:	f7ff fb69 	bl	4091a8 <__sprint_r.part.0>
  409ad6:	2800      	cmp	r0, #0
  409ad8:	d1b8      	bne.n	409a4c <_vfiprintf_r+0x824>
  409ada:	9910      	ldr	r1, [sp, #64]	; 0x40
  409adc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  409ade:	f101 0e01 	add.w	lr, r1, #1
  409ae2:	46dc      	mov	ip, fp
  409ae4:	e54e      	b.n	409584 <_vfiprintf_r+0x35c>
  409ae6:	2a00      	cmp	r2, #0
  409ae8:	f040 811c 	bne.w	409d24 <_vfiprintf_r+0xafc>
  409aec:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  409af0:	2900      	cmp	r1, #0
  409af2:	f000 8111 	beq.w	409d18 <_vfiprintf_r+0xaf0>
  409af6:	2201      	movs	r2, #1
  409af8:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  409afc:	4610      	mov	r0, r2
  409afe:	921d      	str	r2, [sp, #116]	; 0x74
  409b00:	911c      	str	r1, [sp, #112]	; 0x70
  409b02:	46da      	mov	sl, fp
  409b04:	4601      	mov	r1, r0
  409b06:	f10a 0a08 	add.w	sl, sl, #8
  409b0a:	3001      	adds	r0, #1
  409b0c:	e50d      	b.n	40952a <_vfiprintf_r+0x302>
  409b0e:	9b03      	ldr	r3, [sp, #12]
  409b10:	2a01      	cmp	r2, #1
  409b12:	f000 8090 	beq.w	409c36 <_vfiprintf_r+0xa0e>
  409b16:	2a02      	cmp	r2, #2
  409b18:	d10b      	bne.n	409b32 <_vfiprintf_r+0x90a>
  409b1a:	9303      	str	r3, [sp, #12]
  409b1c:	2600      	movs	r6, #0
  409b1e:	2700      	movs	r7, #0
  409b20:	e615      	b.n	40974e <_vfiprintf_r+0x526>
  409b22:	aa0f      	add	r2, sp, #60	; 0x3c
  409b24:	9901      	ldr	r1, [sp, #4]
  409b26:	9806      	ldr	r0, [sp, #24]
  409b28:	f7ff fb3e 	bl	4091a8 <__sprint_r.part.0>
  409b2c:	2800      	cmp	r0, #0
  409b2e:	d0c8      	beq.n	409ac2 <_vfiprintf_r+0x89a>
  409b30:	e78c      	b.n	409a4c <_vfiprintf_r+0x824>
  409b32:	9303      	str	r3, [sp, #12]
  409b34:	2600      	movs	r6, #0
  409b36:	2700      	movs	r7, #0
  409b38:	4659      	mov	r1, fp
  409b3a:	e000      	b.n	409b3e <_vfiprintf_r+0x916>
  409b3c:	4641      	mov	r1, r8
  409b3e:	08f2      	lsrs	r2, r6, #3
  409b40:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  409b44:	08f8      	lsrs	r0, r7, #3
  409b46:	f006 0307 	and.w	r3, r6, #7
  409b4a:	4607      	mov	r7, r0
  409b4c:	4616      	mov	r6, r2
  409b4e:	3330      	adds	r3, #48	; 0x30
  409b50:	ea56 0207 	orrs.w	r2, r6, r7
  409b54:	f801 3c01 	strb.w	r3, [r1, #-1]
  409b58:	f101 38ff 	add.w	r8, r1, #4294967295
  409b5c:	d1ee      	bne.n	409b3c <_vfiprintf_r+0x914>
  409b5e:	9a03      	ldr	r2, [sp, #12]
  409b60:	07d6      	lsls	r6, r2, #31
  409b62:	f57f ae04 	bpl.w	40976e <_vfiprintf_r+0x546>
  409b66:	2b30      	cmp	r3, #48	; 0x30
  409b68:	f43f ae01 	beq.w	40976e <_vfiprintf_r+0x546>
  409b6c:	3902      	subs	r1, #2
  409b6e:	2330      	movs	r3, #48	; 0x30
  409b70:	f808 3c01 	strb.w	r3, [r8, #-1]
  409b74:	ebab 0301 	sub.w	r3, fp, r1
  409b78:	9305      	str	r3, [sp, #20]
  409b7a:	4688      	mov	r8, r1
  409b7c:	e47e      	b.n	40947c <_vfiprintf_r+0x254>
  409b7e:	9b04      	ldr	r3, [sp, #16]
  409b80:	9a07      	ldr	r2, [sp, #28]
  409b82:	428a      	cmp	r2, r1
  409b84:	bfac      	ite	ge
  409b86:	189b      	addge	r3, r3, r2
  409b88:	185b      	addlt	r3, r3, r1
  409b8a:	9304      	str	r3, [sp, #16]
  409b8c:	e799      	b.n	409ac2 <_vfiprintf_r+0x89a>
  409b8e:	2202      	movs	r2, #2
  409b90:	e455      	b.n	40943e <_vfiprintf_r+0x216>
  409b92:	2f00      	cmp	r7, #0
  409b94:	bf08      	it	eq
  409b96:	2e0a      	cmpeq	r6, #10
  409b98:	d34c      	bcc.n	409c34 <_vfiprintf_r+0xa0c>
  409b9a:	46d8      	mov	r8, fp
  409b9c:	4630      	mov	r0, r6
  409b9e:	4639      	mov	r1, r7
  409ba0:	220a      	movs	r2, #10
  409ba2:	2300      	movs	r3, #0
  409ba4:	f003 fb56 	bl	40d254 <__aeabi_uldivmod>
  409ba8:	3230      	adds	r2, #48	; 0x30
  409baa:	f808 2d01 	strb.w	r2, [r8, #-1]!
  409bae:	4630      	mov	r0, r6
  409bb0:	4639      	mov	r1, r7
  409bb2:	2300      	movs	r3, #0
  409bb4:	220a      	movs	r2, #10
  409bb6:	f003 fb4d 	bl	40d254 <__aeabi_uldivmod>
  409bba:	4606      	mov	r6, r0
  409bbc:	460f      	mov	r7, r1
  409bbe:	ea56 0307 	orrs.w	r3, r6, r7
  409bc2:	d1eb      	bne.n	409b9c <_vfiprintf_r+0x974>
  409bc4:	ebab 0308 	sub.w	r3, fp, r8
  409bc8:	9305      	str	r3, [sp, #20]
  409bca:	e457      	b.n	40947c <_vfiprintf_r+0x254>
  409bcc:	9405      	str	r4, [sp, #20]
  409bce:	46d8      	mov	r8, fp
  409bd0:	e454      	b.n	40947c <_vfiprintf_r+0x254>
  409bd2:	aa0f      	add	r2, sp, #60	; 0x3c
  409bd4:	9901      	ldr	r1, [sp, #4]
  409bd6:	9806      	ldr	r0, [sp, #24]
  409bd8:	f7ff fae6 	bl	4091a8 <__sprint_r.part.0>
  409bdc:	2800      	cmp	r0, #0
  409bde:	f47f af35 	bne.w	409a4c <_vfiprintf_r+0x824>
  409be2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  409be4:	46da      	mov	sl, fp
  409be6:	e75a      	b.n	409a9e <_vfiprintf_r+0x876>
  409be8:	aa0f      	add	r2, sp, #60	; 0x3c
  409bea:	9901      	ldr	r1, [sp, #4]
  409bec:	9806      	ldr	r0, [sp, #24]
  409bee:	f7ff fadb 	bl	4091a8 <__sprint_r.part.0>
  409bf2:	2800      	cmp	r0, #0
  409bf4:	f47f af2a 	bne.w	409a4c <_vfiprintf_r+0x824>
  409bf8:	46da      	mov	sl, fp
  409bfa:	f7ff bbe0 	b.w	4093be <_vfiprintf_r+0x196>
  409bfe:	3104      	adds	r1, #4
  409c00:	6816      	ldr	r6, [r2, #0]
  409c02:	9108      	str	r1, [sp, #32]
  409c04:	2201      	movs	r2, #1
  409c06:	2700      	movs	r7, #0
  409c08:	e419      	b.n	40943e <_vfiprintf_r+0x216>
  409c0a:	9808      	ldr	r0, [sp, #32]
  409c0c:	4601      	mov	r1, r0
  409c0e:	3104      	adds	r1, #4
  409c10:	6806      	ldr	r6, [r0, #0]
  409c12:	9108      	str	r1, [sp, #32]
  409c14:	2700      	movs	r7, #0
  409c16:	e412      	b.n	40943e <_vfiprintf_r+0x216>
  409c18:	680e      	ldr	r6, [r1, #0]
  409c1a:	3104      	adds	r1, #4
  409c1c:	9108      	str	r1, [sp, #32]
  409c1e:	2700      	movs	r7, #0
  409c20:	e5d9      	b.n	4097d6 <_vfiprintf_r+0x5ae>
  409c22:	9908      	ldr	r1, [sp, #32]
  409c24:	680e      	ldr	r6, [r1, #0]
  409c26:	460a      	mov	r2, r1
  409c28:	17f7      	asrs	r7, r6, #31
  409c2a:	3204      	adds	r2, #4
  409c2c:	9208      	str	r2, [sp, #32]
  409c2e:	4630      	mov	r0, r6
  409c30:	4639      	mov	r1, r7
  409c32:	e575      	b.n	409720 <_vfiprintf_r+0x4f8>
  409c34:	9b03      	ldr	r3, [sp, #12]
  409c36:	9303      	str	r3, [sp, #12]
  409c38:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
  409c3c:	3630      	adds	r6, #48	; 0x30
  409c3e:	2301      	movs	r3, #1
  409c40:	f808 6d41 	strb.w	r6, [r8, #-65]!
  409c44:	9305      	str	r3, [sp, #20]
  409c46:	e419      	b.n	40947c <_vfiprintf_r+0x254>
  409c48:	aa0f      	add	r2, sp, #60	; 0x3c
  409c4a:	9901      	ldr	r1, [sp, #4]
  409c4c:	9806      	ldr	r0, [sp, #24]
  409c4e:	f7ff faab 	bl	4091a8 <__sprint_r.part.0>
  409c52:	2800      	cmp	r0, #0
  409c54:	f47f aefa 	bne.w	409a4c <_vfiprintf_r+0x824>
  409c58:	9910      	ldr	r1, [sp, #64]	; 0x40
  409c5a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  409c5c:	1c48      	adds	r0, r1, #1
  409c5e:	46da      	mov	sl, fp
  409c60:	e463      	b.n	40952a <_vfiprintf_r+0x302>
  409c62:	aa0f      	add	r2, sp, #60	; 0x3c
  409c64:	9901      	ldr	r1, [sp, #4]
  409c66:	9806      	ldr	r0, [sp, #24]
  409c68:	f7ff fa9e 	bl	4091a8 <__sprint_r.part.0>
  409c6c:	2800      	cmp	r0, #0
  409c6e:	f47f aeed 	bne.w	409a4c <_vfiprintf_r+0x824>
  409c72:	9910      	ldr	r1, [sp, #64]	; 0x40
  409c74:	9a11      	ldr	r2, [sp, #68]	; 0x44
  409c76:	1c48      	adds	r0, r1, #1
  409c78:	46da      	mov	sl, fp
  409c7a:	e69e      	b.n	4099ba <_vfiprintf_r+0x792>
  409c7c:	2a00      	cmp	r2, #0
  409c7e:	f040 8086 	bne.w	409d8e <_vfiprintf_r+0xb66>
  409c82:	2001      	movs	r0, #1
  409c84:	4611      	mov	r1, r2
  409c86:	46da      	mov	sl, fp
  409c88:	e69b      	b.n	4099c2 <_vfiprintf_r+0x79a>
  409c8a:	aa0f      	add	r2, sp, #60	; 0x3c
  409c8c:	9901      	ldr	r1, [sp, #4]
  409c8e:	9806      	ldr	r0, [sp, #24]
  409c90:	f7ff fa8a 	bl	4091a8 <__sprint_r.part.0>
  409c94:	2800      	cmp	r0, #0
  409c96:	f47f aed9 	bne.w	409a4c <_vfiprintf_r+0x824>
  409c9a:	9810      	ldr	r0, [sp, #64]	; 0x40
  409c9c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  409c9e:	3001      	adds	r0, #1
  409ca0:	46da      	mov	sl, fp
  409ca2:	e49a      	b.n	4095da <_vfiprintf_r+0x3b2>
  409ca4:	9e08      	ldr	r6, [sp, #32]
  409ca6:	3607      	adds	r6, #7
  409ca8:	f026 0607 	bic.w	r6, r6, #7
  409cac:	e9d6 0100 	ldrd	r0, r1, [r6]
  409cb0:	f106 0208 	add.w	r2, r6, #8
  409cb4:	9208      	str	r2, [sp, #32]
  409cb6:	4606      	mov	r6, r0
  409cb8:	460f      	mov	r7, r1
  409cba:	e531      	b.n	409720 <_vfiprintf_r+0x4f8>
  409cbc:	9e08      	ldr	r6, [sp, #32]
  409cbe:	3607      	adds	r6, #7
  409cc0:	f026 0207 	bic.w	r2, r6, #7
  409cc4:	f102 0108 	add.w	r1, r2, #8
  409cc8:	e9d2 6700 	ldrd	r6, r7, [r2]
  409ccc:	9108      	str	r1, [sp, #32]
  409cce:	2201      	movs	r2, #1
  409cd0:	f7ff bbb5 	b.w	40943e <_vfiprintf_r+0x216>
  409cd4:	9e08      	ldr	r6, [sp, #32]
  409cd6:	3607      	adds	r6, #7
  409cd8:	f026 0207 	bic.w	r2, r6, #7
  409cdc:	f102 0108 	add.w	r1, r2, #8
  409ce0:	e9d2 6700 	ldrd	r6, r7, [r2]
  409ce4:	9108      	str	r1, [sp, #32]
  409ce6:	2200      	movs	r2, #0
  409ce8:	f7ff bba9 	b.w	40943e <_vfiprintf_r+0x216>
  409cec:	9e08      	ldr	r6, [sp, #32]
  409cee:	3607      	adds	r6, #7
  409cf0:	f026 0107 	bic.w	r1, r6, #7
  409cf4:	f101 0008 	add.w	r0, r1, #8
  409cf8:	9008      	str	r0, [sp, #32]
  409cfa:	e9d1 6700 	ldrd	r6, r7, [r1]
  409cfe:	e56a      	b.n	4097d6 <_vfiprintf_r+0x5ae>
  409d00:	46d8      	mov	r8, fp
  409d02:	f7ff bbbb 	b.w	40947c <_vfiprintf_r+0x254>
  409d06:	252d      	movs	r5, #45	; 0x2d
  409d08:	4276      	negs	r6, r6
  409d0a:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  409d0e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  409d12:	2201      	movs	r2, #1
  409d14:	f7ff bb98 	b.w	409448 <_vfiprintf_r+0x220>
  409d18:	9b09      	ldr	r3, [sp, #36]	; 0x24
  409d1a:	b9d3      	cbnz	r3, 409d52 <_vfiprintf_r+0xb2a>
  409d1c:	4611      	mov	r1, r2
  409d1e:	2001      	movs	r0, #1
  409d20:	46da      	mov	sl, fp
  409d22:	e64e      	b.n	4099c2 <_vfiprintf_r+0x79a>
  409d24:	aa0f      	add	r2, sp, #60	; 0x3c
  409d26:	9901      	ldr	r1, [sp, #4]
  409d28:	9806      	ldr	r0, [sp, #24]
  409d2a:	f7ff fa3d 	bl	4091a8 <__sprint_r.part.0>
  409d2e:	2800      	cmp	r0, #0
  409d30:	f47f ae8c 	bne.w	409a4c <_vfiprintf_r+0x824>
  409d34:	9910      	ldr	r1, [sp, #64]	; 0x40
  409d36:	9a11      	ldr	r2, [sp, #68]	; 0x44
  409d38:	1c48      	adds	r0, r1, #1
  409d3a:	46da      	mov	sl, fp
  409d3c:	e61a      	b.n	409974 <_vfiprintf_r+0x74c>
  409d3e:	aa0f      	add	r2, sp, #60	; 0x3c
  409d40:	9901      	ldr	r1, [sp, #4]
  409d42:	9806      	ldr	r0, [sp, #24]
  409d44:	f7ff fa30 	bl	4091a8 <__sprint_r.part.0>
  409d48:	2800      	cmp	r0, #0
  409d4a:	f47f ae7f 	bne.w	409a4c <_vfiprintf_r+0x824>
  409d4e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  409d50:	e6ae      	b.n	409ab0 <_vfiprintf_r+0x888>
  409d52:	ab0e      	add	r3, sp, #56	; 0x38
  409d54:	2202      	movs	r2, #2
  409d56:	931c      	str	r3, [sp, #112]	; 0x70
  409d58:	921d      	str	r2, [sp, #116]	; 0x74
  409d5a:	2001      	movs	r0, #1
  409d5c:	46da      	mov	sl, fp
  409d5e:	e628      	b.n	4099b2 <_vfiprintf_r+0x78a>
  409d60:	9a08      	ldr	r2, [sp, #32]
  409d62:	9904      	ldr	r1, [sp, #16]
  409d64:	6813      	ldr	r3, [r2, #0]
  409d66:	17cd      	asrs	r5, r1, #31
  409d68:	4608      	mov	r0, r1
  409d6a:	3204      	adds	r2, #4
  409d6c:	4629      	mov	r1, r5
  409d6e:	9208      	str	r2, [sp, #32]
  409d70:	e9c3 0100 	strd	r0, r1, [r3]
  409d74:	f7ff ba8a 	b.w	40928c <_vfiprintf_r+0x64>
  409d78:	4640      	mov	r0, r8
  409d7a:	9608      	str	r6, [sp, #32]
  409d7c:	9303      	str	r3, [sp, #12]
  409d7e:	f7fd ff7f 	bl	407c80 <strlen>
  409d82:	2400      	movs	r4, #0
  409d84:	9005      	str	r0, [sp, #20]
  409d86:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  409d8a:	f7ff bb77 	b.w	40947c <_vfiprintf_r+0x254>
  409d8e:	aa0f      	add	r2, sp, #60	; 0x3c
  409d90:	9901      	ldr	r1, [sp, #4]
  409d92:	9806      	ldr	r0, [sp, #24]
  409d94:	f7ff fa08 	bl	4091a8 <__sprint_r.part.0>
  409d98:	2800      	cmp	r0, #0
  409d9a:	f47f ae57 	bne.w	409a4c <_vfiprintf_r+0x824>
  409d9e:	9910      	ldr	r1, [sp, #64]	; 0x40
  409da0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  409da2:	1c48      	adds	r0, r1, #1
  409da4:	46da      	mov	sl, fp
  409da6:	e60c      	b.n	4099c2 <_vfiprintf_r+0x79a>
  409da8:	9910      	ldr	r1, [sp, #64]	; 0x40
  409daa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  409dac:	4e1c      	ldr	r6, [pc, #112]	; (409e20 <_vfiprintf_r+0xbf8>)
  409dae:	3101      	adds	r1, #1
  409db0:	f7ff bba9 	b.w	409506 <_vfiprintf_r+0x2de>
  409db4:	2c06      	cmp	r4, #6
  409db6:	bf28      	it	cs
  409db8:	2406      	movcs	r4, #6
  409dba:	9405      	str	r4, [sp, #20]
  409dbc:	9608      	str	r6, [sp, #32]
  409dbe:	9402      	str	r4, [sp, #8]
  409dc0:	f8df 8060 	ldr.w	r8, [pc, #96]	; 409e24 <_vfiprintf_r+0xbfc>
  409dc4:	e493      	b.n	4096ee <_vfiprintf_r+0x4c6>
  409dc6:	9810      	ldr	r0, [sp, #64]	; 0x40
  409dc8:	4e15      	ldr	r6, [pc, #84]	; (409e20 <_vfiprintf_r+0xbf8>)
  409dca:	3001      	adds	r0, #1
  409dcc:	e443      	b.n	409656 <_vfiprintf_r+0x42e>
  409dce:	4686      	mov	lr, r0
  409dd0:	f7ff bbef 	b.w	4095b2 <_vfiprintf_r+0x38a>
  409dd4:	9405      	str	r4, [sp, #20]
  409dd6:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  409dda:	9608      	str	r6, [sp, #32]
  409ddc:	9303      	str	r3, [sp, #12]
  409dde:	4604      	mov	r4, r0
  409de0:	f7ff bb4c 	b.w	40947c <_vfiprintf_r+0x254>
  409de4:	9908      	ldr	r1, [sp, #32]
  409de6:	f899 2001 	ldrb.w	r2, [r9, #1]
  409dea:	680c      	ldr	r4, [r1, #0]
  409dec:	3104      	adds	r1, #4
  409dee:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  409df2:	46b9      	mov	r9, r7
  409df4:	9108      	str	r1, [sp, #32]
  409df6:	f7ff ba7e 	b.w	4092f6 <_vfiprintf_r+0xce>
  409dfa:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  409dfe:	e4c6      	b.n	40978e <_vfiprintf_r+0x566>
  409e00:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  409e04:	e47a      	b.n	4096fc <_vfiprintf_r+0x4d4>
  409e06:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  409e0a:	e575      	b.n	4098f8 <_vfiprintf_r+0x6d0>
  409e0c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  409e10:	e4d0      	b.n	4097b4 <_vfiprintf_r+0x58c>
  409e12:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  409e16:	e587      	b.n	409928 <_vfiprintf_r+0x700>
  409e18:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  409e1c:	e522      	b.n	409864 <_vfiprintf_r+0x63c>
  409e1e:	bf00      	nop
  409e20:	0040ebc8 	.word	0x0040ebc8
  409e24:	0040eb9c 	.word	0x0040eb9c

00409e28 <__sbprintf>:
  409e28:	b5f0      	push	{r4, r5, r6, r7, lr}
  409e2a:	460c      	mov	r4, r1
  409e2c:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
  409e30:	8989      	ldrh	r1, [r1, #12]
  409e32:	6e66      	ldr	r6, [r4, #100]	; 0x64
  409e34:	89e5      	ldrh	r5, [r4, #14]
  409e36:	9619      	str	r6, [sp, #100]	; 0x64
  409e38:	f021 0102 	bic.w	r1, r1, #2
  409e3c:	6a66      	ldr	r6, [r4, #36]	; 0x24
  409e3e:	f8ad 500e 	strh.w	r5, [sp, #14]
  409e42:	2500      	movs	r5, #0
  409e44:	69e7      	ldr	r7, [r4, #28]
  409e46:	f8ad 100c 	strh.w	r1, [sp, #12]
  409e4a:	9609      	str	r6, [sp, #36]	; 0x24
  409e4c:	9506      	str	r5, [sp, #24]
  409e4e:	ae1a      	add	r6, sp, #104	; 0x68
  409e50:	f44f 6580 	mov.w	r5, #1024	; 0x400
  409e54:	4669      	mov	r1, sp
  409e56:	9600      	str	r6, [sp, #0]
  409e58:	9604      	str	r6, [sp, #16]
  409e5a:	9502      	str	r5, [sp, #8]
  409e5c:	9505      	str	r5, [sp, #20]
  409e5e:	9707      	str	r7, [sp, #28]
  409e60:	4606      	mov	r6, r0
  409e62:	f7ff f9e1 	bl	409228 <_vfiprintf_r>
  409e66:	1e05      	subs	r5, r0, #0
  409e68:	db07      	blt.n	409e7a <__sbprintf+0x52>
  409e6a:	4630      	mov	r0, r6
  409e6c:	4669      	mov	r1, sp
  409e6e:	f001 f8e5 	bl	40b03c <_fflush_r>
  409e72:	2800      	cmp	r0, #0
  409e74:	bf18      	it	ne
  409e76:	f04f 35ff 	movne.w	r5, #4294967295
  409e7a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  409e7e:	065b      	lsls	r3, r3, #25
  409e80:	d503      	bpl.n	409e8a <__sbprintf+0x62>
  409e82:	89a3      	ldrh	r3, [r4, #12]
  409e84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  409e88:	81a3      	strh	r3, [r4, #12]
  409e8a:	4628      	mov	r0, r5
  409e8c:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
  409e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409e92:	bf00      	nop

00409e94 <__swsetup_r>:
  409e94:	b538      	push	{r3, r4, r5, lr}
  409e96:	4b30      	ldr	r3, [pc, #192]	; (409f58 <__swsetup_r+0xc4>)
  409e98:	681b      	ldr	r3, [r3, #0]
  409e9a:	4605      	mov	r5, r0
  409e9c:	460c      	mov	r4, r1
  409e9e:	b113      	cbz	r3, 409ea6 <__swsetup_r+0x12>
  409ea0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  409ea2:	2a00      	cmp	r2, #0
  409ea4:	d038      	beq.n	409f18 <__swsetup_r+0x84>
  409ea6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  409eaa:	b293      	uxth	r3, r2
  409eac:	0718      	lsls	r0, r3, #28
  409eae:	d50c      	bpl.n	409eca <__swsetup_r+0x36>
  409eb0:	6920      	ldr	r0, [r4, #16]
  409eb2:	b1a8      	cbz	r0, 409ee0 <__swsetup_r+0x4c>
  409eb4:	f013 0201 	ands.w	r2, r3, #1
  409eb8:	d01e      	beq.n	409ef8 <__swsetup_r+0x64>
  409eba:	6963      	ldr	r3, [r4, #20]
  409ebc:	2200      	movs	r2, #0
  409ebe:	425b      	negs	r3, r3
  409ec0:	61a3      	str	r3, [r4, #24]
  409ec2:	60a2      	str	r2, [r4, #8]
  409ec4:	b1f0      	cbz	r0, 409f04 <__swsetup_r+0x70>
  409ec6:	2000      	movs	r0, #0
  409ec8:	bd38      	pop	{r3, r4, r5, pc}
  409eca:	06d9      	lsls	r1, r3, #27
  409ecc:	d53c      	bpl.n	409f48 <__swsetup_r+0xb4>
  409ece:	0758      	lsls	r0, r3, #29
  409ed0:	d426      	bmi.n	409f20 <__swsetup_r+0x8c>
  409ed2:	6920      	ldr	r0, [r4, #16]
  409ed4:	f042 0308 	orr.w	r3, r2, #8
  409ed8:	81a3      	strh	r3, [r4, #12]
  409eda:	b29b      	uxth	r3, r3
  409edc:	2800      	cmp	r0, #0
  409ede:	d1e9      	bne.n	409eb4 <__swsetup_r+0x20>
  409ee0:	f403 7220 	and.w	r2, r3, #640	; 0x280
  409ee4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  409ee8:	d0e4      	beq.n	409eb4 <__swsetup_r+0x20>
  409eea:	4628      	mov	r0, r5
  409eec:	4621      	mov	r1, r4
  409eee:	f001 fce1 	bl	40b8b4 <__smakebuf_r>
  409ef2:	89a3      	ldrh	r3, [r4, #12]
  409ef4:	6920      	ldr	r0, [r4, #16]
  409ef6:	e7dd      	b.n	409eb4 <__swsetup_r+0x20>
  409ef8:	0799      	lsls	r1, r3, #30
  409efa:	bf58      	it	pl
  409efc:	6962      	ldrpl	r2, [r4, #20]
  409efe:	60a2      	str	r2, [r4, #8]
  409f00:	2800      	cmp	r0, #0
  409f02:	d1e0      	bne.n	409ec6 <__swsetup_r+0x32>
  409f04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  409f08:	061a      	lsls	r2, r3, #24
  409f0a:	d5dd      	bpl.n	409ec8 <__swsetup_r+0x34>
  409f0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  409f10:	81a3      	strh	r3, [r4, #12]
  409f12:	f04f 30ff 	mov.w	r0, #4294967295
  409f16:	bd38      	pop	{r3, r4, r5, pc}
  409f18:	4618      	mov	r0, r3
  409f1a:	f001 f923 	bl	40b164 <__sinit>
  409f1e:	e7c2      	b.n	409ea6 <__swsetup_r+0x12>
  409f20:	6b21      	ldr	r1, [r4, #48]	; 0x30
  409f22:	b151      	cbz	r1, 409f3a <__swsetup_r+0xa6>
  409f24:	f104 0340 	add.w	r3, r4, #64	; 0x40
  409f28:	4299      	cmp	r1, r3
  409f2a:	d004      	beq.n	409f36 <__swsetup_r+0xa2>
  409f2c:	4628      	mov	r0, r5
  409f2e:	f001 f9ef 	bl	40b310 <_free_r>
  409f32:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  409f36:	2300      	movs	r3, #0
  409f38:	6323      	str	r3, [r4, #48]	; 0x30
  409f3a:	2300      	movs	r3, #0
  409f3c:	6920      	ldr	r0, [r4, #16]
  409f3e:	6063      	str	r3, [r4, #4]
  409f40:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  409f44:	6020      	str	r0, [r4, #0]
  409f46:	e7c5      	b.n	409ed4 <__swsetup_r+0x40>
  409f48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  409f4c:	2309      	movs	r3, #9
  409f4e:	602b      	str	r3, [r5, #0]
  409f50:	f04f 30ff 	mov.w	r0, #4294967295
  409f54:	81a2      	strh	r2, [r4, #12]
  409f56:	bd38      	pop	{r3, r4, r5, pc}
  409f58:	20400048 	.word	0x20400048

00409f5c <register_fini>:
  409f5c:	4b02      	ldr	r3, [pc, #8]	; (409f68 <register_fini+0xc>)
  409f5e:	b113      	cbz	r3, 409f66 <register_fini+0xa>
  409f60:	4802      	ldr	r0, [pc, #8]	; (409f6c <register_fini+0x10>)
  409f62:	f000 b805 	b.w	409f70 <atexit>
  409f66:	4770      	bx	lr
  409f68:	00000000 	.word	0x00000000
  409f6c:	0040b179 	.word	0x0040b179

00409f70 <atexit>:
  409f70:	2300      	movs	r3, #0
  409f72:	4601      	mov	r1, r0
  409f74:	461a      	mov	r2, r3
  409f76:	4618      	mov	r0, r3
  409f78:	f002 bbb6 	b.w	40c6e8 <__register_exitproc>

00409f7c <quorem>:
  409f7c:	6902      	ldr	r2, [r0, #16]
  409f7e:	690b      	ldr	r3, [r1, #16]
  409f80:	4293      	cmp	r3, r2
  409f82:	f300 808d 	bgt.w	40a0a0 <quorem+0x124>
  409f86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409f8a:	f103 38ff 	add.w	r8, r3, #4294967295
  409f8e:	f101 0714 	add.w	r7, r1, #20
  409f92:	f100 0b14 	add.w	fp, r0, #20
  409f96:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  409f9a:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  409f9e:	ea4f 0488 	mov.w	r4, r8, lsl #2
  409fa2:	b083      	sub	sp, #12
  409fa4:	3201      	adds	r2, #1
  409fa6:	fbb3 f9f2 	udiv	r9, r3, r2
  409faa:	eb0b 0304 	add.w	r3, fp, r4
  409fae:	9400      	str	r4, [sp, #0]
  409fb0:	eb07 0a04 	add.w	sl, r7, r4
  409fb4:	9301      	str	r3, [sp, #4]
  409fb6:	f1b9 0f00 	cmp.w	r9, #0
  409fba:	d039      	beq.n	40a030 <quorem+0xb4>
  409fbc:	2500      	movs	r5, #0
  409fbe:	462e      	mov	r6, r5
  409fc0:	46bc      	mov	ip, r7
  409fc2:	46de      	mov	lr, fp
  409fc4:	f85c 4b04 	ldr.w	r4, [ip], #4
  409fc8:	f8de 3000 	ldr.w	r3, [lr]
  409fcc:	b2a2      	uxth	r2, r4
  409fce:	fb09 5502 	mla	r5, r9, r2, r5
  409fd2:	0c22      	lsrs	r2, r4, #16
  409fd4:	0c2c      	lsrs	r4, r5, #16
  409fd6:	fb09 4202 	mla	r2, r9, r2, r4
  409fda:	b2ad      	uxth	r5, r5
  409fdc:	1b75      	subs	r5, r6, r5
  409fde:	b296      	uxth	r6, r2
  409fe0:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  409fe4:	fa15 f383 	uxtah	r3, r5, r3
  409fe8:	eb06 4623 	add.w	r6, r6, r3, asr #16
  409fec:	b29b      	uxth	r3, r3
  409fee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  409ff2:	45e2      	cmp	sl, ip
  409ff4:	ea4f 4512 	mov.w	r5, r2, lsr #16
  409ff8:	f84e 3b04 	str.w	r3, [lr], #4
  409ffc:	ea4f 4626 	mov.w	r6, r6, asr #16
  40a000:	d2e0      	bcs.n	409fc4 <quorem+0x48>
  40a002:	9b00      	ldr	r3, [sp, #0]
  40a004:	f85b 3003 	ldr.w	r3, [fp, r3]
  40a008:	b993      	cbnz	r3, 40a030 <quorem+0xb4>
  40a00a:	9c01      	ldr	r4, [sp, #4]
  40a00c:	1f23      	subs	r3, r4, #4
  40a00e:	459b      	cmp	fp, r3
  40a010:	d20c      	bcs.n	40a02c <quorem+0xb0>
  40a012:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40a016:	b94b      	cbnz	r3, 40a02c <quorem+0xb0>
  40a018:	f1a4 0308 	sub.w	r3, r4, #8
  40a01c:	e002      	b.n	40a024 <quorem+0xa8>
  40a01e:	681a      	ldr	r2, [r3, #0]
  40a020:	3b04      	subs	r3, #4
  40a022:	b91a      	cbnz	r2, 40a02c <quorem+0xb0>
  40a024:	459b      	cmp	fp, r3
  40a026:	f108 38ff 	add.w	r8, r8, #4294967295
  40a02a:	d3f8      	bcc.n	40a01e <quorem+0xa2>
  40a02c:	f8c0 8010 	str.w	r8, [r0, #16]
  40a030:	4604      	mov	r4, r0
  40a032:	f001 ff4f 	bl	40bed4 <__mcmp>
  40a036:	2800      	cmp	r0, #0
  40a038:	db2e      	blt.n	40a098 <quorem+0x11c>
  40a03a:	f109 0901 	add.w	r9, r9, #1
  40a03e:	465d      	mov	r5, fp
  40a040:	2300      	movs	r3, #0
  40a042:	f857 1b04 	ldr.w	r1, [r7], #4
  40a046:	6828      	ldr	r0, [r5, #0]
  40a048:	b28a      	uxth	r2, r1
  40a04a:	1a9a      	subs	r2, r3, r2
  40a04c:	0c0b      	lsrs	r3, r1, #16
  40a04e:	fa12 f280 	uxtah	r2, r2, r0
  40a052:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  40a056:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40a05a:	b292      	uxth	r2, r2
  40a05c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40a060:	45ba      	cmp	sl, r7
  40a062:	f845 2b04 	str.w	r2, [r5], #4
  40a066:	ea4f 4323 	mov.w	r3, r3, asr #16
  40a06a:	d2ea      	bcs.n	40a042 <quorem+0xc6>
  40a06c:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  40a070:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  40a074:	b982      	cbnz	r2, 40a098 <quorem+0x11c>
  40a076:	1f1a      	subs	r2, r3, #4
  40a078:	4593      	cmp	fp, r2
  40a07a:	d20b      	bcs.n	40a094 <quorem+0x118>
  40a07c:	f853 2c04 	ldr.w	r2, [r3, #-4]
  40a080:	b942      	cbnz	r2, 40a094 <quorem+0x118>
  40a082:	3b08      	subs	r3, #8
  40a084:	e002      	b.n	40a08c <quorem+0x110>
  40a086:	681a      	ldr	r2, [r3, #0]
  40a088:	3b04      	subs	r3, #4
  40a08a:	b91a      	cbnz	r2, 40a094 <quorem+0x118>
  40a08c:	459b      	cmp	fp, r3
  40a08e:	f108 38ff 	add.w	r8, r8, #4294967295
  40a092:	d3f8      	bcc.n	40a086 <quorem+0x10a>
  40a094:	f8c4 8010 	str.w	r8, [r4, #16]
  40a098:	4648      	mov	r0, r9
  40a09a:	b003      	add	sp, #12
  40a09c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a0a0:	2000      	movs	r0, #0
  40a0a2:	4770      	bx	lr
  40a0a4:	0000      	movs	r0, r0
	...

0040a0a8 <_dtoa_r>:
  40a0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a0ac:	6c01      	ldr	r1, [r0, #64]	; 0x40
  40a0ae:	b09b      	sub	sp, #108	; 0x6c
  40a0b0:	4604      	mov	r4, r0
  40a0b2:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  40a0b4:	4692      	mov	sl, r2
  40a0b6:	469b      	mov	fp, r3
  40a0b8:	b141      	cbz	r1, 40a0cc <_dtoa_r+0x24>
  40a0ba:	6c42      	ldr	r2, [r0, #68]	; 0x44
  40a0bc:	604a      	str	r2, [r1, #4]
  40a0be:	2301      	movs	r3, #1
  40a0c0:	4093      	lsls	r3, r2
  40a0c2:	608b      	str	r3, [r1, #8]
  40a0c4:	f001 fd2e 	bl	40bb24 <_Bfree>
  40a0c8:	2300      	movs	r3, #0
  40a0ca:	6423      	str	r3, [r4, #64]	; 0x40
  40a0cc:	f1bb 0f00 	cmp.w	fp, #0
  40a0d0:	465d      	mov	r5, fp
  40a0d2:	db35      	blt.n	40a140 <_dtoa_r+0x98>
  40a0d4:	2300      	movs	r3, #0
  40a0d6:	6033      	str	r3, [r6, #0]
  40a0d8:	4b9d      	ldr	r3, [pc, #628]	; (40a350 <_dtoa_r+0x2a8>)
  40a0da:	43ab      	bics	r3, r5
  40a0dc:	d015      	beq.n	40a10a <_dtoa_r+0x62>
  40a0de:	4650      	mov	r0, sl
  40a0e0:	4659      	mov	r1, fp
  40a0e2:	2200      	movs	r2, #0
  40a0e4:	2300      	movs	r3, #0
  40a0e6:	f003 f845 	bl	40d174 <__aeabi_dcmpeq>
  40a0ea:	4680      	mov	r8, r0
  40a0ec:	2800      	cmp	r0, #0
  40a0ee:	d02d      	beq.n	40a14c <_dtoa_r+0xa4>
  40a0f0:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40a0f2:	2301      	movs	r3, #1
  40a0f4:	6013      	str	r3, [r2, #0]
  40a0f6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40a0f8:	2b00      	cmp	r3, #0
  40a0fa:	f000 80bd 	beq.w	40a278 <_dtoa_r+0x1d0>
  40a0fe:	4895      	ldr	r0, [pc, #596]	; (40a354 <_dtoa_r+0x2ac>)
  40a100:	6018      	str	r0, [r3, #0]
  40a102:	3801      	subs	r0, #1
  40a104:	b01b      	add	sp, #108	; 0x6c
  40a106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a10a:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40a10c:	f242 730f 	movw	r3, #9999	; 0x270f
  40a110:	6013      	str	r3, [r2, #0]
  40a112:	f1ba 0f00 	cmp.w	sl, #0
  40a116:	d10d      	bne.n	40a134 <_dtoa_r+0x8c>
  40a118:	f3c5 0513 	ubfx	r5, r5, #0, #20
  40a11c:	b955      	cbnz	r5, 40a134 <_dtoa_r+0x8c>
  40a11e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40a120:	488d      	ldr	r0, [pc, #564]	; (40a358 <_dtoa_r+0x2b0>)
  40a122:	2b00      	cmp	r3, #0
  40a124:	d0ee      	beq.n	40a104 <_dtoa_r+0x5c>
  40a126:	f100 0308 	add.w	r3, r0, #8
  40a12a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  40a12c:	6013      	str	r3, [r2, #0]
  40a12e:	b01b      	add	sp, #108	; 0x6c
  40a130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a134:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40a136:	4889      	ldr	r0, [pc, #548]	; (40a35c <_dtoa_r+0x2b4>)
  40a138:	2b00      	cmp	r3, #0
  40a13a:	d0e3      	beq.n	40a104 <_dtoa_r+0x5c>
  40a13c:	1cc3      	adds	r3, r0, #3
  40a13e:	e7f4      	b.n	40a12a <_dtoa_r+0x82>
  40a140:	2301      	movs	r3, #1
  40a142:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  40a146:	6033      	str	r3, [r6, #0]
  40a148:	46ab      	mov	fp, r5
  40a14a:	e7c5      	b.n	40a0d8 <_dtoa_r+0x30>
  40a14c:	aa18      	add	r2, sp, #96	; 0x60
  40a14e:	ab19      	add	r3, sp, #100	; 0x64
  40a150:	9201      	str	r2, [sp, #4]
  40a152:	9300      	str	r3, [sp, #0]
  40a154:	4652      	mov	r2, sl
  40a156:	465b      	mov	r3, fp
  40a158:	4620      	mov	r0, r4
  40a15a:	f001 ff5b 	bl	40c014 <__d2b>
  40a15e:	0d2b      	lsrs	r3, r5, #20
  40a160:	4681      	mov	r9, r0
  40a162:	d071      	beq.n	40a248 <_dtoa_r+0x1a0>
  40a164:	f3cb 0213 	ubfx	r2, fp, #0, #20
  40a168:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  40a16c:	9f18      	ldr	r7, [sp, #96]	; 0x60
  40a16e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  40a172:	4650      	mov	r0, sl
  40a174:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  40a178:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  40a17c:	2200      	movs	r2, #0
  40a17e:	4b78      	ldr	r3, [pc, #480]	; (40a360 <_dtoa_r+0x2b8>)
  40a180:	f002 fbdc 	bl	40c93c <__aeabi_dsub>
  40a184:	a36c      	add	r3, pc, #432	; (adr r3, 40a338 <_dtoa_r+0x290>)
  40a186:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a18a:	f002 fd8b 	bl	40cca4 <__aeabi_dmul>
  40a18e:	a36c      	add	r3, pc, #432	; (adr r3, 40a340 <_dtoa_r+0x298>)
  40a190:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a194:	f002 fbd4 	bl	40c940 <__adddf3>
  40a198:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40a19c:	4630      	mov	r0, r6
  40a19e:	f002 fd1b 	bl	40cbd8 <__aeabi_i2d>
  40a1a2:	a369      	add	r3, pc, #420	; (adr r3, 40a348 <_dtoa_r+0x2a0>)
  40a1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a1a8:	f002 fd7c 	bl	40cca4 <__aeabi_dmul>
  40a1ac:	4602      	mov	r2, r0
  40a1ae:	460b      	mov	r3, r1
  40a1b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40a1b4:	f002 fbc4 	bl	40c940 <__adddf3>
  40a1b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40a1bc:	f003 f822 	bl	40d204 <__aeabi_d2iz>
  40a1c0:	2200      	movs	r2, #0
  40a1c2:	9002      	str	r0, [sp, #8]
  40a1c4:	2300      	movs	r3, #0
  40a1c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40a1ca:	f002 ffdd 	bl	40d188 <__aeabi_dcmplt>
  40a1ce:	2800      	cmp	r0, #0
  40a1d0:	f040 8173 	bne.w	40a4ba <_dtoa_r+0x412>
  40a1d4:	9d02      	ldr	r5, [sp, #8]
  40a1d6:	2d16      	cmp	r5, #22
  40a1d8:	f200 815d 	bhi.w	40a496 <_dtoa_r+0x3ee>
  40a1dc:	4b61      	ldr	r3, [pc, #388]	; (40a364 <_dtoa_r+0x2bc>)
  40a1de:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  40a1e2:	e9d3 0100 	ldrd	r0, r1, [r3]
  40a1e6:	4652      	mov	r2, sl
  40a1e8:	465b      	mov	r3, fp
  40a1ea:	f002 ffeb 	bl	40d1c4 <__aeabi_dcmpgt>
  40a1ee:	2800      	cmp	r0, #0
  40a1f0:	f000 81c5 	beq.w	40a57e <_dtoa_r+0x4d6>
  40a1f4:	1e6b      	subs	r3, r5, #1
  40a1f6:	9302      	str	r3, [sp, #8]
  40a1f8:	2300      	movs	r3, #0
  40a1fa:	930e      	str	r3, [sp, #56]	; 0x38
  40a1fc:	1bbf      	subs	r7, r7, r6
  40a1fe:	1e7b      	subs	r3, r7, #1
  40a200:	9306      	str	r3, [sp, #24]
  40a202:	f100 8154 	bmi.w	40a4ae <_dtoa_r+0x406>
  40a206:	2300      	movs	r3, #0
  40a208:	9308      	str	r3, [sp, #32]
  40a20a:	9b02      	ldr	r3, [sp, #8]
  40a20c:	2b00      	cmp	r3, #0
  40a20e:	f2c0 8145 	blt.w	40a49c <_dtoa_r+0x3f4>
  40a212:	9a06      	ldr	r2, [sp, #24]
  40a214:	930d      	str	r3, [sp, #52]	; 0x34
  40a216:	4611      	mov	r1, r2
  40a218:	4419      	add	r1, r3
  40a21a:	2300      	movs	r3, #0
  40a21c:	9106      	str	r1, [sp, #24]
  40a21e:	930c      	str	r3, [sp, #48]	; 0x30
  40a220:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a222:	2b09      	cmp	r3, #9
  40a224:	d82a      	bhi.n	40a27c <_dtoa_r+0x1d4>
  40a226:	2b05      	cmp	r3, #5
  40a228:	f340 865b 	ble.w	40aee2 <_dtoa_r+0xe3a>
  40a22c:	3b04      	subs	r3, #4
  40a22e:	9324      	str	r3, [sp, #144]	; 0x90
  40a230:	2500      	movs	r5, #0
  40a232:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a234:	3b02      	subs	r3, #2
  40a236:	2b03      	cmp	r3, #3
  40a238:	f200 8642 	bhi.w	40aec0 <_dtoa_r+0xe18>
  40a23c:	e8df f013 	tbh	[pc, r3, lsl #1]
  40a240:	02c903d4 	.word	0x02c903d4
  40a244:	046103df 	.word	0x046103df
  40a248:	9f18      	ldr	r7, [sp, #96]	; 0x60
  40a24a:	9e19      	ldr	r6, [sp, #100]	; 0x64
  40a24c:	443e      	add	r6, r7
  40a24e:	f206 4332 	addw	r3, r6, #1074	; 0x432
  40a252:	2b20      	cmp	r3, #32
  40a254:	f340 818e 	ble.w	40a574 <_dtoa_r+0x4cc>
  40a258:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  40a25c:	f206 4012 	addw	r0, r6, #1042	; 0x412
  40a260:	409d      	lsls	r5, r3
  40a262:	fa2a f000 	lsr.w	r0, sl, r0
  40a266:	4328      	orrs	r0, r5
  40a268:	f002 fca6 	bl	40cbb8 <__aeabi_ui2d>
  40a26c:	2301      	movs	r3, #1
  40a26e:	3e01      	subs	r6, #1
  40a270:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  40a274:	9314      	str	r3, [sp, #80]	; 0x50
  40a276:	e781      	b.n	40a17c <_dtoa_r+0xd4>
  40a278:	483b      	ldr	r0, [pc, #236]	; (40a368 <_dtoa_r+0x2c0>)
  40a27a:	e743      	b.n	40a104 <_dtoa_r+0x5c>
  40a27c:	2100      	movs	r1, #0
  40a27e:	6461      	str	r1, [r4, #68]	; 0x44
  40a280:	4620      	mov	r0, r4
  40a282:	9125      	str	r1, [sp, #148]	; 0x94
  40a284:	f001 fc28 	bl	40bad8 <_Balloc>
  40a288:	f04f 33ff 	mov.w	r3, #4294967295
  40a28c:	930a      	str	r3, [sp, #40]	; 0x28
  40a28e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40a290:	930f      	str	r3, [sp, #60]	; 0x3c
  40a292:	2301      	movs	r3, #1
  40a294:	9004      	str	r0, [sp, #16]
  40a296:	6420      	str	r0, [r4, #64]	; 0x40
  40a298:	9224      	str	r2, [sp, #144]	; 0x90
  40a29a:	930b      	str	r3, [sp, #44]	; 0x2c
  40a29c:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40a29e:	2b00      	cmp	r3, #0
  40a2a0:	f2c0 80d9 	blt.w	40a456 <_dtoa_r+0x3ae>
  40a2a4:	9a02      	ldr	r2, [sp, #8]
  40a2a6:	2a0e      	cmp	r2, #14
  40a2a8:	f300 80d5 	bgt.w	40a456 <_dtoa_r+0x3ae>
  40a2ac:	4b2d      	ldr	r3, [pc, #180]	; (40a364 <_dtoa_r+0x2bc>)
  40a2ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40a2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a2b6:	e9cd 2308 	strd	r2, r3, [sp, #32]
  40a2ba:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40a2bc:	2b00      	cmp	r3, #0
  40a2be:	f2c0 83ba 	blt.w	40aa36 <_dtoa_r+0x98e>
  40a2c2:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  40a2c6:	4650      	mov	r0, sl
  40a2c8:	462a      	mov	r2, r5
  40a2ca:	4633      	mov	r3, r6
  40a2cc:	4659      	mov	r1, fp
  40a2ce:	f002 fe13 	bl	40cef8 <__aeabi_ddiv>
  40a2d2:	f002 ff97 	bl	40d204 <__aeabi_d2iz>
  40a2d6:	4680      	mov	r8, r0
  40a2d8:	f002 fc7e 	bl	40cbd8 <__aeabi_i2d>
  40a2dc:	462a      	mov	r2, r5
  40a2de:	4633      	mov	r3, r6
  40a2e0:	f002 fce0 	bl	40cca4 <__aeabi_dmul>
  40a2e4:	460b      	mov	r3, r1
  40a2e6:	4602      	mov	r2, r0
  40a2e8:	4659      	mov	r1, fp
  40a2ea:	4650      	mov	r0, sl
  40a2ec:	f002 fb26 	bl	40c93c <__aeabi_dsub>
  40a2f0:	9d04      	ldr	r5, [sp, #16]
  40a2f2:	f108 0330 	add.w	r3, r8, #48	; 0x30
  40a2f6:	702b      	strb	r3, [r5, #0]
  40a2f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40a2fa:	2b01      	cmp	r3, #1
  40a2fc:	4606      	mov	r6, r0
  40a2fe:	460f      	mov	r7, r1
  40a300:	f105 0501 	add.w	r5, r5, #1
  40a304:	d068      	beq.n	40a3d8 <_dtoa_r+0x330>
  40a306:	2200      	movs	r2, #0
  40a308:	4b18      	ldr	r3, [pc, #96]	; (40a36c <_dtoa_r+0x2c4>)
  40a30a:	f002 fccb 	bl	40cca4 <__aeabi_dmul>
  40a30e:	2200      	movs	r2, #0
  40a310:	2300      	movs	r3, #0
  40a312:	4606      	mov	r6, r0
  40a314:	460f      	mov	r7, r1
  40a316:	f002 ff2d 	bl	40d174 <__aeabi_dcmpeq>
  40a31a:	2800      	cmp	r0, #0
  40a31c:	f040 8088 	bne.w	40a430 <_dtoa_r+0x388>
  40a320:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  40a324:	f04f 0a00 	mov.w	sl, #0
  40a328:	f8df b040 	ldr.w	fp, [pc, #64]	; 40a36c <_dtoa_r+0x2c4>
  40a32c:	940c      	str	r4, [sp, #48]	; 0x30
  40a32e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  40a332:	e028      	b.n	40a386 <_dtoa_r+0x2de>
  40a334:	f3af 8000 	nop.w
  40a338:	636f4361 	.word	0x636f4361
  40a33c:	3fd287a7 	.word	0x3fd287a7
  40a340:	8b60c8b3 	.word	0x8b60c8b3
  40a344:	3fc68a28 	.word	0x3fc68a28
  40a348:	509f79fb 	.word	0x509f79fb
  40a34c:	3fd34413 	.word	0x3fd34413
  40a350:	7ff00000 	.word	0x7ff00000
  40a354:	0040eba5 	.word	0x0040eba5
  40a358:	0040ebe8 	.word	0x0040ebe8
  40a35c:	0040ebf4 	.word	0x0040ebf4
  40a360:	3ff80000 	.word	0x3ff80000
  40a364:	0040ec30 	.word	0x0040ec30
  40a368:	0040eba4 	.word	0x0040eba4
  40a36c:	40240000 	.word	0x40240000
  40a370:	f002 fc98 	bl	40cca4 <__aeabi_dmul>
  40a374:	2200      	movs	r2, #0
  40a376:	2300      	movs	r3, #0
  40a378:	4606      	mov	r6, r0
  40a37a:	460f      	mov	r7, r1
  40a37c:	f002 fefa 	bl	40d174 <__aeabi_dcmpeq>
  40a380:	2800      	cmp	r0, #0
  40a382:	f040 83c1 	bne.w	40ab08 <_dtoa_r+0xa60>
  40a386:	4642      	mov	r2, r8
  40a388:	464b      	mov	r3, r9
  40a38a:	4630      	mov	r0, r6
  40a38c:	4639      	mov	r1, r7
  40a38e:	f002 fdb3 	bl	40cef8 <__aeabi_ddiv>
  40a392:	f002 ff37 	bl	40d204 <__aeabi_d2iz>
  40a396:	4604      	mov	r4, r0
  40a398:	f002 fc1e 	bl	40cbd8 <__aeabi_i2d>
  40a39c:	4642      	mov	r2, r8
  40a39e:	464b      	mov	r3, r9
  40a3a0:	f002 fc80 	bl	40cca4 <__aeabi_dmul>
  40a3a4:	4602      	mov	r2, r0
  40a3a6:	460b      	mov	r3, r1
  40a3a8:	4630      	mov	r0, r6
  40a3aa:	4639      	mov	r1, r7
  40a3ac:	f002 fac6 	bl	40c93c <__aeabi_dsub>
  40a3b0:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  40a3b4:	9e04      	ldr	r6, [sp, #16]
  40a3b6:	f805 eb01 	strb.w	lr, [r5], #1
  40a3ba:	eba5 0e06 	sub.w	lr, r5, r6
  40a3be:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  40a3c0:	45b6      	cmp	lr, r6
  40a3c2:	e9cd 0106 	strd	r0, r1, [sp, #24]
  40a3c6:	4652      	mov	r2, sl
  40a3c8:	465b      	mov	r3, fp
  40a3ca:	d1d1      	bne.n	40a370 <_dtoa_r+0x2c8>
  40a3cc:	46a0      	mov	r8, r4
  40a3ce:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  40a3d2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40a3d4:	4606      	mov	r6, r0
  40a3d6:	460f      	mov	r7, r1
  40a3d8:	4632      	mov	r2, r6
  40a3da:	463b      	mov	r3, r7
  40a3dc:	4630      	mov	r0, r6
  40a3de:	4639      	mov	r1, r7
  40a3e0:	f002 faae 	bl	40c940 <__adddf3>
  40a3e4:	4606      	mov	r6, r0
  40a3e6:	460f      	mov	r7, r1
  40a3e8:	4602      	mov	r2, r0
  40a3ea:	460b      	mov	r3, r1
  40a3ec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40a3f0:	f002 feca 	bl	40d188 <__aeabi_dcmplt>
  40a3f4:	b948      	cbnz	r0, 40a40a <_dtoa_r+0x362>
  40a3f6:	4632      	mov	r2, r6
  40a3f8:	463b      	mov	r3, r7
  40a3fa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40a3fe:	f002 feb9 	bl	40d174 <__aeabi_dcmpeq>
  40a402:	b1a8      	cbz	r0, 40a430 <_dtoa_r+0x388>
  40a404:	f018 0f01 	tst.w	r8, #1
  40a408:	d012      	beq.n	40a430 <_dtoa_r+0x388>
  40a40a:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40a40e:	9a04      	ldr	r2, [sp, #16]
  40a410:	1e6b      	subs	r3, r5, #1
  40a412:	e004      	b.n	40a41e <_dtoa_r+0x376>
  40a414:	429a      	cmp	r2, r3
  40a416:	f000 8401 	beq.w	40ac1c <_dtoa_r+0xb74>
  40a41a:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  40a41e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  40a422:	f103 0501 	add.w	r5, r3, #1
  40a426:	d0f5      	beq.n	40a414 <_dtoa_r+0x36c>
  40a428:	f108 0801 	add.w	r8, r8, #1
  40a42c:	f883 8000 	strb.w	r8, [r3]
  40a430:	4649      	mov	r1, r9
  40a432:	4620      	mov	r0, r4
  40a434:	f001 fb76 	bl	40bb24 <_Bfree>
  40a438:	2200      	movs	r2, #0
  40a43a:	9b02      	ldr	r3, [sp, #8]
  40a43c:	702a      	strb	r2, [r5, #0]
  40a43e:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40a440:	3301      	adds	r3, #1
  40a442:	6013      	str	r3, [r2, #0]
  40a444:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40a446:	2b00      	cmp	r3, #0
  40a448:	f000 839e 	beq.w	40ab88 <_dtoa_r+0xae0>
  40a44c:	9804      	ldr	r0, [sp, #16]
  40a44e:	601d      	str	r5, [r3, #0]
  40a450:	b01b      	add	sp, #108	; 0x6c
  40a452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a456:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40a458:	2a00      	cmp	r2, #0
  40a45a:	d03e      	beq.n	40a4da <_dtoa_r+0x432>
  40a45c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40a45e:	2a01      	cmp	r2, #1
  40a460:	f340 8311 	ble.w	40aa86 <_dtoa_r+0x9de>
  40a464:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40a466:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40a468:	1e5f      	subs	r7, r3, #1
  40a46a:	42ba      	cmp	r2, r7
  40a46c:	f2c0 838f 	blt.w	40ab8e <_dtoa_r+0xae6>
  40a470:	1bd7      	subs	r7, r2, r7
  40a472:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40a474:	2b00      	cmp	r3, #0
  40a476:	f2c0 848b 	blt.w	40ad90 <_dtoa_r+0xce8>
  40a47a:	9d08      	ldr	r5, [sp, #32]
  40a47c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40a47e:	9a08      	ldr	r2, [sp, #32]
  40a480:	441a      	add	r2, r3
  40a482:	9208      	str	r2, [sp, #32]
  40a484:	9a06      	ldr	r2, [sp, #24]
  40a486:	2101      	movs	r1, #1
  40a488:	441a      	add	r2, r3
  40a48a:	4620      	mov	r0, r4
  40a48c:	9206      	str	r2, [sp, #24]
  40a48e:	f001 fbe3 	bl	40bc58 <__i2b>
  40a492:	4606      	mov	r6, r0
  40a494:	e024      	b.n	40a4e0 <_dtoa_r+0x438>
  40a496:	2301      	movs	r3, #1
  40a498:	930e      	str	r3, [sp, #56]	; 0x38
  40a49a:	e6af      	b.n	40a1fc <_dtoa_r+0x154>
  40a49c:	9a08      	ldr	r2, [sp, #32]
  40a49e:	9b02      	ldr	r3, [sp, #8]
  40a4a0:	1ad2      	subs	r2, r2, r3
  40a4a2:	425b      	negs	r3, r3
  40a4a4:	930c      	str	r3, [sp, #48]	; 0x30
  40a4a6:	2300      	movs	r3, #0
  40a4a8:	9208      	str	r2, [sp, #32]
  40a4aa:	930d      	str	r3, [sp, #52]	; 0x34
  40a4ac:	e6b8      	b.n	40a220 <_dtoa_r+0x178>
  40a4ae:	f1c7 0301 	rsb	r3, r7, #1
  40a4b2:	9308      	str	r3, [sp, #32]
  40a4b4:	2300      	movs	r3, #0
  40a4b6:	9306      	str	r3, [sp, #24]
  40a4b8:	e6a7      	b.n	40a20a <_dtoa_r+0x162>
  40a4ba:	9d02      	ldr	r5, [sp, #8]
  40a4bc:	4628      	mov	r0, r5
  40a4be:	f002 fb8b 	bl	40cbd8 <__aeabi_i2d>
  40a4c2:	4602      	mov	r2, r0
  40a4c4:	460b      	mov	r3, r1
  40a4c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40a4ca:	f002 fe53 	bl	40d174 <__aeabi_dcmpeq>
  40a4ce:	2800      	cmp	r0, #0
  40a4d0:	f47f ae80 	bne.w	40a1d4 <_dtoa_r+0x12c>
  40a4d4:	1e6b      	subs	r3, r5, #1
  40a4d6:	9302      	str	r3, [sp, #8]
  40a4d8:	e67c      	b.n	40a1d4 <_dtoa_r+0x12c>
  40a4da:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40a4dc:	9d08      	ldr	r5, [sp, #32]
  40a4de:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  40a4e0:	2d00      	cmp	r5, #0
  40a4e2:	dd0c      	ble.n	40a4fe <_dtoa_r+0x456>
  40a4e4:	9906      	ldr	r1, [sp, #24]
  40a4e6:	2900      	cmp	r1, #0
  40a4e8:	460b      	mov	r3, r1
  40a4ea:	dd08      	ble.n	40a4fe <_dtoa_r+0x456>
  40a4ec:	42a9      	cmp	r1, r5
  40a4ee:	9a08      	ldr	r2, [sp, #32]
  40a4f0:	bfa8      	it	ge
  40a4f2:	462b      	movge	r3, r5
  40a4f4:	1ad2      	subs	r2, r2, r3
  40a4f6:	1aed      	subs	r5, r5, r3
  40a4f8:	1acb      	subs	r3, r1, r3
  40a4fa:	9208      	str	r2, [sp, #32]
  40a4fc:	9306      	str	r3, [sp, #24]
  40a4fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40a500:	b1d3      	cbz	r3, 40a538 <_dtoa_r+0x490>
  40a502:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40a504:	2b00      	cmp	r3, #0
  40a506:	f000 82b7 	beq.w	40aa78 <_dtoa_r+0x9d0>
  40a50a:	2f00      	cmp	r7, #0
  40a50c:	dd10      	ble.n	40a530 <_dtoa_r+0x488>
  40a50e:	4631      	mov	r1, r6
  40a510:	463a      	mov	r2, r7
  40a512:	4620      	mov	r0, r4
  40a514:	f001 fc3c 	bl	40bd90 <__pow5mult>
  40a518:	464a      	mov	r2, r9
  40a51a:	4601      	mov	r1, r0
  40a51c:	4606      	mov	r6, r0
  40a51e:	4620      	mov	r0, r4
  40a520:	f001 fba4 	bl	40bc6c <__multiply>
  40a524:	4649      	mov	r1, r9
  40a526:	4680      	mov	r8, r0
  40a528:	4620      	mov	r0, r4
  40a52a:	f001 fafb 	bl	40bb24 <_Bfree>
  40a52e:	46c1      	mov	r9, r8
  40a530:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40a532:	1bda      	subs	r2, r3, r7
  40a534:	f040 82a1 	bne.w	40aa7a <_dtoa_r+0x9d2>
  40a538:	2101      	movs	r1, #1
  40a53a:	4620      	mov	r0, r4
  40a53c:	f001 fb8c 	bl	40bc58 <__i2b>
  40a540:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40a542:	2b00      	cmp	r3, #0
  40a544:	4680      	mov	r8, r0
  40a546:	dd1c      	ble.n	40a582 <_dtoa_r+0x4da>
  40a548:	4601      	mov	r1, r0
  40a54a:	461a      	mov	r2, r3
  40a54c:	4620      	mov	r0, r4
  40a54e:	f001 fc1f 	bl	40bd90 <__pow5mult>
  40a552:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a554:	2b01      	cmp	r3, #1
  40a556:	4680      	mov	r8, r0
  40a558:	f340 8254 	ble.w	40aa04 <_dtoa_r+0x95c>
  40a55c:	2300      	movs	r3, #0
  40a55e:	930c      	str	r3, [sp, #48]	; 0x30
  40a560:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40a564:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  40a568:	6918      	ldr	r0, [r3, #16]
  40a56a:	f001 fb25 	bl	40bbb8 <__hi0bits>
  40a56e:	f1c0 0020 	rsb	r0, r0, #32
  40a572:	e010      	b.n	40a596 <_dtoa_r+0x4ee>
  40a574:	f1c3 0520 	rsb	r5, r3, #32
  40a578:	fa0a f005 	lsl.w	r0, sl, r5
  40a57c:	e674      	b.n	40a268 <_dtoa_r+0x1c0>
  40a57e:	900e      	str	r0, [sp, #56]	; 0x38
  40a580:	e63c      	b.n	40a1fc <_dtoa_r+0x154>
  40a582:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a584:	2b01      	cmp	r3, #1
  40a586:	f340 8287 	ble.w	40aa98 <_dtoa_r+0x9f0>
  40a58a:	2300      	movs	r3, #0
  40a58c:	930c      	str	r3, [sp, #48]	; 0x30
  40a58e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40a590:	2001      	movs	r0, #1
  40a592:	2b00      	cmp	r3, #0
  40a594:	d1e4      	bne.n	40a560 <_dtoa_r+0x4b8>
  40a596:	9a06      	ldr	r2, [sp, #24]
  40a598:	4410      	add	r0, r2
  40a59a:	f010 001f 	ands.w	r0, r0, #31
  40a59e:	f000 80a1 	beq.w	40a6e4 <_dtoa_r+0x63c>
  40a5a2:	f1c0 0320 	rsb	r3, r0, #32
  40a5a6:	2b04      	cmp	r3, #4
  40a5a8:	f340 849e 	ble.w	40aee8 <_dtoa_r+0xe40>
  40a5ac:	9b08      	ldr	r3, [sp, #32]
  40a5ae:	f1c0 001c 	rsb	r0, r0, #28
  40a5b2:	4403      	add	r3, r0
  40a5b4:	9308      	str	r3, [sp, #32]
  40a5b6:	4613      	mov	r3, r2
  40a5b8:	4403      	add	r3, r0
  40a5ba:	4405      	add	r5, r0
  40a5bc:	9306      	str	r3, [sp, #24]
  40a5be:	9b08      	ldr	r3, [sp, #32]
  40a5c0:	2b00      	cmp	r3, #0
  40a5c2:	dd05      	ble.n	40a5d0 <_dtoa_r+0x528>
  40a5c4:	4649      	mov	r1, r9
  40a5c6:	461a      	mov	r2, r3
  40a5c8:	4620      	mov	r0, r4
  40a5ca:	f001 fc31 	bl	40be30 <__lshift>
  40a5ce:	4681      	mov	r9, r0
  40a5d0:	9b06      	ldr	r3, [sp, #24]
  40a5d2:	2b00      	cmp	r3, #0
  40a5d4:	dd05      	ble.n	40a5e2 <_dtoa_r+0x53a>
  40a5d6:	4641      	mov	r1, r8
  40a5d8:	461a      	mov	r2, r3
  40a5da:	4620      	mov	r0, r4
  40a5dc:	f001 fc28 	bl	40be30 <__lshift>
  40a5e0:	4680      	mov	r8, r0
  40a5e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40a5e4:	2b00      	cmp	r3, #0
  40a5e6:	f040 8086 	bne.w	40a6f6 <_dtoa_r+0x64e>
  40a5ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40a5ec:	2b00      	cmp	r3, #0
  40a5ee:	f340 8266 	ble.w	40aabe <_dtoa_r+0xa16>
  40a5f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40a5f4:	2b00      	cmp	r3, #0
  40a5f6:	f000 8098 	beq.w	40a72a <_dtoa_r+0x682>
  40a5fa:	2d00      	cmp	r5, #0
  40a5fc:	dd05      	ble.n	40a60a <_dtoa_r+0x562>
  40a5fe:	4631      	mov	r1, r6
  40a600:	462a      	mov	r2, r5
  40a602:	4620      	mov	r0, r4
  40a604:	f001 fc14 	bl	40be30 <__lshift>
  40a608:	4606      	mov	r6, r0
  40a60a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40a60c:	2b00      	cmp	r3, #0
  40a60e:	f040 8337 	bne.w	40ac80 <_dtoa_r+0xbd8>
  40a612:	9606      	str	r6, [sp, #24]
  40a614:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40a616:	9a04      	ldr	r2, [sp, #16]
  40a618:	f8dd b018 	ldr.w	fp, [sp, #24]
  40a61c:	3b01      	subs	r3, #1
  40a61e:	18d3      	adds	r3, r2, r3
  40a620:	930b      	str	r3, [sp, #44]	; 0x2c
  40a622:	f00a 0301 	and.w	r3, sl, #1
  40a626:	930c      	str	r3, [sp, #48]	; 0x30
  40a628:	4617      	mov	r7, r2
  40a62a:	46c2      	mov	sl, r8
  40a62c:	4651      	mov	r1, sl
  40a62e:	4648      	mov	r0, r9
  40a630:	f7ff fca4 	bl	409f7c <quorem>
  40a634:	4631      	mov	r1, r6
  40a636:	4605      	mov	r5, r0
  40a638:	4648      	mov	r0, r9
  40a63a:	f001 fc4b 	bl	40bed4 <__mcmp>
  40a63e:	465a      	mov	r2, fp
  40a640:	900a      	str	r0, [sp, #40]	; 0x28
  40a642:	4651      	mov	r1, sl
  40a644:	4620      	mov	r0, r4
  40a646:	f001 fc61 	bl	40bf0c <__mdiff>
  40a64a:	68c2      	ldr	r2, [r0, #12]
  40a64c:	4680      	mov	r8, r0
  40a64e:	f105 0330 	add.w	r3, r5, #48	; 0x30
  40a652:	2a00      	cmp	r2, #0
  40a654:	f040 822b 	bne.w	40aaae <_dtoa_r+0xa06>
  40a658:	4601      	mov	r1, r0
  40a65a:	4648      	mov	r0, r9
  40a65c:	9308      	str	r3, [sp, #32]
  40a65e:	f001 fc39 	bl	40bed4 <__mcmp>
  40a662:	4641      	mov	r1, r8
  40a664:	9006      	str	r0, [sp, #24]
  40a666:	4620      	mov	r0, r4
  40a668:	f001 fa5c 	bl	40bb24 <_Bfree>
  40a66c:	9a06      	ldr	r2, [sp, #24]
  40a66e:	9b08      	ldr	r3, [sp, #32]
  40a670:	b932      	cbnz	r2, 40a680 <_dtoa_r+0x5d8>
  40a672:	9924      	ldr	r1, [sp, #144]	; 0x90
  40a674:	b921      	cbnz	r1, 40a680 <_dtoa_r+0x5d8>
  40a676:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40a678:	2a00      	cmp	r2, #0
  40a67a:	f000 83ef 	beq.w	40ae5c <_dtoa_r+0xdb4>
  40a67e:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40a680:	990a      	ldr	r1, [sp, #40]	; 0x28
  40a682:	2900      	cmp	r1, #0
  40a684:	f2c0 829f 	blt.w	40abc6 <_dtoa_r+0xb1e>
  40a688:	d105      	bne.n	40a696 <_dtoa_r+0x5ee>
  40a68a:	9924      	ldr	r1, [sp, #144]	; 0x90
  40a68c:	b919      	cbnz	r1, 40a696 <_dtoa_r+0x5ee>
  40a68e:	990c      	ldr	r1, [sp, #48]	; 0x30
  40a690:	2900      	cmp	r1, #0
  40a692:	f000 8298 	beq.w	40abc6 <_dtoa_r+0xb1e>
  40a696:	2a00      	cmp	r2, #0
  40a698:	f300 8306 	bgt.w	40aca8 <_dtoa_r+0xc00>
  40a69c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40a69e:	703b      	strb	r3, [r7, #0]
  40a6a0:	f107 0801 	add.w	r8, r7, #1
  40a6a4:	4297      	cmp	r7, r2
  40a6a6:	4645      	mov	r5, r8
  40a6a8:	f000 830c 	beq.w	40acc4 <_dtoa_r+0xc1c>
  40a6ac:	4649      	mov	r1, r9
  40a6ae:	2300      	movs	r3, #0
  40a6b0:	220a      	movs	r2, #10
  40a6b2:	4620      	mov	r0, r4
  40a6b4:	f001 fa40 	bl	40bb38 <__multadd>
  40a6b8:	455e      	cmp	r6, fp
  40a6ba:	4681      	mov	r9, r0
  40a6bc:	4631      	mov	r1, r6
  40a6be:	f04f 0300 	mov.w	r3, #0
  40a6c2:	f04f 020a 	mov.w	r2, #10
  40a6c6:	4620      	mov	r0, r4
  40a6c8:	f000 81eb 	beq.w	40aaa2 <_dtoa_r+0x9fa>
  40a6cc:	f001 fa34 	bl	40bb38 <__multadd>
  40a6d0:	4659      	mov	r1, fp
  40a6d2:	4606      	mov	r6, r0
  40a6d4:	2300      	movs	r3, #0
  40a6d6:	220a      	movs	r2, #10
  40a6d8:	4620      	mov	r0, r4
  40a6da:	f001 fa2d 	bl	40bb38 <__multadd>
  40a6de:	4647      	mov	r7, r8
  40a6e0:	4683      	mov	fp, r0
  40a6e2:	e7a3      	b.n	40a62c <_dtoa_r+0x584>
  40a6e4:	201c      	movs	r0, #28
  40a6e6:	9b08      	ldr	r3, [sp, #32]
  40a6e8:	4403      	add	r3, r0
  40a6ea:	9308      	str	r3, [sp, #32]
  40a6ec:	9b06      	ldr	r3, [sp, #24]
  40a6ee:	4403      	add	r3, r0
  40a6f0:	4405      	add	r5, r0
  40a6f2:	9306      	str	r3, [sp, #24]
  40a6f4:	e763      	b.n	40a5be <_dtoa_r+0x516>
  40a6f6:	4641      	mov	r1, r8
  40a6f8:	4648      	mov	r0, r9
  40a6fa:	f001 fbeb 	bl	40bed4 <__mcmp>
  40a6fe:	2800      	cmp	r0, #0
  40a700:	f6bf af73 	bge.w	40a5ea <_dtoa_r+0x542>
  40a704:	9f02      	ldr	r7, [sp, #8]
  40a706:	4649      	mov	r1, r9
  40a708:	2300      	movs	r3, #0
  40a70a:	220a      	movs	r2, #10
  40a70c:	4620      	mov	r0, r4
  40a70e:	3f01      	subs	r7, #1
  40a710:	9702      	str	r7, [sp, #8]
  40a712:	f001 fa11 	bl	40bb38 <__multadd>
  40a716:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40a718:	4681      	mov	r9, r0
  40a71a:	2b00      	cmp	r3, #0
  40a71c:	f040 83b6 	bne.w	40ae8c <_dtoa_r+0xde4>
  40a720:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40a722:	2b00      	cmp	r3, #0
  40a724:	f340 83bf 	ble.w	40aea6 <_dtoa_r+0xdfe>
  40a728:	930a      	str	r3, [sp, #40]	; 0x28
  40a72a:	f8dd b010 	ldr.w	fp, [sp, #16]
  40a72e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40a730:	465d      	mov	r5, fp
  40a732:	e002      	b.n	40a73a <_dtoa_r+0x692>
  40a734:	f001 fa00 	bl	40bb38 <__multadd>
  40a738:	4681      	mov	r9, r0
  40a73a:	4641      	mov	r1, r8
  40a73c:	4648      	mov	r0, r9
  40a73e:	f7ff fc1d 	bl	409f7c <quorem>
  40a742:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  40a746:	f805 ab01 	strb.w	sl, [r5], #1
  40a74a:	eba5 030b 	sub.w	r3, r5, fp
  40a74e:	42bb      	cmp	r3, r7
  40a750:	f04f 020a 	mov.w	r2, #10
  40a754:	f04f 0300 	mov.w	r3, #0
  40a758:	4649      	mov	r1, r9
  40a75a:	4620      	mov	r0, r4
  40a75c:	dbea      	blt.n	40a734 <_dtoa_r+0x68c>
  40a75e:	9b04      	ldr	r3, [sp, #16]
  40a760:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40a762:	2a01      	cmp	r2, #1
  40a764:	bfac      	ite	ge
  40a766:	189b      	addge	r3, r3, r2
  40a768:	3301      	addlt	r3, #1
  40a76a:	461d      	mov	r5, r3
  40a76c:	f04f 0b00 	mov.w	fp, #0
  40a770:	4649      	mov	r1, r9
  40a772:	2201      	movs	r2, #1
  40a774:	4620      	mov	r0, r4
  40a776:	f001 fb5b 	bl	40be30 <__lshift>
  40a77a:	4641      	mov	r1, r8
  40a77c:	4681      	mov	r9, r0
  40a77e:	f001 fba9 	bl	40bed4 <__mcmp>
  40a782:	2800      	cmp	r0, #0
  40a784:	f340 823d 	ble.w	40ac02 <_dtoa_r+0xb5a>
  40a788:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  40a78c:	9904      	ldr	r1, [sp, #16]
  40a78e:	1e6b      	subs	r3, r5, #1
  40a790:	e004      	b.n	40a79c <_dtoa_r+0x6f4>
  40a792:	428b      	cmp	r3, r1
  40a794:	f000 81ae 	beq.w	40aaf4 <_dtoa_r+0xa4c>
  40a798:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  40a79c:	2a39      	cmp	r2, #57	; 0x39
  40a79e:	f103 0501 	add.w	r5, r3, #1
  40a7a2:	d0f6      	beq.n	40a792 <_dtoa_r+0x6ea>
  40a7a4:	3201      	adds	r2, #1
  40a7a6:	701a      	strb	r2, [r3, #0]
  40a7a8:	4641      	mov	r1, r8
  40a7aa:	4620      	mov	r0, r4
  40a7ac:	f001 f9ba 	bl	40bb24 <_Bfree>
  40a7b0:	2e00      	cmp	r6, #0
  40a7b2:	f43f ae3d 	beq.w	40a430 <_dtoa_r+0x388>
  40a7b6:	f1bb 0f00 	cmp.w	fp, #0
  40a7ba:	d005      	beq.n	40a7c8 <_dtoa_r+0x720>
  40a7bc:	45b3      	cmp	fp, r6
  40a7be:	d003      	beq.n	40a7c8 <_dtoa_r+0x720>
  40a7c0:	4659      	mov	r1, fp
  40a7c2:	4620      	mov	r0, r4
  40a7c4:	f001 f9ae 	bl	40bb24 <_Bfree>
  40a7c8:	4631      	mov	r1, r6
  40a7ca:	4620      	mov	r0, r4
  40a7cc:	f001 f9aa 	bl	40bb24 <_Bfree>
  40a7d0:	e62e      	b.n	40a430 <_dtoa_r+0x388>
  40a7d2:	2300      	movs	r3, #0
  40a7d4:	930b      	str	r3, [sp, #44]	; 0x2c
  40a7d6:	9b02      	ldr	r3, [sp, #8]
  40a7d8:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40a7da:	4413      	add	r3, r2
  40a7dc:	930f      	str	r3, [sp, #60]	; 0x3c
  40a7de:	3301      	adds	r3, #1
  40a7e0:	2b01      	cmp	r3, #1
  40a7e2:	461f      	mov	r7, r3
  40a7e4:	461e      	mov	r6, r3
  40a7e6:	930a      	str	r3, [sp, #40]	; 0x28
  40a7e8:	bfb8      	it	lt
  40a7ea:	2701      	movlt	r7, #1
  40a7ec:	2100      	movs	r1, #0
  40a7ee:	2f17      	cmp	r7, #23
  40a7f0:	6461      	str	r1, [r4, #68]	; 0x44
  40a7f2:	d90a      	bls.n	40a80a <_dtoa_r+0x762>
  40a7f4:	2201      	movs	r2, #1
  40a7f6:	2304      	movs	r3, #4
  40a7f8:	005b      	lsls	r3, r3, #1
  40a7fa:	f103 0014 	add.w	r0, r3, #20
  40a7fe:	4287      	cmp	r7, r0
  40a800:	4611      	mov	r1, r2
  40a802:	f102 0201 	add.w	r2, r2, #1
  40a806:	d2f7      	bcs.n	40a7f8 <_dtoa_r+0x750>
  40a808:	6461      	str	r1, [r4, #68]	; 0x44
  40a80a:	4620      	mov	r0, r4
  40a80c:	f001 f964 	bl	40bad8 <_Balloc>
  40a810:	2e0e      	cmp	r6, #14
  40a812:	9004      	str	r0, [sp, #16]
  40a814:	6420      	str	r0, [r4, #64]	; 0x40
  40a816:	f63f ad41 	bhi.w	40a29c <_dtoa_r+0x1f4>
  40a81a:	2d00      	cmp	r5, #0
  40a81c:	f43f ad3e 	beq.w	40a29c <_dtoa_r+0x1f4>
  40a820:	9902      	ldr	r1, [sp, #8]
  40a822:	2900      	cmp	r1, #0
  40a824:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  40a828:	f340 8202 	ble.w	40ac30 <_dtoa_r+0xb88>
  40a82c:	4bb8      	ldr	r3, [pc, #736]	; (40ab10 <_dtoa_r+0xa68>)
  40a82e:	f001 020f 	and.w	r2, r1, #15
  40a832:	110d      	asrs	r5, r1, #4
  40a834:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40a838:	06e9      	lsls	r1, r5, #27
  40a83a:	e9d3 6700 	ldrd	r6, r7, [r3]
  40a83e:	f140 81ae 	bpl.w	40ab9e <_dtoa_r+0xaf6>
  40a842:	4bb4      	ldr	r3, [pc, #720]	; (40ab14 <_dtoa_r+0xa6c>)
  40a844:	4650      	mov	r0, sl
  40a846:	4659      	mov	r1, fp
  40a848:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  40a84c:	f002 fb54 	bl	40cef8 <__aeabi_ddiv>
  40a850:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  40a854:	f005 050f 	and.w	r5, r5, #15
  40a858:	f04f 0a03 	mov.w	sl, #3
  40a85c:	b18d      	cbz	r5, 40a882 <_dtoa_r+0x7da>
  40a85e:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 40ab14 <_dtoa_r+0xa6c>
  40a862:	07ea      	lsls	r2, r5, #31
  40a864:	d509      	bpl.n	40a87a <_dtoa_r+0x7d2>
  40a866:	4630      	mov	r0, r6
  40a868:	4639      	mov	r1, r7
  40a86a:	e9d8 2300 	ldrd	r2, r3, [r8]
  40a86e:	f002 fa19 	bl	40cca4 <__aeabi_dmul>
  40a872:	f10a 0a01 	add.w	sl, sl, #1
  40a876:	4606      	mov	r6, r0
  40a878:	460f      	mov	r7, r1
  40a87a:	106d      	asrs	r5, r5, #1
  40a87c:	f108 0808 	add.w	r8, r8, #8
  40a880:	d1ef      	bne.n	40a862 <_dtoa_r+0x7ba>
  40a882:	463b      	mov	r3, r7
  40a884:	4632      	mov	r2, r6
  40a886:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40a88a:	f002 fb35 	bl	40cef8 <__aeabi_ddiv>
  40a88e:	4607      	mov	r7, r0
  40a890:	4688      	mov	r8, r1
  40a892:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40a894:	b143      	cbz	r3, 40a8a8 <_dtoa_r+0x800>
  40a896:	2200      	movs	r2, #0
  40a898:	4b9f      	ldr	r3, [pc, #636]	; (40ab18 <_dtoa_r+0xa70>)
  40a89a:	4638      	mov	r0, r7
  40a89c:	4641      	mov	r1, r8
  40a89e:	f002 fc73 	bl	40d188 <__aeabi_dcmplt>
  40a8a2:	2800      	cmp	r0, #0
  40a8a4:	f040 8286 	bne.w	40adb4 <_dtoa_r+0xd0c>
  40a8a8:	4650      	mov	r0, sl
  40a8aa:	f002 f995 	bl	40cbd8 <__aeabi_i2d>
  40a8ae:	463a      	mov	r2, r7
  40a8b0:	4643      	mov	r3, r8
  40a8b2:	f002 f9f7 	bl	40cca4 <__aeabi_dmul>
  40a8b6:	4b99      	ldr	r3, [pc, #612]	; (40ab1c <_dtoa_r+0xa74>)
  40a8b8:	2200      	movs	r2, #0
  40a8ba:	f002 f841 	bl	40c940 <__adddf3>
  40a8be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40a8c0:	4605      	mov	r5, r0
  40a8c2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40a8c6:	2b00      	cmp	r3, #0
  40a8c8:	f000 813e 	beq.w	40ab48 <_dtoa_r+0xaa0>
  40a8cc:	9b02      	ldr	r3, [sp, #8]
  40a8ce:	9315      	str	r3, [sp, #84]	; 0x54
  40a8d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40a8d2:	9312      	str	r3, [sp, #72]	; 0x48
  40a8d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40a8d6:	2b00      	cmp	r3, #0
  40a8d8:	f000 81fa 	beq.w	40acd0 <_dtoa_r+0xc28>
  40a8dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40a8de:	4b8c      	ldr	r3, [pc, #560]	; (40ab10 <_dtoa_r+0xa68>)
  40a8e0:	498f      	ldr	r1, [pc, #572]	; (40ab20 <_dtoa_r+0xa78>)
  40a8e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40a8e6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  40a8ea:	2000      	movs	r0, #0
  40a8ec:	f002 fb04 	bl	40cef8 <__aeabi_ddiv>
  40a8f0:	462a      	mov	r2, r5
  40a8f2:	4633      	mov	r3, r6
  40a8f4:	f002 f822 	bl	40c93c <__aeabi_dsub>
  40a8f8:	4682      	mov	sl, r0
  40a8fa:	468b      	mov	fp, r1
  40a8fc:	4638      	mov	r0, r7
  40a8fe:	4641      	mov	r1, r8
  40a900:	f002 fc80 	bl	40d204 <__aeabi_d2iz>
  40a904:	4605      	mov	r5, r0
  40a906:	f002 f967 	bl	40cbd8 <__aeabi_i2d>
  40a90a:	4602      	mov	r2, r0
  40a90c:	460b      	mov	r3, r1
  40a90e:	4638      	mov	r0, r7
  40a910:	4641      	mov	r1, r8
  40a912:	f002 f813 	bl	40c93c <__aeabi_dsub>
  40a916:	3530      	adds	r5, #48	; 0x30
  40a918:	fa5f f885 	uxtb.w	r8, r5
  40a91c:	9d04      	ldr	r5, [sp, #16]
  40a91e:	4606      	mov	r6, r0
  40a920:	460f      	mov	r7, r1
  40a922:	f885 8000 	strb.w	r8, [r5]
  40a926:	4602      	mov	r2, r0
  40a928:	460b      	mov	r3, r1
  40a92a:	4650      	mov	r0, sl
  40a92c:	4659      	mov	r1, fp
  40a92e:	3501      	adds	r5, #1
  40a930:	f002 fc48 	bl	40d1c4 <__aeabi_dcmpgt>
  40a934:	2800      	cmp	r0, #0
  40a936:	d154      	bne.n	40a9e2 <_dtoa_r+0x93a>
  40a938:	4632      	mov	r2, r6
  40a93a:	463b      	mov	r3, r7
  40a93c:	2000      	movs	r0, #0
  40a93e:	4976      	ldr	r1, [pc, #472]	; (40ab18 <_dtoa_r+0xa70>)
  40a940:	f001 fffc 	bl	40c93c <__aeabi_dsub>
  40a944:	4602      	mov	r2, r0
  40a946:	460b      	mov	r3, r1
  40a948:	4650      	mov	r0, sl
  40a94a:	4659      	mov	r1, fp
  40a94c:	f002 fc3a 	bl	40d1c4 <__aeabi_dcmpgt>
  40a950:	2800      	cmp	r0, #0
  40a952:	f040 8270 	bne.w	40ae36 <_dtoa_r+0xd8e>
  40a956:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40a958:	2a01      	cmp	r2, #1
  40a95a:	f000 8111 	beq.w	40ab80 <_dtoa_r+0xad8>
  40a95e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40a960:	9a04      	ldr	r2, [sp, #16]
  40a962:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40a966:	4413      	add	r3, r2
  40a968:	4699      	mov	r9, r3
  40a96a:	e00d      	b.n	40a988 <_dtoa_r+0x8e0>
  40a96c:	2000      	movs	r0, #0
  40a96e:	496a      	ldr	r1, [pc, #424]	; (40ab18 <_dtoa_r+0xa70>)
  40a970:	f001 ffe4 	bl	40c93c <__aeabi_dsub>
  40a974:	4652      	mov	r2, sl
  40a976:	465b      	mov	r3, fp
  40a978:	f002 fc06 	bl	40d188 <__aeabi_dcmplt>
  40a97c:	2800      	cmp	r0, #0
  40a97e:	f040 8258 	bne.w	40ae32 <_dtoa_r+0xd8a>
  40a982:	454d      	cmp	r5, r9
  40a984:	f000 80fa 	beq.w	40ab7c <_dtoa_r+0xad4>
  40a988:	4650      	mov	r0, sl
  40a98a:	4659      	mov	r1, fp
  40a98c:	2200      	movs	r2, #0
  40a98e:	4b65      	ldr	r3, [pc, #404]	; (40ab24 <_dtoa_r+0xa7c>)
  40a990:	f002 f988 	bl	40cca4 <__aeabi_dmul>
  40a994:	2200      	movs	r2, #0
  40a996:	4b63      	ldr	r3, [pc, #396]	; (40ab24 <_dtoa_r+0xa7c>)
  40a998:	4682      	mov	sl, r0
  40a99a:	468b      	mov	fp, r1
  40a99c:	4630      	mov	r0, r6
  40a99e:	4639      	mov	r1, r7
  40a9a0:	f002 f980 	bl	40cca4 <__aeabi_dmul>
  40a9a4:	460f      	mov	r7, r1
  40a9a6:	4606      	mov	r6, r0
  40a9a8:	f002 fc2c 	bl	40d204 <__aeabi_d2iz>
  40a9ac:	4680      	mov	r8, r0
  40a9ae:	f002 f913 	bl	40cbd8 <__aeabi_i2d>
  40a9b2:	4602      	mov	r2, r0
  40a9b4:	460b      	mov	r3, r1
  40a9b6:	4630      	mov	r0, r6
  40a9b8:	4639      	mov	r1, r7
  40a9ba:	f001 ffbf 	bl	40c93c <__aeabi_dsub>
  40a9be:	f108 0830 	add.w	r8, r8, #48	; 0x30
  40a9c2:	fa5f f888 	uxtb.w	r8, r8
  40a9c6:	4652      	mov	r2, sl
  40a9c8:	465b      	mov	r3, fp
  40a9ca:	f805 8b01 	strb.w	r8, [r5], #1
  40a9ce:	4606      	mov	r6, r0
  40a9d0:	460f      	mov	r7, r1
  40a9d2:	f002 fbd9 	bl	40d188 <__aeabi_dcmplt>
  40a9d6:	4632      	mov	r2, r6
  40a9d8:	463b      	mov	r3, r7
  40a9da:	2800      	cmp	r0, #0
  40a9dc:	d0c6      	beq.n	40a96c <_dtoa_r+0x8c4>
  40a9de:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40a9e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40a9e4:	9302      	str	r3, [sp, #8]
  40a9e6:	e523      	b.n	40a430 <_dtoa_r+0x388>
  40a9e8:	2300      	movs	r3, #0
  40a9ea:	930b      	str	r3, [sp, #44]	; 0x2c
  40a9ec:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40a9ee:	2b00      	cmp	r3, #0
  40a9f0:	f340 80dc 	ble.w	40abac <_dtoa_r+0xb04>
  40a9f4:	461f      	mov	r7, r3
  40a9f6:	461e      	mov	r6, r3
  40a9f8:	930f      	str	r3, [sp, #60]	; 0x3c
  40a9fa:	930a      	str	r3, [sp, #40]	; 0x28
  40a9fc:	e6f6      	b.n	40a7ec <_dtoa_r+0x744>
  40a9fe:	2301      	movs	r3, #1
  40aa00:	930b      	str	r3, [sp, #44]	; 0x2c
  40aa02:	e7f3      	b.n	40a9ec <_dtoa_r+0x944>
  40aa04:	f1ba 0f00 	cmp.w	sl, #0
  40aa08:	f47f ada8 	bne.w	40a55c <_dtoa_r+0x4b4>
  40aa0c:	f3cb 0313 	ubfx	r3, fp, #0, #20
  40aa10:	2b00      	cmp	r3, #0
  40aa12:	f47f adba 	bne.w	40a58a <_dtoa_r+0x4e2>
  40aa16:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  40aa1a:	0d3f      	lsrs	r7, r7, #20
  40aa1c:	053f      	lsls	r7, r7, #20
  40aa1e:	2f00      	cmp	r7, #0
  40aa20:	f000 820d 	beq.w	40ae3e <_dtoa_r+0xd96>
  40aa24:	9b08      	ldr	r3, [sp, #32]
  40aa26:	3301      	adds	r3, #1
  40aa28:	9308      	str	r3, [sp, #32]
  40aa2a:	9b06      	ldr	r3, [sp, #24]
  40aa2c:	3301      	adds	r3, #1
  40aa2e:	9306      	str	r3, [sp, #24]
  40aa30:	2301      	movs	r3, #1
  40aa32:	930c      	str	r3, [sp, #48]	; 0x30
  40aa34:	e5ab      	b.n	40a58e <_dtoa_r+0x4e6>
  40aa36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40aa38:	2b00      	cmp	r3, #0
  40aa3a:	f73f ac42 	bgt.w	40a2c2 <_dtoa_r+0x21a>
  40aa3e:	f040 8221 	bne.w	40ae84 <_dtoa_r+0xddc>
  40aa42:	2200      	movs	r2, #0
  40aa44:	4b38      	ldr	r3, [pc, #224]	; (40ab28 <_dtoa_r+0xa80>)
  40aa46:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40aa4a:	f002 f92b 	bl	40cca4 <__aeabi_dmul>
  40aa4e:	4652      	mov	r2, sl
  40aa50:	465b      	mov	r3, fp
  40aa52:	f002 fbad 	bl	40d1b0 <__aeabi_dcmpge>
  40aa56:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  40aa5a:	4646      	mov	r6, r8
  40aa5c:	2800      	cmp	r0, #0
  40aa5e:	d041      	beq.n	40aae4 <_dtoa_r+0xa3c>
  40aa60:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40aa62:	9d04      	ldr	r5, [sp, #16]
  40aa64:	43db      	mvns	r3, r3
  40aa66:	9302      	str	r3, [sp, #8]
  40aa68:	4641      	mov	r1, r8
  40aa6a:	4620      	mov	r0, r4
  40aa6c:	f001 f85a 	bl	40bb24 <_Bfree>
  40aa70:	2e00      	cmp	r6, #0
  40aa72:	f43f acdd 	beq.w	40a430 <_dtoa_r+0x388>
  40aa76:	e6a7      	b.n	40a7c8 <_dtoa_r+0x720>
  40aa78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40aa7a:	4649      	mov	r1, r9
  40aa7c:	4620      	mov	r0, r4
  40aa7e:	f001 f987 	bl	40bd90 <__pow5mult>
  40aa82:	4681      	mov	r9, r0
  40aa84:	e558      	b.n	40a538 <_dtoa_r+0x490>
  40aa86:	9a14      	ldr	r2, [sp, #80]	; 0x50
  40aa88:	2a00      	cmp	r2, #0
  40aa8a:	f000 8187 	beq.w	40ad9c <_dtoa_r+0xcf4>
  40aa8e:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40aa92:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40aa94:	9d08      	ldr	r5, [sp, #32]
  40aa96:	e4f2      	b.n	40a47e <_dtoa_r+0x3d6>
  40aa98:	f1ba 0f00 	cmp.w	sl, #0
  40aa9c:	f47f ad75 	bne.w	40a58a <_dtoa_r+0x4e2>
  40aaa0:	e7b4      	b.n	40aa0c <_dtoa_r+0x964>
  40aaa2:	f001 f849 	bl	40bb38 <__multadd>
  40aaa6:	4647      	mov	r7, r8
  40aaa8:	4606      	mov	r6, r0
  40aaaa:	4683      	mov	fp, r0
  40aaac:	e5be      	b.n	40a62c <_dtoa_r+0x584>
  40aaae:	4601      	mov	r1, r0
  40aab0:	4620      	mov	r0, r4
  40aab2:	9306      	str	r3, [sp, #24]
  40aab4:	f001 f836 	bl	40bb24 <_Bfree>
  40aab8:	2201      	movs	r2, #1
  40aaba:	9b06      	ldr	r3, [sp, #24]
  40aabc:	e5e0      	b.n	40a680 <_dtoa_r+0x5d8>
  40aabe:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40aac0:	2b02      	cmp	r3, #2
  40aac2:	f77f ad96 	ble.w	40a5f2 <_dtoa_r+0x54a>
  40aac6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40aac8:	2b00      	cmp	r3, #0
  40aaca:	d1c9      	bne.n	40aa60 <_dtoa_r+0x9b8>
  40aacc:	4641      	mov	r1, r8
  40aace:	2205      	movs	r2, #5
  40aad0:	4620      	mov	r0, r4
  40aad2:	f001 f831 	bl	40bb38 <__multadd>
  40aad6:	4601      	mov	r1, r0
  40aad8:	4680      	mov	r8, r0
  40aada:	4648      	mov	r0, r9
  40aadc:	f001 f9fa 	bl	40bed4 <__mcmp>
  40aae0:	2800      	cmp	r0, #0
  40aae2:	ddbd      	ble.n	40aa60 <_dtoa_r+0x9b8>
  40aae4:	9a02      	ldr	r2, [sp, #8]
  40aae6:	9904      	ldr	r1, [sp, #16]
  40aae8:	2331      	movs	r3, #49	; 0x31
  40aaea:	3201      	adds	r2, #1
  40aaec:	9202      	str	r2, [sp, #8]
  40aaee:	700b      	strb	r3, [r1, #0]
  40aaf0:	1c4d      	adds	r5, r1, #1
  40aaf2:	e7b9      	b.n	40aa68 <_dtoa_r+0x9c0>
  40aaf4:	9a02      	ldr	r2, [sp, #8]
  40aaf6:	3201      	adds	r2, #1
  40aaf8:	9202      	str	r2, [sp, #8]
  40aafa:	9a04      	ldr	r2, [sp, #16]
  40aafc:	2331      	movs	r3, #49	; 0x31
  40aafe:	7013      	strb	r3, [r2, #0]
  40ab00:	e652      	b.n	40a7a8 <_dtoa_r+0x700>
  40ab02:	2301      	movs	r3, #1
  40ab04:	930b      	str	r3, [sp, #44]	; 0x2c
  40ab06:	e666      	b.n	40a7d6 <_dtoa_r+0x72e>
  40ab08:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  40ab0c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40ab0e:	e48f      	b.n	40a430 <_dtoa_r+0x388>
  40ab10:	0040ec30 	.word	0x0040ec30
  40ab14:	0040ec08 	.word	0x0040ec08
  40ab18:	3ff00000 	.word	0x3ff00000
  40ab1c:	401c0000 	.word	0x401c0000
  40ab20:	3fe00000 	.word	0x3fe00000
  40ab24:	40240000 	.word	0x40240000
  40ab28:	40140000 	.word	0x40140000
  40ab2c:	4650      	mov	r0, sl
  40ab2e:	f002 f853 	bl	40cbd8 <__aeabi_i2d>
  40ab32:	463a      	mov	r2, r7
  40ab34:	4643      	mov	r3, r8
  40ab36:	f002 f8b5 	bl	40cca4 <__aeabi_dmul>
  40ab3a:	2200      	movs	r2, #0
  40ab3c:	4bc1      	ldr	r3, [pc, #772]	; (40ae44 <_dtoa_r+0xd9c>)
  40ab3e:	f001 feff 	bl	40c940 <__adddf3>
  40ab42:	4605      	mov	r5, r0
  40ab44:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40ab48:	4641      	mov	r1, r8
  40ab4a:	2200      	movs	r2, #0
  40ab4c:	4bbe      	ldr	r3, [pc, #760]	; (40ae48 <_dtoa_r+0xda0>)
  40ab4e:	4638      	mov	r0, r7
  40ab50:	f001 fef4 	bl	40c93c <__aeabi_dsub>
  40ab54:	462a      	mov	r2, r5
  40ab56:	4633      	mov	r3, r6
  40ab58:	4682      	mov	sl, r0
  40ab5a:	468b      	mov	fp, r1
  40ab5c:	f002 fb32 	bl	40d1c4 <__aeabi_dcmpgt>
  40ab60:	4680      	mov	r8, r0
  40ab62:	2800      	cmp	r0, #0
  40ab64:	f040 8110 	bne.w	40ad88 <_dtoa_r+0xce0>
  40ab68:	462a      	mov	r2, r5
  40ab6a:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  40ab6e:	4650      	mov	r0, sl
  40ab70:	4659      	mov	r1, fp
  40ab72:	f002 fb09 	bl	40d188 <__aeabi_dcmplt>
  40ab76:	b118      	cbz	r0, 40ab80 <_dtoa_r+0xad8>
  40ab78:	4646      	mov	r6, r8
  40ab7a:	e771      	b.n	40aa60 <_dtoa_r+0x9b8>
  40ab7c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40ab80:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  40ab84:	f7ff bb8a 	b.w	40a29c <_dtoa_r+0x1f4>
  40ab88:	9804      	ldr	r0, [sp, #16]
  40ab8a:	f7ff babb 	b.w	40a104 <_dtoa_r+0x5c>
  40ab8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40ab90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40ab92:	970c      	str	r7, [sp, #48]	; 0x30
  40ab94:	1afb      	subs	r3, r7, r3
  40ab96:	441a      	add	r2, r3
  40ab98:	920d      	str	r2, [sp, #52]	; 0x34
  40ab9a:	2700      	movs	r7, #0
  40ab9c:	e469      	b.n	40a472 <_dtoa_r+0x3ca>
  40ab9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  40aba2:	f04f 0a02 	mov.w	sl, #2
  40aba6:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  40abaa:	e657      	b.n	40a85c <_dtoa_r+0x7b4>
  40abac:	2100      	movs	r1, #0
  40abae:	2301      	movs	r3, #1
  40abb0:	6461      	str	r1, [r4, #68]	; 0x44
  40abb2:	4620      	mov	r0, r4
  40abb4:	9325      	str	r3, [sp, #148]	; 0x94
  40abb6:	f000 ff8f 	bl	40bad8 <_Balloc>
  40abba:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40abbc:	9004      	str	r0, [sp, #16]
  40abbe:	6420      	str	r0, [r4, #64]	; 0x40
  40abc0:	930a      	str	r3, [sp, #40]	; 0x28
  40abc2:	930f      	str	r3, [sp, #60]	; 0x3c
  40abc4:	e629      	b.n	40a81a <_dtoa_r+0x772>
  40abc6:	2a00      	cmp	r2, #0
  40abc8:	46d0      	mov	r8, sl
  40abca:	f8cd b018 	str.w	fp, [sp, #24]
  40abce:	469a      	mov	sl, r3
  40abd0:	dd11      	ble.n	40abf6 <_dtoa_r+0xb4e>
  40abd2:	4649      	mov	r1, r9
  40abd4:	2201      	movs	r2, #1
  40abd6:	4620      	mov	r0, r4
  40abd8:	f001 f92a 	bl	40be30 <__lshift>
  40abdc:	4641      	mov	r1, r8
  40abde:	4681      	mov	r9, r0
  40abe0:	f001 f978 	bl	40bed4 <__mcmp>
  40abe4:	2800      	cmp	r0, #0
  40abe6:	f340 8146 	ble.w	40ae76 <_dtoa_r+0xdce>
  40abea:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  40abee:	f000 8106 	beq.w	40adfe <_dtoa_r+0xd56>
  40abf2:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  40abf6:	46b3      	mov	fp, r6
  40abf8:	f887 a000 	strb.w	sl, [r7]
  40abfc:	1c7d      	adds	r5, r7, #1
  40abfe:	9e06      	ldr	r6, [sp, #24]
  40ac00:	e5d2      	b.n	40a7a8 <_dtoa_r+0x700>
  40ac02:	d104      	bne.n	40ac0e <_dtoa_r+0xb66>
  40ac04:	f01a 0f01 	tst.w	sl, #1
  40ac08:	d001      	beq.n	40ac0e <_dtoa_r+0xb66>
  40ac0a:	e5bd      	b.n	40a788 <_dtoa_r+0x6e0>
  40ac0c:	4615      	mov	r5, r2
  40ac0e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40ac12:	2b30      	cmp	r3, #48	; 0x30
  40ac14:	f105 32ff 	add.w	r2, r5, #4294967295
  40ac18:	d0f8      	beq.n	40ac0c <_dtoa_r+0xb64>
  40ac1a:	e5c5      	b.n	40a7a8 <_dtoa_r+0x700>
  40ac1c:	9904      	ldr	r1, [sp, #16]
  40ac1e:	2230      	movs	r2, #48	; 0x30
  40ac20:	700a      	strb	r2, [r1, #0]
  40ac22:	9a02      	ldr	r2, [sp, #8]
  40ac24:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40ac28:	3201      	adds	r2, #1
  40ac2a:	9202      	str	r2, [sp, #8]
  40ac2c:	f7ff bbfc 	b.w	40a428 <_dtoa_r+0x380>
  40ac30:	f000 80bb 	beq.w	40adaa <_dtoa_r+0xd02>
  40ac34:	9b02      	ldr	r3, [sp, #8]
  40ac36:	425d      	negs	r5, r3
  40ac38:	4b84      	ldr	r3, [pc, #528]	; (40ae4c <_dtoa_r+0xda4>)
  40ac3a:	f005 020f 	and.w	r2, r5, #15
  40ac3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40ac42:	e9d3 2300 	ldrd	r2, r3, [r3]
  40ac46:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  40ac4a:	f002 f82b 	bl	40cca4 <__aeabi_dmul>
  40ac4e:	112d      	asrs	r5, r5, #4
  40ac50:	4607      	mov	r7, r0
  40ac52:	4688      	mov	r8, r1
  40ac54:	f000 812c 	beq.w	40aeb0 <_dtoa_r+0xe08>
  40ac58:	4e7d      	ldr	r6, [pc, #500]	; (40ae50 <_dtoa_r+0xda8>)
  40ac5a:	f04f 0a02 	mov.w	sl, #2
  40ac5e:	07eb      	lsls	r3, r5, #31
  40ac60:	d509      	bpl.n	40ac76 <_dtoa_r+0xbce>
  40ac62:	4638      	mov	r0, r7
  40ac64:	4641      	mov	r1, r8
  40ac66:	e9d6 2300 	ldrd	r2, r3, [r6]
  40ac6a:	f002 f81b 	bl	40cca4 <__aeabi_dmul>
  40ac6e:	f10a 0a01 	add.w	sl, sl, #1
  40ac72:	4607      	mov	r7, r0
  40ac74:	4688      	mov	r8, r1
  40ac76:	106d      	asrs	r5, r5, #1
  40ac78:	f106 0608 	add.w	r6, r6, #8
  40ac7c:	d1ef      	bne.n	40ac5e <_dtoa_r+0xbb6>
  40ac7e:	e608      	b.n	40a892 <_dtoa_r+0x7ea>
  40ac80:	6871      	ldr	r1, [r6, #4]
  40ac82:	4620      	mov	r0, r4
  40ac84:	f000 ff28 	bl	40bad8 <_Balloc>
  40ac88:	6933      	ldr	r3, [r6, #16]
  40ac8a:	3302      	adds	r3, #2
  40ac8c:	009a      	lsls	r2, r3, #2
  40ac8e:	4605      	mov	r5, r0
  40ac90:	f106 010c 	add.w	r1, r6, #12
  40ac94:	300c      	adds	r0, #12
  40ac96:	f7fc fe0f 	bl	4078b8 <memcpy>
  40ac9a:	4629      	mov	r1, r5
  40ac9c:	2201      	movs	r2, #1
  40ac9e:	4620      	mov	r0, r4
  40aca0:	f001 f8c6 	bl	40be30 <__lshift>
  40aca4:	9006      	str	r0, [sp, #24]
  40aca6:	e4b5      	b.n	40a614 <_dtoa_r+0x56c>
  40aca8:	2b39      	cmp	r3, #57	; 0x39
  40acaa:	f8cd b018 	str.w	fp, [sp, #24]
  40acae:	46d0      	mov	r8, sl
  40acb0:	f000 80a5 	beq.w	40adfe <_dtoa_r+0xd56>
  40acb4:	f103 0a01 	add.w	sl, r3, #1
  40acb8:	46b3      	mov	fp, r6
  40acba:	f887 a000 	strb.w	sl, [r7]
  40acbe:	1c7d      	adds	r5, r7, #1
  40acc0:	9e06      	ldr	r6, [sp, #24]
  40acc2:	e571      	b.n	40a7a8 <_dtoa_r+0x700>
  40acc4:	465a      	mov	r2, fp
  40acc6:	46d0      	mov	r8, sl
  40acc8:	46b3      	mov	fp, r6
  40acca:	469a      	mov	sl, r3
  40accc:	4616      	mov	r6, r2
  40acce:	e54f      	b.n	40a770 <_dtoa_r+0x6c8>
  40acd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40acd2:	495e      	ldr	r1, [pc, #376]	; (40ae4c <_dtoa_r+0xda4>)
  40acd4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  40acd8:	462a      	mov	r2, r5
  40acda:	4633      	mov	r3, r6
  40acdc:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  40ace0:	f001 ffe0 	bl	40cca4 <__aeabi_dmul>
  40ace4:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  40ace8:	4638      	mov	r0, r7
  40acea:	4641      	mov	r1, r8
  40acec:	f002 fa8a 	bl	40d204 <__aeabi_d2iz>
  40acf0:	4605      	mov	r5, r0
  40acf2:	f001 ff71 	bl	40cbd8 <__aeabi_i2d>
  40acf6:	460b      	mov	r3, r1
  40acf8:	4602      	mov	r2, r0
  40acfa:	4641      	mov	r1, r8
  40acfc:	4638      	mov	r0, r7
  40acfe:	f001 fe1d 	bl	40c93c <__aeabi_dsub>
  40ad02:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40ad04:	460f      	mov	r7, r1
  40ad06:	9904      	ldr	r1, [sp, #16]
  40ad08:	3530      	adds	r5, #48	; 0x30
  40ad0a:	2b01      	cmp	r3, #1
  40ad0c:	700d      	strb	r5, [r1, #0]
  40ad0e:	4606      	mov	r6, r0
  40ad10:	f101 0501 	add.w	r5, r1, #1
  40ad14:	d026      	beq.n	40ad64 <_dtoa_r+0xcbc>
  40ad16:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40ad18:	9a04      	ldr	r2, [sp, #16]
  40ad1a:	f8df b13c 	ldr.w	fp, [pc, #316]	; 40ae58 <_dtoa_r+0xdb0>
  40ad1e:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40ad22:	4413      	add	r3, r2
  40ad24:	f04f 0a00 	mov.w	sl, #0
  40ad28:	4699      	mov	r9, r3
  40ad2a:	4652      	mov	r2, sl
  40ad2c:	465b      	mov	r3, fp
  40ad2e:	4630      	mov	r0, r6
  40ad30:	4639      	mov	r1, r7
  40ad32:	f001 ffb7 	bl	40cca4 <__aeabi_dmul>
  40ad36:	460f      	mov	r7, r1
  40ad38:	4606      	mov	r6, r0
  40ad3a:	f002 fa63 	bl	40d204 <__aeabi_d2iz>
  40ad3e:	4680      	mov	r8, r0
  40ad40:	f001 ff4a 	bl	40cbd8 <__aeabi_i2d>
  40ad44:	f108 0830 	add.w	r8, r8, #48	; 0x30
  40ad48:	4602      	mov	r2, r0
  40ad4a:	460b      	mov	r3, r1
  40ad4c:	4630      	mov	r0, r6
  40ad4e:	4639      	mov	r1, r7
  40ad50:	f001 fdf4 	bl	40c93c <__aeabi_dsub>
  40ad54:	f805 8b01 	strb.w	r8, [r5], #1
  40ad58:	454d      	cmp	r5, r9
  40ad5a:	4606      	mov	r6, r0
  40ad5c:	460f      	mov	r7, r1
  40ad5e:	d1e4      	bne.n	40ad2a <_dtoa_r+0xc82>
  40ad60:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40ad64:	4b3b      	ldr	r3, [pc, #236]	; (40ae54 <_dtoa_r+0xdac>)
  40ad66:	2200      	movs	r2, #0
  40ad68:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  40ad6c:	f001 fde8 	bl	40c940 <__adddf3>
  40ad70:	4632      	mov	r2, r6
  40ad72:	463b      	mov	r3, r7
  40ad74:	f002 fa08 	bl	40d188 <__aeabi_dcmplt>
  40ad78:	2800      	cmp	r0, #0
  40ad7a:	d046      	beq.n	40ae0a <_dtoa_r+0xd62>
  40ad7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40ad7e:	9302      	str	r3, [sp, #8]
  40ad80:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40ad84:	f7ff bb43 	b.w	40a40e <_dtoa_r+0x366>
  40ad88:	f04f 0800 	mov.w	r8, #0
  40ad8c:	4646      	mov	r6, r8
  40ad8e:	e6a9      	b.n	40aae4 <_dtoa_r+0xa3c>
  40ad90:	9b08      	ldr	r3, [sp, #32]
  40ad92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40ad94:	1a9d      	subs	r5, r3, r2
  40ad96:	2300      	movs	r3, #0
  40ad98:	f7ff bb71 	b.w	40a47e <_dtoa_r+0x3d6>
  40ad9c:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40ad9e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40ada0:	9d08      	ldr	r5, [sp, #32]
  40ada2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40ada6:	f7ff bb6a 	b.w	40a47e <_dtoa_r+0x3d6>
  40adaa:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  40adae:	f04f 0a02 	mov.w	sl, #2
  40adb2:	e56e      	b.n	40a892 <_dtoa_r+0x7ea>
  40adb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40adb6:	2b00      	cmp	r3, #0
  40adb8:	f43f aeb8 	beq.w	40ab2c <_dtoa_r+0xa84>
  40adbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40adbe:	2b00      	cmp	r3, #0
  40adc0:	f77f aede 	ble.w	40ab80 <_dtoa_r+0xad8>
  40adc4:	2200      	movs	r2, #0
  40adc6:	4b24      	ldr	r3, [pc, #144]	; (40ae58 <_dtoa_r+0xdb0>)
  40adc8:	4638      	mov	r0, r7
  40adca:	4641      	mov	r1, r8
  40adcc:	f001 ff6a 	bl	40cca4 <__aeabi_dmul>
  40add0:	4607      	mov	r7, r0
  40add2:	4688      	mov	r8, r1
  40add4:	f10a 0001 	add.w	r0, sl, #1
  40add8:	f001 fefe 	bl	40cbd8 <__aeabi_i2d>
  40addc:	463a      	mov	r2, r7
  40adde:	4643      	mov	r3, r8
  40ade0:	f001 ff60 	bl	40cca4 <__aeabi_dmul>
  40ade4:	2200      	movs	r2, #0
  40ade6:	4b17      	ldr	r3, [pc, #92]	; (40ae44 <_dtoa_r+0xd9c>)
  40ade8:	f001 fdaa 	bl	40c940 <__adddf3>
  40adec:	9a02      	ldr	r2, [sp, #8]
  40adee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40adf0:	9312      	str	r3, [sp, #72]	; 0x48
  40adf2:	3a01      	subs	r2, #1
  40adf4:	4605      	mov	r5, r0
  40adf6:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40adfa:	9215      	str	r2, [sp, #84]	; 0x54
  40adfc:	e56a      	b.n	40a8d4 <_dtoa_r+0x82c>
  40adfe:	2239      	movs	r2, #57	; 0x39
  40ae00:	46b3      	mov	fp, r6
  40ae02:	703a      	strb	r2, [r7, #0]
  40ae04:	9e06      	ldr	r6, [sp, #24]
  40ae06:	1c7d      	adds	r5, r7, #1
  40ae08:	e4c0      	b.n	40a78c <_dtoa_r+0x6e4>
  40ae0a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  40ae0e:	2000      	movs	r0, #0
  40ae10:	4910      	ldr	r1, [pc, #64]	; (40ae54 <_dtoa_r+0xdac>)
  40ae12:	f001 fd93 	bl	40c93c <__aeabi_dsub>
  40ae16:	4632      	mov	r2, r6
  40ae18:	463b      	mov	r3, r7
  40ae1a:	f002 f9d3 	bl	40d1c4 <__aeabi_dcmpgt>
  40ae1e:	b908      	cbnz	r0, 40ae24 <_dtoa_r+0xd7c>
  40ae20:	e6ae      	b.n	40ab80 <_dtoa_r+0xad8>
  40ae22:	4615      	mov	r5, r2
  40ae24:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40ae28:	2b30      	cmp	r3, #48	; 0x30
  40ae2a:	f105 32ff 	add.w	r2, r5, #4294967295
  40ae2e:	d0f8      	beq.n	40ae22 <_dtoa_r+0xd7a>
  40ae30:	e5d7      	b.n	40a9e2 <_dtoa_r+0x93a>
  40ae32:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40ae36:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40ae38:	9302      	str	r3, [sp, #8]
  40ae3a:	f7ff bae8 	b.w	40a40e <_dtoa_r+0x366>
  40ae3e:	970c      	str	r7, [sp, #48]	; 0x30
  40ae40:	f7ff bba5 	b.w	40a58e <_dtoa_r+0x4e6>
  40ae44:	401c0000 	.word	0x401c0000
  40ae48:	40140000 	.word	0x40140000
  40ae4c:	0040ec30 	.word	0x0040ec30
  40ae50:	0040ec08 	.word	0x0040ec08
  40ae54:	3fe00000 	.word	0x3fe00000
  40ae58:	40240000 	.word	0x40240000
  40ae5c:	2b39      	cmp	r3, #57	; 0x39
  40ae5e:	f8cd b018 	str.w	fp, [sp, #24]
  40ae62:	46d0      	mov	r8, sl
  40ae64:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40ae68:	469a      	mov	sl, r3
  40ae6a:	d0c8      	beq.n	40adfe <_dtoa_r+0xd56>
  40ae6c:	f1bb 0f00 	cmp.w	fp, #0
  40ae70:	f73f aebf 	bgt.w	40abf2 <_dtoa_r+0xb4a>
  40ae74:	e6bf      	b.n	40abf6 <_dtoa_r+0xb4e>
  40ae76:	f47f aebe 	bne.w	40abf6 <_dtoa_r+0xb4e>
  40ae7a:	f01a 0f01 	tst.w	sl, #1
  40ae7e:	f43f aeba 	beq.w	40abf6 <_dtoa_r+0xb4e>
  40ae82:	e6b2      	b.n	40abea <_dtoa_r+0xb42>
  40ae84:	f04f 0800 	mov.w	r8, #0
  40ae88:	4646      	mov	r6, r8
  40ae8a:	e5e9      	b.n	40aa60 <_dtoa_r+0x9b8>
  40ae8c:	4631      	mov	r1, r6
  40ae8e:	2300      	movs	r3, #0
  40ae90:	220a      	movs	r2, #10
  40ae92:	4620      	mov	r0, r4
  40ae94:	f000 fe50 	bl	40bb38 <__multadd>
  40ae98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40ae9a:	2b00      	cmp	r3, #0
  40ae9c:	4606      	mov	r6, r0
  40ae9e:	dd0a      	ble.n	40aeb6 <_dtoa_r+0xe0e>
  40aea0:	930a      	str	r3, [sp, #40]	; 0x28
  40aea2:	f7ff bbaa 	b.w	40a5fa <_dtoa_r+0x552>
  40aea6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40aea8:	2b02      	cmp	r3, #2
  40aeaa:	dc23      	bgt.n	40aef4 <_dtoa_r+0xe4c>
  40aeac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40aeae:	e43b      	b.n	40a728 <_dtoa_r+0x680>
  40aeb0:	f04f 0a02 	mov.w	sl, #2
  40aeb4:	e4ed      	b.n	40a892 <_dtoa_r+0x7ea>
  40aeb6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40aeb8:	2b02      	cmp	r3, #2
  40aeba:	dc1b      	bgt.n	40aef4 <_dtoa_r+0xe4c>
  40aebc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40aebe:	e7ef      	b.n	40aea0 <_dtoa_r+0xdf8>
  40aec0:	2500      	movs	r5, #0
  40aec2:	6465      	str	r5, [r4, #68]	; 0x44
  40aec4:	4629      	mov	r1, r5
  40aec6:	4620      	mov	r0, r4
  40aec8:	f000 fe06 	bl	40bad8 <_Balloc>
  40aecc:	f04f 33ff 	mov.w	r3, #4294967295
  40aed0:	930a      	str	r3, [sp, #40]	; 0x28
  40aed2:	930f      	str	r3, [sp, #60]	; 0x3c
  40aed4:	2301      	movs	r3, #1
  40aed6:	9004      	str	r0, [sp, #16]
  40aed8:	9525      	str	r5, [sp, #148]	; 0x94
  40aeda:	6420      	str	r0, [r4, #64]	; 0x40
  40aedc:	930b      	str	r3, [sp, #44]	; 0x2c
  40aede:	f7ff b9dd 	b.w	40a29c <_dtoa_r+0x1f4>
  40aee2:	2501      	movs	r5, #1
  40aee4:	f7ff b9a5 	b.w	40a232 <_dtoa_r+0x18a>
  40aee8:	f43f ab69 	beq.w	40a5be <_dtoa_r+0x516>
  40aeec:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  40aef0:	f7ff bbf9 	b.w	40a6e6 <_dtoa_r+0x63e>
  40aef4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40aef6:	930a      	str	r3, [sp, #40]	; 0x28
  40aef8:	e5e5      	b.n	40aac6 <_dtoa_r+0xa1e>
  40aefa:	bf00      	nop

0040aefc <__sflush_r>:
  40aefc:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40af00:	b29a      	uxth	r2, r3
  40af02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40af06:	460d      	mov	r5, r1
  40af08:	0711      	lsls	r1, r2, #28
  40af0a:	4680      	mov	r8, r0
  40af0c:	d43a      	bmi.n	40af84 <__sflush_r+0x88>
  40af0e:	686a      	ldr	r2, [r5, #4]
  40af10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40af14:	2a00      	cmp	r2, #0
  40af16:	81ab      	strh	r3, [r5, #12]
  40af18:	dd6f      	ble.n	40affa <__sflush_r+0xfe>
  40af1a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40af1c:	2c00      	cmp	r4, #0
  40af1e:	d049      	beq.n	40afb4 <__sflush_r+0xb8>
  40af20:	2200      	movs	r2, #0
  40af22:	b29b      	uxth	r3, r3
  40af24:	f8d8 6000 	ldr.w	r6, [r8]
  40af28:	f8c8 2000 	str.w	r2, [r8]
  40af2c:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  40af30:	d067      	beq.n	40b002 <__sflush_r+0x106>
  40af32:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  40af34:	075f      	lsls	r7, r3, #29
  40af36:	d505      	bpl.n	40af44 <__sflush_r+0x48>
  40af38:	6869      	ldr	r1, [r5, #4]
  40af3a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40af3c:	1a52      	subs	r2, r2, r1
  40af3e:	b10b      	cbz	r3, 40af44 <__sflush_r+0x48>
  40af40:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40af42:	1ad2      	subs	r2, r2, r3
  40af44:	2300      	movs	r3, #0
  40af46:	69e9      	ldr	r1, [r5, #28]
  40af48:	4640      	mov	r0, r8
  40af4a:	47a0      	blx	r4
  40af4c:	1c44      	adds	r4, r0, #1
  40af4e:	d03c      	beq.n	40afca <__sflush_r+0xce>
  40af50:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  40af54:	692a      	ldr	r2, [r5, #16]
  40af56:	602a      	str	r2, [r5, #0]
  40af58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40af5c:	2200      	movs	r2, #0
  40af5e:	81ab      	strh	r3, [r5, #12]
  40af60:	04db      	lsls	r3, r3, #19
  40af62:	606a      	str	r2, [r5, #4]
  40af64:	d447      	bmi.n	40aff6 <__sflush_r+0xfa>
  40af66:	6b29      	ldr	r1, [r5, #48]	; 0x30
  40af68:	f8c8 6000 	str.w	r6, [r8]
  40af6c:	b311      	cbz	r1, 40afb4 <__sflush_r+0xb8>
  40af6e:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40af72:	4299      	cmp	r1, r3
  40af74:	d002      	beq.n	40af7c <__sflush_r+0x80>
  40af76:	4640      	mov	r0, r8
  40af78:	f000 f9ca 	bl	40b310 <_free_r>
  40af7c:	2000      	movs	r0, #0
  40af7e:	6328      	str	r0, [r5, #48]	; 0x30
  40af80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40af84:	692e      	ldr	r6, [r5, #16]
  40af86:	b1ae      	cbz	r6, 40afb4 <__sflush_r+0xb8>
  40af88:	682c      	ldr	r4, [r5, #0]
  40af8a:	602e      	str	r6, [r5, #0]
  40af8c:	0791      	lsls	r1, r2, #30
  40af8e:	bf0c      	ite	eq
  40af90:	696b      	ldreq	r3, [r5, #20]
  40af92:	2300      	movne	r3, #0
  40af94:	1ba4      	subs	r4, r4, r6
  40af96:	60ab      	str	r3, [r5, #8]
  40af98:	e00a      	b.n	40afb0 <__sflush_r+0xb4>
  40af9a:	4623      	mov	r3, r4
  40af9c:	4632      	mov	r2, r6
  40af9e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40afa0:	69e9      	ldr	r1, [r5, #28]
  40afa2:	4640      	mov	r0, r8
  40afa4:	47b8      	blx	r7
  40afa6:	2800      	cmp	r0, #0
  40afa8:	eba4 0400 	sub.w	r4, r4, r0
  40afac:	4406      	add	r6, r0
  40afae:	dd04      	ble.n	40afba <__sflush_r+0xbe>
  40afb0:	2c00      	cmp	r4, #0
  40afb2:	dcf2      	bgt.n	40af9a <__sflush_r+0x9e>
  40afb4:	2000      	movs	r0, #0
  40afb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40afba:	89ab      	ldrh	r3, [r5, #12]
  40afbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40afc0:	81ab      	strh	r3, [r5, #12]
  40afc2:	f04f 30ff 	mov.w	r0, #4294967295
  40afc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40afca:	f8d8 4000 	ldr.w	r4, [r8]
  40afce:	2c1d      	cmp	r4, #29
  40afd0:	d8f3      	bhi.n	40afba <__sflush_r+0xbe>
  40afd2:	4b19      	ldr	r3, [pc, #100]	; (40b038 <__sflush_r+0x13c>)
  40afd4:	40e3      	lsrs	r3, r4
  40afd6:	43db      	mvns	r3, r3
  40afd8:	f013 0301 	ands.w	r3, r3, #1
  40afdc:	d1ed      	bne.n	40afba <__sflush_r+0xbe>
  40afde:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  40afe2:	606b      	str	r3, [r5, #4]
  40afe4:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  40afe8:	6929      	ldr	r1, [r5, #16]
  40afea:	81ab      	strh	r3, [r5, #12]
  40afec:	04da      	lsls	r2, r3, #19
  40afee:	6029      	str	r1, [r5, #0]
  40aff0:	d5b9      	bpl.n	40af66 <__sflush_r+0x6a>
  40aff2:	2c00      	cmp	r4, #0
  40aff4:	d1b7      	bne.n	40af66 <__sflush_r+0x6a>
  40aff6:	6528      	str	r0, [r5, #80]	; 0x50
  40aff8:	e7b5      	b.n	40af66 <__sflush_r+0x6a>
  40affa:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  40affc:	2a00      	cmp	r2, #0
  40affe:	dc8c      	bgt.n	40af1a <__sflush_r+0x1e>
  40b000:	e7d8      	b.n	40afb4 <__sflush_r+0xb8>
  40b002:	2301      	movs	r3, #1
  40b004:	69e9      	ldr	r1, [r5, #28]
  40b006:	4640      	mov	r0, r8
  40b008:	47a0      	blx	r4
  40b00a:	1c43      	adds	r3, r0, #1
  40b00c:	4602      	mov	r2, r0
  40b00e:	d002      	beq.n	40b016 <__sflush_r+0x11a>
  40b010:	89ab      	ldrh	r3, [r5, #12]
  40b012:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40b014:	e78e      	b.n	40af34 <__sflush_r+0x38>
  40b016:	f8d8 3000 	ldr.w	r3, [r8]
  40b01a:	2b00      	cmp	r3, #0
  40b01c:	d0f8      	beq.n	40b010 <__sflush_r+0x114>
  40b01e:	2b1d      	cmp	r3, #29
  40b020:	d001      	beq.n	40b026 <__sflush_r+0x12a>
  40b022:	2b16      	cmp	r3, #22
  40b024:	d102      	bne.n	40b02c <__sflush_r+0x130>
  40b026:	f8c8 6000 	str.w	r6, [r8]
  40b02a:	e7c3      	b.n	40afb4 <__sflush_r+0xb8>
  40b02c:	89ab      	ldrh	r3, [r5, #12]
  40b02e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40b032:	81ab      	strh	r3, [r5, #12]
  40b034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b038:	20400001 	.word	0x20400001

0040b03c <_fflush_r>:
  40b03c:	b510      	push	{r4, lr}
  40b03e:	4604      	mov	r4, r0
  40b040:	b082      	sub	sp, #8
  40b042:	b108      	cbz	r0, 40b048 <_fflush_r+0xc>
  40b044:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40b046:	b153      	cbz	r3, 40b05e <_fflush_r+0x22>
  40b048:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  40b04c:	b908      	cbnz	r0, 40b052 <_fflush_r+0x16>
  40b04e:	b002      	add	sp, #8
  40b050:	bd10      	pop	{r4, pc}
  40b052:	4620      	mov	r0, r4
  40b054:	b002      	add	sp, #8
  40b056:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40b05a:	f7ff bf4f 	b.w	40aefc <__sflush_r>
  40b05e:	9101      	str	r1, [sp, #4]
  40b060:	f000 f880 	bl	40b164 <__sinit>
  40b064:	9901      	ldr	r1, [sp, #4]
  40b066:	e7ef      	b.n	40b048 <_fflush_r+0xc>

0040b068 <_cleanup_r>:
  40b068:	4901      	ldr	r1, [pc, #4]	; (40b070 <_cleanup_r+0x8>)
  40b06a:	f000 bbaf 	b.w	40b7cc <_fwalk_reent>
  40b06e:	bf00      	nop
  40b070:	0040c811 	.word	0x0040c811

0040b074 <__sinit.part.1>:
  40b074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b078:	4b35      	ldr	r3, [pc, #212]	; (40b150 <__sinit.part.1+0xdc>)
  40b07a:	6845      	ldr	r5, [r0, #4]
  40b07c:	63c3      	str	r3, [r0, #60]	; 0x3c
  40b07e:	2400      	movs	r4, #0
  40b080:	4607      	mov	r7, r0
  40b082:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  40b086:	2304      	movs	r3, #4
  40b088:	2103      	movs	r1, #3
  40b08a:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  40b08e:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  40b092:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  40b096:	b083      	sub	sp, #12
  40b098:	602c      	str	r4, [r5, #0]
  40b09a:	606c      	str	r4, [r5, #4]
  40b09c:	60ac      	str	r4, [r5, #8]
  40b09e:	666c      	str	r4, [r5, #100]	; 0x64
  40b0a0:	81ec      	strh	r4, [r5, #14]
  40b0a2:	612c      	str	r4, [r5, #16]
  40b0a4:	616c      	str	r4, [r5, #20]
  40b0a6:	61ac      	str	r4, [r5, #24]
  40b0a8:	81ab      	strh	r3, [r5, #12]
  40b0aa:	4621      	mov	r1, r4
  40b0ac:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  40b0b0:	2208      	movs	r2, #8
  40b0b2:	f7fc fc9b 	bl	4079ec <memset>
  40b0b6:	68be      	ldr	r6, [r7, #8]
  40b0b8:	f8df b098 	ldr.w	fp, [pc, #152]	; 40b154 <__sinit.part.1+0xe0>
  40b0bc:	f8df a098 	ldr.w	sl, [pc, #152]	; 40b158 <__sinit.part.1+0xe4>
  40b0c0:	f8df 9098 	ldr.w	r9, [pc, #152]	; 40b15c <__sinit.part.1+0xe8>
  40b0c4:	f8df 8098 	ldr.w	r8, [pc, #152]	; 40b160 <__sinit.part.1+0xec>
  40b0c8:	f8c5 b020 	str.w	fp, [r5, #32]
  40b0cc:	2301      	movs	r3, #1
  40b0ce:	2209      	movs	r2, #9
  40b0d0:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  40b0d4:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  40b0d8:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  40b0dc:	61ed      	str	r5, [r5, #28]
  40b0de:	4621      	mov	r1, r4
  40b0e0:	81f3      	strh	r3, [r6, #14]
  40b0e2:	81b2      	strh	r2, [r6, #12]
  40b0e4:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  40b0e8:	6034      	str	r4, [r6, #0]
  40b0ea:	6074      	str	r4, [r6, #4]
  40b0ec:	60b4      	str	r4, [r6, #8]
  40b0ee:	6674      	str	r4, [r6, #100]	; 0x64
  40b0f0:	6134      	str	r4, [r6, #16]
  40b0f2:	6174      	str	r4, [r6, #20]
  40b0f4:	61b4      	str	r4, [r6, #24]
  40b0f6:	2208      	movs	r2, #8
  40b0f8:	9301      	str	r3, [sp, #4]
  40b0fa:	f7fc fc77 	bl	4079ec <memset>
  40b0fe:	68fd      	ldr	r5, [r7, #12]
  40b100:	61f6      	str	r6, [r6, #28]
  40b102:	2012      	movs	r0, #18
  40b104:	2202      	movs	r2, #2
  40b106:	f8c6 b020 	str.w	fp, [r6, #32]
  40b10a:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  40b10e:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  40b112:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  40b116:	4621      	mov	r1, r4
  40b118:	81a8      	strh	r0, [r5, #12]
  40b11a:	81ea      	strh	r2, [r5, #14]
  40b11c:	602c      	str	r4, [r5, #0]
  40b11e:	606c      	str	r4, [r5, #4]
  40b120:	60ac      	str	r4, [r5, #8]
  40b122:	666c      	str	r4, [r5, #100]	; 0x64
  40b124:	612c      	str	r4, [r5, #16]
  40b126:	616c      	str	r4, [r5, #20]
  40b128:	61ac      	str	r4, [r5, #24]
  40b12a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  40b12e:	2208      	movs	r2, #8
  40b130:	f7fc fc5c 	bl	4079ec <memset>
  40b134:	9b01      	ldr	r3, [sp, #4]
  40b136:	61ed      	str	r5, [r5, #28]
  40b138:	f8c5 b020 	str.w	fp, [r5, #32]
  40b13c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  40b140:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  40b144:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  40b148:	63bb      	str	r3, [r7, #56]	; 0x38
  40b14a:	b003      	add	sp, #12
  40b14c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b150:	0040b069 	.word	0x0040b069
  40b154:	0040c419 	.word	0x0040c419
  40b158:	0040c43d 	.word	0x0040c43d
  40b15c:	0040c479 	.word	0x0040c479
  40b160:	0040c499 	.word	0x0040c499

0040b164 <__sinit>:
  40b164:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40b166:	b103      	cbz	r3, 40b16a <__sinit+0x6>
  40b168:	4770      	bx	lr
  40b16a:	f7ff bf83 	b.w	40b074 <__sinit.part.1>
  40b16e:	bf00      	nop

0040b170 <__sfp_lock_acquire>:
  40b170:	4770      	bx	lr
  40b172:	bf00      	nop

0040b174 <__sfp_lock_release>:
  40b174:	4770      	bx	lr
  40b176:	bf00      	nop

0040b178 <__libc_fini_array>:
  40b178:	b538      	push	{r3, r4, r5, lr}
  40b17a:	4c0a      	ldr	r4, [pc, #40]	; (40b1a4 <__libc_fini_array+0x2c>)
  40b17c:	4d0a      	ldr	r5, [pc, #40]	; (40b1a8 <__libc_fini_array+0x30>)
  40b17e:	1b64      	subs	r4, r4, r5
  40b180:	10a4      	asrs	r4, r4, #2
  40b182:	d00a      	beq.n	40b19a <__libc_fini_array+0x22>
  40b184:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40b188:	3b01      	subs	r3, #1
  40b18a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40b18e:	3c01      	subs	r4, #1
  40b190:	f855 3904 	ldr.w	r3, [r5], #-4
  40b194:	4798      	blx	r3
  40b196:	2c00      	cmp	r4, #0
  40b198:	d1f9      	bne.n	40b18e <__libc_fini_array+0x16>
  40b19a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40b19e:	f003 be3d 	b.w	40ee1c <_fini>
  40b1a2:	bf00      	nop
  40b1a4:	0040ee2c 	.word	0x0040ee2c
  40b1a8:	0040ee28 	.word	0x0040ee28

0040b1ac <__fputwc>:
  40b1ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40b1b0:	b082      	sub	sp, #8
  40b1b2:	4680      	mov	r8, r0
  40b1b4:	4689      	mov	r9, r1
  40b1b6:	4614      	mov	r4, r2
  40b1b8:	f000 fb32 	bl	40b820 <__locale_mb_cur_max>
  40b1bc:	2801      	cmp	r0, #1
  40b1be:	d036      	beq.n	40b22e <__fputwc+0x82>
  40b1c0:	464a      	mov	r2, r9
  40b1c2:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  40b1c6:	a901      	add	r1, sp, #4
  40b1c8:	4640      	mov	r0, r8
  40b1ca:	f001 fa3f 	bl	40c64c <_wcrtomb_r>
  40b1ce:	1c42      	adds	r2, r0, #1
  40b1d0:	4606      	mov	r6, r0
  40b1d2:	d025      	beq.n	40b220 <__fputwc+0x74>
  40b1d4:	b3a8      	cbz	r0, 40b242 <__fputwc+0x96>
  40b1d6:	f89d e004 	ldrb.w	lr, [sp, #4]
  40b1da:	2500      	movs	r5, #0
  40b1dc:	f10d 0a04 	add.w	sl, sp, #4
  40b1e0:	e009      	b.n	40b1f6 <__fputwc+0x4a>
  40b1e2:	6823      	ldr	r3, [r4, #0]
  40b1e4:	1c5a      	adds	r2, r3, #1
  40b1e6:	6022      	str	r2, [r4, #0]
  40b1e8:	f883 e000 	strb.w	lr, [r3]
  40b1ec:	3501      	adds	r5, #1
  40b1ee:	42b5      	cmp	r5, r6
  40b1f0:	d227      	bcs.n	40b242 <__fputwc+0x96>
  40b1f2:	f815 e00a 	ldrb.w	lr, [r5, sl]
  40b1f6:	68a3      	ldr	r3, [r4, #8]
  40b1f8:	3b01      	subs	r3, #1
  40b1fa:	2b00      	cmp	r3, #0
  40b1fc:	60a3      	str	r3, [r4, #8]
  40b1fe:	daf0      	bge.n	40b1e2 <__fputwc+0x36>
  40b200:	69a7      	ldr	r7, [r4, #24]
  40b202:	42bb      	cmp	r3, r7
  40b204:	4671      	mov	r1, lr
  40b206:	4622      	mov	r2, r4
  40b208:	4640      	mov	r0, r8
  40b20a:	db02      	blt.n	40b212 <__fputwc+0x66>
  40b20c:	f1be 0f0a 	cmp.w	lr, #10
  40b210:	d1e7      	bne.n	40b1e2 <__fputwc+0x36>
  40b212:	f001 f9c3 	bl	40c59c <__swbuf_r>
  40b216:	1c43      	adds	r3, r0, #1
  40b218:	d1e8      	bne.n	40b1ec <__fputwc+0x40>
  40b21a:	b002      	add	sp, #8
  40b21c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b220:	89a3      	ldrh	r3, [r4, #12]
  40b222:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40b226:	81a3      	strh	r3, [r4, #12]
  40b228:	b002      	add	sp, #8
  40b22a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b22e:	f109 33ff 	add.w	r3, r9, #4294967295
  40b232:	2bfe      	cmp	r3, #254	; 0xfe
  40b234:	d8c4      	bhi.n	40b1c0 <__fputwc+0x14>
  40b236:	fa5f fe89 	uxtb.w	lr, r9
  40b23a:	4606      	mov	r6, r0
  40b23c:	f88d e004 	strb.w	lr, [sp, #4]
  40b240:	e7cb      	b.n	40b1da <__fputwc+0x2e>
  40b242:	4648      	mov	r0, r9
  40b244:	b002      	add	sp, #8
  40b246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b24a:	bf00      	nop

0040b24c <_fputwc_r>:
  40b24c:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  40b250:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  40b254:	d10a      	bne.n	40b26c <_fputwc_r+0x20>
  40b256:	b410      	push	{r4}
  40b258:	6e54      	ldr	r4, [r2, #100]	; 0x64
  40b25a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40b25e:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  40b262:	6654      	str	r4, [r2, #100]	; 0x64
  40b264:	8193      	strh	r3, [r2, #12]
  40b266:	bc10      	pop	{r4}
  40b268:	f7ff bfa0 	b.w	40b1ac <__fputwc>
  40b26c:	f7ff bf9e 	b.w	40b1ac <__fputwc>

0040b270 <_malloc_trim_r>:
  40b270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40b272:	4f24      	ldr	r7, [pc, #144]	; (40b304 <_malloc_trim_r+0x94>)
  40b274:	460c      	mov	r4, r1
  40b276:	4606      	mov	r6, r0
  40b278:	f7fc fc06 	bl	407a88 <__malloc_lock>
  40b27c:	68bb      	ldr	r3, [r7, #8]
  40b27e:	685d      	ldr	r5, [r3, #4]
  40b280:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  40b284:	310f      	adds	r1, #15
  40b286:	f025 0503 	bic.w	r5, r5, #3
  40b28a:	4429      	add	r1, r5
  40b28c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40b290:	f021 010f 	bic.w	r1, r1, #15
  40b294:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40b298:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40b29c:	db07      	blt.n	40b2ae <_malloc_trim_r+0x3e>
  40b29e:	2100      	movs	r1, #0
  40b2a0:	4630      	mov	r0, r6
  40b2a2:	f7fc fbf5 	bl	407a90 <_sbrk_r>
  40b2a6:	68bb      	ldr	r3, [r7, #8]
  40b2a8:	442b      	add	r3, r5
  40b2aa:	4298      	cmp	r0, r3
  40b2ac:	d004      	beq.n	40b2b8 <_malloc_trim_r+0x48>
  40b2ae:	4630      	mov	r0, r6
  40b2b0:	f7fc fbec 	bl	407a8c <__malloc_unlock>
  40b2b4:	2000      	movs	r0, #0
  40b2b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40b2b8:	4261      	negs	r1, r4
  40b2ba:	4630      	mov	r0, r6
  40b2bc:	f7fc fbe8 	bl	407a90 <_sbrk_r>
  40b2c0:	3001      	adds	r0, #1
  40b2c2:	d00d      	beq.n	40b2e0 <_malloc_trim_r+0x70>
  40b2c4:	4b10      	ldr	r3, [pc, #64]	; (40b308 <_malloc_trim_r+0x98>)
  40b2c6:	68ba      	ldr	r2, [r7, #8]
  40b2c8:	6819      	ldr	r1, [r3, #0]
  40b2ca:	1b2d      	subs	r5, r5, r4
  40b2cc:	f045 0501 	orr.w	r5, r5, #1
  40b2d0:	4630      	mov	r0, r6
  40b2d2:	1b09      	subs	r1, r1, r4
  40b2d4:	6055      	str	r5, [r2, #4]
  40b2d6:	6019      	str	r1, [r3, #0]
  40b2d8:	f7fc fbd8 	bl	407a8c <__malloc_unlock>
  40b2dc:	2001      	movs	r0, #1
  40b2de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40b2e0:	2100      	movs	r1, #0
  40b2e2:	4630      	mov	r0, r6
  40b2e4:	f7fc fbd4 	bl	407a90 <_sbrk_r>
  40b2e8:	68ba      	ldr	r2, [r7, #8]
  40b2ea:	1a83      	subs	r3, r0, r2
  40b2ec:	2b0f      	cmp	r3, #15
  40b2ee:	ddde      	ble.n	40b2ae <_malloc_trim_r+0x3e>
  40b2f0:	4c06      	ldr	r4, [pc, #24]	; (40b30c <_malloc_trim_r+0x9c>)
  40b2f2:	4905      	ldr	r1, [pc, #20]	; (40b308 <_malloc_trim_r+0x98>)
  40b2f4:	6824      	ldr	r4, [r4, #0]
  40b2f6:	f043 0301 	orr.w	r3, r3, #1
  40b2fa:	1b00      	subs	r0, r0, r4
  40b2fc:	6053      	str	r3, [r2, #4]
  40b2fe:	6008      	str	r0, [r1, #0]
  40b300:	e7d5      	b.n	40b2ae <_malloc_trim_r+0x3e>
  40b302:	bf00      	nop
  40b304:	20400478 	.word	0x20400478
  40b308:	20401664 	.word	0x20401664
  40b30c:	20400880 	.word	0x20400880

0040b310 <_free_r>:
  40b310:	2900      	cmp	r1, #0
  40b312:	d044      	beq.n	40b39e <_free_r+0x8e>
  40b314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40b318:	460d      	mov	r5, r1
  40b31a:	4680      	mov	r8, r0
  40b31c:	f7fc fbb4 	bl	407a88 <__malloc_lock>
  40b320:	f855 7c04 	ldr.w	r7, [r5, #-4]
  40b324:	4969      	ldr	r1, [pc, #420]	; (40b4cc <_free_r+0x1bc>)
  40b326:	f027 0301 	bic.w	r3, r7, #1
  40b32a:	f1a5 0408 	sub.w	r4, r5, #8
  40b32e:	18e2      	adds	r2, r4, r3
  40b330:	688e      	ldr	r6, [r1, #8]
  40b332:	6850      	ldr	r0, [r2, #4]
  40b334:	42b2      	cmp	r2, r6
  40b336:	f020 0003 	bic.w	r0, r0, #3
  40b33a:	d05e      	beq.n	40b3fa <_free_r+0xea>
  40b33c:	07fe      	lsls	r6, r7, #31
  40b33e:	6050      	str	r0, [r2, #4]
  40b340:	d40b      	bmi.n	40b35a <_free_r+0x4a>
  40b342:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40b346:	1be4      	subs	r4, r4, r7
  40b348:	f101 0e08 	add.w	lr, r1, #8
  40b34c:	68a5      	ldr	r5, [r4, #8]
  40b34e:	4575      	cmp	r5, lr
  40b350:	443b      	add	r3, r7
  40b352:	d06d      	beq.n	40b430 <_free_r+0x120>
  40b354:	68e7      	ldr	r7, [r4, #12]
  40b356:	60ef      	str	r7, [r5, #12]
  40b358:	60bd      	str	r5, [r7, #8]
  40b35a:	1815      	adds	r5, r2, r0
  40b35c:	686d      	ldr	r5, [r5, #4]
  40b35e:	07ed      	lsls	r5, r5, #31
  40b360:	d53e      	bpl.n	40b3e0 <_free_r+0xd0>
  40b362:	f043 0201 	orr.w	r2, r3, #1
  40b366:	6062      	str	r2, [r4, #4]
  40b368:	50e3      	str	r3, [r4, r3]
  40b36a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40b36e:	d217      	bcs.n	40b3a0 <_free_r+0x90>
  40b370:	08db      	lsrs	r3, r3, #3
  40b372:	1c58      	adds	r0, r3, #1
  40b374:	109a      	asrs	r2, r3, #2
  40b376:	684d      	ldr	r5, [r1, #4]
  40b378:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  40b37c:	60a7      	str	r7, [r4, #8]
  40b37e:	2301      	movs	r3, #1
  40b380:	4093      	lsls	r3, r2
  40b382:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40b386:	432b      	orrs	r3, r5
  40b388:	3a08      	subs	r2, #8
  40b38a:	60e2      	str	r2, [r4, #12]
  40b38c:	604b      	str	r3, [r1, #4]
  40b38e:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  40b392:	60fc      	str	r4, [r7, #12]
  40b394:	4640      	mov	r0, r8
  40b396:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40b39a:	f7fc bb77 	b.w	407a8c <__malloc_unlock>
  40b39e:	4770      	bx	lr
  40b3a0:	0a5a      	lsrs	r2, r3, #9
  40b3a2:	2a04      	cmp	r2, #4
  40b3a4:	d852      	bhi.n	40b44c <_free_r+0x13c>
  40b3a6:	099a      	lsrs	r2, r3, #6
  40b3a8:	f102 0739 	add.w	r7, r2, #57	; 0x39
  40b3ac:	00ff      	lsls	r7, r7, #3
  40b3ae:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40b3b2:	19c8      	adds	r0, r1, r7
  40b3b4:	59ca      	ldr	r2, [r1, r7]
  40b3b6:	3808      	subs	r0, #8
  40b3b8:	4290      	cmp	r0, r2
  40b3ba:	d04f      	beq.n	40b45c <_free_r+0x14c>
  40b3bc:	6851      	ldr	r1, [r2, #4]
  40b3be:	f021 0103 	bic.w	r1, r1, #3
  40b3c2:	428b      	cmp	r3, r1
  40b3c4:	d232      	bcs.n	40b42c <_free_r+0x11c>
  40b3c6:	6892      	ldr	r2, [r2, #8]
  40b3c8:	4290      	cmp	r0, r2
  40b3ca:	d1f7      	bne.n	40b3bc <_free_r+0xac>
  40b3cc:	68c3      	ldr	r3, [r0, #12]
  40b3ce:	60a0      	str	r0, [r4, #8]
  40b3d0:	60e3      	str	r3, [r4, #12]
  40b3d2:	609c      	str	r4, [r3, #8]
  40b3d4:	60c4      	str	r4, [r0, #12]
  40b3d6:	4640      	mov	r0, r8
  40b3d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40b3dc:	f7fc bb56 	b.w	407a8c <__malloc_unlock>
  40b3e0:	6895      	ldr	r5, [r2, #8]
  40b3e2:	4f3b      	ldr	r7, [pc, #236]	; (40b4d0 <_free_r+0x1c0>)
  40b3e4:	42bd      	cmp	r5, r7
  40b3e6:	4403      	add	r3, r0
  40b3e8:	d040      	beq.n	40b46c <_free_r+0x15c>
  40b3ea:	68d0      	ldr	r0, [r2, #12]
  40b3ec:	60e8      	str	r0, [r5, #12]
  40b3ee:	f043 0201 	orr.w	r2, r3, #1
  40b3f2:	6085      	str	r5, [r0, #8]
  40b3f4:	6062      	str	r2, [r4, #4]
  40b3f6:	50e3      	str	r3, [r4, r3]
  40b3f8:	e7b7      	b.n	40b36a <_free_r+0x5a>
  40b3fa:	07ff      	lsls	r7, r7, #31
  40b3fc:	4403      	add	r3, r0
  40b3fe:	d407      	bmi.n	40b410 <_free_r+0x100>
  40b400:	f855 2c08 	ldr.w	r2, [r5, #-8]
  40b404:	1aa4      	subs	r4, r4, r2
  40b406:	4413      	add	r3, r2
  40b408:	68a0      	ldr	r0, [r4, #8]
  40b40a:	68e2      	ldr	r2, [r4, #12]
  40b40c:	60c2      	str	r2, [r0, #12]
  40b40e:	6090      	str	r0, [r2, #8]
  40b410:	4a30      	ldr	r2, [pc, #192]	; (40b4d4 <_free_r+0x1c4>)
  40b412:	6812      	ldr	r2, [r2, #0]
  40b414:	f043 0001 	orr.w	r0, r3, #1
  40b418:	4293      	cmp	r3, r2
  40b41a:	6060      	str	r0, [r4, #4]
  40b41c:	608c      	str	r4, [r1, #8]
  40b41e:	d3b9      	bcc.n	40b394 <_free_r+0x84>
  40b420:	4b2d      	ldr	r3, [pc, #180]	; (40b4d8 <_free_r+0x1c8>)
  40b422:	4640      	mov	r0, r8
  40b424:	6819      	ldr	r1, [r3, #0]
  40b426:	f7ff ff23 	bl	40b270 <_malloc_trim_r>
  40b42a:	e7b3      	b.n	40b394 <_free_r+0x84>
  40b42c:	4610      	mov	r0, r2
  40b42e:	e7cd      	b.n	40b3cc <_free_r+0xbc>
  40b430:	1811      	adds	r1, r2, r0
  40b432:	6849      	ldr	r1, [r1, #4]
  40b434:	07c9      	lsls	r1, r1, #31
  40b436:	d444      	bmi.n	40b4c2 <_free_r+0x1b2>
  40b438:	6891      	ldr	r1, [r2, #8]
  40b43a:	68d2      	ldr	r2, [r2, #12]
  40b43c:	60ca      	str	r2, [r1, #12]
  40b43e:	4403      	add	r3, r0
  40b440:	f043 0001 	orr.w	r0, r3, #1
  40b444:	6091      	str	r1, [r2, #8]
  40b446:	6060      	str	r0, [r4, #4]
  40b448:	50e3      	str	r3, [r4, r3]
  40b44a:	e7a3      	b.n	40b394 <_free_r+0x84>
  40b44c:	2a14      	cmp	r2, #20
  40b44e:	d816      	bhi.n	40b47e <_free_r+0x16e>
  40b450:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  40b454:	00ff      	lsls	r7, r7, #3
  40b456:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40b45a:	e7aa      	b.n	40b3b2 <_free_r+0xa2>
  40b45c:	10aa      	asrs	r2, r5, #2
  40b45e:	2301      	movs	r3, #1
  40b460:	684d      	ldr	r5, [r1, #4]
  40b462:	4093      	lsls	r3, r2
  40b464:	432b      	orrs	r3, r5
  40b466:	604b      	str	r3, [r1, #4]
  40b468:	4603      	mov	r3, r0
  40b46a:	e7b0      	b.n	40b3ce <_free_r+0xbe>
  40b46c:	f043 0201 	orr.w	r2, r3, #1
  40b470:	614c      	str	r4, [r1, #20]
  40b472:	610c      	str	r4, [r1, #16]
  40b474:	60e5      	str	r5, [r4, #12]
  40b476:	60a5      	str	r5, [r4, #8]
  40b478:	6062      	str	r2, [r4, #4]
  40b47a:	50e3      	str	r3, [r4, r3]
  40b47c:	e78a      	b.n	40b394 <_free_r+0x84>
  40b47e:	2a54      	cmp	r2, #84	; 0x54
  40b480:	d806      	bhi.n	40b490 <_free_r+0x180>
  40b482:	0b1a      	lsrs	r2, r3, #12
  40b484:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40b488:	00ff      	lsls	r7, r7, #3
  40b48a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40b48e:	e790      	b.n	40b3b2 <_free_r+0xa2>
  40b490:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40b494:	d806      	bhi.n	40b4a4 <_free_r+0x194>
  40b496:	0bda      	lsrs	r2, r3, #15
  40b498:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40b49c:	00ff      	lsls	r7, r7, #3
  40b49e:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40b4a2:	e786      	b.n	40b3b2 <_free_r+0xa2>
  40b4a4:	f240 5054 	movw	r0, #1364	; 0x554
  40b4a8:	4282      	cmp	r2, r0
  40b4aa:	d806      	bhi.n	40b4ba <_free_r+0x1aa>
  40b4ac:	0c9a      	lsrs	r2, r3, #18
  40b4ae:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40b4b2:	00ff      	lsls	r7, r7, #3
  40b4b4:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40b4b8:	e77b      	b.n	40b3b2 <_free_r+0xa2>
  40b4ba:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40b4be:	257e      	movs	r5, #126	; 0x7e
  40b4c0:	e777      	b.n	40b3b2 <_free_r+0xa2>
  40b4c2:	f043 0101 	orr.w	r1, r3, #1
  40b4c6:	6061      	str	r1, [r4, #4]
  40b4c8:	6013      	str	r3, [r2, #0]
  40b4ca:	e763      	b.n	40b394 <_free_r+0x84>
  40b4cc:	20400478 	.word	0x20400478
  40b4d0:	20400480 	.word	0x20400480
  40b4d4:	20400884 	.word	0x20400884
  40b4d8:	20401694 	.word	0x20401694

0040b4dc <__sfvwrite_r>:
  40b4dc:	6893      	ldr	r3, [r2, #8]
  40b4de:	2b00      	cmp	r3, #0
  40b4e0:	d073      	beq.n	40b5ca <__sfvwrite_r+0xee>
  40b4e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b4e6:	898b      	ldrh	r3, [r1, #12]
  40b4e8:	b083      	sub	sp, #12
  40b4ea:	460c      	mov	r4, r1
  40b4ec:	0719      	lsls	r1, r3, #28
  40b4ee:	9000      	str	r0, [sp, #0]
  40b4f0:	4616      	mov	r6, r2
  40b4f2:	d526      	bpl.n	40b542 <__sfvwrite_r+0x66>
  40b4f4:	6922      	ldr	r2, [r4, #16]
  40b4f6:	b322      	cbz	r2, 40b542 <__sfvwrite_r+0x66>
  40b4f8:	f013 0002 	ands.w	r0, r3, #2
  40b4fc:	6835      	ldr	r5, [r6, #0]
  40b4fe:	d02c      	beq.n	40b55a <__sfvwrite_r+0x7e>
  40b500:	f04f 0900 	mov.w	r9, #0
  40b504:	4fb0      	ldr	r7, [pc, #704]	; (40b7c8 <__sfvwrite_r+0x2ec>)
  40b506:	46c8      	mov	r8, r9
  40b508:	46b2      	mov	sl, r6
  40b50a:	45b8      	cmp	r8, r7
  40b50c:	4643      	mov	r3, r8
  40b50e:	464a      	mov	r2, r9
  40b510:	bf28      	it	cs
  40b512:	463b      	movcs	r3, r7
  40b514:	9800      	ldr	r0, [sp, #0]
  40b516:	f1b8 0f00 	cmp.w	r8, #0
  40b51a:	d050      	beq.n	40b5be <__sfvwrite_r+0xe2>
  40b51c:	69e1      	ldr	r1, [r4, #28]
  40b51e:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40b520:	47b0      	blx	r6
  40b522:	2800      	cmp	r0, #0
  40b524:	dd58      	ble.n	40b5d8 <__sfvwrite_r+0xfc>
  40b526:	f8da 3008 	ldr.w	r3, [sl, #8]
  40b52a:	1a1b      	subs	r3, r3, r0
  40b52c:	4481      	add	r9, r0
  40b52e:	eba8 0800 	sub.w	r8, r8, r0
  40b532:	f8ca 3008 	str.w	r3, [sl, #8]
  40b536:	2b00      	cmp	r3, #0
  40b538:	d1e7      	bne.n	40b50a <__sfvwrite_r+0x2e>
  40b53a:	2000      	movs	r0, #0
  40b53c:	b003      	add	sp, #12
  40b53e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b542:	4621      	mov	r1, r4
  40b544:	9800      	ldr	r0, [sp, #0]
  40b546:	f7fe fca5 	bl	409e94 <__swsetup_r>
  40b54a:	2800      	cmp	r0, #0
  40b54c:	f040 8133 	bne.w	40b7b6 <__sfvwrite_r+0x2da>
  40b550:	89a3      	ldrh	r3, [r4, #12]
  40b552:	6835      	ldr	r5, [r6, #0]
  40b554:	f013 0002 	ands.w	r0, r3, #2
  40b558:	d1d2      	bne.n	40b500 <__sfvwrite_r+0x24>
  40b55a:	f013 0901 	ands.w	r9, r3, #1
  40b55e:	d145      	bne.n	40b5ec <__sfvwrite_r+0x110>
  40b560:	464f      	mov	r7, r9
  40b562:	9601      	str	r6, [sp, #4]
  40b564:	b337      	cbz	r7, 40b5b4 <__sfvwrite_r+0xd8>
  40b566:	059a      	lsls	r2, r3, #22
  40b568:	f8d4 8008 	ldr.w	r8, [r4, #8]
  40b56c:	f140 8083 	bpl.w	40b676 <__sfvwrite_r+0x19a>
  40b570:	4547      	cmp	r7, r8
  40b572:	46c3      	mov	fp, r8
  40b574:	f0c0 80ab 	bcc.w	40b6ce <__sfvwrite_r+0x1f2>
  40b578:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40b57c:	f040 80ac 	bne.w	40b6d8 <__sfvwrite_r+0x1fc>
  40b580:	6820      	ldr	r0, [r4, #0]
  40b582:	46ba      	mov	sl, r7
  40b584:	465a      	mov	r2, fp
  40b586:	4649      	mov	r1, r9
  40b588:	f000 fa42 	bl	40ba10 <memmove>
  40b58c:	68a2      	ldr	r2, [r4, #8]
  40b58e:	6823      	ldr	r3, [r4, #0]
  40b590:	eba2 0208 	sub.w	r2, r2, r8
  40b594:	445b      	add	r3, fp
  40b596:	60a2      	str	r2, [r4, #8]
  40b598:	6023      	str	r3, [r4, #0]
  40b59a:	9a01      	ldr	r2, [sp, #4]
  40b59c:	6893      	ldr	r3, [r2, #8]
  40b59e:	eba3 030a 	sub.w	r3, r3, sl
  40b5a2:	44d1      	add	r9, sl
  40b5a4:	eba7 070a 	sub.w	r7, r7, sl
  40b5a8:	6093      	str	r3, [r2, #8]
  40b5aa:	2b00      	cmp	r3, #0
  40b5ac:	d0c5      	beq.n	40b53a <__sfvwrite_r+0x5e>
  40b5ae:	89a3      	ldrh	r3, [r4, #12]
  40b5b0:	2f00      	cmp	r7, #0
  40b5b2:	d1d8      	bne.n	40b566 <__sfvwrite_r+0x8a>
  40b5b4:	f8d5 9000 	ldr.w	r9, [r5]
  40b5b8:	686f      	ldr	r7, [r5, #4]
  40b5ba:	3508      	adds	r5, #8
  40b5bc:	e7d2      	b.n	40b564 <__sfvwrite_r+0x88>
  40b5be:	f8d5 9000 	ldr.w	r9, [r5]
  40b5c2:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40b5c6:	3508      	adds	r5, #8
  40b5c8:	e79f      	b.n	40b50a <__sfvwrite_r+0x2e>
  40b5ca:	2000      	movs	r0, #0
  40b5cc:	4770      	bx	lr
  40b5ce:	4621      	mov	r1, r4
  40b5d0:	9800      	ldr	r0, [sp, #0]
  40b5d2:	f7ff fd33 	bl	40b03c <_fflush_r>
  40b5d6:	b370      	cbz	r0, 40b636 <__sfvwrite_r+0x15a>
  40b5d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40b5dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40b5e0:	f04f 30ff 	mov.w	r0, #4294967295
  40b5e4:	81a3      	strh	r3, [r4, #12]
  40b5e6:	b003      	add	sp, #12
  40b5e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b5ec:	4681      	mov	r9, r0
  40b5ee:	4633      	mov	r3, r6
  40b5f0:	464e      	mov	r6, r9
  40b5f2:	46a8      	mov	r8, r5
  40b5f4:	469a      	mov	sl, r3
  40b5f6:	464d      	mov	r5, r9
  40b5f8:	b34e      	cbz	r6, 40b64e <__sfvwrite_r+0x172>
  40b5fa:	b380      	cbz	r0, 40b65e <__sfvwrite_r+0x182>
  40b5fc:	6820      	ldr	r0, [r4, #0]
  40b5fe:	6923      	ldr	r3, [r4, #16]
  40b600:	6962      	ldr	r2, [r4, #20]
  40b602:	45b1      	cmp	r9, r6
  40b604:	46cb      	mov	fp, r9
  40b606:	bf28      	it	cs
  40b608:	46b3      	movcs	fp, r6
  40b60a:	4298      	cmp	r0, r3
  40b60c:	465f      	mov	r7, fp
  40b60e:	d904      	bls.n	40b61a <__sfvwrite_r+0x13e>
  40b610:	68a3      	ldr	r3, [r4, #8]
  40b612:	4413      	add	r3, r2
  40b614:	459b      	cmp	fp, r3
  40b616:	f300 80a6 	bgt.w	40b766 <__sfvwrite_r+0x28a>
  40b61a:	4593      	cmp	fp, r2
  40b61c:	db4b      	blt.n	40b6b6 <__sfvwrite_r+0x1da>
  40b61e:	4613      	mov	r3, r2
  40b620:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40b622:	69e1      	ldr	r1, [r4, #28]
  40b624:	9800      	ldr	r0, [sp, #0]
  40b626:	462a      	mov	r2, r5
  40b628:	47b8      	blx	r7
  40b62a:	1e07      	subs	r7, r0, #0
  40b62c:	ddd4      	ble.n	40b5d8 <__sfvwrite_r+0xfc>
  40b62e:	ebb9 0907 	subs.w	r9, r9, r7
  40b632:	d0cc      	beq.n	40b5ce <__sfvwrite_r+0xf2>
  40b634:	2001      	movs	r0, #1
  40b636:	f8da 3008 	ldr.w	r3, [sl, #8]
  40b63a:	1bdb      	subs	r3, r3, r7
  40b63c:	443d      	add	r5, r7
  40b63e:	1bf6      	subs	r6, r6, r7
  40b640:	f8ca 3008 	str.w	r3, [sl, #8]
  40b644:	2b00      	cmp	r3, #0
  40b646:	f43f af78 	beq.w	40b53a <__sfvwrite_r+0x5e>
  40b64a:	2e00      	cmp	r6, #0
  40b64c:	d1d5      	bne.n	40b5fa <__sfvwrite_r+0x11e>
  40b64e:	f108 0308 	add.w	r3, r8, #8
  40b652:	e913 0060 	ldmdb	r3, {r5, r6}
  40b656:	4698      	mov	r8, r3
  40b658:	3308      	adds	r3, #8
  40b65a:	2e00      	cmp	r6, #0
  40b65c:	d0f9      	beq.n	40b652 <__sfvwrite_r+0x176>
  40b65e:	4632      	mov	r2, r6
  40b660:	210a      	movs	r1, #10
  40b662:	4628      	mov	r0, r5
  40b664:	f000 f984 	bl	40b970 <memchr>
  40b668:	2800      	cmp	r0, #0
  40b66a:	f000 80a1 	beq.w	40b7b0 <__sfvwrite_r+0x2d4>
  40b66e:	3001      	adds	r0, #1
  40b670:	eba0 0905 	sub.w	r9, r0, r5
  40b674:	e7c2      	b.n	40b5fc <__sfvwrite_r+0x120>
  40b676:	6820      	ldr	r0, [r4, #0]
  40b678:	6923      	ldr	r3, [r4, #16]
  40b67a:	4298      	cmp	r0, r3
  40b67c:	d802      	bhi.n	40b684 <__sfvwrite_r+0x1a8>
  40b67e:	6963      	ldr	r3, [r4, #20]
  40b680:	429f      	cmp	r7, r3
  40b682:	d25d      	bcs.n	40b740 <__sfvwrite_r+0x264>
  40b684:	45b8      	cmp	r8, r7
  40b686:	bf28      	it	cs
  40b688:	46b8      	movcs	r8, r7
  40b68a:	4642      	mov	r2, r8
  40b68c:	4649      	mov	r1, r9
  40b68e:	f000 f9bf 	bl	40ba10 <memmove>
  40b692:	68a3      	ldr	r3, [r4, #8]
  40b694:	6822      	ldr	r2, [r4, #0]
  40b696:	eba3 0308 	sub.w	r3, r3, r8
  40b69a:	4442      	add	r2, r8
  40b69c:	60a3      	str	r3, [r4, #8]
  40b69e:	6022      	str	r2, [r4, #0]
  40b6a0:	b10b      	cbz	r3, 40b6a6 <__sfvwrite_r+0x1ca>
  40b6a2:	46c2      	mov	sl, r8
  40b6a4:	e779      	b.n	40b59a <__sfvwrite_r+0xbe>
  40b6a6:	4621      	mov	r1, r4
  40b6a8:	9800      	ldr	r0, [sp, #0]
  40b6aa:	f7ff fcc7 	bl	40b03c <_fflush_r>
  40b6ae:	2800      	cmp	r0, #0
  40b6b0:	d192      	bne.n	40b5d8 <__sfvwrite_r+0xfc>
  40b6b2:	46c2      	mov	sl, r8
  40b6b4:	e771      	b.n	40b59a <__sfvwrite_r+0xbe>
  40b6b6:	465a      	mov	r2, fp
  40b6b8:	4629      	mov	r1, r5
  40b6ba:	f000 f9a9 	bl	40ba10 <memmove>
  40b6be:	68a2      	ldr	r2, [r4, #8]
  40b6c0:	6823      	ldr	r3, [r4, #0]
  40b6c2:	eba2 020b 	sub.w	r2, r2, fp
  40b6c6:	445b      	add	r3, fp
  40b6c8:	60a2      	str	r2, [r4, #8]
  40b6ca:	6023      	str	r3, [r4, #0]
  40b6cc:	e7af      	b.n	40b62e <__sfvwrite_r+0x152>
  40b6ce:	6820      	ldr	r0, [r4, #0]
  40b6d0:	46b8      	mov	r8, r7
  40b6d2:	46ba      	mov	sl, r7
  40b6d4:	46bb      	mov	fp, r7
  40b6d6:	e755      	b.n	40b584 <__sfvwrite_r+0xa8>
  40b6d8:	6962      	ldr	r2, [r4, #20]
  40b6da:	6820      	ldr	r0, [r4, #0]
  40b6dc:	6921      	ldr	r1, [r4, #16]
  40b6de:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  40b6e2:	eba0 0a01 	sub.w	sl, r0, r1
  40b6e6:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40b6ea:	f10a 0001 	add.w	r0, sl, #1
  40b6ee:	ea4f 0868 	mov.w	r8, r8, asr #1
  40b6f2:	4438      	add	r0, r7
  40b6f4:	4540      	cmp	r0, r8
  40b6f6:	4642      	mov	r2, r8
  40b6f8:	bf84      	itt	hi
  40b6fa:	4680      	movhi	r8, r0
  40b6fc:	4642      	movhi	r2, r8
  40b6fe:	055b      	lsls	r3, r3, #21
  40b700:	d544      	bpl.n	40b78c <__sfvwrite_r+0x2b0>
  40b702:	4611      	mov	r1, r2
  40b704:	9800      	ldr	r0, [sp, #0]
  40b706:	f7fb fe27 	bl	407358 <_malloc_r>
  40b70a:	4683      	mov	fp, r0
  40b70c:	2800      	cmp	r0, #0
  40b70e:	d055      	beq.n	40b7bc <__sfvwrite_r+0x2e0>
  40b710:	4652      	mov	r2, sl
  40b712:	6921      	ldr	r1, [r4, #16]
  40b714:	f7fc f8d0 	bl	4078b8 <memcpy>
  40b718:	89a3      	ldrh	r3, [r4, #12]
  40b71a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  40b71e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40b722:	81a3      	strh	r3, [r4, #12]
  40b724:	eb0b 000a 	add.w	r0, fp, sl
  40b728:	eba8 030a 	sub.w	r3, r8, sl
  40b72c:	f8c4 b010 	str.w	fp, [r4, #16]
  40b730:	f8c4 8014 	str.w	r8, [r4, #20]
  40b734:	6020      	str	r0, [r4, #0]
  40b736:	60a3      	str	r3, [r4, #8]
  40b738:	46b8      	mov	r8, r7
  40b73a:	46ba      	mov	sl, r7
  40b73c:	46bb      	mov	fp, r7
  40b73e:	e721      	b.n	40b584 <__sfvwrite_r+0xa8>
  40b740:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  40b744:	42b9      	cmp	r1, r7
  40b746:	bf28      	it	cs
  40b748:	4639      	movcs	r1, r7
  40b74a:	464a      	mov	r2, r9
  40b74c:	fb91 f1f3 	sdiv	r1, r1, r3
  40b750:	9800      	ldr	r0, [sp, #0]
  40b752:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40b754:	fb03 f301 	mul.w	r3, r3, r1
  40b758:	69e1      	ldr	r1, [r4, #28]
  40b75a:	47b0      	blx	r6
  40b75c:	f1b0 0a00 	subs.w	sl, r0, #0
  40b760:	f73f af1b 	bgt.w	40b59a <__sfvwrite_r+0xbe>
  40b764:	e738      	b.n	40b5d8 <__sfvwrite_r+0xfc>
  40b766:	461a      	mov	r2, r3
  40b768:	4629      	mov	r1, r5
  40b76a:	9301      	str	r3, [sp, #4]
  40b76c:	f000 f950 	bl	40ba10 <memmove>
  40b770:	6822      	ldr	r2, [r4, #0]
  40b772:	9b01      	ldr	r3, [sp, #4]
  40b774:	9800      	ldr	r0, [sp, #0]
  40b776:	441a      	add	r2, r3
  40b778:	6022      	str	r2, [r4, #0]
  40b77a:	4621      	mov	r1, r4
  40b77c:	f7ff fc5e 	bl	40b03c <_fflush_r>
  40b780:	9b01      	ldr	r3, [sp, #4]
  40b782:	2800      	cmp	r0, #0
  40b784:	f47f af28 	bne.w	40b5d8 <__sfvwrite_r+0xfc>
  40b788:	461f      	mov	r7, r3
  40b78a:	e750      	b.n	40b62e <__sfvwrite_r+0x152>
  40b78c:	9800      	ldr	r0, [sp, #0]
  40b78e:	f000 fc9d 	bl	40c0cc <_realloc_r>
  40b792:	4683      	mov	fp, r0
  40b794:	2800      	cmp	r0, #0
  40b796:	d1c5      	bne.n	40b724 <__sfvwrite_r+0x248>
  40b798:	9d00      	ldr	r5, [sp, #0]
  40b79a:	6921      	ldr	r1, [r4, #16]
  40b79c:	4628      	mov	r0, r5
  40b79e:	f7ff fdb7 	bl	40b310 <_free_r>
  40b7a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40b7a6:	220c      	movs	r2, #12
  40b7a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40b7ac:	602a      	str	r2, [r5, #0]
  40b7ae:	e715      	b.n	40b5dc <__sfvwrite_r+0x100>
  40b7b0:	f106 0901 	add.w	r9, r6, #1
  40b7b4:	e722      	b.n	40b5fc <__sfvwrite_r+0x120>
  40b7b6:	f04f 30ff 	mov.w	r0, #4294967295
  40b7ba:	e6bf      	b.n	40b53c <__sfvwrite_r+0x60>
  40b7bc:	9a00      	ldr	r2, [sp, #0]
  40b7be:	230c      	movs	r3, #12
  40b7c0:	6013      	str	r3, [r2, #0]
  40b7c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40b7c6:	e709      	b.n	40b5dc <__sfvwrite_r+0x100>
  40b7c8:	7ffffc00 	.word	0x7ffffc00

0040b7cc <_fwalk_reent>:
  40b7cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40b7d0:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  40b7d4:	d01f      	beq.n	40b816 <_fwalk_reent+0x4a>
  40b7d6:	4688      	mov	r8, r1
  40b7d8:	4606      	mov	r6, r0
  40b7da:	f04f 0900 	mov.w	r9, #0
  40b7de:	687d      	ldr	r5, [r7, #4]
  40b7e0:	68bc      	ldr	r4, [r7, #8]
  40b7e2:	3d01      	subs	r5, #1
  40b7e4:	d411      	bmi.n	40b80a <_fwalk_reent+0x3e>
  40b7e6:	89a3      	ldrh	r3, [r4, #12]
  40b7e8:	2b01      	cmp	r3, #1
  40b7ea:	f105 35ff 	add.w	r5, r5, #4294967295
  40b7ee:	d908      	bls.n	40b802 <_fwalk_reent+0x36>
  40b7f0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  40b7f4:	3301      	adds	r3, #1
  40b7f6:	4621      	mov	r1, r4
  40b7f8:	4630      	mov	r0, r6
  40b7fa:	d002      	beq.n	40b802 <_fwalk_reent+0x36>
  40b7fc:	47c0      	blx	r8
  40b7fe:	ea49 0900 	orr.w	r9, r9, r0
  40b802:	1c6b      	adds	r3, r5, #1
  40b804:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40b808:	d1ed      	bne.n	40b7e6 <_fwalk_reent+0x1a>
  40b80a:	683f      	ldr	r7, [r7, #0]
  40b80c:	2f00      	cmp	r7, #0
  40b80e:	d1e6      	bne.n	40b7de <_fwalk_reent+0x12>
  40b810:	4648      	mov	r0, r9
  40b812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40b816:	46b9      	mov	r9, r7
  40b818:	4648      	mov	r0, r9
  40b81a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40b81e:	bf00      	nop

0040b820 <__locale_mb_cur_max>:
  40b820:	4b04      	ldr	r3, [pc, #16]	; (40b834 <__locale_mb_cur_max+0x14>)
  40b822:	4a05      	ldr	r2, [pc, #20]	; (40b838 <__locale_mb_cur_max+0x18>)
  40b824:	681b      	ldr	r3, [r3, #0]
  40b826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  40b828:	2b00      	cmp	r3, #0
  40b82a:	bf08      	it	eq
  40b82c:	4613      	moveq	r3, r2
  40b82e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  40b832:	4770      	bx	lr
  40b834:	20400048 	.word	0x20400048
  40b838:	20400888 	.word	0x20400888

0040b83c <_localeconv_r>:
  40b83c:	4a04      	ldr	r2, [pc, #16]	; (40b850 <_localeconv_r+0x14>)
  40b83e:	4b05      	ldr	r3, [pc, #20]	; (40b854 <_localeconv_r+0x18>)
  40b840:	6812      	ldr	r2, [r2, #0]
  40b842:	6b50      	ldr	r0, [r2, #52]	; 0x34
  40b844:	2800      	cmp	r0, #0
  40b846:	bf08      	it	eq
  40b848:	4618      	moveq	r0, r3
  40b84a:	30f0      	adds	r0, #240	; 0xf0
  40b84c:	4770      	bx	lr
  40b84e:	bf00      	nop
  40b850:	20400048 	.word	0x20400048
  40b854:	20400888 	.word	0x20400888

0040b858 <__swhatbuf_r>:
  40b858:	b570      	push	{r4, r5, r6, lr}
  40b85a:	460c      	mov	r4, r1
  40b85c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40b860:	2900      	cmp	r1, #0
  40b862:	b090      	sub	sp, #64	; 0x40
  40b864:	4615      	mov	r5, r2
  40b866:	461e      	mov	r6, r3
  40b868:	db14      	blt.n	40b894 <__swhatbuf_r+0x3c>
  40b86a:	aa01      	add	r2, sp, #4
  40b86c:	f001 f810 	bl	40c890 <_fstat_r>
  40b870:	2800      	cmp	r0, #0
  40b872:	db0f      	blt.n	40b894 <__swhatbuf_r+0x3c>
  40b874:	9a02      	ldr	r2, [sp, #8]
  40b876:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40b87a:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40b87e:	fab2 f282 	clz	r2, r2
  40b882:	0952      	lsrs	r2, r2, #5
  40b884:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40b888:	f44f 6000 	mov.w	r0, #2048	; 0x800
  40b88c:	6032      	str	r2, [r6, #0]
  40b88e:	602b      	str	r3, [r5, #0]
  40b890:	b010      	add	sp, #64	; 0x40
  40b892:	bd70      	pop	{r4, r5, r6, pc}
  40b894:	89a2      	ldrh	r2, [r4, #12]
  40b896:	2300      	movs	r3, #0
  40b898:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  40b89c:	6033      	str	r3, [r6, #0]
  40b89e:	d004      	beq.n	40b8aa <__swhatbuf_r+0x52>
  40b8a0:	2240      	movs	r2, #64	; 0x40
  40b8a2:	4618      	mov	r0, r3
  40b8a4:	602a      	str	r2, [r5, #0]
  40b8a6:	b010      	add	sp, #64	; 0x40
  40b8a8:	bd70      	pop	{r4, r5, r6, pc}
  40b8aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40b8ae:	602b      	str	r3, [r5, #0]
  40b8b0:	b010      	add	sp, #64	; 0x40
  40b8b2:	bd70      	pop	{r4, r5, r6, pc}

0040b8b4 <__smakebuf_r>:
  40b8b4:	898a      	ldrh	r2, [r1, #12]
  40b8b6:	0792      	lsls	r2, r2, #30
  40b8b8:	460b      	mov	r3, r1
  40b8ba:	d506      	bpl.n	40b8ca <__smakebuf_r+0x16>
  40b8bc:	f101 0243 	add.w	r2, r1, #67	; 0x43
  40b8c0:	2101      	movs	r1, #1
  40b8c2:	601a      	str	r2, [r3, #0]
  40b8c4:	611a      	str	r2, [r3, #16]
  40b8c6:	6159      	str	r1, [r3, #20]
  40b8c8:	4770      	bx	lr
  40b8ca:	b5f0      	push	{r4, r5, r6, r7, lr}
  40b8cc:	b083      	sub	sp, #12
  40b8ce:	ab01      	add	r3, sp, #4
  40b8d0:	466a      	mov	r2, sp
  40b8d2:	460c      	mov	r4, r1
  40b8d4:	4605      	mov	r5, r0
  40b8d6:	f7ff ffbf 	bl	40b858 <__swhatbuf_r>
  40b8da:	9900      	ldr	r1, [sp, #0]
  40b8dc:	4606      	mov	r6, r0
  40b8de:	4628      	mov	r0, r5
  40b8e0:	f7fb fd3a 	bl	407358 <_malloc_r>
  40b8e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40b8e8:	b1d0      	cbz	r0, 40b920 <__smakebuf_r+0x6c>
  40b8ea:	9a01      	ldr	r2, [sp, #4]
  40b8ec:	4f12      	ldr	r7, [pc, #72]	; (40b938 <__smakebuf_r+0x84>)
  40b8ee:	9900      	ldr	r1, [sp, #0]
  40b8f0:	63ef      	str	r7, [r5, #60]	; 0x3c
  40b8f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40b8f6:	81a3      	strh	r3, [r4, #12]
  40b8f8:	6020      	str	r0, [r4, #0]
  40b8fa:	6120      	str	r0, [r4, #16]
  40b8fc:	6161      	str	r1, [r4, #20]
  40b8fe:	b91a      	cbnz	r2, 40b908 <__smakebuf_r+0x54>
  40b900:	4333      	orrs	r3, r6
  40b902:	81a3      	strh	r3, [r4, #12]
  40b904:	b003      	add	sp, #12
  40b906:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40b908:	4628      	mov	r0, r5
  40b90a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40b90e:	f000 ffd3 	bl	40c8b8 <_isatty_r>
  40b912:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40b916:	2800      	cmp	r0, #0
  40b918:	d0f2      	beq.n	40b900 <__smakebuf_r+0x4c>
  40b91a:	f043 0301 	orr.w	r3, r3, #1
  40b91e:	e7ef      	b.n	40b900 <__smakebuf_r+0x4c>
  40b920:	059a      	lsls	r2, r3, #22
  40b922:	d4ef      	bmi.n	40b904 <__smakebuf_r+0x50>
  40b924:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40b928:	f043 0302 	orr.w	r3, r3, #2
  40b92c:	2101      	movs	r1, #1
  40b92e:	81a3      	strh	r3, [r4, #12]
  40b930:	6022      	str	r2, [r4, #0]
  40b932:	6122      	str	r2, [r4, #16]
  40b934:	6161      	str	r1, [r4, #20]
  40b936:	e7e5      	b.n	40b904 <__smakebuf_r+0x50>
  40b938:	0040b069 	.word	0x0040b069

0040b93c <__ascii_mbtowc>:
  40b93c:	b082      	sub	sp, #8
  40b93e:	b149      	cbz	r1, 40b954 <__ascii_mbtowc+0x18>
  40b940:	b15a      	cbz	r2, 40b95a <__ascii_mbtowc+0x1e>
  40b942:	b16b      	cbz	r3, 40b960 <__ascii_mbtowc+0x24>
  40b944:	7813      	ldrb	r3, [r2, #0]
  40b946:	600b      	str	r3, [r1, #0]
  40b948:	7812      	ldrb	r2, [r2, #0]
  40b94a:	1c10      	adds	r0, r2, #0
  40b94c:	bf18      	it	ne
  40b94e:	2001      	movne	r0, #1
  40b950:	b002      	add	sp, #8
  40b952:	4770      	bx	lr
  40b954:	a901      	add	r1, sp, #4
  40b956:	2a00      	cmp	r2, #0
  40b958:	d1f3      	bne.n	40b942 <__ascii_mbtowc+0x6>
  40b95a:	4610      	mov	r0, r2
  40b95c:	b002      	add	sp, #8
  40b95e:	4770      	bx	lr
  40b960:	f06f 0001 	mvn.w	r0, #1
  40b964:	e7f4      	b.n	40b950 <__ascii_mbtowc+0x14>
  40b966:	bf00      	nop
	...

0040b970 <memchr>:
  40b970:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40b974:	2a10      	cmp	r2, #16
  40b976:	db2b      	blt.n	40b9d0 <memchr+0x60>
  40b978:	f010 0f07 	tst.w	r0, #7
  40b97c:	d008      	beq.n	40b990 <memchr+0x20>
  40b97e:	f810 3b01 	ldrb.w	r3, [r0], #1
  40b982:	3a01      	subs	r2, #1
  40b984:	428b      	cmp	r3, r1
  40b986:	d02d      	beq.n	40b9e4 <memchr+0x74>
  40b988:	f010 0f07 	tst.w	r0, #7
  40b98c:	b342      	cbz	r2, 40b9e0 <memchr+0x70>
  40b98e:	d1f6      	bne.n	40b97e <memchr+0xe>
  40b990:	b4f0      	push	{r4, r5, r6, r7}
  40b992:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  40b996:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40b99a:	f022 0407 	bic.w	r4, r2, #7
  40b99e:	f07f 0700 	mvns.w	r7, #0
  40b9a2:	2300      	movs	r3, #0
  40b9a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  40b9a8:	3c08      	subs	r4, #8
  40b9aa:	ea85 0501 	eor.w	r5, r5, r1
  40b9ae:	ea86 0601 	eor.w	r6, r6, r1
  40b9b2:	fa85 f547 	uadd8	r5, r5, r7
  40b9b6:	faa3 f587 	sel	r5, r3, r7
  40b9ba:	fa86 f647 	uadd8	r6, r6, r7
  40b9be:	faa5 f687 	sel	r6, r5, r7
  40b9c2:	b98e      	cbnz	r6, 40b9e8 <memchr+0x78>
  40b9c4:	d1ee      	bne.n	40b9a4 <memchr+0x34>
  40b9c6:	bcf0      	pop	{r4, r5, r6, r7}
  40b9c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40b9cc:	f002 0207 	and.w	r2, r2, #7
  40b9d0:	b132      	cbz	r2, 40b9e0 <memchr+0x70>
  40b9d2:	f810 3b01 	ldrb.w	r3, [r0], #1
  40b9d6:	3a01      	subs	r2, #1
  40b9d8:	ea83 0301 	eor.w	r3, r3, r1
  40b9dc:	b113      	cbz	r3, 40b9e4 <memchr+0x74>
  40b9de:	d1f8      	bne.n	40b9d2 <memchr+0x62>
  40b9e0:	2000      	movs	r0, #0
  40b9e2:	4770      	bx	lr
  40b9e4:	3801      	subs	r0, #1
  40b9e6:	4770      	bx	lr
  40b9e8:	2d00      	cmp	r5, #0
  40b9ea:	bf06      	itte	eq
  40b9ec:	4635      	moveq	r5, r6
  40b9ee:	3803      	subeq	r0, #3
  40b9f0:	3807      	subne	r0, #7
  40b9f2:	f015 0f01 	tst.w	r5, #1
  40b9f6:	d107      	bne.n	40ba08 <memchr+0x98>
  40b9f8:	3001      	adds	r0, #1
  40b9fa:	f415 7f80 	tst.w	r5, #256	; 0x100
  40b9fe:	bf02      	ittt	eq
  40ba00:	3001      	addeq	r0, #1
  40ba02:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  40ba06:	3001      	addeq	r0, #1
  40ba08:	bcf0      	pop	{r4, r5, r6, r7}
  40ba0a:	3801      	subs	r0, #1
  40ba0c:	4770      	bx	lr
  40ba0e:	bf00      	nop

0040ba10 <memmove>:
  40ba10:	4288      	cmp	r0, r1
  40ba12:	b5f0      	push	{r4, r5, r6, r7, lr}
  40ba14:	d90d      	bls.n	40ba32 <memmove+0x22>
  40ba16:	188b      	adds	r3, r1, r2
  40ba18:	4298      	cmp	r0, r3
  40ba1a:	d20a      	bcs.n	40ba32 <memmove+0x22>
  40ba1c:	1884      	adds	r4, r0, r2
  40ba1e:	2a00      	cmp	r2, #0
  40ba20:	d051      	beq.n	40bac6 <memmove+0xb6>
  40ba22:	4622      	mov	r2, r4
  40ba24:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40ba28:	f802 4d01 	strb.w	r4, [r2, #-1]!
  40ba2c:	4299      	cmp	r1, r3
  40ba2e:	d1f9      	bne.n	40ba24 <memmove+0x14>
  40ba30:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40ba32:	2a0f      	cmp	r2, #15
  40ba34:	d948      	bls.n	40bac8 <memmove+0xb8>
  40ba36:	ea41 0300 	orr.w	r3, r1, r0
  40ba3a:	079b      	lsls	r3, r3, #30
  40ba3c:	d146      	bne.n	40bacc <memmove+0xbc>
  40ba3e:	f100 0410 	add.w	r4, r0, #16
  40ba42:	f101 0310 	add.w	r3, r1, #16
  40ba46:	4615      	mov	r5, r2
  40ba48:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40ba4c:	f844 6c10 	str.w	r6, [r4, #-16]
  40ba50:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  40ba54:	f844 6c0c 	str.w	r6, [r4, #-12]
  40ba58:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40ba5c:	f844 6c08 	str.w	r6, [r4, #-8]
  40ba60:	3d10      	subs	r5, #16
  40ba62:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40ba66:	f844 6c04 	str.w	r6, [r4, #-4]
  40ba6a:	2d0f      	cmp	r5, #15
  40ba6c:	f103 0310 	add.w	r3, r3, #16
  40ba70:	f104 0410 	add.w	r4, r4, #16
  40ba74:	d8e8      	bhi.n	40ba48 <memmove+0x38>
  40ba76:	f1a2 0310 	sub.w	r3, r2, #16
  40ba7a:	f023 030f 	bic.w	r3, r3, #15
  40ba7e:	f002 0e0f 	and.w	lr, r2, #15
  40ba82:	3310      	adds	r3, #16
  40ba84:	f1be 0f03 	cmp.w	lr, #3
  40ba88:	4419      	add	r1, r3
  40ba8a:	4403      	add	r3, r0
  40ba8c:	d921      	bls.n	40bad2 <memmove+0xc2>
  40ba8e:	1f1e      	subs	r6, r3, #4
  40ba90:	460d      	mov	r5, r1
  40ba92:	4674      	mov	r4, lr
  40ba94:	3c04      	subs	r4, #4
  40ba96:	f855 7b04 	ldr.w	r7, [r5], #4
  40ba9a:	f846 7f04 	str.w	r7, [r6, #4]!
  40ba9e:	2c03      	cmp	r4, #3
  40baa0:	d8f8      	bhi.n	40ba94 <memmove+0x84>
  40baa2:	f1ae 0404 	sub.w	r4, lr, #4
  40baa6:	f024 0403 	bic.w	r4, r4, #3
  40baaa:	3404      	adds	r4, #4
  40baac:	4421      	add	r1, r4
  40baae:	4423      	add	r3, r4
  40bab0:	f002 0203 	and.w	r2, r2, #3
  40bab4:	b162      	cbz	r2, 40bad0 <memmove+0xc0>
  40bab6:	3b01      	subs	r3, #1
  40bab8:	440a      	add	r2, r1
  40baba:	f811 4b01 	ldrb.w	r4, [r1], #1
  40babe:	f803 4f01 	strb.w	r4, [r3, #1]!
  40bac2:	428a      	cmp	r2, r1
  40bac4:	d1f9      	bne.n	40baba <memmove+0xaa>
  40bac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40bac8:	4603      	mov	r3, r0
  40baca:	e7f3      	b.n	40bab4 <memmove+0xa4>
  40bacc:	4603      	mov	r3, r0
  40bace:	e7f2      	b.n	40bab6 <memmove+0xa6>
  40bad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40bad2:	4672      	mov	r2, lr
  40bad4:	e7ee      	b.n	40bab4 <memmove+0xa4>
  40bad6:	bf00      	nop

0040bad8 <_Balloc>:
  40bad8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40bada:	b570      	push	{r4, r5, r6, lr}
  40badc:	4605      	mov	r5, r0
  40bade:	460c      	mov	r4, r1
  40bae0:	b14b      	cbz	r3, 40baf6 <_Balloc+0x1e>
  40bae2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  40bae6:	b180      	cbz	r0, 40bb0a <_Balloc+0x32>
  40bae8:	6802      	ldr	r2, [r0, #0]
  40baea:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  40baee:	2300      	movs	r3, #0
  40baf0:	6103      	str	r3, [r0, #16]
  40baf2:	60c3      	str	r3, [r0, #12]
  40baf4:	bd70      	pop	{r4, r5, r6, pc}
  40baf6:	2221      	movs	r2, #33	; 0x21
  40baf8:	2104      	movs	r1, #4
  40bafa:	f000 fe47 	bl	40c78c <_calloc_r>
  40bafe:	64e8      	str	r0, [r5, #76]	; 0x4c
  40bb00:	4603      	mov	r3, r0
  40bb02:	2800      	cmp	r0, #0
  40bb04:	d1ed      	bne.n	40bae2 <_Balloc+0xa>
  40bb06:	2000      	movs	r0, #0
  40bb08:	bd70      	pop	{r4, r5, r6, pc}
  40bb0a:	2101      	movs	r1, #1
  40bb0c:	fa01 f604 	lsl.w	r6, r1, r4
  40bb10:	1d72      	adds	r2, r6, #5
  40bb12:	4628      	mov	r0, r5
  40bb14:	0092      	lsls	r2, r2, #2
  40bb16:	f000 fe39 	bl	40c78c <_calloc_r>
  40bb1a:	2800      	cmp	r0, #0
  40bb1c:	d0f3      	beq.n	40bb06 <_Balloc+0x2e>
  40bb1e:	6044      	str	r4, [r0, #4]
  40bb20:	6086      	str	r6, [r0, #8]
  40bb22:	e7e4      	b.n	40baee <_Balloc+0x16>

0040bb24 <_Bfree>:
  40bb24:	b131      	cbz	r1, 40bb34 <_Bfree+0x10>
  40bb26:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40bb28:	684a      	ldr	r2, [r1, #4]
  40bb2a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40bb2e:	6008      	str	r0, [r1, #0]
  40bb30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40bb34:	4770      	bx	lr
  40bb36:	bf00      	nop

0040bb38 <__multadd>:
  40bb38:	b5f0      	push	{r4, r5, r6, r7, lr}
  40bb3a:	690c      	ldr	r4, [r1, #16]
  40bb3c:	b083      	sub	sp, #12
  40bb3e:	460d      	mov	r5, r1
  40bb40:	4606      	mov	r6, r0
  40bb42:	f101 0e14 	add.w	lr, r1, #20
  40bb46:	2700      	movs	r7, #0
  40bb48:	f8de 0000 	ldr.w	r0, [lr]
  40bb4c:	b281      	uxth	r1, r0
  40bb4e:	fb02 3301 	mla	r3, r2, r1, r3
  40bb52:	0c01      	lsrs	r1, r0, #16
  40bb54:	0c18      	lsrs	r0, r3, #16
  40bb56:	fb02 0101 	mla	r1, r2, r1, r0
  40bb5a:	b29b      	uxth	r3, r3
  40bb5c:	3701      	adds	r7, #1
  40bb5e:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  40bb62:	42bc      	cmp	r4, r7
  40bb64:	f84e 3b04 	str.w	r3, [lr], #4
  40bb68:	ea4f 4311 	mov.w	r3, r1, lsr #16
  40bb6c:	dcec      	bgt.n	40bb48 <__multadd+0x10>
  40bb6e:	b13b      	cbz	r3, 40bb80 <__multadd+0x48>
  40bb70:	68aa      	ldr	r2, [r5, #8]
  40bb72:	4294      	cmp	r4, r2
  40bb74:	da07      	bge.n	40bb86 <__multadd+0x4e>
  40bb76:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  40bb7a:	3401      	adds	r4, #1
  40bb7c:	6153      	str	r3, [r2, #20]
  40bb7e:	612c      	str	r4, [r5, #16]
  40bb80:	4628      	mov	r0, r5
  40bb82:	b003      	add	sp, #12
  40bb84:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40bb86:	6869      	ldr	r1, [r5, #4]
  40bb88:	9301      	str	r3, [sp, #4]
  40bb8a:	3101      	adds	r1, #1
  40bb8c:	4630      	mov	r0, r6
  40bb8e:	f7ff ffa3 	bl	40bad8 <_Balloc>
  40bb92:	692a      	ldr	r2, [r5, #16]
  40bb94:	3202      	adds	r2, #2
  40bb96:	f105 010c 	add.w	r1, r5, #12
  40bb9a:	4607      	mov	r7, r0
  40bb9c:	0092      	lsls	r2, r2, #2
  40bb9e:	300c      	adds	r0, #12
  40bba0:	f7fb fe8a 	bl	4078b8 <memcpy>
  40bba4:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  40bba6:	6869      	ldr	r1, [r5, #4]
  40bba8:	9b01      	ldr	r3, [sp, #4]
  40bbaa:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  40bbae:	6028      	str	r0, [r5, #0]
  40bbb0:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  40bbb4:	463d      	mov	r5, r7
  40bbb6:	e7de      	b.n	40bb76 <__multadd+0x3e>

0040bbb8 <__hi0bits>:
  40bbb8:	0c02      	lsrs	r2, r0, #16
  40bbba:	0412      	lsls	r2, r2, #16
  40bbbc:	4603      	mov	r3, r0
  40bbbe:	b9b2      	cbnz	r2, 40bbee <__hi0bits+0x36>
  40bbc0:	0403      	lsls	r3, r0, #16
  40bbc2:	2010      	movs	r0, #16
  40bbc4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  40bbc8:	bf04      	itt	eq
  40bbca:	021b      	lsleq	r3, r3, #8
  40bbcc:	3008      	addeq	r0, #8
  40bbce:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  40bbd2:	bf04      	itt	eq
  40bbd4:	011b      	lsleq	r3, r3, #4
  40bbd6:	3004      	addeq	r0, #4
  40bbd8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  40bbdc:	bf04      	itt	eq
  40bbde:	009b      	lsleq	r3, r3, #2
  40bbe0:	3002      	addeq	r0, #2
  40bbe2:	2b00      	cmp	r3, #0
  40bbe4:	db02      	blt.n	40bbec <__hi0bits+0x34>
  40bbe6:	005b      	lsls	r3, r3, #1
  40bbe8:	d403      	bmi.n	40bbf2 <__hi0bits+0x3a>
  40bbea:	2020      	movs	r0, #32
  40bbec:	4770      	bx	lr
  40bbee:	2000      	movs	r0, #0
  40bbf0:	e7e8      	b.n	40bbc4 <__hi0bits+0xc>
  40bbf2:	3001      	adds	r0, #1
  40bbf4:	4770      	bx	lr
  40bbf6:	bf00      	nop

0040bbf8 <__lo0bits>:
  40bbf8:	6803      	ldr	r3, [r0, #0]
  40bbfa:	f013 0207 	ands.w	r2, r3, #7
  40bbfe:	4601      	mov	r1, r0
  40bc00:	d007      	beq.n	40bc12 <__lo0bits+0x1a>
  40bc02:	07da      	lsls	r2, r3, #31
  40bc04:	d421      	bmi.n	40bc4a <__lo0bits+0x52>
  40bc06:	0798      	lsls	r0, r3, #30
  40bc08:	d421      	bmi.n	40bc4e <__lo0bits+0x56>
  40bc0a:	089b      	lsrs	r3, r3, #2
  40bc0c:	600b      	str	r3, [r1, #0]
  40bc0e:	2002      	movs	r0, #2
  40bc10:	4770      	bx	lr
  40bc12:	b298      	uxth	r0, r3
  40bc14:	b198      	cbz	r0, 40bc3e <__lo0bits+0x46>
  40bc16:	4610      	mov	r0, r2
  40bc18:	f013 0fff 	tst.w	r3, #255	; 0xff
  40bc1c:	bf04      	itt	eq
  40bc1e:	0a1b      	lsreq	r3, r3, #8
  40bc20:	3008      	addeq	r0, #8
  40bc22:	071a      	lsls	r2, r3, #28
  40bc24:	bf04      	itt	eq
  40bc26:	091b      	lsreq	r3, r3, #4
  40bc28:	3004      	addeq	r0, #4
  40bc2a:	079a      	lsls	r2, r3, #30
  40bc2c:	bf04      	itt	eq
  40bc2e:	089b      	lsreq	r3, r3, #2
  40bc30:	3002      	addeq	r0, #2
  40bc32:	07da      	lsls	r2, r3, #31
  40bc34:	d407      	bmi.n	40bc46 <__lo0bits+0x4e>
  40bc36:	085b      	lsrs	r3, r3, #1
  40bc38:	d104      	bne.n	40bc44 <__lo0bits+0x4c>
  40bc3a:	2020      	movs	r0, #32
  40bc3c:	4770      	bx	lr
  40bc3e:	0c1b      	lsrs	r3, r3, #16
  40bc40:	2010      	movs	r0, #16
  40bc42:	e7e9      	b.n	40bc18 <__lo0bits+0x20>
  40bc44:	3001      	adds	r0, #1
  40bc46:	600b      	str	r3, [r1, #0]
  40bc48:	4770      	bx	lr
  40bc4a:	2000      	movs	r0, #0
  40bc4c:	4770      	bx	lr
  40bc4e:	085b      	lsrs	r3, r3, #1
  40bc50:	600b      	str	r3, [r1, #0]
  40bc52:	2001      	movs	r0, #1
  40bc54:	4770      	bx	lr
  40bc56:	bf00      	nop

0040bc58 <__i2b>:
  40bc58:	b510      	push	{r4, lr}
  40bc5a:	460c      	mov	r4, r1
  40bc5c:	2101      	movs	r1, #1
  40bc5e:	f7ff ff3b 	bl	40bad8 <_Balloc>
  40bc62:	2201      	movs	r2, #1
  40bc64:	6144      	str	r4, [r0, #20]
  40bc66:	6102      	str	r2, [r0, #16]
  40bc68:	bd10      	pop	{r4, pc}
  40bc6a:	bf00      	nop

0040bc6c <__multiply>:
  40bc6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40bc70:	690c      	ldr	r4, [r1, #16]
  40bc72:	6915      	ldr	r5, [r2, #16]
  40bc74:	42ac      	cmp	r4, r5
  40bc76:	b083      	sub	sp, #12
  40bc78:	468b      	mov	fp, r1
  40bc7a:	4616      	mov	r6, r2
  40bc7c:	da04      	bge.n	40bc88 <__multiply+0x1c>
  40bc7e:	4622      	mov	r2, r4
  40bc80:	46b3      	mov	fp, r6
  40bc82:	462c      	mov	r4, r5
  40bc84:	460e      	mov	r6, r1
  40bc86:	4615      	mov	r5, r2
  40bc88:	f8db 3008 	ldr.w	r3, [fp, #8]
  40bc8c:	f8db 1004 	ldr.w	r1, [fp, #4]
  40bc90:	eb04 0805 	add.w	r8, r4, r5
  40bc94:	4598      	cmp	r8, r3
  40bc96:	bfc8      	it	gt
  40bc98:	3101      	addgt	r1, #1
  40bc9a:	f7ff ff1d 	bl	40bad8 <_Balloc>
  40bc9e:	f100 0914 	add.w	r9, r0, #20
  40bca2:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  40bca6:	45d1      	cmp	r9, sl
  40bca8:	9000      	str	r0, [sp, #0]
  40bcaa:	d205      	bcs.n	40bcb8 <__multiply+0x4c>
  40bcac:	464b      	mov	r3, r9
  40bcae:	2100      	movs	r1, #0
  40bcb0:	f843 1b04 	str.w	r1, [r3], #4
  40bcb4:	459a      	cmp	sl, r3
  40bcb6:	d8fb      	bhi.n	40bcb0 <__multiply+0x44>
  40bcb8:	f106 0c14 	add.w	ip, r6, #20
  40bcbc:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  40bcc0:	f10b 0b14 	add.w	fp, fp, #20
  40bcc4:	459c      	cmp	ip, r3
  40bcc6:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  40bcca:	d24c      	bcs.n	40bd66 <__multiply+0xfa>
  40bccc:	f8cd a004 	str.w	sl, [sp, #4]
  40bcd0:	469a      	mov	sl, r3
  40bcd2:	f8dc 5000 	ldr.w	r5, [ip]
  40bcd6:	b2af      	uxth	r7, r5
  40bcd8:	b1ef      	cbz	r7, 40bd16 <__multiply+0xaa>
  40bcda:	2100      	movs	r1, #0
  40bcdc:	464d      	mov	r5, r9
  40bcde:	465e      	mov	r6, fp
  40bce0:	460c      	mov	r4, r1
  40bce2:	f856 2b04 	ldr.w	r2, [r6], #4
  40bce6:	6828      	ldr	r0, [r5, #0]
  40bce8:	b293      	uxth	r3, r2
  40bcea:	b281      	uxth	r1, r0
  40bcec:	fb07 1303 	mla	r3, r7, r3, r1
  40bcf0:	0c12      	lsrs	r2, r2, #16
  40bcf2:	0c01      	lsrs	r1, r0, #16
  40bcf4:	4423      	add	r3, r4
  40bcf6:	fb07 1102 	mla	r1, r7, r2, r1
  40bcfa:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  40bcfe:	b29b      	uxth	r3, r3
  40bd00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  40bd04:	45b6      	cmp	lr, r6
  40bd06:	f845 3b04 	str.w	r3, [r5], #4
  40bd0a:	ea4f 4411 	mov.w	r4, r1, lsr #16
  40bd0e:	d8e8      	bhi.n	40bce2 <__multiply+0x76>
  40bd10:	602c      	str	r4, [r5, #0]
  40bd12:	f8dc 5000 	ldr.w	r5, [ip]
  40bd16:	0c2d      	lsrs	r5, r5, #16
  40bd18:	d01d      	beq.n	40bd56 <__multiply+0xea>
  40bd1a:	f8d9 3000 	ldr.w	r3, [r9]
  40bd1e:	4648      	mov	r0, r9
  40bd20:	461c      	mov	r4, r3
  40bd22:	4659      	mov	r1, fp
  40bd24:	2200      	movs	r2, #0
  40bd26:	880e      	ldrh	r6, [r1, #0]
  40bd28:	0c24      	lsrs	r4, r4, #16
  40bd2a:	fb05 4406 	mla	r4, r5, r6, r4
  40bd2e:	4422      	add	r2, r4
  40bd30:	b29b      	uxth	r3, r3
  40bd32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40bd36:	f840 3b04 	str.w	r3, [r0], #4
  40bd3a:	f851 3b04 	ldr.w	r3, [r1], #4
  40bd3e:	6804      	ldr	r4, [r0, #0]
  40bd40:	0c1b      	lsrs	r3, r3, #16
  40bd42:	b2a6      	uxth	r6, r4
  40bd44:	fb05 6303 	mla	r3, r5, r3, r6
  40bd48:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  40bd4c:	458e      	cmp	lr, r1
  40bd4e:	ea4f 4213 	mov.w	r2, r3, lsr #16
  40bd52:	d8e8      	bhi.n	40bd26 <__multiply+0xba>
  40bd54:	6003      	str	r3, [r0, #0]
  40bd56:	f10c 0c04 	add.w	ip, ip, #4
  40bd5a:	45e2      	cmp	sl, ip
  40bd5c:	f109 0904 	add.w	r9, r9, #4
  40bd60:	d8b7      	bhi.n	40bcd2 <__multiply+0x66>
  40bd62:	f8dd a004 	ldr.w	sl, [sp, #4]
  40bd66:	f1b8 0f00 	cmp.w	r8, #0
  40bd6a:	dd0b      	ble.n	40bd84 <__multiply+0x118>
  40bd6c:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  40bd70:	f1aa 0a04 	sub.w	sl, sl, #4
  40bd74:	b11b      	cbz	r3, 40bd7e <__multiply+0x112>
  40bd76:	e005      	b.n	40bd84 <__multiply+0x118>
  40bd78:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  40bd7c:	b913      	cbnz	r3, 40bd84 <__multiply+0x118>
  40bd7e:	f1b8 0801 	subs.w	r8, r8, #1
  40bd82:	d1f9      	bne.n	40bd78 <__multiply+0x10c>
  40bd84:	9800      	ldr	r0, [sp, #0]
  40bd86:	f8c0 8010 	str.w	r8, [r0, #16]
  40bd8a:	b003      	add	sp, #12
  40bd8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040bd90 <__pow5mult>:
  40bd90:	f012 0303 	ands.w	r3, r2, #3
  40bd94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40bd98:	4614      	mov	r4, r2
  40bd9a:	4607      	mov	r7, r0
  40bd9c:	d12e      	bne.n	40bdfc <__pow5mult+0x6c>
  40bd9e:	460d      	mov	r5, r1
  40bda0:	10a4      	asrs	r4, r4, #2
  40bda2:	d01c      	beq.n	40bdde <__pow5mult+0x4e>
  40bda4:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  40bda6:	b396      	cbz	r6, 40be0e <__pow5mult+0x7e>
  40bda8:	07e3      	lsls	r3, r4, #31
  40bdaa:	f04f 0800 	mov.w	r8, #0
  40bdae:	d406      	bmi.n	40bdbe <__pow5mult+0x2e>
  40bdb0:	1064      	asrs	r4, r4, #1
  40bdb2:	d014      	beq.n	40bdde <__pow5mult+0x4e>
  40bdb4:	6830      	ldr	r0, [r6, #0]
  40bdb6:	b1a8      	cbz	r0, 40bde4 <__pow5mult+0x54>
  40bdb8:	4606      	mov	r6, r0
  40bdba:	07e3      	lsls	r3, r4, #31
  40bdbc:	d5f8      	bpl.n	40bdb0 <__pow5mult+0x20>
  40bdbe:	4632      	mov	r2, r6
  40bdc0:	4629      	mov	r1, r5
  40bdc2:	4638      	mov	r0, r7
  40bdc4:	f7ff ff52 	bl	40bc6c <__multiply>
  40bdc8:	b1b5      	cbz	r5, 40bdf8 <__pow5mult+0x68>
  40bdca:	686a      	ldr	r2, [r5, #4]
  40bdcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40bdce:	1064      	asrs	r4, r4, #1
  40bdd0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40bdd4:	6029      	str	r1, [r5, #0]
  40bdd6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40bdda:	4605      	mov	r5, r0
  40bddc:	d1ea      	bne.n	40bdb4 <__pow5mult+0x24>
  40bdde:	4628      	mov	r0, r5
  40bde0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40bde4:	4632      	mov	r2, r6
  40bde6:	4631      	mov	r1, r6
  40bde8:	4638      	mov	r0, r7
  40bdea:	f7ff ff3f 	bl	40bc6c <__multiply>
  40bdee:	6030      	str	r0, [r6, #0]
  40bdf0:	f8c0 8000 	str.w	r8, [r0]
  40bdf4:	4606      	mov	r6, r0
  40bdf6:	e7e0      	b.n	40bdba <__pow5mult+0x2a>
  40bdf8:	4605      	mov	r5, r0
  40bdfa:	e7d9      	b.n	40bdb0 <__pow5mult+0x20>
  40bdfc:	1e5a      	subs	r2, r3, #1
  40bdfe:	4d0b      	ldr	r5, [pc, #44]	; (40be2c <__pow5mult+0x9c>)
  40be00:	2300      	movs	r3, #0
  40be02:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  40be06:	f7ff fe97 	bl	40bb38 <__multadd>
  40be0a:	4605      	mov	r5, r0
  40be0c:	e7c8      	b.n	40bda0 <__pow5mult+0x10>
  40be0e:	2101      	movs	r1, #1
  40be10:	4638      	mov	r0, r7
  40be12:	f7ff fe61 	bl	40bad8 <_Balloc>
  40be16:	f240 2171 	movw	r1, #625	; 0x271
  40be1a:	2201      	movs	r2, #1
  40be1c:	2300      	movs	r3, #0
  40be1e:	6141      	str	r1, [r0, #20]
  40be20:	6102      	str	r2, [r0, #16]
  40be22:	4606      	mov	r6, r0
  40be24:	64b8      	str	r0, [r7, #72]	; 0x48
  40be26:	6003      	str	r3, [r0, #0]
  40be28:	e7be      	b.n	40bda8 <__pow5mult+0x18>
  40be2a:	bf00      	nop
  40be2c:	0040ecf8 	.word	0x0040ecf8

0040be30 <__lshift>:
  40be30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40be34:	4691      	mov	r9, r2
  40be36:	690a      	ldr	r2, [r1, #16]
  40be38:	688b      	ldr	r3, [r1, #8]
  40be3a:	ea4f 1469 	mov.w	r4, r9, asr #5
  40be3e:	eb04 0802 	add.w	r8, r4, r2
  40be42:	f108 0501 	add.w	r5, r8, #1
  40be46:	429d      	cmp	r5, r3
  40be48:	460e      	mov	r6, r1
  40be4a:	4607      	mov	r7, r0
  40be4c:	6849      	ldr	r1, [r1, #4]
  40be4e:	dd04      	ble.n	40be5a <__lshift+0x2a>
  40be50:	005b      	lsls	r3, r3, #1
  40be52:	429d      	cmp	r5, r3
  40be54:	f101 0101 	add.w	r1, r1, #1
  40be58:	dcfa      	bgt.n	40be50 <__lshift+0x20>
  40be5a:	4638      	mov	r0, r7
  40be5c:	f7ff fe3c 	bl	40bad8 <_Balloc>
  40be60:	2c00      	cmp	r4, #0
  40be62:	f100 0314 	add.w	r3, r0, #20
  40be66:	dd06      	ble.n	40be76 <__lshift+0x46>
  40be68:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  40be6c:	2100      	movs	r1, #0
  40be6e:	f843 1b04 	str.w	r1, [r3], #4
  40be72:	429a      	cmp	r2, r3
  40be74:	d1fb      	bne.n	40be6e <__lshift+0x3e>
  40be76:	6934      	ldr	r4, [r6, #16]
  40be78:	f106 0114 	add.w	r1, r6, #20
  40be7c:	f019 091f 	ands.w	r9, r9, #31
  40be80:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  40be84:	d01d      	beq.n	40bec2 <__lshift+0x92>
  40be86:	f1c9 0c20 	rsb	ip, r9, #32
  40be8a:	2200      	movs	r2, #0
  40be8c:	680c      	ldr	r4, [r1, #0]
  40be8e:	fa04 f409 	lsl.w	r4, r4, r9
  40be92:	4314      	orrs	r4, r2
  40be94:	f843 4b04 	str.w	r4, [r3], #4
  40be98:	f851 2b04 	ldr.w	r2, [r1], #4
  40be9c:	458e      	cmp	lr, r1
  40be9e:	fa22 f20c 	lsr.w	r2, r2, ip
  40bea2:	d8f3      	bhi.n	40be8c <__lshift+0x5c>
  40bea4:	601a      	str	r2, [r3, #0]
  40bea6:	b10a      	cbz	r2, 40beac <__lshift+0x7c>
  40bea8:	f108 0502 	add.w	r5, r8, #2
  40beac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40beae:	6872      	ldr	r2, [r6, #4]
  40beb0:	3d01      	subs	r5, #1
  40beb2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40beb6:	6105      	str	r5, [r0, #16]
  40beb8:	6031      	str	r1, [r6, #0]
  40beba:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40bebe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40bec2:	3b04      	subs	r3, #4
  40bec4:	f851 2b04 	ldr.w	r2, [r1], #4
  40bec8:	f843 2f04 	str.w	r2, [r3, #4]!
  40becc:	458e      	cmp	lr, r1
  40bece:	d8f9      	bhi.n	40bec4 <__lshift+0x94>
  40bed0:	e7ec      	b.n	40beac <__lshift+0x7c>
  40bed2:	bf00      	nop

0040bed4 <__mcmp>:
  40bed4:	b430      	push	{r4, r5}
  40bed6:	690b      	ldr	r3, [r1, #16]
  40bed8:	4605      	mov	r5, r0
  40beda:	6900      	ldr	r0, [r0, #16]
  40bedc:	1ac0      	subs	r0, r0, r3
  40bede:	d10f      	bne.n	40bf00 <__mcmp+0x2c>
  40bee0:	009b      	lsls	r3, r3, #2
  40bee2:	3514      	adds	r5, #20
  40bee4:	3114      	adds	r1, #20
  40bee6:	4419      	add	r1, r3
  40bee8:	442b      	add	r3, r5
  40beea:	e001      	b.n	40bef0 <__mcmp+0x1c>
  40beec:	429d      	cmp	r5, r3
  40beee:	d207      	bcs.n	40bf00 <__mcmp+0x2c>
  40bef0:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  40bef4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40bef8:	4294      	cmp	r4, r2
  40befa:	d0f7      	beq.n	40beec <__mcmp+0x18>
  40befc:	d302      	bcc.n	40bf04 <__mcmp+0x30>
  40befe:	2001      	movs	r0, #1
  40bf00:	bc30      	pop	{r4, r5}
  40bf02:	4770      	bx	lr
  40bf04:	f04f 30ff 	mov.w	r0, #4294967295
  40bf08:	e7fa      	b.n	40bf00 <__mcmp+0x2c>
  40bf0a:	bf00      	nop

0040bf0c <__mdiff>:
  40bf0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40bf10:	690f      	ldr	r7, [r1, #16]
  40bf12:	460e      	mov	r6, r1
  40bf14:	6911      	ldr	r1, [r2, #16]
  40bf16:	1a7f      	subs	r7, r7, r1
  40bf18:	2f00      	cmp	r7, #0
  40bf1a:	4690      	mov	r8, r2
  40bf1c:	d117      	bne.n	40bf4e <__mdiff+0x42>
  40bf1e:	0089      	lsls	r1, r1, #2
  40bf20:	f106 0514 	add.w	r5, r6, #20
  40bf24:	f102 0e14 	add.w	lr, r2, #20
  40bf28:	186b      	adds	r3, r5, r1
  40bf2a:	4471      	add	r1, lr
  40bf2c:	e001      	b.n	40bf32 <__mdiff+0x26>
  40bf2e:	429d      	cmp	r5, r3
  40bf30:	d25c      	bcs.n	40bfec <__mdiff+0xe0>
  40bf32:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  40bf36:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  40bf3a:	42a2      	cmp	r2, r4
  40bf3c:	d0f7      	beq.n	40bf2e <__mdiff+0x22>
  40bf3e:	d25e      	bcs.n	40bffe <__mdiff+0xf2>
  40bf40:	4633      	mov	r3, r6
  40bf42:	462c      	mov	r4, r5
  40bf44:	4646      	mov	r6, r8
  40bf46:	4675      	mov	r5, lr
  40bf48:	4698      	mov	r8, r3
  40bf4a:	2701      	movs	r7, #1
  40bf4c:	e005      	b.n	40bf5a <__mdiff+0x4e>
  40bf4e:	db58      	blt.n	40c002 <__mdiff+0xf6>
  40bf50:	f106 0514 	add.w	r5, r6, #20
  40bf54:	f108 0414 	add.w	r4, r8, #20
  40bf58:	2700      	movs	r7, #0
  40bf5a:	6871      	ldr	r1, [r6, #4]
  40bf5c:	f7ff fdbc 	bl	40bad8 <_Balloc>
  40bf60:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40bf64:	6936      	ldr	r6, [r6, #16]
  40bf66:	60c7      	str	r7, [r0, #12]
  40bf68:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  40bf6c:	46a6      	mov	lr, r4
  40bf6e:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  40bf72:	f100 0414 	add.w	r4, r0, #20
  40bf76:	2300      	movs	r3, #0
  40bf78:	f85e 1b04 	ldr.w	r1, [lr], #4
  40bf7c:	f855 8b04 	ldr.w	r8, [r5], #4
  40bf80:	b28a      	uxth	r2, r1
  40bf82:	fa13 f388 	uxtah	r3, r3, r8
  40bf86:	0c09      	lsrs	r1, r1, #16
  40bf88:	1a9a      	subs	r2, r3, r2
  40bf8a:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  40bf8e:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40bf92:	b292      	uxth	r2, r2
  40bf94:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40bf98:	45f4      	cmp	ip, lr
  40bf9a:	f844 2b04 	str.w	r2, [r4], #4
  40bf9e:	ea4f 4323 	mov.w	r3, r3, asr #16
  40bfa2:	d8e9      	bhi.n	40bf78 <__mdiff+0x6c>
  40bfa4:	42af      	cmp	r7, r5
  40bfa6:	d917      	bls.n	40bfd8 <__mdiff+0xcc>
  40bfa8:	46a4      	mov	ip, r4
  40bfaa:	46ae      	mov	lr, r5
  40bfac:	f85e 2b04 	ldr.w	r2, [lr], #4
  40bfb0:	fa13 f382 	uxtah	r3, r3, r2
  40bfb4:	1419      	asrs	r1, r3, #16
  40bfb6:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  40bfba:	b29b      	uxth	r3, r3
  40bfbc:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  40bfc0:	4577      	cmp	r7, lr
  40bfc2:	f84c 2b04 	str.w	r2, [ip], #4
  40bfc6:	ea4f 4321 	mov.w	r3, r1, asr #16
  40bfca:	d8ef      	bhi.n	40bfac <__mdiff+0xa0>
  40bfcc:	43ed      	mvns	r5, r5
  40bfce:	442f      	add	r7, r5
  40bfd0:	f027 0703 	bic.w	r7, r7, #3
  40bfd4:	3704      	adds	r7, #4
  40bfd6:	443c      	add	r4, r7
  40bfd8:	3c04      	subs	r4, #4
  40bfda:	b922      	cbnz	r2, 40bfe6 <__mdiff+0xda>
  40bfdc:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  40bfe0:	3e01      	subs	r6, #1
  40bfe2:	2b00      	cmp	r3, #0
  40bfe4:	d0fa      	beq.n	40bfdc <__mdiff+0xd0>
  40bfe6:	6106      	str	r6, [r0, #16]
  40bfe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40bfec:	2100      	movs	r1, #0
  40bfee:	f7ff fd73 	bl	40bad8 <_Balloc>
  40bff2:	2201      	movs	r2, #1
  40bff4:	2300      	movs	r3, #0
  40bff6:	6102      	str	r2, [r0, #16]
  40bff8:	6143      	str	r3, [r0, #20]
  40bffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40bffe:	4674      	mov	r4, lr
  40c000:	e7ab      	b.n	40bf5a <__mdiff+0x4e>
  40c002:	4633      	mov	r3, r6
  40c004:	f106 0414 	add.w	r4, r6, #20
  40c008:	f102 0514 	add.w	r5, r2, #20
  40c00c:	4616      	mov	r6, r2
  40c00e:	2701      	movs	r7, #1
  40c010:	4698      	mov	r8, r3
  40c012:	e7a2      	b.n	40bf5a <__mdiff+0x4e>

0040c014 <__d2b>:
  40c014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40c018:	b082      	sub	sp, #8
  40c01a:	2101      	movs	r1, #1
  40c01c:	461c      	mov	r4, r3
  40c01e:	f3c3 570a 	ubfx	r7, r3, #20, #11
  40c022:	4615      	mov	r5, r2
  40c024:	9e08      	ldr	r6, [sp, #32]
  40c026:	f7ff fd57 	bl	40bad8 <_Balloc>
  40c02a:	f3c4 0413 	ubfx	r4, r4, #0, #20
  40c02e:	4680      	mov	r8, r0
  40c030:	b10f      	cbz	r7, 40c036 <__d2b+0x22>
  40c032:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  40c036:	9401      	str	r4, [sp, #4]
  40c038:	b31d      	cbz	r5, 40c082 <__d2b+0x6e>
  40c03a:	a802      	add	r0, sp, #8
  40c03c:	f840 5d08 	str.w	r5, [r0, #-8]!
  40c040:	f7ff fdda 	bl	40bbf8 <__lo0bits>
  40c044:	2800      	cmp	r0, #0
  40c046:	d134      	bne.n	40c0b2 <__d2b+0x9e>
  40c048:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40c04c:	f8c8 2014 	str.w	r2, [r8, #20]
  40c050:	2b00      	cmp	r3, #0
  40c052:	bf0c      	ite	eq
  40c054:	2101      	moveq	r1, #1
  40c056:	2102      	movne	r1, #2
  40c058:	f8c8 3018 	str.w	r3, [r8, #24]
  40c05c:	f8c8 1010 	str.w	r1, [r8, #16]
  40c060:	b9df      	cbnz	r7, 40c09a <__d2b+0x86>
  40c062:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  40c066:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40c06a:	6030      	str	r0, [r6, #0]
  40c06c:	6918      	ldr	r0, [r3, #16]
  40c06e:	f7ff fda3 	bl	40bbb8 <__hi0bits>
  40c072:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40c074:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  40c078:	6018      	str	r0, [r3, #0]
  40c07a:	4640      	mov	r0, r8
  40c07c:	b002      	add	sp, #8
  40c07e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40c082:	a801      	add	r0, sp, #4
  40c084:	f7ff fdb8 	bl	40bbf8 <__lo0bits>
  40c088:	9b01      	ldr	r3, [sp, #4]
  40c08a:	f8c8 3014 	str.w	r3, [r8, #20]
  40c08e:	2101      	movs	r1, #1
  40c090:	3020      	adds	r0, #32
  40c092:	f8c8 1010 	str.w	r1, [r8, #16]
  40c096:	2f00      	cmp	r7, #0
  40c098:	d0e3      	beq.n	40c062 <__d2b+0x4e>
  40c09a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40c09c:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  40c0a0:	4407      	add	r7, r0
  40c0a2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  40c0a6:	6037      	str	r7, [r6, #0]
  40c0a8:	6018      	str	r0, [r3, #0]
  40c0aa:	4640      	mov	r0, r8
  40c0ac:	b002      	add	sp, #8
  40c0ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40c0b2:	e89d 000a 	ldmia.w	sp, {r1, r3}
  40c0b6:	f1c0 0220 	rsb	r2, r0, #32
  40c0ba:	fa03 f202 	lsl.w	r2, r3, r2
  40c0be:	430a      	orrs	r2, r1
  40c0c0:	40c3      	lsrs	r3, r0
  40c0c2:	9301      	str	r3, [sp, #4]
  40c0c4:	f8c8 2014 	str.w	r2, [r8, #20]
  40c0c8:	e7c2      	b.n	40c050 <__d2b+0x3c>
  40c0ca:	bf00      	nop

0040c0cc <_realloc_r>:
  40c0cc:	2900      	cmp	r1, #0
  40c0ce:	f000 8095 	beq.w	40c1fc <_realloc_r+0x130>
  40c0d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40c0d6:	460d      	mov	r5, r1
  40c0d8:	4616      	mov	r6, r2
  40c0da:	b083      	sub	sp, #12
  40c0dc:	4680      	mov	r8, r0
  40c0de:	f106 070b 	add.w	r7, r6, #11
  40c0e2:	f7fb fcd1 	bl	407a88 <__malloc_lock>
  40c0e6:	f855 ec04 	ldr.w	lr, [r5, #-4]
  40c0ea:	2f16      	cmp	r7, #22
  40c0ec:	f02e 0403 	bic.w	r4, lr, #3
  40c0f0:	f1a5 0908 	sub.w	r9, r5, #8
  40c0f4:	d83c      	bhi.n	40c170 <_realloc_r+0xa4>
  40c0f6:	2210      	movs	r2, #16
  40c0f8:	4617      	mov	r7, r2
  40c0fa:	42be      	cmp	r6, r7
  40c0fc:	d83d      	bhi.n	40c17a <_realloc_r+0xae>
  40c0fe:	4294      	cmp	r4, r2
  40c100:	da43      	bge.n	40c18a <_realloc_r+0xbe>
  40c102:	4bc4      	ldr	r3, [pc, #784]	; (40c414 <_realloc_r+0x348>)
  40c104:	6899      	ldr	r1, [r3, #8]
  40c106:	eb09 0004 	add.w	r0, r9, r4
  40c10a:	4288      	cmp	r0, r1
  40c10c:	f000 80b4 	beq.w	40c278 <_realloc_r+0x1ac>
  40c110:	6843      	ldr	r3, [r0, #4]
  40c112:	f023 0101 	bic.w	r1, r3, #1
  40c116:	4401      	add	r1, r0
  40c118:	6849      	ldr	r1, [r1, #4]
  40c11a:	07c9      	lsls	r1, r1, #31
  40c11c:	d54c      	bpl.n	40c1b8 <_realloc_r+0xec>
  40c11e:	f01e 0f01 	tst.w	lr, #1
  40c122:	f000 809b 	beq.w	40c25c <_realloc_r+0x190>
  40c126:	4631      	mov	r1, r6
  40c128:	4640      	mov	r0, r8
  40c12a:	f7fb f915 	bl	407358 <_malloc_r>
  40c12e:	4606      	mov	r6, r0
  40c130:	2800      	cmp	r0, #0
  40c132:	d03a      	beq.n	40c1aa <_realloc_r+0xde>
  40c134:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40c138:	f023 0301 	bic.w	r3, r3, #1
  40c13c:	444b      	add	r3, r9
  40c13e:	f1a0 0208 	sub.w	r2, r0, #8
  40c142:	429a      	cmp	r2, r3
  40c144:	f000 8121 	beq.w	40c38a <_realloc_r+0x2be>
  40c148:	1f22      	subs	r2, r4, #4
  40c14a:	2a24      	cmp	r2, #36	; 0x24
  40c14c:	f200 8107 	bhi.w	40c35e <_realloc_r+0x292>
  40c150:	2a13      	cmp	r2, #19
  40c152:	f200 80db 	bhi.w	40c30c <_realloc_r+0x240>
  40c156:	4603      	mov	r3, r0
  40c158:	462a      	mov	r2, r5
  40c15a:	6811      	ldr	r1, [r2, #0]
  40c15c:	6019      	str	r1, [r3, #0]
  40c15e:	6851      	ldr	r1, [r2, #4]
  40c160:	6059      	str	r1, [r3, #4]
  40c162:	6892      	ldr	r2, [r2, #8]
  40c164:	609a      	str	r2, [r3, #8]
  40c166:	4629      	mov	r1, r5
  40c168:	4640      	mov	r0, r8
  40c16a:	f7ff f8d1 	bl	40b310 <_free_r>
  40c16e:	e01c      	b.n	40c1aa <_realloc_r+0xde>
  40c170:	f027 0707 	bic.w	r7, r7, #7
  40c174:	2f00      	cmp	r7, #0
  40c176:	463a      	mov	r2, r7
  40c178:	dabf      	bge.n	40c0fa <_realloc_r+0x2e>
  40c17a:	2600      	movs	r6, #0
  40c17c:	230c      	movs	r3, #12
  40c17e:	4630      	mov	r0, r6
  40c180:	f8c8 3000 	str.w	r3, [r8]
  40c184:	b003      	add	sp, #12
  40c186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c18a:	462e      	mov	r6, r5
  40c18c:	1be3      	subs	r3, r4, r7
  40c18e:	2b0f      	cmp	r3, #15
  40c190:	d81e      	bhi.n	40c1d0 <_realloc_r+0x104>
  40c192:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40c196:	f003 0301 	and.w	r3, r3, #1
  40c19a:	4323      	orrs	r3, r4
  40c19c:	444c      	add	r4, r9
  40c19e:	f8c9 3004 	str.w	r3, [r9, #4]
  40c1a2:	6863      	ldr	r3, [r4, #4]
  40c1a4:	f043 0301 	orr.w	r3, r3, #1
  40c1a8:	6063      	str	r3, [r4, #4]
  40c1aa:	4640      	mov	r0, r8
  40c1ac:	f7fb fc6e 	bl	407a8c <__malloc_unlock>
  40c1b0:	4630      	mov	r0, r6
  40c1b2:	b003      	add	sp, #12
  40c1b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c1b8:	f023 0303 	bic.w	r3, r3, #3
  40c1bc:	18e1      	adds	r1, r4, r3
  40c1be:	4291      	cmp	r1, r2
  40c1c0:	db1f      	blt.n	40c202 <_realloc_r+0x136>
  40c1c2:	68c3      	ldr	r3, [r0, #12]
  40c1c4:	6882      	ldr	r2, [r0, #8]
  40c1c6:	462e      	mov	r6, r5
  40c1c8:	60d3      	str	r3, [r2, #12]
  40c1ca:	460c      	mov	r4, r1
  40c1cc:	609a      	str	r2, [r3, #8]
  40c1ce:	e7dd      	b.n	40c18c <_realloc_r+0xc0>
  40c1d0:	f8d9 2004 	ldr.w	r2, [r9, #4]
  40c1d4:	eb09 0107 	add.w	r1, r9, r7
  40c1d8:	f002 0201 	and.w	r2, r2, #1
  40c1dc:	444c      	add	r4, r9
  40c1de:	f043 0301 	orr.w	r3, r3, #1
  40c1e2:	4317      	orrs	r7, r2
  40c1e4:	f8c9 7004 	str.w	r7, [r9, #4]
  40c1e8:	604b      	str	r3, [r1, #4]
  40c1ea:	6863      	ldr	r3, [r4, #4]
  40c1ec:	f043 0301 	orr.w	r3, r3, #1
  40c1f0:	3108      	adds	r1, #8
  40c1f2:	6063      	str	r3, [r4, #4]
  40c1f4:	4640      	mov	r0, r8
  40c1f6:	f7ff f88b 	bl	40b310 <_free_r>
  40c1fa:	e7d6      	b.n	40c1aa <_realloc_r+0xde>
  40c1fc:	4611      	mov	r1, r2
  40c1fe:	f7fb b8ab 	b.w	407358 <_malloc_r>
  40c202:	f01e 0f01 	tst.w	lr, #1
  40c206:	d18e      	bne.n	40c126 <_realloc_r+0x5a>
  40c208:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40c20c:	eba9 0a01 	sub.w	sl, r9, r1
  40c210:	f8da 1004 	ldr.w	r1, [sl, #4]
  40c214:	f021 0103 	bic.w	r1, r1, #3
  40c218:	440b      	add	r3, r1
  40c21a:	4423      	add	r3, r4
  40c21c:	4293      	cmp	r3, r2
  40c21e:	db25      	blt.n	40c26c <_realloc_r+0x1a0>
  40c220:	68c2      	ldr	r2, [r0, #12]
  40c222:	6881      	ldr	r1, [r0, #8]
  40c224:	4656      	mov	r6, sl
  40c226:	60ca      	str	r2, [r1, #12]
  40c228:	6091      	str	r1, [r2, #8]
  40c22a:	f8da 100c 	ldr.w	r1, [sl, #12]
  40c22e:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40c232:	1f22      	subs	r2, r4, #4
  40c234:	2a24      	cmp	r2, #36	; 0x24
  40c236:	60c1      	str	r1, [r0, #12]
  40c238:	6088      	str	r0, [r1, #8]
  40c23a:	f200 8094 	bhi.w	40c366 <_realloc_r+0x29a>
  40c23e:	2a13      	cmp	r2, #19
  40c240:	d96f      	bls.n	40c322 <_realloc_r+0x256>
  40c242:	6829      	ldr	r1, [r5, #0]
  40c244:	f8ca 1008 	str.w	r1, [sl, #8]
  40c248:	6869      	ldr	r1, [r5, #4]
  40c24a:	f8ca 100c 	str.w	r1, [sl, #12]
  40c24e:	2a1b      	cmp	r2, #27
  40c250:	f200 80a2 	bhi.w	40c398 <_realloc_r+0x2cc>
  40c254:	3508      	adds	r5, #8
  40c256:	f10a 0210 	add.w	r2, sl, #16
  40c25a:	e063      	b.n	40c324 <_realloc_r+0x258>
  40c25c:	f855 3c08 	ldr.w	r3, [r5, #-8]
  40c260:	eba9 0a03 	sub.w	sl, r9, r3
  40c264:	f8da 1004 	ldr.w	r1, [sl, #4]
  40c268:	f021 0103 	bic.w	r1, r1, #3
  40c26c:	1863      	adds	r3, r4, r1
  40c26e:	4293      	cmp	r3, r2
  40c270:	f6ff af59 	blt.w	40c126 <_realloc_r+0x5a>
  40c274:	4656      	mov	r6, sl
  40c276:	e7d8      	b.n	40c22a <_realloc_r+0x15e>
  40c278:	6841      	ldr	r1, [r0, #4]
  40c27a:	f021 0b03 	bic.w	fp, r1, #3
  40c27e:	44a3      	add	fp, r4
  40c280:	f107 0010 	add.w	r0, r7, #16
  40c284:	4583      	cmp	fp, r0
  40c286:	da56      	bge.n	40c336 <_realloc_r+0x26a>
  40c288:	f01e 0f01 	tst.w	lr, #1
  40c28c:	f47f af4b 	bne.w	40c126 <_realloc_r+0x5a>
  40c290:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40c294:	eba9 0a01 	sub.w	sl, r9, r1
  40c298:	f8da 1004 	ldr.w	r1, [sl, #4]
  40c29c:	f021 0103 	bic.w	r1, r1, #3
  40c2a0:	448b      	add	fp, r1
  40c2a2:	4558      	cmp	r0, fp
  40c2a4:	dce2      	bgt.n	40c26c <_realloc_r+0x1a0>
  40c2a6:	4656      	mov	r6, sl
  40c2a8:	f8da 100c 	ldr.w	r1, [sl, #12]
  40c2ac:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40c2b0:	1f22      	subs	r2, r4, #4
  40c2b2:	2a24      	cmp	r2, #36	; 0x24
  40c2b4:	60c1      	str	r1, [r0, #12]
  40c2b6:	6088      	str	r0, [r1, #8]
  40c2b8:	f200 808f 	bhi.w	40c3da <_realloc_r+0x30e>
  40c2bc:	2a13      	cmp	r2, #19
  40c2be:	f240 808a 	bls.w	40c3d6 <_realloc_r+0x30a>
  40c2c2:	6829      	ldr	r1, [r5, #0]
  40c2c4:	f8ca 1008 	str.w	r1, [sl, #8]
  40c2c8:	6869      	ldr	r1, [r5, #4]
  40c2ca:	f8ca 100c 	str.w	r1, [sl, #12]
  40c2ce:	2a1b      	cmp	r2, #27
  40c2d0:	f200 808a 	bhi.w	40c3e8 <_realloc_r+0x31c>
  40c2d4:	3508      	adds	r5, #8
  40c2d6:	f10a 0210 	add.w	r2, sl, #16
  40c2da:	6829      	ldr	r1, [r5, #0]
  40c2dc:	6011      	str	r1, [r2, #0]
  40c2de:	6869      	ldr	r1, [r5, #4]
  40c2e0:	6051      	str	r1, [r2, #4]
  40c2e2:	68a9      	ldr	r1, [r5, #8]
  40c2e4:	6091      	str	r1, [r2, #8]
  40c2e6:	eb0a 0107 	add.w	r1, sl, r7
  40c2ea:	ebab 0207 	sub.w	r2, fp, r7
  40c2ee:	f042 0201 	orr.w	r2, r2, #1
  40c2f2:	6099      	str	r1, [r3, #8]
  40c2f4:	604a      	str	r2, [r1, #4]
  40c2f6:	f8da 3004 	ldr.w	r3, [sl, #4]
  40c2fa:	f003 0301 	and.w	r3, r3, #1
  40c2fe:	431f      	orrs	r7, r3
  40c300:	4640      	mov	r0, r8
  40c302:	f8ca 7004 	str.w	r7, [sl, #4]
  40c306:	f7fb fbc1 	bl	407a8c <__malloc_unlock>
  40c30a:	e751      	b.n	40c1b0 <_realloc_r+0xe4>
  40c30c:	682b      	ldr	r3, [r5, #0]
  40c30e:	6003      	str	r3, [r0, #0]
  40c310:	686b      	ldr	r3, [r5, #4]
  40c312:	6043      	str	r3, [r0, #4]
  40c314:	2a1b      	cmp	r2, #27
  40c316:	d82d      	bhi.n	40c374 <_realloc_r+0x2a8>
  40c318:	f100 0308 	add.w	r3, r0, #8
  40c31c:	f105 0208 	add.w	r2, r5, #8
  40c320:	e71b      	b.n	40c15a <_realloc_r+0x8e>
  40c322:	4632      	mov	r2, r6
  40c324:	6829      	ldr	r1, [r5, #0]
  40c326:	6011      	str	r1, [r2, #0]
  40c328:	6869      	ldr	r1, [r5, #4]
  40c32a:	6051      	str	r1, [r2, #4]
  40c32c:	68a9      	ldr	r1, [r5, #8]
  40c32e:	6091      	str	r1, [r2, #8]
  40c330:	461c      	mov	r4, r3
  40c332:	46d1      	mov	r9, sl
  40c334:	e72a      	b.n	40c18c <_realloc_r+0xc0>
  40c336:	eb09 0107 	add.w	r1, r9, r7
  40c33a:	ebab 0b07 	sub.w	fp, fp, r7
  40c33e:	f04b 0201 	orr.w	r2, fp, #1
  40c342:	6099      	str	r1, [r3, #8]
  40c344:	604a      	str	r2, [r1, #4]
  40c346:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40c34a:	f003 0301 	and.w	r3, r3, #1
  40c34e:	431f      	orrs	r7, r3
  40c350:	4640      	mov	r0, r8
  40c352:	f845 7c04 	str.w	r7, [r5, #-4]
  40c356:	f7fb fb99 	bl	407a8c <__malloc_unlock>
  40c35a:	462e      	mov	r6, r5
  40c35c:	e728      	b.n	40c1b0 <_realloc_r+0xe4>
  40c35e:	4629      	mov	r1, r5
  40c360:	f7ff fb56 	bl	40ba10 <memmove>
  40c364:	e6ff      	b.n	40c166 <_realloc_r+0x9a>
  40c366:	4629      	mov	r1, r5
  40c368:	4630      	mov	r0, r6
  40c36a:	461c      	mov	r4, r3
  40c36c:	46d1      	mov	r9, sl
  40c36e:	f7ff fb4f 	bl	40ba10 <memmove>
  40c372:	e70b      	b.n	40c18c <_realloc_r+0xc0>
  40c374:	68ab      	ldr	r3, [r5, #8]
  40c376:	6083      	str	r3, [r0, #8]
  40c378:	68eb      	ldr	r3, [r5, #12]
  40c37a:	60c3      	str	r3, [r0, #12]
  40c37c:	2a24      	cmp	r2, #36	; 0x24
  40c37e:	d017      	beq.n	40c3b0 <_realloc_r+0x2e4>
  40c380:	f100 0310 	add.w	r3, r0, #16
  40c384:	f105 0210 	add.w	r2, r5, #16
  40c388:	e6e7      	b.n	40c15a <_realloc_r+0x8e>
  40c38a:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40c38e:	f023 0303 	bic.w	r3, r3, #3
  40c392:	441c      	add	r4, r3
  40c394:	462e      	mov	r6, r5
  40c396:	e6f9      	b.n	40c18c <_realloc_r+0xc0>
  40c398:	68a9      	ldr	r1, [r5, #8]
  40c39a:	f8ca 1010 	str.w	r1, [sl, #16]
  40c39e:	68e9      	ldr	r1, [r5, #12]
  40c3a0:	f8ca 1014 	str.w	r1, [sl, #20]
  40c3a4:	2a24      	cmp	r2, #36	; 0x24
  40c3a6:	d00c      	beq.n	40c3c2 <_realloc_r+0x2f6>
  40c3a8:	3510      	adds	r5, #16
  40c3aa:	f10a 0218 	add.w	r2, sl, #24
  40c3ae:	e7b9      	b.n	40c324 <_realloc_r+0x258>
  40c3b0:	692b      	ldr	r3, [r5, #16]
  40c3b2:	6103      	str	r3, [r0, #16]
  40c3b4:	696b      	ldr	r3, [r5, #20]
  40c3b6:	6143      	str	r3, [r0, #20]
  40c3b8:	f105 0218 	add.w	r2, r5, #24
  40c3bc:	f100 0318 	add.w	r3, r0, #24
  40c3c0:	e6cb      	b.n	40c15a <_realloc_r+0x8e>
  40c3c2:	692a      	ldr	r2, [r5, #16]
  40c3c4:	f8ca 2018 	str.w	r2, [sl, #24]
  40c3c8:	696a      	ldr	r2, [r5, #20]
  40c3ca:	f8ca 201c 	str.w	r2, [sl, #28]
  40c3ce:	3518      	adds	r5, #24
  40c3d0:	f10a 0220 	add.w	r2, sl, #32
  40c3d4:	e7a6      	b.n	40c324 <_realloc_r+0x258>
  40c3d6:	4632      	mov	r2, r6
  40c3d8:	e77f      	b.n	40c2da <_realloc_r+0x20e>
  40c3da:	4629      	mov	r1, r5
  40c3dc:	4630      	mov	r0, r6
  40c3de:	9301      	str	r3, [sp, #4]
  40c3e0:	f7ff fb16 	bl	40ba10 <memmove>
  40c3e4:	9b01      	ldr	r3, [sp, #4]
  40c3e6:	e77e      	b.n	40c2e6 <_realloc_r+0x21a>
  40c3e8:	68a9      	ldr	r1, [r5, #8]
  40c3ea:	f8ca 1010 	str.w	r1, [sl, #16]
  40c3ee:	68e9      	ldr	r1, [r5, #12]
  40c3f0:	f8ca 1014 	str.w	r1, [sl, #20]
  40c3f4:	2a24      	cmp	r2, #36	; 0x24
  40c3f6:	d003      	beq.n	40c400 <_realloc_r+0x334>
  40c3f8:	3510      	adds	r5, #16
  40c3fa:	f10a 0218 	add.w	r2, sl, #24
  40c3fe:	e76c      	b.n	40c2da <_realloc_r+0x20e>
  40c400:	692a      	ldr	r2, [r5, #16]
  40c402:	f8ca 2018 	str.w	r2, [sl, #24]
  40c406:	696a      	ldr	r2, [r5, #20]
  40c408:	f8ca 201c 	str.w	r2, [sl, #28]
  40c40c:	3518      	adds	r5, #24
  40c40e:	f10a 0220 	add.w	r2, sl, #32
  40c412:	e762      	b.n	40c2da <_realloc_r+0x20e>
  40c414:	20400478 	.word	0x20400478

0040c418 <__sread>:
  40c418:	b510      	push	{r4, lr}
  40c41a:	460c      	mov	r4, r1
  40c41c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40c420:	f000 fa72 	bl	40c908 <_read_r>
  40c424:	2800      	cmp	r0, #0
  40c426:	db03      	blt.n	40c430 <__sread+0x18>
  40c428:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40c42a:	4403      	add	r3, r0
  40c42c:	6523      	str	r3, [r4, #80]	; 0x50
  40c42e:	bd10      	pop	{r4, pc}
  40c430:	89a3      	ldrh	r3, [r4, #12]
  40c432:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40c436:	81a3      	strh	r3, [r4, #12]
  40c438:	bd10      	pop	{r4, pc}
  40c43a:	bf00      	nop

0040c43c <__swrite>:
  40c43c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40c440:	4616      	mov	r6, r2
  40c442:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  40c446:	461f      	mov	r7, r3
  40c448:	05d3      	lsls	r3, r2, #23
  40c44a:	460c      	mov	r4, r1
  40c44c:	4605      	mov	r5, r0
  40c44e:	d507      	bpl.n	40c460 <__swrite+0x24>
  40c450:	2200      	movs	r2, #0
  40c452:	2302      	movs	r3, #2
  40c454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40c458:	f000 fa40 	bl	40c8dc <_lseek_r>
  40c45c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40c460:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40c464:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  40c468:	81a2      	strh	r2, [r4, #12]
  40c46a:	463b      	mov	r3, r7
  40c46c:	4632      	mov	r2, r6
  40c46e:	4628      	mov	r0, r5
  40c470:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40c474:	f000 b922 	b.w	40c6bc <_write_r>

0040c478 <__sseek>:
  40c478:	b510      	push	{r4, lr}
  40c47a:	460c      	mov	r4, r1
  40c47c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40c480:	f000 fa2c 	bl	40c8dc <_lseek_r>
  40c484:	89a3      	ldrh	r3, [r4, #12]
  40c486:	1c42      	adds	r2, r0, #1
  40c488:	bf0e      	itee	eq
  40c48a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40c48e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40c492:	6520      	strne	r0, [r4, #80]	; 0x50
  40c494:	81a3      	strh	r3, [r4, #12]
  40c496:	bd10      	pop	{r4, pc}

0040c498 <__sclose>:
  40c498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40c49c:	f000 b9a6 	b.w	40c7ec <_close_r>

0040c4a0 <__ssprint_r>:
  40c4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40c4a4:	6893      	ldr	r3, [r2, #8]
  40c4a6:	b083      	sub	sp, #12
  40c4a8:	4690      	mov	r8, r2
  40c4aa:	2b00      	cmp	r3, #0
  40c4ac:	d070      	beq.n	40c590 <__ssprint_r+0xf0>
  40c4ae:	4682      	mov	sl, r0
  40c4b0:	460c      	mov	r4, r1
  40c4b2:	6817      	ldr	r7, [r2, #0]
  40c4b4:	688d      	ldr	r5, [r1, #8]
  40c4b6:	6808      	ldr	r0, [r1, #0]
  40c4b8:	e042      	b.n	40c540 <__ssprint_r+0xa0>
  40c4ba:	89a3      	ldrh	r3, [r4, #12]
  40c4bc:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40c4c0:	d02e      	beq.n	40c520 <__ssprint_r+0x80>
  40c4c2:	6965      	ldr	r5, [r4, #20]
  40c4c4:	6921      	ldr	r1, [r4, #16]
  40c4c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  40c4ca:	eba0 0b01 	sub.w	fp, r0, r1
  40c4ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  40c4d2:	f10b 0001 	add.w	r0, fp, #1
  40c4d6:	106d      	asrs	r5, r5, #1
  40c4d8:	4430      	add	r0, r6
  40c4da:	42a8      	cmp	r0, r5
  40c4dc:	462a      	mov	r2, r5
  40c4de:	bf84      	itt	hi
  40c4e0:	4605      	movhi	r5, r0
  40c4e2:	462a      	movhi	r2, r5
  40c4e4:	055b      	lsls	r3, r3, #21
  40c4e6:	d538      	bpl.n	40c55a <__ssprint_r+0xba>
  40c4e8:	4611      	mov	r1, r2
  40c4ea:	4650      	mov	r0, sl
  40c4ec:	f7fa ff34 	bl	407358 <_malloc_r>
  40c4f0:	2800      	cmp	r0, #0
  40c4f2:	d03c      	beq.n	40c56e <__ssprint_r+0xce>
  40c4f4:	465a      	mov	r2, fp
  40c4f6:	6921      	ldr	r1, [r4, #16]
  40c4f8:	9001      	str	r0, [sp, #4]
  40c4fa:	f7fb f9dd 	bl	4078b8 <memcpy>
  40c4fe:	89a2      	ldrh	r2, [r4, #12]
  40c500:	9b01      	ldr	r3, [sp, #4]
  40c502:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  40c506:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40c50a:	81a2      	strh	r2, [r4, #12]
  40c50c:	eba5 020b 	sub.w	r2, r5, fp
  40c510:	eb03 000b 	add.w	r0, r3, fp
  40c514:	6165      	str	r5, [r4, #20]
  40c516:	6123      	str	r3, [r4, #16]
  40c518:	6020      	str	r0, [r4, #0]
  40c51a:	60a2      	str	r2, [r4, #8]
  40c51c:	4635      	mov	r5, r6
  40c51e:	46b3      	mov	fp, r6
  40c520:	465a      	mov	r2, fp
  40c522:	4649      	mov	r1, r9
  40c524:	f7ff fa74 	bl	40ba10 <memmove>
  40c528:	f8d8 3008 	ldr.w	r3, [r8, #8]
  40c52c:	68a2      	ldr	r2, [r4, #8]
  40c52e:	6820      	ldr	r0, [r4, #0]
  40c530:	1b55      	subs	r5, r2, r5
  40c532:	4458      	add	r0, fp
  40c534:	1b9e      	subs	r6, r3, r6
  40c536:	60a5      	str	r5, [r4, #8]
  40c538:	6020      	str	r0, [r4, #0]
  40c53a:	f8c8 6008 	str.w	r6, [r8, #8]
  40c53e:	b33e      	cbz	r6, 40c590 <__ssprint_r+0xf0>
  40c540:	687e      	ldr	r6, [r7, #4]
  40c542:	463b      	mov	r3, r7
  40c544:	3708      	adds	r7, #8
  40c546:	2e00      	cmp	r6, #0
  40c548:	d0fa      	beq.n	40c540 <__ssprint_r+0xa0>
  40c54a:	42ae      	cmp	r6, r5
  40c54c:	f8d3 9000 	ldr.w	r9, [r3]
  40c550:	46ab      	mov	fp, r5
  40c552:	d2b2      	bcs.n	40c4ba <__ssprint_r+0x1a>
  40c554:	4635      	mov	r5, r6
  40c556:	46b3      	mov	fp, r6
  40c558:	e7e2      	b.n	40c520 <__ssprint_r+0x80>
  40c55a:	4650      	mov	r0, sl
  40c55c:	f7ff fdb6 	bl	40c0cc <_realloc_r>
  40c560:	4603      	mov	r3, r0
  40c562:	2800      	cmp	r0, #0
  40c564:	d1d2      	bne.n	40c50c <__ssprint_r+0x6c>
  40c566:	6921      	ldr	r1, [r4, #16]
  40c568:	4650      	mov	r0, sl
  40c56a:	f7fe fed1 	bl	40b310 <_free_r>
  40c56e:	230c      	movs	r3, #12
  40c570:	f8ca 3000 	str.w	r3, [sl]
  40c574:	89a3      	ldrh	r3, [r4, #12]
  40c576:	2200      	movs	r2, #0
  40c578:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40c57c:	f04f 30ff 	mov.w	r0, #4294967295
  40c580:	81a3      	strh	r3, [r4, #12]
  40c582:	f8c8 2008 	str.w	r2, [r8, #8]
  40c586:	f8c8 2004 	str.w	r2, [r8, #4]
  40c58a:	b003      	add	sp, #12
  40c58c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c590:	2000      	movs	r0, #0
  40c592:	f8c8 0004 	str.w	r0, [r8, #4]
  40c596:	b003      	add	sp, #12
  40c598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040c59c <__swbuf_r>:
  40c59c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40c59e:	460d      	mov	r5, r1
  40c5a0:	4614      	mov	r4, r2
  40c5a2:	4606      	mov	r6, r0
  40c5a4:	b110      	cbz	r0, 40c5ac <__swbuf_r+0x10>
  40c5a6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40c5a8:	2b00      	cmp	r3, #0
  40c5aa:	d04b      	beq.n	40c644 <__swbuf_r+0xa8>
  40c5ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40c5b0:	69a3      	ldr	r3, [r4, #24]
  40c5b2:	60a3      	str	r3, [r4, #8]
  40c5b4:	b291      	uxth	r1, r2
  40c5b6:	0708      	lsls	r0, r1, #28
  40c5b8:	d539      	bpl.n	40c62e <__swbuf_r+0x92>
  40c5ba:	6923      	ldr	r3, [r4, #16]
  40c5bc:	2b00      	cmp	r3, #0
  40c5be:	d036      	beq.n	40c62e <__swbuf_r+0x92>
  40c5c0:	b2ed      	uxtb	r5, r5
  40c5c2:	0489      	lsls	r1, r1, #18
  40c5c4:	462f      	mov	r7, r5
  40c5c6:	d515      	bpl.n	40c5f4 <__swbuf_r+0x58>
  40c5c8:	6822      	ldr	r2, [r4, #0]
  40c5ca:	6961      	ldr	r1, [r4, #20]
  40c5cc:	1ad3      	subs	r3, r2, r3
  40c5ce:	428b      	cmp	r3, r1
  40c5d0:	da1c      	bge.n	40c60c <__swbuf_r+0x70>
  40c5d2:	3301      	adds	r3, #1
  40c5d4:	68a1      	ldr	r1, [r4, #8]
  40c5d6:	1c50      	adds	r0, r2, #1
  40c5d8:	3901      	subs	r1, #1
  40c5da:	60a1      	str	r1, [r4, #8]
  40c5dc:	6020      	str	r0, [r4, #0]
  40c5de:	7015      	strb	r5, [r2, #0]
  40c5e0:	6962      	ldr	r2, [r4, #20]
  40c5e2:	429a      	cmp	r2, r3
  40c5e4:	d01a      	beq.n	40c61c <__swbuf_r+0x80>
  40c5e6:	89a3      	ldrh	r3, [r4, #12]
  40c5e8:	07db      	lsls	r3, r3, #31
  40c5ea:	d501      	bpl.n	40c5f0 <__swbuf_r+0x54>
  40c5ec:	2d0a      	cmp	r5, #10
  40c5ee:	d015      	beq.n	40c61c <__swbuf_r+0x80>
  40c5f0:	4638      	mov	r0, r7
  40c5f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40c5f4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40c5f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40c5fa:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40c5fe:	81a2      	strh	r2, [r4, #12]
  40c600:	6822      	ldr	r2, [r4, #0]
  40c602:	6661      	str	r1, [r4, #100]	; 0x64
  40c604:	6961      	ldr	r1, [r4, #20]
  40c606:	1ad3      	subs	r3, r2, r3
  40c608:	428b      	cmp	r3, r1
  40c60a:	dbe2      	blt.n	40c5d2 <__swbuf_r+0x36>
  40c60c:	4621      	mov	r1, r4
  40c60e:	4630      	mov	r0, r6
  40c610:	f7fe fd14 	bl	40b03c <_fflush_r>
  40c614:	b940      	cbnz	r0, 40c628 <__swbuf_r+0x8c>
  40c616:	6822      	ldr	r2, [r4, #0]
  40c618:	2301      	movs	r3, #1
  40c61a:	e7db      	b.n	40c5d4 <__swbuf_r+0x38>
  40c61c:	4621      	mov	r1, r4
  40c61e:	4630      	mov	r0, r6
  40c620:	f7fe fd0c 	bl	40b03c <_fflush_r>
  40c624:	2800      	cmp	r0, #0
  40c626:	d0e3      	beq.n	40c5f0 <__swbuf_r+0x54>
  40c628:	f04f 37ff 	mov.w	r7, #4294967295
  40c62c:	e7e0      	b.n	40c5f0 <__swbuf_r+0x54>
  40c62e:	4621      	mov	r1, r4
  40c630:	4630      	mov	r0, r6
  40c632:	f7fd fc2f 	bl	409e94 <__swsetup_r>
  40c636:	2800      	cmp	r0, #0
  40c638:	d1f6      	bne.n	40c628 <__swbuf_r+0x8c>
  40c63a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40c63e:	6923      	ldr	r3, [r4, #16]
  40c640:	b291      	uxth	r1, r2
  40c642:	e7bd      	b.n	40c5c0 <__swbuf_r+0x24>
  40c644:	f7fe fd8e 	bl	40b164 <__sinit>
  40c648:	e7b0      	b.n	40c5ac <__swbuf_r+0x10>
  40c64a:	bf00      	nop

0040c64c <_wcrtomb_r>:
  40c64c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40c64e:	4606      	mov	r6, r0
  40c650:	b085      	sub	sp, #20
  40c652:	461f      	mov	r7, r3
  40c654:	b189      	cbz	r1, 40c67a <_wcrtomb_r+0x2e>
  40c656:	4c10      	ldr	r4, [pc, #64]	; (40c698 <_wcrtomb_r+0x4c>)
  40c658:	4d10      	ldr	r5, [pc, #64]	; (40c69c <_wcrtomb_r+0x50>)
  40c65a:	6824      	ldr	r4, [r4, #0]
  40c65c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40c65e:	2c00      	cmp	r4, #0
  40c660:	bf08      	it	eq
  40c662:	462c      	moveq	r4, r5
  40c664:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  40c668:	47a0      	blx	r4
  40c66a:	1c43      	adds	r3, r0, #1
  40c66c:	d103      	bne.n	40c676 <_wcrtomb_r+0x2a>
  40c66e:	2200      	movs	r2, #0
  40c670:	238a      	movs	r3, #138	; 0x8a
  40c672:	603a      	str	r2, [r7, #0]
  40c674:	6033      	str	r3, [r6, #0]
  40c676:	b005      	add	sp, #20
  40c678:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40c67a:	460c      	mov	r4, r1
  40c67c:	4906      	ldr	r1, [pc, #24]	; (40c698 <_wcrtomb_r+0x4c>)
  40c67e:	4a07      	ldr	r2, [pc, #28]	; (40c69c <_wcrtomb_r+0x50>)
  40c680:	6809      	ldr	r1, [r1, #0]
  40c682:	6b49      	ldr	r1, [r1, #52]	; 0x34
  40c684:	2900      	cmp	r1, #0
  40c686:	bf08      	it	eq
  40c688:	4611      	moveq	r1, r2
  40c68a:	4622      	mov	r2, r4
  40c68c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  40c690:	a901      	add	r1, sp, #4
  40c692:	47a0      	blx	r4
  40c694:	e7e9      	b.n	40c66a <_wcrtomb_r+0x1e>
  40c696:	bf00      	nop
  40c698:	20400048 	.word	0x20400048
  40c69c:	20400888 	.word	0x20400888

0040c6a0 <__ascii_wctomb>:
  40c6a0:	b121      	cbz	r1, 40c6ac <__ascii_wctomb+0xc>
  40c6a2:	2aff      	cmp	r2, #255	; 0xff
  40c6a4:	d804      	bhi.n	40c6b0 <__ascii_wctomb+0x10>
  40c6a6:	700a      	strb	r2, [r1, #0]
  40c6a8:	2001      	movs	r0, #1
  40c6aa:	4770      	bx	lr
  40c6ac:	4608      	mov	r0, r1
  40c6ae:	4770      	bx	lr
  40c6b0:	238a      	movs	r3, #138	; 0x8a
  40c6b2:	6003      	str	r3, [r0, #0]
  40c6b4:	f04f 30ff 	mov.w	r0, #4294967295
  40c6b8:	4770      	bx	lr
  40c6ba:	bf00      	nop

0040c6bc <_write_r>:
  40c6bc:	b570      	push	{r4, r5, r6, lr}
  40c6be:	460d      	mov	r5, r1
  40c6c0:	4c08      	ldr	r4, [pc, #32]	; (40c6e4 <_write_r+0x28>)
  40c6c2:	4611      	mov	r1, r2
  40c6c4:	4606      	mov	r6, r0
  40c6c6:	461a      	mov	r2, r3
  40c6c8:	4628      	mov	r0, r5
  40c6ca:	2300      	movs	r3, #0
  40c6cc:	6023      	str	r3, [r4, #0]
  40c6ce:	f7f9 fb17 	bl	405d00 <_write>
  40c6d2:	1c43      	adds	r3, r0, #1
  40c6d4:	d000      	beq.n	40c6d8 <_write_r+0x1c>
  40c6d6:	bd70      	pop	{r4, r5, r6, pc}
  40c6d8:	6823      	ldr	r3, [r4, #0]
  40c6da:	2b00      	cmp	r3, #0
  40c6dc:	d0fb      	beq.n	40c6d6 <_write_r+0x1a>
  40c6de:	6033      	str	r3, [r6, #0]
  40c6e0:	bd70      	pop	{r4, r5, r6, pc}
  40c6e2:	bf00      	nop
  40c6e4:	204022cc 	.word	0x204022cc

0040c6e8 <__register_exitproc>:
  40c6e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40c6ec:	4c25      	ldr	r4, [pc, #148]	; (40c784 <__register_exitproc+0x9c>)
  40c6ee:	6825      	ldr	r5, [r4, #0]
  40c6f0:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  40c6f4:	4606      	mov	r6, r0
  40c6f6:	4688      	mov	r8, r1
  40c6f8:	4692      	mov	sl, r2
  40c6fa:	4699      	mov	r9, r3
  40c6fc:	b3c4      	cbz	r4, 40c770 <__register_exitproc+0x88>
  40c6fe:	6860      	ldr	r0, [r4, #4]
  40c700:	281f      	cmp	r0, #31
  40c702:	dc17      	bgt.n	40c734 <__register_exitproc+0x4c>
  40c704:	1c43      	adds	r3, r0, #1
  40c706:	b176      	cbz	r6, 40c726 <__register_exitproc+0x3e>
  40c708:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  40c70c:	2201      	movs	r2, #1
  40c70e:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  40c712:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  40c716:	4082      	lsls	r2, r0
  40c718:	4311      	orrs	r1, r2
  40c71a:	2e02      	cmp	r6, #2
  40c71c:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  40c720:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  40c724:	d01e      	beq.n	40c764 <__register_exitproc+0x7c>
  40c726:	3002      	adds	r0, #2
  40c728:	6063      	str	r3, [r4, #4]
  40c72a:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  40c72e:	2000      	movs	r0, #0
  40c730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40c734:	4b14      	ldr	r3, [pc, #80]	; (40c788 <__register_exitproc+0xa0>)
  40c736:	b303      	cbz	r3, 40c77a <__register_exitproc+0x92>
  40c738:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40c73c:	f7fa fe04 	bl	407348 <malloc>
  40c740:	4604      	mov	r4, r0
  40c742:	b1d0      	cbz	r0, 40c77a <__register_exitproc+0x92>
  40c744:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  40c748:	2700      	movs	r7, #0
  40c74a:	e880 0088 	stmia.w	r0, {r3, r7}
  40c74e:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40c752:	4638      	mov	r0, r7
  40c754:	2301      	movs	r3, #1
  40c756:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  40c75a:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  40c75e:	2e00      	cmp	r6, #0
  40c760:	d0e1      	beq.n	40c726 <__register_exitproc+0x3e>
  40c762:	e7d1      	b.n	40c708 <__register_exitproc+0x20>
  40c764:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  40c768:	430a      	orrs	r2, r1
  40c76a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  40c76e:	e7da      	b.n	40c726 <__register_exitproc+0x3e>
  40c770:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  40c774:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40c778:	e7c1      	b.n	40c6fe <__register_exitproc+0x16>
  40c77a:	f04f 30ff 	mov.w	r0, #4294967295
  40c77e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40c782:	bf00      	nop
  40c784:	0040eb60 	.word	0x0040eb60
  40c788:	00407349 	.word	0x00407349

0040c78c <_calloc_r>:
  40c78c:	b510      	push	{r4, lr}
  40c78e:	fb02 f101 	mul.w	r1, r2, r1
  40c792:	f7fa fde1 	bl	407358 <_malloc_r>
  40c796:	4604      	mov	r4, r0
  40c798:	b1d8      	cbz	r0, 40c7d2 <_calloc_r+0x46>
  40c79a:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40c79e:	f022 0203 	bic.w	r2, r2, #3
  40c7a2:	3a04      	subs	r2, #4
  40c7a4:	2a24      	cmp	r2, #36	; 0x24
  40c7a6:	d818      	bhi.n	40c7da <_calloc_r+0x4e>
  40c7a8:	2a13      	cmp	r2, #19
  40c7aa:	d914      	bls.n	40c7d6 <_calloc_r+0x4a>
  40c7ac:	2300      	movs	r3, #0
  40c7ae:	2a1b      	cmp	r2, #27
  40c7b0:	6003      	str	r3, [r0, #0]
  40c7b2:	6043      	str	r3, [r0, #4]
  40c7b4:	d916      	bls.n	40c7e4 <_calloc_r+0x58>
  40c7b6:	2a24      	cmp	r2, #36	; 0x24
  40c7b8:	6083      	str	r3, [r0, #8]
  40c7ba:	60c3      	str	r3, [r0, #12]
  40c7bc:	bf11      	iteee	ne
  40c7be:	f100 0210 	addne.w	r2, r0, #16
  40c7c2:	6103      	streq	r3, [r0, #16]
  40c7c4:	6143      	streq	r3, [r0, #20]
  40c7c6:	f100 0218 	addeq.w	r2, r0, #24
  40c7ca:	2300      	movs	r3, #0
  40c7cc:	6013      	str	r3, [r2, #0]
  40c7ce:	6053      	str	r3, [r2, #4]
  40c7d0:	6093      	str	r3, [r2, #8]
  40c7d2:	4620      	mov	r0, r4
  40c7d4:	bd10      	pop	{r4, pc}
  40c7d6:	4602      	mov	r2, r0
  40c7d8:	e7f7      	b.n	40c7ca <_calloc_r+0x3e>
  40c7da:	2100      	movs	r1, #0
  40c7dc:	f7fb f906 	bl	4079ec <memset>
  40c7e0:	4620      	mov	r0, r4
  40c7e2:	bd10      	pop	{r4, pc}
  40c7e4:	f100 0208 	add.w	r2, r0, #8
  40c7e8:	e7ef      	b.n	40c7ca <_calloc_r+0x3e>
  40c7ea:	bf00      	nop

0040c7ec <_close_r>:
  40c7ec:	b538      	push	{r3, r4, r5, lr}
  40c7ee:	4c07      	ldr	r4, [pc, #28]	; (40c80c <_close_r+0x20>)
  40c7f0:	2300      	movs	r3, #0
  40c7f2:	4605      	mov	r5, r0
  40c7f4:	4608      	mov	r0, r1
  40c7f6:	6023      	str	r3, [r4, #0]
  40c7f8:	f7fa f9da 	bl	406bb0 <_close>
  40c7fc:	1c43      	adds	r3, r0, #1
  40c7fe:	d000      	beq.n	40c802 <_close_r+0x16>
  40c800:	bd38      	pop	{r3, r4, r5, pc}
  40c802:	6823      	ldr	r3, [r4, #0]
  40c804:	2b00      	cmp	r3, #0
  40c806:	d0fb      	beq.n	40c800 <_close_r+0x14>
  40c808:	602b      	str	r3, [r5, #0]
  40c80a:	bd38      	pop	{r3, r4, r5, pc}
  40c80c:	204022cc 	.word	0x204022cc

0040c810 <_fclose_r>:
  40c810:	b570      	push	{r4, r5, r6, lr}
  40c812:	b139      	cbz	r1, 40c824 <_fclose_r+0x14>
  40c814:	4605      	mov	r5, r0
  40c816:	460c      	mov	r4, r1
  40c818:	b108      	cbz	r0, 40c81e <_fclose_r+0xe>
  40c81a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40c81c:	b383      	cbz	r3, 40c880 <_fclose_r+0x70>
  40c81e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40c822:	b913      	cbnz	r3, 40c82a <_fclose_r+0x1a>
  40c824:	2600      	movs	r6, #0
  40c826:	4630      	mov	r0, r6
  40c828:	bd70      	pop	{r4, r5, r6, pc}
  40c82a:	4621      	mov	r1, r4
  40c82c:	4628      	mov	r0, r5
  40c82e:	f7fe fb65 	bl	40aefc <__sflush_r>
  40c832:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40c834:	4606      	mov	r6, r0
  40c836:	b133      	cbz	r3, 40c846 <_fclose_r+0x36>
  40c838:	69e1      	ldr	r1, [r4, #28]
  40c83a:	4628      	mov	r0, r5
  40c83c:	4798      	blx	r3
  40c83e:	2800      	cmp	r0, #0
  40c840:	bfb8      	it	lt
  40c842:	f04f 36ff 	movlt.w	r6, #4294967295
  40c846:	89a3      	ldrh	r3, [r4, #12]
  40c848:	061b      	lsls	r3, r3, #24
  40c84a:	d41c      	bmi.n	40c886 <_fclose_r+0x76>
  40c84c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40c84e:	b141      	cbz	r1, 40c862 <_fclose_r+0x52>
  40c850:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40c854:	4299      	cmp	r1, r3
  40c856:	d002      	beq.n	40c85e <_fclose_r+0x4e>
  40c858:	4628      	mov	r0, r5
  40c85a:	f7fe fd59 	bl	40b310 <_free_r>
  40c85e:	2300      	movs	r3, #0
  40c860:	6323      	str	r3, [r4, #48]	; 0x30
  40c862:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40c864:	b121      	cbz	r1, 40c870 <_fclose_r+0x60>
  40c866:	4628      	mov	r0, r5
  40c868:	f7fe fd52 	bl	40b310 <_free_r>
  40c86c:	2300      	movs	r3, #0
  40c86e:	6463      	str	r3, [r4, #68]	; 0x44
  40c870:	f7fe fc7e 	bl	40b170 <__sfp_lock_acquire>
  40c874:	2300      	movs	r3, #0
  40c876:	81a3      	strh	r3, [r4, #12]
  40c878:	f7fe fc7c 	bl	40b174 <__sfp_lock_release>
  40c87c:	4630      	mov	r0, r6
  40c87e:	bd70      	pop	{r4, r5, r6, pc}
  40c880:	f7fe fc70 	bl	40b164 <__sinit>
  40c884:	e7cb      	b.n	40c81e <_fclose_r+0xe>
  40c886:	6921      	ldr	r1, [r4, #16]
  40c888:	4628      	mov	r0, r5
  40c88a:	f7fe fd41 	bl	40b310 <_free_r>
  40c88e:	e7dd      	b.n	40c84c <_fclose_r+0x3c>

0040c890 <_fstat_r>:
  40c890:	b538      	push	{r3, r4, r5, lr}
  40c892:	460b      	mov	r3, r1
  40c894:	4c07      	ldr	r4, [pc, #28]	; (40c8b4 <_fstat_r+0x24>)
  40c896:	4605      	mov	r5, r0
  40c898:	4611      	mov	r1, r2
  40c89a:	4618      	mov	r0, r3
  40c89c:	2300      	movs	r3, #0
  40c89e:	6023      	str	r3, [r4, #0]
  40c8a0:	f7fa f989 	bl	406bb6 <_fstat>
  40c8a4:	1c43      	adds	r3, r0, #1
  40c8a6:	d000      	beq.n	40c8aa <_fstat_r+0x1a>
  40c8a8:	bd38      	pop	{r3, r4, r5, pc}
  40c8aa:	6823      	ldr	r3, [r4, #0]
  40c8ac:	2b00      	cmp	r3, #0
  40c8ae:	d0fb      	beq.n	40c8a8 <_fstat_r+0x18>
  40c8b0:	602b      	str	r3, [r5, #0]
  40c8b2:	bd38      	pop	{r3, r4, r5, pc}
  40c8b4:	204022cc 	.word	0x204022cc

0040c8b8 <_isatty_r>:
  40c8b8:	b538      	push	{r3, r4, r5, lr}
  40c8ba:	4c07      	ldr	r4, [pc, #28]	; (40c8d8 <_isatty_r+0x20>)
  40c8bc:	2300      	movs	r3, #0
  40c8be:	4605      	mov	r5, r0
  40c8c0:	4608      	mov	r0, r1
  40c8c2:	6023      	str	r3, [r4, #0]
  40c8c4:	f7fa f97c 	bl	406bc0 <_isatty>
  40c8c8:	1c43      	adds	r3, r0, #1
  40c8ca:	d000      	beq.n	40c8ce <_isatty_r+0x16>
  40c8cc:	bd38      	pop	{r3, r4, r5, pc}
  40c8ce:	6823      	ldr	r3, [r4, #0]
  40c8d0:	2b00      	cmp	r3, #0
  40c8d2:	d0fb      	beq.n	40c8cc <_isatty_r+0x14>
  40c8d4:	602b      	str	r3, [r5, #0]
  40c8d6:	bd38      	pop	{r3, r4, r5, pc}
  40c8d8:	204022cc 	.word	0x204022cc

0040c8dc <_lseek_r>:
  40c8dc:	b570      	push	{r4, r5, r6, lr}
  40c8de:	460d      	mov	r5, r1
  40c8e0:	4c08      	ldr	r4, [pc, #32]	; (40c904 <_lseek_r+0x28>)
  40c8e2:	4611      	mov	r1, r2
  40c8e4:	4606      	mov	r6, r0
  40c8e6:	461a      	mov	r2, r3
  40c8e8:	4628      	mov	r0, r5
  40c8ea:	2300      	movs	r3, #0
  40c8ec:	6023      	str	r3, [r4, #0]
  40c8ee:	f7fa f969 	bl	406bc4 <_lseek>
  40c8f2:	1c43      	adds	r3, r0, #1
  40c8f4:	d000      	beq.n	40c8f8 <_lseek_r+0x1c>
  40c8f6:	bd70      	pop	{r4, r5, r6, pc}
  40c8f8:	6823      	ldr	r3, [r4, #0]
  40c8fa:	2b00      	cmp	r3, #0
  40c8fc:	d0fb      	beq.n	40c8f6 <_lseek_r+0x1a>
  40c8fe:	6033      	str	r3, [r6, #0]
  40c900:	bd70      	pop	{r4, r5, r6, pc}
  40c902:	bf00      	nop
  40c904:	204022cc 	.word	0x204022cc

0040c908 <_read_r>:
  40c908:	b570      	push	{r4, r5, r6, lr}
  40c90a:	460d      	mov	r5, r1
  40c90c:	4c08      	ldr	r4, [pc, #32]	; (40c930 <_read_r+0x28>)
  40c90e:	4611      	mov	r1, r2
  40c910:	4606      	mov	r6, r0
  40c912:	461a      	mov	r2, r3
  40c914:	4628      	mov	r0, r5
  40c916:	2300      	movs	r3, #0
  40c918:	6023      	str	r3, [r4, #0]
  40c91a:	f7f9 f9d3 	bl	405cc4 <_read>
  40c91e:	1c43      	adds	r3, r0, #1
  40c920:	d000      	beq.n	40c924 <_read_r+0x1c>
  40c922:	bd70      	pop	{r4, r5, r6, pc}
  40c924:	6823      	ldr	r3, [r4, #0]
  40c926:	2b00      	cmp	r3, #0
  40c928:	d0fb      	beq.n	40c922 <_read_r+0x1a>
  40c92a:	6033      	str	r3, [r6, #0]
  40c92c:	bd70      	pop	{r4, r5, r6, pc}
  40c92e:	bf00      	nop
  40c930:	204022cc 	.word	0x204022cc

0040c934 <__aeabi_drsub>:
  40c934:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40c938:	e002      	b.n	40c940 <__adddf3>
  40c93a:	bf00      	nop

0040c93c <__aeabi_dsub>:
  40c93c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0040c940 <__adddf3>:
  40c940:	b530      	push	{r4, r5, lr}
  40c942:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40c946:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40c94a:	ea94 0f05 	teq	r4, r5
  40c94e:	bf08      	it	eq
  40c950:	ea90 0f02 	teqeq	r0, r2
  40c954:	bf1f      	itttt	ne
  40c956:	ea54 0c00 	orrsne.w	ip, r4, r0
  40c95a:	ea55 0c02 	orrsne.w	ip, r5, r2
  40c95e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40c962:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40c966:	f000 80e2 	beq.w	40cb2e <__adddf3+0x1ee>
  40c96a:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40c96e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40c972:	bfb8      	it	lt
  40c974:	426d      	neglt	r5, r5
  40c976:	dd0c      	ble.n	40c992 <__adddf3+0x52>
  40c978:	442c      	add	r4, r5
  40c97a:	ea80 0202 	eor.w	r2, r0, r2
  40c97e:	ea81 0303 	eor.w	r3, r1, r3
  40c982:	ea82 0000 	eor.w	r0, r2, r0
  40c986:	ea83 0101 	eor.w	r1, r3, r1
  40c98a:	ea80 0202 	eor.w	r2, r0, r2
  40c98e:	ea81 0303 	eor.w	r3, r1, r3
  40c992:	2d36      	cmp	r5, #54	; 0x36
  40c994:	bf88      	it	hi
  40c996:	bd30      	pophi	{r4, r5, pc}
  40c998:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40c99c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40c9a0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40c9a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40c9a8:	d002      	beq.n	40c9b0 <__adddf3+0x70>
  40c9aa:	4240      	negs	r0, r0
  40c9ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40c9b0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40c9b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40c9b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40c9bc:	d002      	beq.n	40c9c4 <__adddf3+0x84>
  40c9be:	4252      	negs	r2, r2
  40c9c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40c9c4:	ea94 0f05 	teq	r4, r5
  40c9c8:	f000 80a7 	beq.w	40cb1a <__adddf3+0x1da>
  40c9cc:	f1a4 0401 	sub.w	r4, r4, #1
  40c9d0:	f1d5 0e20 	rsbs	lr, r5, #32
  40c9d4:	db0d      	blt.n	40c9f2 <__adddf3+0xb2>
  40c9d6:	fa02 fc0e 	lsl.w	ip, r2, lr
  40c9da:	fa22 f205 	lsr.w	r2, r2, r5
  40c9de:	1880      	adds	r0, r0, r2
  40c9e0:	f141 0100 	adc.w	r1, r1, #0
  40c9e4:	fa03 f20e 	lsl.w	r2, r3, lr
  40c9e8:	1880      	adds	r0, r0, r2
  40c9ea:	fa43 f305 	asr.w	r3, r3, r5
  40c9ee:	4159      	adcs	r1, r3
  40c9f0:	e00e      	b.n	40ca10 <__adddf3+0xd0>
  40c9f2:	f1a5 0520 	sub.w	r5, r5, #32
  40c9f6:	f10e 0e20 	add.w	lr, lr, #32
  40c9fa:	2a01      	cmp	r2, #1
  40c9fc:	fa03 fc0e 	lsl.w	ip, r3, lr
  40ca00:	bf28      	it	cs
  40ca02:	f04c 0c02 	orrcs.w	ip, ip, #2
  40ca06:	fa43 f305 	asr.w	r3, r3, r5
  40ca0a:	18c0      	adds	r0, r0, r3
  40ca0c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40ca10:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40ca14:	d507      	bpl.n	40ca26 <__adddf3+0xe6>
  40ca16:	f04f 0e00 	mov.w	lr, #0
  40ca1a:	f1dc 0c00 	rsbs	ip, ip, #0
  40ca1e:	eb7e 0000 	sbcs.w	r0, lr, r0
  40ca22:	eb6e 0101 	sbc.w	r1, lr, r1
  40ca26:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40ca2a:	d31b      	bcc.n	40ca64 <__adddf3+0x124>
  40ca2c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40ca30:	d30c      	bcc.n	40ca4c <__adddf3+0x10c>
  40ca32:	0849      	lsrs	r1, r1, #1
  40ca34:	ea5f 0030 	movs.w	r0, r0, rrx
  40ca38:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40ca3c:	f104 0401 	add.w	r4, r4, #1
  40ca40:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40ca44:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40ca48:	f080 809a 	bcs.w	40cb80 <__adddf3+0x240>
  40ca4c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40ca50:	bf08      	it	eq
  40ca52:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40ca56:	f150 0000 	adcs.w	r0, r0, #0
  40ca5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40ca5e:	ea41 0105 	orr.w	r1, r1, r5
  40ca62:	bd30      	pop	{r4, r5, pc}
  40ca64:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40ca68:	4140      	adcs	r0, r0
  40ca6a:	eb41 0101 	adc.w	r1, r1, r1
  40ca6e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40ca72:	f1a4 0401 	sub.w	r4, r4, #1
  40ca76:	d1e9      	bne.n	40ca4c <__adddf3+0x10c>
  40ca78:	f091 0f00 	teq	r1, #0
  40ca7c:	bf04      	itt	eq
  40ca7e:	4601      	moveq	r1, r0
  40ca80:	2000      	moveq	r0, #0
  40ca82:	fab1 f381 	clz	r3, r1
  40ca86:	bf08      	it	eq
  40ca88:	3320      	addeq	r3, #32
  40ca8a:	f1a3 030b 	sub.w	r3, r3, #11
  40ca8e:	f1b3 0220 	subs.w	r2, r3, #32
  40ca92:	da0c      	bge.n	40caae <__adddf3+0x16e>
  40ca94:	320c      	adds	r2, #12
  40ca96:	dd08      	ble.n	40caaa <__adddf3+0x16a>
  40ca98:	f102 0c14 	add.w	ip, r2, #20
  40ca9c:	f1c2 020c 	rsb	r2, r2, #12
  40caa0:	fa01 f00c 	lsl.w	r0, r1, ip
  40caa4:	fa21 f102 	lsr.w	r1, r1, r2
  40caa8:	e00c      	b.n	40cac4 <__adddf3+0x184>
  40caaa:	f102 0214 	add.w	r2, r2, #20
  40caae:	bfd8      	it	le
  40cab0:	f1c2 0c20 	rsble	ip, r2, #32
  40cab4:	fa01 f102 	lsl.w	r1, r1, r2
  40cab8:	fa20 fc0c 	lsr.w	ip, r0, ip
  40cabc:	bfdc      	itt	le
  40cabe:	ea41 010c 	orrle.w	r1, r1, ip
  40cac2:	4090      	lslle	r0, r2
  40cac4:	1ae4      	subs	r4, r4, r3
  40cac6:	bfa2      	ittt	ge
  40cac8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40cacc:	4329      	orrge	r1, r5
  40cace:	bd30      	popge	{r4, r5, pc}
  40cad0:	ea6f 0404 	mvn.w	r4, r4
  40cad4:	3c1f      	subs	r4, #31
  40cad6:	da1c      	bge.n	40cb12 <__adddf3+0x1d2>
  40cad8:	340c      	adds	r4, #12
  40cada:	dc0e      	bgt.n	40cafa <__adddf3+0x1ba>
  40cadc:	f104 0414 	add.w	r4, r4, #20
  40cae0:	f1c4 0220 	rsb	r2, r4, #32
  40cae4:	fa20 f004 	lsr.w	r0, r0, r4
  40cae8:	fa01 f302 	lsl.w	r3, r1, r2
  40caec:	ea40 0003 	orr.w	r0, r0, r3
  40caf0:	fa21 f304 	lsr.w	r3, r1, r4
  40caf4:	ea45 0103 	orr.w	r1, r5, r3
  40caf8:	bd30      	pop	{r4, r5, pc}
  40cafa:	f1c4 040c 	rsb	r4, r4, #12
  40cafe:	f1c4 0220 	rsb	r2, r4, #32
  40cb02:	fa20 f002 	lsr.w	r0, r0, r2
  40cb06:	fa01 f304 	lsl.w	r3, r1, r4
  40cb0a:	ea40 0003 	orr.w	r0, r0, r3
  40cb0e:	4629      	mov	r1, r5
  40cb10:	bd30      	pop	{r4, r5, pc}
  40cb12:	fa21 f004 	lsr.w	r0, r1, r4
  40cb16:	4629      	mov	r1, r5
  40cb18:	bd30      	pop	{r4, r5, pc}
  40cb1a:	f094 0f00 	teq	r4, #0
  40cb1e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40cb22:	bf06      	itte	eq
  40cb24:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40cb28:	3401      	addeq	r4, #1
  40cb2a:	3d01      	subne	r5, #1
  40cb2c:	e74e      	b.n	40c9cc <__adddf3+0x8c>
  40cb2e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40cb32:	bf18      	it	ne
  40cb34:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40cb38:	d029      	beq.n	40cb8e <__adddf3+0x24e>
  40cb3a:	ea94 0f05 	teq	r4, r5
  40cb3e:	bf08      	it	eq
  40cb40:	ea90 0f02 	teqeq	r0, r2
  40cb44:	d005      	beq.n	40cb52 <__adddf3+0x212>
  40cb46:	ea54 0c00 	orrs.w	ip, r4, r0
  40cb4a:	bf04      	itt	eq
  40cb4c:	4619      	moveq	r1, r3
  40cb4e:	4610      	moveq	r0, r2
  40cb50:	bd30      	pop	{r4, r5, pc}
  40cb52:	ea91 0f03 	teq	r1, r3
  40cb56:	bf1e      	ittt	ne
  40cb58:	2100      	movne	r1, #0
  40cb5a:	2000      	movne	r0, #0
  40cb5c:	bd30      	popne	{r4, r5, pc}
  40cb5e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40cb62:	d105      	bne.n	40cb70 <__adddf3+0x230>
  40cb64:	0040      	lsls	r0, r0, #1
  40cb66:	4149      	adcs	r1, r1
  40cb68:	bf28      	it	cs
  40cb6a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40cb6e:	bd30      	pop	{r4, r5, pc}
  40cb70:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40cb74:	bf3c      	itt	cc
  40cb76:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40cb7a:	bd30      	popcc	{r4, r5, pc}
  40cb7c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40cb80:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40cb84:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40cb88:	f04f 0000 	mov.w	r0, #0
  40cb8c:	bd30      	pop	{r4, r5, pc}
  40cb8e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40cb92:	bf1a      	itte	ne
  40cb94:	4619      	movne	r1, r3
  40cb96:	4610      	movne	r0, r2
  40cb98:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40cb9c:	bf1c      	itt	ne
  40cb9e:	460b      	movne	r3, r1
  40cba0:	4602      	movne	r2, r0
  40cba2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40cba6:	bf06      	itte	eq
  40cba8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40cbac:	ea91 0f03 	teqeq	r1, r3
  40cbb0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40cbb4:	bd30      	pop	{r4, r5, pc}
  40cbb6:	bf00      	nop

0040cbb8 <__aeabi_ui2d>:
  40cbb8:	f090 0f00 	teq	r0, #0
  40cbbc:	bf04      	itt	eq
  40cbbe:	2100      	moveq	r1, #0
  40cbc0:	4770      	bxeq	lr
  40cbc2:	b530      	push	{r4, r5, lr}
  40cbc4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40cbc8:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40cbcc:	f04f 0500 	mov.w	r5, #0
  40cbd0:	f04f 0100 	mov.w	r1, #0
  40cbd4:	e750      	b.n	40ca78 <__adddf3+0x138>
  40cbd6:	bf00      	nop

0040cbd8 <__aeabi_i2d>:
  40cbd8:	f090 0f00 	teq	r0, #0
  40cbdc:	bf04      	itt	eq
  40cbde:	2100      	moveq	r1, #0
  40cbe0:	4770      	bxeq	lr
  40cbe2:	b530      	push	{r4, r5, lr}
  40cbe4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40cbe8:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40cbec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40cbf0:	bf48      	it	mi
  40cbf2:	4240      	negmi	r0, r0
  40cbf4:	f04f 0100 	mov.w	r1, #0
  40cbf8:	e73e      	b.n	40ca78 <__adddf3+0x138>
  40cbfa:	bf00      	nop

0040cbfc <__aeabi_f2d>:
  40cbfc:	0042      	lsls	r2, r0, #1
  40cbfe:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40cc02:	ea4f 0131 	mov.w	r1, r1, rrx
  40cc06:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40cc0a:	bf1f      	itttt	ne
  40cc0c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40cc10:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40cc14:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40cc18:	4770      	bxne	lr
  40cc1a:	f092 0f00 	teq	r2, #0
  40cc1e:	bf14      	ite	ne
  40cc20:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40cc24:	4770      	bxeq	lr
  40cc26:	b530      	push	{r4, r5, lr}
  40cc28:	f44f 7460 	mov.w	r4, #896	; 0x380
  40cc2c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40cc30:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40cc34:	e720      	b.n	40ca78 <__adddf3+0x138>
  40cc36:	bf00      	nop

0040cc38 <__aeabi_ul2d>:
  40cc38:	ea50 0201 	orrs.w	r2, r0, r1
  40cc3c:	bf08      	it	eq
  40cc3e:	4770      	bxeq	lr
  40cc40:	b530      	push	{r4, r5, lr}
  40cc42:	f04f 0500 	mov.w	r5, #0
  40cc46:	e00a      	b.n	40cc5e <__aeabi_l2d+0x16>

0040cc48 <__aeabi_l2d>:
  40cc48:	ea50 0201 	orrs.w	r2, r0, r1
  40cc4c:	bf08      	it	eq
  40cc4e:	4770      	bxeq	lr
  40cc50:	b530      	push	{r4, r5, lr}
  40cc52:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40cc56:	d502      	bpl.n	40cc5e <__aeabi_l2d+0x16>
  40cc58:	4240      	negs	r0, r0
  40cc5a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40cc5e:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40cc62:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40cc66:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40cc6a:	f43f aedc 	beq.w	40ca26 <__adddf3+0xe6>
  40cc6e:	f04f 0203 	mov.w	r2, #3
  40cc72:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40cc76:	bf18      	it	ne
  40cc78:	3203      	addne	r2, #3
  40cc7a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40cc7e:	bf18      	it	ne
  40cc80:	3203      	addne	r2, #3
  40cc82:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40cc86:	f1c2 0320 	rsb	r3, r2, #32
  40cc8a:	fa00 fc03 	lsl.w	ip, r0, r3
  40cc8e:	fa20 f002 	lsr.w	r0, r0, r2
  40cc92:	fa01 fe03 	lsl.w	lr, r1, r3
  40cc96:	ea40 000e 	orr.w	r0, r0, lr
  40cc9a:	fa21 f102 	lsr.w	r1, r1, r2
  40cc9e:	4414      	add	r4, r2
  40cca0:	e6c1      	b.n	40ca26 <__adddf3+0xe6>
  40cca2:	bf00      	nop

0040cca4 <__aeabi_dmul>:
  40cca4:	b570      	push	{r4, r5, r6, lr}
  40cca6:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40ccaa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40ccae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40ccb2:	bf1d      	ittte	ne
  40ccb4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40ccb8:	ea94 0f0c 	teqne	r4, ip
  40ccbc:	ea95 0f0c 	teqne	r5, ip
  40ccc0:	f000 f8de 	bleq	40ce80 <__aeabi_dmul+0x1dc>
  40ccc4:	442c      	add	r4, r5
  40ccc6:	ea81 0603 	eor.w	r6, r1, r3
  40ccca:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40ccce:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40ccd2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40ccd6:	bf18      	it	ne
  40ccd8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40ccdc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40cce0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40cce4:	d038      	beq.n	40cd58 <__aeabi_dmul+0xb4>
  40cce6:	fba0 ce02 	umull	ip, lr, r0, r2
  40ccea:	f04f 0500 	mov.w	r5, #0
  40ccee:	fbe1 e502 	umlal	lr, r5, r1, r2
  40ccf2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40ccf6:	fbe0 e503 	umlal	lr, r5, r0, r3
  40ccfa:	f04f 0600 	mov.w	r6, #0
  40ccfe:	fbe1 5603 	umlal	r5, r6, r1, r3
  40cd02:	f09c 0f00 	teq	ip, #0
  40cd06:	bf18      	it	ne
  40cd08:	f04e 0e01 	orrne.w	lr, lr, #1
  40cd0c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40cd10:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40cd14:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40cd18:	d204      	bcs.n	40cd24 <__aeabi_dmul+0x80>
  40cd1a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40cd1e:	416d      	adcs	r5, r5
  40cd20:	eb46 0606 	adc.w	r6, r6, r6
  40cd24:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40cd28:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40cd2c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40cd30:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40cd34:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40cd38:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40cd3c:	bf88      	it	hi
  40cd3e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40cd42:	d81e      	bhi.n	40cd82 <__aeabi_dmul+0xde>
  40cd44:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40cd48:	bf08      	it	eq
  40cd4a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40cd4e:	f150 0000 	adcs.w	r0, r0, #0
  40cd52:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40cd56:	bd70      	pop	{r4, r5, r6, pc}
  40cd58:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40cd5c:	ea46 0101 	orr.w	r1, r6, r1
  40cd60:	ea40 0002 	orr.w	r0, r0, r2
  40cd64:	ea81 0103 	eor.w	r1, r1, r3
  40cd68:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40cd6c:	bfc2      	ittt	gt
  40cd6e:	ebd4 050c 	rsbsgt	r5, r4, ip
  40cd72:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40cd76:	bd70      	popgt	{r4, r5, r6, pc}
  40cd78:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40cd7c:	f04f 0e00 	mov.w	lr, #0
  40cd80:	3c01      	subs	r4, #1
  40cd82:	f300 80ab 	bgt.w	40cedc <__aeabi_dmul+0x238>
  40cd86:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40cd8a:	bfde      	ittt	le
  40cd8c:	2000      	movle	r0, #0
  40cd8e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40cd92:	bd70      	pople	{r4, r5, r6, pc}
  40cd94:	f1c4 0400 	rsb	r4, r4, #0
  40cd98:	3c20      	subs	r4, #32
  40cd9a:	da35      	bge.n	40ce08 <__aeabi_dmul+0x164>
  40cd9c:	340c      	adds	r4, #12
  40cd9e:	dc1b      	bgt.n	40cdd8 <__aeabi_dmul+0x134>
  40cda0:	f104 0414 	add.w	r4, r4, #20
  40cda4:	f1c4 0520 	rsb	r5, r4, #32
  40cda8:	fa00 f305 	lsl.w	r3, r0, r5
  40cdac:	fa20 f004 	lsr.w	r0, r0, r4
  40cdb0:	fa01 f205 	lsl.w	r2, r1, r5
  40cdb4:	ea40 0002 	orr.w	r0, r0, r2
  40cdb8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40cdbc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40cdc0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40cdc4:	fa21 f604 	lsr.w	r6, r1, r4
  40cdc8:	eb42 0106 	adc.w	r1, r2, r6
  40cdcc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40cdd0:	bf08      	it	eq
  40cdd2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40cdd6:	bd70      	pop	{r4, r5, r6, pc}
  40cdd8:	f1c4 040c 	rsb	r4, r4, #12
  40cddc:	f1c4 0520 	rsb	r5, r4, #32
  40cde0:	fa00 f304 	lsl.w	r3, r0, r4
  40cde4:	fa20 f005 	lsr.w	r0, r0, r5
  40cde8:	fa01 f204 	lsl.w	r2, r1, r4
  40cdec:	ea40 0002 	orr.w	r0, r0, r2
  40cdf0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40cdf4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40cdf8:	f141 0100 	adc.w	r1, r1, #0
  40cdfc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40ce00:	bf08      	it	eq
  40ce02:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40ce06:	bd70      	pop	{r4, r5, r6, pc}
  40ce08:	f1c4 0520 	rsb	r5, r4, #32
  40ce0c:	fa00 f205 	lsl.w	r2, r0, r5
  40ce10:	ea4e 0e02 	orr.w	lr, lr, r2
  40ce14:	fa20 f304 	lsr.w	r3, r0, r4
  40ce18:	fa01 f205 	lsl.w	r2, r1, r5
  40ce1c:	ea43 0302 	orr.w	r3, r3, r2
  40ce20:	fa21 f004 	lsr.w	r0, r1, r4
  40ce24:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40ce28:	fa21 f204 	lsr.w	r2, r1, r4
  40ce2c:	ea20 0002 	bic.w	r0, r0, r2
  40ce30:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40ce34:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40ce38:	bf08      	it	eq
  40ce3a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40ce3e:	bd70      	pop	{r4, r5, r6, pc}
  40ce40:	f094 0f00 	teq	r4, #0
  40ce44:	d10f      	bne.n	40ce66 <__aeabi_dmul+0x1c2>
  40ce46:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40ce4a:	0040      	lsls	r0, r0, #1
  40ce4c:	eb41 0101 	adc.w	r1, r1, r1
  40ce50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40ce54:	bf08      	it	eq
  40ce56:	3c01      	subeq	r4, #1
  40ce58:	d0f7      	beq.n	40ce4a <__aeabi_dmul+0x1a6>
  40ce5a:	ea41 0106 	orr.w	r1, r1, r6
  40ce5e:	f095 0f00 	teq	r5, #0
  40ce62:	bf18      	it	ne
  40ce64:	4770      	bxne	lr
  40ce66:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40ce6a:	0052      	lsls	r2, r2, #1
  40ce6c:	eb43 0303 	adc.w	r3, r3, r3
  40ce70:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40ce74:	bf08      	it	eq
  40ce76:	3d01      	subeq	r5, #1
  40ce78:	d0f7      	beq.n	40ce6a <__aeabi_dmul+0x1c6>
  40ce7a:	ea43 0306 	orr.w	r3, r3, r6
  40ce7e:	4770      	bx	lr
  40ce80:	ea94 0f0c 	teq	r4, ip
  40ce84:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40ce88:	bf18      	it	ne
  40ce8a:	ea95 0f0c 	teqne	r5, ip
  40ce8e:	d00c      	beq.n	40ceaa <__aeabi_dmul+0x206>
  40ce90:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40ce94:	bf18      	it	ne
  40ce96:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40ce9a:	d1d1      	bne.n	40ce40 <__aeabi_dmul+0x19c>
  40ce9c:	ea81 0103 	eor.w	r1, r1, r3
  40cea0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40cea4:	f04f 0000 	mov.w	r0, #0
  40cea8:	bd70      	pop	{r4, r5, r6, pc}
  40ceaa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40ceae:	bf06      	itte	eq
  40ceb0:	4610      	moveq	r0, r2
  40ceb2:	4619      	moveq	r1, r3
  40ceb4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40ceb8:	d019      	beq.n	40ceee <__aeabi_dmul+0x24a>
  40ceba:	ea94 0f0c 	teq	r4, ip
  40cebe:	d102      	bne.n	40cec6 <__aeabi_dmul+0x222>
  40cec0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40cec4:	d113      	bne.n	40ceee <__aeabi_dmul+0x24a>
  40cec6:	ea95 0f0c 	teq	r5, ip
  40ceca:	d105      	bne.n	40ced8 <__aeabi_dmul+0x234>
  40cecc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40ced0:	bf1c      	itt	ne
  40ced2:	4610      	movne	r0, r2
  40ced4:	4619      	movne	r1, r3
  40ced6:	d10a      	bne.n	40ceee <__aeabi_dmul+0x24a>
  40ced8:	ea81 0103 	eor.w	r1, r1, r3
  40cedc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40cee0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40cee4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40cee8:	f04f 0000 	mov.w	r0, #0
  40ceec:	bd70      	pop	{r4, r5, r6, pc}
  40ceee:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40cef2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40cef6:	bd70      	pop	{r4, r5, r6, pc}

0040cef8 <__aeabi_ddiv>:
  40cef8:	b570      	push	{r4, r5, r6, lr}
  40cefa:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40cefe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40cf02:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40cf06:	bf1d      	ittte	ne
  40cf08:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40cf0c:	ea94 0f0c 	teqne	r4, ip
  40cf10:	ea95 0f0c 	teqne	r5, ip
  40cf14:	f000 f8a7 	bleq	40d066 <__aeabi_ddiv+0x16e>
  40cf18:	eba4 0405 	sub.w	r4, r4, r5
  40cf1c:	ea81 0e03 	eor.w	lr, r1, r3
  40cf20:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40cf24:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40cf28:	f000 8088 	beq.w	40d03c <__aeabi_ddiv+0x144>
  40cf2c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40cf30:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40cf34:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40cf38:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40cf3c:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40cf40:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40cf44:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40cf48:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40cf4c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40cf50:	429d      	cmp	r5, r3
  40cf52:	bf08      	it	eq
  40cf54:	4296      	cmpeq	r6, r2
  40cf56:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40cf5a:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40cf5e:	d202      	bcs.n	40cf66 <__aeabi_ddiv+0x6e>
  40cf60:	085b      	lsrs	r3, r3, #1
  40cf62:	ea4f 0232 	mov.w	r2, r2, rrx
  40cf66:	1ab6      	subs	r6, r6, r2
  40cf68:	eb65 0503 	sbc.w	r5, r5, r3
  40cf6c:	085b      	lsrs	r3, r3, #1
  40cf6e:	ea4f 0232 	mov.w	r2, r2, rrx
  40cf72:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40cf76:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40cf7a:	ebb6 0e02 	subs.w	lr, r6, r2
  40cf7e:	eb75 0e03 	sbcs.w	lr, r5, r3
  40cf82:	bf22      	ittt	cs
  40cf84:	1ab6      	subcs	r6, r6, r2
  40cf86:	4675      	movcs	r5, lr
  40cf88:	ea40 000c 	orrcs.w	r0, r0, ip
  40cf8c:	085b      	lsrs	r3, r3, #1
  40cf8e:	ea4f 0232 	mov.w	r2, r2, rrx
  40cf92:	ebb6 0e02 	subs.w	lr, r6, r2
  40cf96:	eb75 0e03 	sbcs.w	lr, r5, r3
  40cf9a:	bf22      	ittt	cs
  40cf9c:	1ab6      	subcs	r6, r6, r2
  40cf9e:	4675      	movcs	r5, lr
  40cfa0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40cfa4:	085b      	lsrs	r3, r3, #1
  40cfa6:	ea4f 0232 	mov.w	r2, r2, rrx
  40cfaa:	ebb6 0e02 	subs.w	lr, r6, r2
  40cfae:	eb75 0e03 	sbcs.w	lr, r5, r3
  40cfb2:	bf22      	ittt	cs
  40cfb4:	1ab6      	subcs	r6, r6, r2
  40cfb6:	4675      	movcs	r5, lr
  40cfb8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40cfbc:	085b      	lsrs	r3, r3, #1
  40cfbe:	ea4f 0232 	mov.w	r2, r2, rrx
  40cfc2:	ebb6 0e02 	subs.w	lr, r6, r2
  40cfc6:	eb75 0e03 	sbcs.w	lr, r5, r3
  40cfca:	bf22      	ittt	cs
  40cfcc:	1ab6      	subcs	r6, r6, r2
  40cfce:	4675      	movcs	r5, lr
  40cfd0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40cfd4:	ea55 0e06 	orrs.w	lr, r5, r6
  40cfd8:	d018      	beq.n	40d00c <__aeabi_ddiv+0x114>
  40cfda:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40cfde:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40cfe2:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40cfe6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40cfea:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40cfee:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40cff2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40cff6:	d1c0      	bne.n	40cf7a <__aeabi_ddiv+0x82>
  40cff8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40cffc:	d10b      	bne.n	40d016 <__aeabi_ddiv+0x11e>
  40cffe:	ea41 0100 	orr.w	r1, r1, r0
  40d002:	f04f 0000 	mov.w	r0, #0
  40d006:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40d00a:	e7b6      	b.n	40cf7a <__aeabi_ddiv+0x82>
  40d00c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40d010:	bf04      	itt	eq
  40d012:	4301      	orreq	r1, r0
  40d014:	2000      	moveq	r0, #0
  40d016:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40d01a:	bf88      	it	hi
  40d01c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40d020:	f63f aeaf 	bhi.w	40cd82 <__aeabi_dmul+0xde>
  40d024:	ebb5 0c03 	subs.w	ip, r5, r3
  40d028:	bf04      	itt	eq
  40d02a:	ebb6 0c02 	subseq.w	ip, r6, r2
  40d02e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40d032:	f150 0000 	adcs.w	r0, r0, #0
  40d036:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40d03a:	bd70      	pop	{r4, r5, r6, pc}
  40d03c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40d040:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40d044:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40d048:	bfc2      	ittt	gt
  40d04a:	ebd4 050c 	rsbsgt	r5, r4, ip
  40d04e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40d052:	bd70      	popgt	{r4, r5, r6, pc}
  40d054:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40d058:	f04f 0e00 	mov.w	lr, #0
  40d05c:	3c01      	subs	r4, #1
  40d05e:	e690      	b.n	40cd82 <__aeabi_dmul+0xde>
  40d060:	ea45 0e06 	orr.w	lr, r5, r6
  40d064:	e68d      	b.n	40cd82 <__aeabi_dmul+0xde>
  40d066:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40d06a:	ea94 0f0c 	teq	r4, ip
  40d06e:	bf08      	it	eq
  40d070:	ea95 0f0c 	teqeq	r5, ip
  40d074:	f43f af3b 	beq.w	40ceee <__aeabi_dmul+0x24a>
  40d078:	ea94 0f0c 	teq	r4, ip
  40d07c:	d10a      	bne.n	40d094 <__aeabi_ddiv+0x19c>
  40d07e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40d082:	f47f af34 	bne.w	40ceee <__aeabi_dmul+0x24a>
  40d086:	ea95 0f0c 	teq	r5, ip
  40d08a:	f47f af25 	bne.w	40ced8 <__aeabi_dmul+0x234>
  40d08e:	4610      	mov	r0, r2
  40d090:	4619      	mov	r1, r3
  40d092:	e72c      	b.n	40ceee <__aeabi_dmul+0x24a>
  40d094:	ea95 0f0c 	teq	r5, ip
  40d098:	d106      	bne.n	40d0a8 <__aeabi_ddiv+0x1b0>
  40d09a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40d09e:	f43f aefd 	beq.w	40ce9c <__aeabi_dmul+0x1f8>
  40d0a2:	4610      	mov	r0, r2
  40d0a4:	4619      	mov	r1, r3
  40d0a6:	e722      	b.n	40ceee <__aeabi_dmul+0x24a>
  40d0a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40d0ac:	bf18      	it	ne
  40d0ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40d0b2:	f47f aec5 	bne.w	40ce40 <__aeabi_dmul+0x19c>
  40d0b6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40d0ba:	f47f af0d 	bne.w	40ced8 <__aeabi_dmul+0x234>
  40d0be:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40d0c2:	f47f aeeb 	bne.w	40ce9c <__aeabi_dmul+0x1f8>
  40d0c6:	e712      	b.n	40ceee <__aeabi_dmul+0x24a>

0040d0c8 <__gedf2>:
  40d0c8:	f04f 3cff 	mov.w	ip, #4294967295
  40d0cc:	e006      	b.n	40d0dc <__cmpdf2+0x4>
  40d0ce:	bf00      	nop

0040d0d0 <__ledf2>:
  40d0d0:	f04f 0c01 	mov.w	ip, #1
  40d0d4:	e002      	b.n	40d0dc <__cmpdf2+0x4>
  40d0d6:	bf00      	nop

0040d0d8 <__cmpdf2>:
  40d0d8:	f04f 0c01 	mov.w	ip, #1
  40d0dc:	f84d cd04 	str.w	ip, [sp, #-4]!
  40d0e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40d0e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40d0e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40d0ec:	bf18      	it	ne
  40d0ee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40d0f2:	d01b      	beq.n	40d12c <__cmpdf2+0x54>
  40d0f4:	b001      	add	sp, #4
  40d0f6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40d0fa:	bf0c      	ite	eq
  40d0fc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40d100:	ea91 0f03 	teqne	r1, r3
  40d104:	bf02      	ittt	eq
  40d106:	ea90 0f02 	teqeq	r0, r2
  40d10a:	2000      	moveq	r0, #0
  40d10c:	4770      	bxeq	lr
  40d10e:	f110 0f00 	cmn.w	r0, #0
  40d112:	ea91 0f03 	teq	r1, r3
  40d116:	bf58      	it	pl
  40d118:	4299      	cmppl	r1, r3
  40d11a:	bf08      	it	eq
  40d11c:	4290      	cmpeq	r0, r2
  40d11e:	bf2c      	ite	cs
  40d120:	17d8      	asrcs	r0, r3, #31
  40d122:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40d126:	f040 0001 	orr.w	r0, r0, #1
  40d12a:	4770      	bx	lr
  40d12c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40d130:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40d134:	d102      	bne.n	40d13c <__cmpdf2+0x64>
  40d136:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40d13a:	d107      	bne.n	40d14c <__cmpdf2+0x74>
  40d13c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40d140:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40d144:	d1d6      	bne.n	40d0f4 <__cmpdf2+0x1c>
  40d146:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40d14a:	d0d3      	beq.n	40d0f4 <__cmpdf2+0x1c>
  40d14c:	f85d 0b04 	ldr.w	r0, [sp], #4
  40d150:	4770      	bx	lr
  40d152:	bf00      	nop

0040d154 <__aeabi_cdrcmple>:
  40d154:	4684      	mov	ip, r0
  40d156:	4610      	mov	r0, r2
  40d158:	4662      	mov	r2, ip
  40d15a:	468c      	mov	ip, r1
  40d15c:	4619      	mov	r1, r3
  40d15e:	4663      	mov	r3, ip
  40d160:	e000      	b.n	40d164 <__aeabi_cdcmpeq>
  40d162:	bf00      	nop

0040d164 <__aeabi_cdcmpeq>:
  40d164:	b501      	push	{r0, lr}
  40d166:	f7ff ffb7 	bl	40d0d8 <__cmpdf2>
  40d16a:	2800      	cmp	r0, #0
  40d16c:	bf48      	it	mi
  40d16e:	f110 0f00 	cmnmi.w	r0, #0
  40d172:	bd01      	pop	{r0, pc}

0040d174 <__aeabi_dcmpeq>:
  40d174:	f84d ed08 	str.w	lr, [sp, #-8]!
  40d178:	f7ff fff4 	bl	40d164 <__aeabi_cdcmpeq>
  40d17c:	bf0c      	ite	eq
  40d17e:	2001      	moveq	r0, #1
  40d180:	2000      	movne	r0, #0
  40d182:	f85d fb08 	ldr.w	pc, [sp], #8
  40d186:	bf00      	nop

0040d188 <__aeabi_dcmplt>:
  40d188:	f84d ed08 	str.w	lr, [sp, #-8]!
  40d18c:	f7ff ffea 	bl	40d164 <__aeabi_cdcmpeq>
  40d190:	bf34      	ite	cc
  40d192:	2001      	movcc	r0, #1
  40d194:	2000      	movcs	r0, #0
  40d196:	f85d fb08 	ldr.w	pc, [sp], #8
  40d19a:	bf00      	nop

0040d19c <__aeabi_dcmple>:
  40d19c:	f84d ed08 	str.w	lr, [sp, #-8]!
  40d1a0:	f7ff ffe0 	bl	40d164 <__aeabi_cdcmpeq>
  40d1a4:	bf94      	ite	ls
  40d1a6:	2001      	movls	r0, #1
  40d1a8:	2000      	movhi	r0, #0
  40d1aa:	f85d fb08 	ldr.w	pc, [sp], #8
  40d1ae:	bf00      	nop

0040d1b0 <__aeabi_dcmpge>:
  40d1b0:	f84d ed08 	str.w	lr, [sp, #-8]!
  40d1b4:	f7ff ffce 	bl	40d154 <__aeabi_cdrcmple>
  40d1b8:	bf94      	ite	ls
  40d1ba:	2001      	movls	r0, #1
  40d1bc:	2000      	movhi	r0, #0
  40d1be:	f85d fb08 	ldr.w	pc, [sp], #8
  40d1c2:	bf00      	nop

0040d1c4 <__aeabi_dcmpgt>:
  40d1c4:	f84d ed08 	str.w	lr, [sp, #-8]!
  40d1c8:	f7ff ffc4 	bl	40d154 <__aeabi_cdrcmple>
  40d1cc:	bf34      	ite	cc
  40d1ce:	2001      	movcc	r0, #1
  40d1d0:	2000      	movcs	r0, #0
  40d1d2:	f85d fb08 	ldr.w	pc, [sp], #8
  40d1d6:	bf00      	nop

0040d1d8 <__aeabi_dcmpun>:
  40d1d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40d1dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40d1e0:	d102      	bne.n	40d1e8 <__aeabi_dcmpun+0x10>
  40d1e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40d1e6:	d10a      	bne.n	40d1fe <__aeabi_dcmpun+0x26>
  40d1e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40d1ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40d1f0:	d102      	bne.n	40d1f8 <__aeabi_dcmpun+0x20>
  40d1f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40d1f6:	d102      	bne.n	40d1fe <__aeabi_dcmpun+0x26>
  40d1f8:	f04f 0000 	mov.w	r0, #0
  40d1fc:	4770      	bx	lr
  40d1fe:	f04f 0001 	mov.w	r0, #1
  40d202:	4770      	bx	lr

0040d204 <__aeabi_d2iz>:
  40d204:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40d208:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40d20c:	d215      	bcs.n	40d23a <__aeabi_d2iz+0x36>
  40d20e:	d511      	bpl.n	40d234 <__aeabi_d2iz+0x30>
  40d210:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40d214:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40d218:	d912      	bls.n	40d240 <__aeabi_d2iz+0x3c>
  40d21a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40d21e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40d222:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40d226:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40d22a:	fa23 f002 	lsr.w	r0, r3, r2
  40d22e:	bf18      	it	ne
  40d230:	4240      	negne	r0, r0
  40d232:	4770      	bx	lr
  40d234:	f04f 0000 	mov.w	r0, #0
  40d238:	4770      	bx	lr
  40d23a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40d23e:	d105      	bne.n	40d24c <__aeabi_d2iz+0x48>
  40d240:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40d244:	bf08      	it	eq
  40d246:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40d24a:	4770      	bx	lr
  40d24c:	f04f 0000 	mov.w	r0, #0
  40d250:	4770      	bx	lr
  40d252:	bf00      	nop

0040d254 <__aeabi_uldivmod>:
  40d254:	b953      	cbnz	r3, 40d26c <__aeabi_uldivmod+0x18>
  40d256:	b94a      	cbnz	r2, 40d26c <__aeabi_uldivmod+0x18>
  40d258:	2900      	cmp	r1, #0
  40d25a:	bf08      	it	eq
  40d25c:	2800      	cmpeq	r0, #0
  40d25e:	bf1c      	itt	ne
  40d260:	f04f 31ff 	movne.w	r1, #4294967295
  40d264:	f04f 30ff 	movne.w	r0, #4294967295
  40d268:	f000 b97a 	b.w	40d560 <__aeabi_idiv0>
  40d26c:	f1ad 0c08 	sub.w	ip, sp, #8
  40d270:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40d274:	f000 f806 	bl	40d284 <__udivmoddi4>
  40d278:	f8dd e004 	ldr.w	lr, [sp, #4]
  40d27c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40d280:	b004      	add	sp, #16
  40d282:	4770      	bx	lr

0040d284 <__udivmoddi4>:
  40d284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40d288:	468c      	mov	ip, r1
  40d28a:	460d      	mov	r5, r1
  40d28c:	4604      	mov	r4, r0
  40d28e:	9e08      	ldr	r6, [sp, #32]
  40d290:	2b00      	cmp	r3, #0
  40d292:	d151      	bne.n	40d338 <__udivmoddi4+0xb4>
  40d294:	428a      	cmp	r2, r1
  40d296:	4617      	mov	r7, r2
  40d298:	d96d      	bls.n	40d376 <__udivmoddi4+0xf2>
  40d29a:	fab2 fe82 	clz	lr, r2
  40d29e:	f1be 0f00 	cmp.w	lr, #0
  40d2a2:	d00b      	beq.n	40d2bc <__udivmoddi4+0x38>
  40d2a4:	f1ce 0c20 	rsb	ip, lr, #32
  40d2a8:	fa01 f50e 	lsl.w	r5, r1, lr
  40d2ac:	fa20 fc0c 	lsr.w	ip, r0, ip
  40d2b0:	fa02 f70e 	lsl.w	r7, r2, lr
  40d2b4:	ea4c 0c05 	orr.w	ip, ip, r5
  40d2b8:	fa00 f40e 	lsl.w	r4, r0, lr
  40d2bc:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40d2c0:	0c25      	lsrs	r5, r4, #16
  40d2c2:	fbbc f8fa 	udiv	r8, ip, sl
  40d2c6:	fa1f f987 	uxth.w	r9, r7
  40d2ca:	fb0a cc18 	mls	ip, sl, r8, ip
  40d2ce:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40d2d2:	fb08 f309 	mul.w	r3, r8, r9
  40d2d6:	42ab      	cmp	r3, r5
  40d2d8:	d90a      	bls.n	40d2f0 <__udivmoddi4+0x6c>
  40d2da:	19ed      	adds	r5, r5, r7
  40d2dc:	f108 32ff 	add.w	r2, r8, #4294967295
  40d2e0:	f080 8123 	bcs.w	40d52a <__udivmoddi4+0x2a6>
  40d2e4:	42ab      	cmp	r3, r5
  40d2e6:	f240 8120 	bls.w	40d52a <__udivmoddi4+0x2a6>
  40d2ea:	f1a8 0802 	sub.w	r8, r8, #2
  40d2ee:	443d      	add	r5, r7
  40d2f0:	1aed      	subs	r5, r5, r3
  40d2f2:	b2a4      	uxth	r4, r4
  40d2f4:	fbb5 f0fa 	udiv	r0, r5, sl
  40d2f8:	fb0a 5510 	mls	r5, sl, r0, r5
  40d2fc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40d300:	fb00 f909 	mul.w	r9, r0, r9
  40d304:	45a1      	cmp	r9, r4
  40d306:	d909      	bls.n	40d31c <__udivmoddi4+0x98>
  40d308:	19e4      	adds	r4, r4, r7
  40d30a:	f100 33ff 	add.w	r3, r0, #4294967295
  40d30e:	f080 810a 	bcs.w	40d526 <__udivmoddi4+0x2a2>
  40d312:	45a1      	cmp	r9, r4
  40d314:	f240 8107 	bls.w	40d526 <__udivmoddi4+0x2a2>
  40d318:	3802      	subs	r0, #2
  40d31a:	443c      	add	r4, r7
  40d31c:	eba4 0409 	sub.w	r4, r4, r9
  40d320:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40d324:	2100      	movs	r1, #0
  40d326:	2e00      	cmp	r6, #0
  40d328:	d061      	beq.n	40d3ee <__udivmoddi4+0x16a>
  40d32a:	fa24 f40e 	lsr.w	r4, r4, lr
  40d32e:	2300      	movs	r3, #0
  40d330:	6034      	str	r4, [r6, #0]
  40d332:	6073      	str	r3, [r6, #4]
  40d334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40d338:	428b      	cmp	r3, r1
  40d33a:	d907      	bls.n	40d34c <__udivmoddi4+0xc8>
  40d33c:	2e00      	cmp	r6, #0
  40d33e:	d054      	beq.n	40d3ea <__udivmoddi4+0x166>
  40d340:	2100      	movs	r1, #0
  40d342:	e886 0021 	stmia.w	r6, {r0, r5}
  40d346:	4608      	mov	r0, r1
  40d348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40d34c:	fab3 f183 	clz	r1, r3
  40d350:	2900      	cmp	r1, #0
  40d352:	f040 808e 	bne.w	40d472 <__udivmoddi4+0x1ee>
  40d356:	42ab      	cmp	r3, r5
  40d358:	d302      	bcc.n	40d360 <__udivmoddi4+0xdc>
  40d35a:	4282      	cmp	r2, r0
  40d35c:	f200 80fa 	bhi.w	40d554 <__udivmoddi4+0x2d0>
  40d360:	1a84      	subs	r4, r0, r2
  40d362:	eb65 0503 	sbc.w	r5, r5, r3
  40d366:	2001      	movs	r0, #1
  40d368:	46ac      	mov	ip, r5
  40d36a:	2e00      	cmp	r6, #0
  40d36c:	d03f      	beq.n	40d3ee <__udivmoddi4+0x16a>
  40d36e:	e886 1010 	stmia.w	r6, {r4, ip}
  40d372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40d376:	b912      	cbnz	r2, 40d37e <__udivmoddi4+0xfa>
  40d378:	2701      	movs	r7, #1
  40d37a:	fbb7 f7f2 	udiv	r7, r7, r2
  40d37e:	fab7 fe87 	clz	lr, r7
  40d382:	f1be 0f00 	cmp.w	lr, #0
  40d386:	d134      	bne.n	40d3f2 <__udivmoddi4+0x16e>
  40d388:	1beb      	subs	r3, r5, r7
  40d38a:	0c3a      	lsrs	r2, r7, #16
  40d38c:	fa1f fc87 	uxth.w	ip, r7
  40d390:	2101      	movs	r1, #1
  40d392:	fbb3 f8f2 	udiv	r8, r3, r2
  40d396:	0c25      	lsrs	r5, r4, #16
  40d398:	fb02 3318 	mls	r3, r2, r8, r3
  40d39c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40d3a0:	fb0c f308 	mul.w	r3, ip, r8
  40d3a4:	42ab      	cmp	r3, r5
  40d3a6:	d907      	bls.n	40d3b8 <__udivmoddi4+0x134>
  40d3a8:	19ed      	adds	r5, r5, r7
  40d3aa:	f108 30ff 	add.w	r0, r8, #4294967295
  40d3ae:	d202      	bcs.n	40d3b6 <__udivmoddi4+0x132>
  40d3b0:	42ab      	cmp	r3, r5
  40d3b2:	f200 80d1 	bhi.w	40d558 <__udivmoddi4+0x2d4>
  40d3b6:	4680      	mov	r8, r0
  40d3b8:	1aed      	subs	r5, r5, r3
  40d3ba:	b2a3      	uxth	r3, r4
  40d3bc:	fbb5 f0f2 	udiv	r0, r5, r2
  40d3c0:	fb02 5510 	mls	r5, r2, r0, r5
  40d3c4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40d3c8:	fb0c fc00 	mul.w	ip, ip, r0
  40d3cc:	45a4      	cmp	ip, r4
  40d3ce:	d907      	bls.n	40d3e0 <__udivmoddi4+0x15c>
  40d3d0:	19e4      	adds	r4, r4, r7
  40d3d2:	f100 33ff 	add.w	r3, r0, #4294967295
  40d3d6:	d202      	bcs.n	40d3de <__udivmoddi4+0x15a>
  40d3d8:	45a4      	cmp	ip, r4
  40d3da:	f200 80b8 	bhi.w	40d54e <__udivmoddi4+0x2ca>
  40d3de:	4618      	mov	r0, r3
  40d3e0:	eba4 040c 	sub.w	r4, r4, ip
  40d3e4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40d3e8:	e79d      	b.n	40d326 <__udivmoddi4+0xa2>
  40d3ea:	4631      	mov	r1, r6
  40d3ec:	4630      	mov	r0, r6
  40d3ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40d3f2:	f1ce 0420 	rsb	r4, lr, #32
  40d3f6:	fa05 f30e 	lsl.w	r3, r5, lr
  40d3fa:	fa07 f70e 	lsl.w	r7, r7, lr
  40d3fe:	fa20 f804 	lsr.w	r8, r0, r4
  40d402:	0c3a      	lsrs	r2, r7, #16
  40d404:	fa25 f404 	lsr.w	r4, r5, r4
  40d408:	ea48 0803 	orr.w	r8, r8, r3
  40d40c:	fbb4 f1f2 	udiv	r1, r4, r2
  40d410:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40d414:	fb02 4411 	mls	r4, r2, r1, r4
  40d418:	fa1f fc87 	uxth.w	ip, r7
  40d41c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  40d420:	fb01 f30c 	mul.w	r3, r1, ip
  40d424:	42ab      	cmp	r3, r5
  40d426:	fa00 f40e 	lsl.w	r4, r0, lr
  40d42a:	d909      	bls.n	40d440 <__udivmoddi4+0x1bc>
  40d42c:	19ed      	adds	r5, r5, r7
  40d42e:	f101 30ff 	add.w	r0, r1, #4294967295
  40d432:	f080 808a 	bcs.w	40d54a <__udivmoddi4+0x2c6>
  40d436:	42ab      	cmp	r3, r5
  40d438:	f240 8087 	bls.w	40d54a <__udivmoddi4+0x2c6>
  40d43c:	3902      	subs	r1, #2
  40d43e:	443d      	add	r5, r7
  40d440:	1aeb      	subs	r3, r5, r3
  40d442:	fa1f f588 	uxth.w	r5, r8
  40d446:	fbb3 f0f2 	udiv	r0, r3, r2
  40d44a:	fb02 3310 	mls	r3, r2, r0, r3
  40d44e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40d452:	fb00 f30c 	mul.w	r3, r0, ip
  40d456:	42ab      	cmp	r3, r5
  40d458:	d907      	bls.n	40d46a <__udivmoddi4+0x1e6>
  40d45a:	19ed      	adds	r5, r5, r7
  40d45c:	f100 38ff 	add.w	r8, r0, #4294967295
  40d460:	d26f      	bcs.n	40d542 <__udivmoddi4+0x2be>
  40d462:	42ab      	cmp	r3, r5
  40d464:	d96d      	bls.n	40d542 <__udivmoddi4+0x2be>
  40d466:	3802      	subs	r0, #2
  40d468:	443d      	add	r5, r7
  40d46a:	1aeb      	subs	r3, r5, r3
  40d46c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40d470:	e78f      	b.n	40d392 <__udivmoddi4+0x10e>
  40d472:	f1c1 0720 	rsb	r7, r1, #32
  40d476:	fa22 f807 	lsr.w	r8, r2, r7
  40d47a:	408b      	lsls	r3, r1
  40d47c:	fa05 f401 	lsl.w	r4, r5, r1
  40d480:	ea48 0303 	orr.w	r3, r8, r3
  40d484:	fa20 fe07 	lsr.w	lr, r0, r7
  40d488:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40d48c:	40fd      	lsrs	r5, r7
  40d48e:	ea4e 0e04 	orr.w	lr, lr, r4
  40d492:	fbb5 f9fc 	udiv	r9, r5, ip
  40d496:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40d49a:	fb0c 5519 	mls	r5, ip, r9, r5
  40d49e:	fa1f f883 	uxth.w	r8, r3
  40d4a2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40d4a6:	fb09 f408 	mul.w	r4, r9, r8
  40d4aa:	42ac      	cmp	r4, r5
  40d4ac:	fa02 f201 	lsl.w	r2, r2, r1
  40d4b0:	fa00 fa01 	lsl.w	sl, r0, r1
  40d4b4:	d908      	bls.n	40d4c8 <__udivmoddi4+0x244>
  40d4b6:	18ed      	adds	r5, r5, r3
  40d4b8:	f109 30ff 	add.w	r0, r9, #4294967295
  40d4bc:	d243      	bcs.n	40d546 <__udivmoddi4+0x2c2>
  40d4be:	42ac      	cmp	r4, r5
  40d4c0:	d941      	bls.n	40d546 <__udivmoddi4+0x2c2>
  40d4c2:	f1a9 0902 	sub.w	r9, r9, #2
  40d4c6:	441d      	add	r5, r3
  40d4c8:	1b2d      	subs	r5, r5, r4
  40d4ca:	fa1f fe8e 	uxth.w	lr, lr
  40d4ce:	fbb5 f0fc 	udiv	r0, r5, ip
  40d4d2:	fb0c 5510 	mls	r5, ip, r0, r5
  40d4d6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40d4da:	fb00 f808 	mul.w	r8, r0, r8
  40d4de:	45a0      	cmp	r8, r4
  40d4e0:	d907      	bls.n	40d4f2 <__udivmoddi4+0x26e>
  40d4e2:	18e4      	adds	r4, r4, r3
  40d4e4:	f100 35ff 	add.w	r5, r0, #4294967295
  40d4e8:	d229      	bcs.n	40d53e <__udivmoddi4+0x2ba>
  40d4ea:	45a0      	cmp	r8, r4
  40d4ec:	d927      	bls.n	40d53e <__udivmoddi4+0x2ba>
  40d4ee:	3802      	subs	r0, #2
  40d4f0:	441c      	add	r4, r3
  40d4f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40d4f6:	eba4 0408 	sub.w	r4, r4, r8
  40d4fa:	fba0 8902 	umull	r8, r9, r0, r2
  40d4fe:	454c      	cmp	r4, r9
  40d500:	46c6      	mov	lr, r8
  40d502:	464d      	mov	r5, r9
  40d504:	d315      	bcc.n	40d532 <__udivmoddi4+0x2ae>
  40d506:	d012      	beq.n	40d52e <__udivmoddi4+0x2aa>
  40d508:	b156      	cbz	r6, 40d520 <__udivmoddi4+0x29c>
  40d50a:	ebba 030e 	subs.w	r3, sl, lr
  40d50e:	eb64 0405 	sbc.w	r4, r4, r5
  40d512:	fa04 f707 	lsl.w	r7, r4, r7
  40d516:	40cb      	lsrs	r3, r1
  40d518:	431f      	orrs	r7, r3
  40d51a:	40cc      	lsrs	r4, r1
  40d51c:	6037      	str	r7, [r6, #0]
  40d51e:	6074      	str	r4, [r6, #4]
  40d520:	2100      	movs	r1, #0
  40d522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40d526:	4618      	mov	r0, r3
  40d528:	e6f8      	b.n	40d31c <__udivmoddi4+0x98>
  40d52a:	4690      	mov	r8, r2
  40d52c:	e6e0      	b.n	40d2f0 <__udivmoddi4+0x6c>
  40d52e:	45c2      	cmp	sl, r8
  40d530:	d2ea      	bcs.n	40d508 <__udivmoddi4+0x284>
  40d532:	ebb8 0e02 	subs.w	lr, r8, r2
  40d536:	eb69 0503 	sbc.w	r5, r9, r3
  40d53a:	3801      	subs	r0, #1
  40d53c:	e7e4      	b.n	40d508 <__udivmoddi4+0x284>
  40d53e:	4628      	mov	r0, r5
  40d540:	e7d7      	b.n	40d4f2 <__udivmoddi4+0x26e>
  40d542:	4640      	mov	r0, r8
  40d544:	e791      	b.n	40d46a <__udivmoddi4+0x1e6>
  40d546:	4681      	mov	r9, r0
  40d548:	e7be      	b.n	40d4c8 <__udivmoddi4+0x244>
  40d54a:	4601      	mov	r1, r0
  40d54c:	e778      	b.n	40d440 <__udivmoddi4+0x1bc>
  40d54e:	3802      	subs	r0, #2
  40d550:	443c      	add	r4, r7
  40d552:	e745      	b.n	40d3e0 <__udivmoddi4+0x15c>
  40d554:	4608      	mov	r0, r1
  40d556:	e708      	b.n	40d36a <__udivmoddi4+0xe6>
  40d558:	f1a8 0802 	sub.w	r8, r8, #2
  40d55c:	443d      	add	r5, r7
  40d55e:	e72b      	b.n	40d3b8 <__udivmoddi4+0x134>

0040d560 <__aeabi_idiv0>:
  40d560:	4770      	bx	lr
  40d562:	bf00      	nop

0040d564 <mmc_trans_multipliers>:
  40d564:	0000 0000 000a 0000 000c 0000 000d 0000     ................
  40d574:	000f 0000 0014 0000 001a 0000 001e 0000     ................
  40d584:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
  40d594:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

0040d5a4 <sd_mmc_trans_units>:
  40d5a4:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

0040d5c0 <sd_trans_multipliers>:
  40d5c0:	0000 0000 000a 0000 000c 0000 000d 0000     ................
  40d5d0:	000f 0000 0014 0000 0019 0000 001e 0000     ................
  40d5e0:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
  40d5f0:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

0040d600 <LfnOfs>:
  40d600:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................

0040d610 <excvt.5681>:
  40d610:	9a80 b690 b78e 808f d3d2 d8d4 ded7 8f8e     ................
  40d620:	9290 e292 e399 ebea 9959 9d9a 9d9c 9f9e     ........Y.......
  40d630:	d6b5 e9e0 a5a5 a7a6 a9a8 abaa 21ac afae     .............!..
  40d640:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
  40d650:	c1c0 c3c2 c5c4 c7c7 c9c8 cbca cdcc cfce     ................
  40d660:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
  40d670:	e1e0 e3e2 e5e5 e7e6 e9e7 ebea eded efee     ................
  40d680:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................
  40d690:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
  40d6a0:	5d5b 0000                                   []..

0040d6a4 <Tbl>:
  40d6a4:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
  40d6b4:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
  40d6c4:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
  40d6d4:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
  40d6e4:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
  40d6f4:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
  40d704:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
  40d714:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
  40d724:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
  40d734:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
  40d744:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
  40d754:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
  40d764:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
  40d774:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
  40d784:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
  40d794:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

0040d7a4 <tbl_lower.5431>:
  40d7a4:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
  40d7b4:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
  40d7c4:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
  40d7d4:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
  40d7e4:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
  40d7f4:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
  40d804:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
  40d814:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
  40d824:	0103 0105 0107 0109 010b 010d 010f 0111     ................
  40d834:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
  40d844:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
  40d854:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
  40d864:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
  40d874:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
  40d884:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
  40d894:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
  40d8a4:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
  40d8b4:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
  40d8c4:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
  40d8d4:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
  40d8e4:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
  40d8f4:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
  40d904:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
  40d914:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
  40d924:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
  40d934:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
  40d944:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
  40d954:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
  40d964:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
  40d974:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...

0040d984 <tbl_upper.5432>:
  40d984:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
  40d994:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
  40d9a4:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
  40d9b4:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
  40d9c4:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
  40d9d4:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
  40d9e4:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
  40d9f4:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
  40da04:	0102 0104 0106 0108 010a 010c 010e 0110     ................
  40da14:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
  40da24:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
  40da34:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
  40da44:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
  40da54:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
  40da64:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
  40da74:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
  40da84:	0393 0394 0395 0396 0397 0398 0399 039a     ................
  40da94:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
  40daa4:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
  40dab4:	0411 0412 0413 0414 0415 0416 0417 0418     ................
  40dac4:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
  40dad4:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
  40dae4:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
  40daf4:	0402 0403 0404 0405 0406 0407 0408 0409     ................
  40db04:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
  40db14:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
  40db24:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
  40db34:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
  40db44:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
  40db54:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...

0040db64 <__FUNCTION__.11436>:
  40db64:	6d6e 625f 7375 695f 636f 6c74 0000 0000     nm_bus_ioctl....
  40db74:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
  40db84:	5d64 0000 6e49 6176 696c 2064 4f49 5443     d]..Invalid IOCT
  40db94:	204c 6f63 6d6d 6e61 2164 000a               L command!..

0040dba0 <__FUNCTION__.9877>:
  40dba0:	6968 5f66 6573 646e 0000 0000               hif_send....

0040dbac <__FUNCTION__.9887>:
  40dbac:	6968 5f66 7369 0072                         hif_isr.

0040dbb4 <__FUNCTION__.9893>:
  40dbb4:	6968 5f66 6168 646e 656c 695f 7273 0000     hif_handle_isr..

0040dbc4 <__FUNCTION__.9908>:
  40dbc4:	6968 5f66 6572 6563 7669 0065               hif_receive.

0040dbd0 <__FUNCTION__.9923>:
  40dbd0:	6968 5f66 6572 6967 7473 7265 635f 0062     hif_register_cb.
  40dbe0:	6828 6669 2029 4957 4946 485f 534f 5f54     (hif) WIFI_HOST_
  40dbf0:	4352 5f56 5443 4c52 315f 6220 7375 6620     RCV_CTRL_1 bus f
  40dc00:	6961 0a6c 0000 0000 6828 6669 2029 6461     ail.....(hif) ad
  40dc10:	7264 7365 2073 7562 2073 6166 6c69 000a     dress bus fail..
  40dc20:	6828 6669 2029 6f43 7272 7075 6574 2064     (hif) Corrupted 
  40dc30:	6170 6b63 7465 5320 7a69 2065 203d 7525     packet Size = %u
  40dc40:	3c20 204c 203d 7525 202c 2047 203d 7525      <L = %u, G = %u
  40dc50:	202c 504f 3d20 2520 3230 3e58 000a 0000     , OP = %02X>....
  40dc60:	6828 6669 2029 6e69 6176 696c 2064 7267     (hif) invalid gr
  40dc70:	756f 2070 4449 000a 6828 6669 2029 6f68     oup ID..(hif) ho
  40dc80:	7473 6120 7070 6420 6469 276e 2074 6573     st app didn't se
  40dc90:	2074 5852 4420 6e6f 0a65 0000 6828 6669     t RX Done...(hif
  40dca0:	2029 7257 6e6f 2067 6953 657a 000a 0000     ) Wrong Size....
  40dcb0:	6828 6669 2029 6146 736c 2065 6e69 6574     (hif) False inte
  40dcc0:	7272 7075 2074 6c25 0078 0000 6828 6669     rrupt %lx...(hif
  40dcd0:	2029 6146 6c69 7420 206f 6552 6461 6920     ) Fail to Read i
  40dce0:	746e 7265 7572 7470 7220 6765 000a 0000     nterrupt reg....
  40dcf0:	6828 6669 2029 4146 4c49 7420 206f 6177     (hif) FAIL to wa
  40dd00:	656b 7075 7420 6568 6320 6968 0a70 0000     keup the chip...
  40dd10:	4828 4649 2029 6146 6c69 7420 206f 6168     (HIF) Fail to ha
  40dd20:	646e 656c 6920 746e 7265 7572 7470 2520     ndle interrupt %
  40dd30:	2064 7274 2079 6741 6961 2e6e 0a2e 0000     d try Again.....
  40dd40:	6820 6669 725f 6365 6965 6576 203a 6e49      hif_receive: In
  40dd50:	6176 696c 2064 7261 7567 656d 746e 000a     valid argument..
  40dd60:	5041 2050 6552 7571 7365 6574 2064 6953     APP Requested Si
  40dd70:	657a 6920 2073 616c 6772 7265 7420 6168     ze is larger tha
  40dd80:	206e 6874 2065 6572 6963 6576 2064 7562     n the recived bu
  40dd90:	6666 7265 7320 7a69 2065 253c 3e64 253c     ffer size <%d><%
  40dda0:	3e64 000a 5041 2050 6552 7571 7365 6574     d>..APP Requeste
  40ddb0:	2064 6441 7264 7365 2073 6562 6f79 646e     d Address beyond
  40ddc0:	7420 6568 7220 6365 7669 6465 6220 6675      the recived buf
  40ddd0:	6566 2072 6461 7264 7365 2073 6e61 2064     fer address and 
  40dde0:	656c 676e 6874 000a 5247 2070 203f 6425     length..GRp ? %d
  40ddf0:	000a 0000 4828 4649 4629 6961 206c 6f74     ....(HIF)Fail to
  40de00:	7720 6b61 7075 7420 6568 6320 6968 0a70      wakup the chip.
  40de10:	0000 0000                                   ....

0040de14 <__FUNCTION__.9850>:
  40de14:	326d 5f6d 6977 6966 635f 0062               m2m_wifi_cb.

0040de20 <__FUNCTION__.9874>:
  40de20:	326d 5f6d 6977 6966 695f 696e 0074 0000     m2m_wifi_init...

0040de30 <__FUNCTION__.9902>:
  40de30:	326d 5f6d 6977 6966 635f 6e6f 656e 7463     m2m_wifi_connect
  40de40:	735f 0063 4128 5050 2829 4e49 4f46 0029     _sc.(APP)(INFO).
  40de50:	6f43 666e 696c 7463 6465 4920 2050 2022     Conflicted IP " 
  40de60:	7525 252e 2e75 7525 252e 2075 2022 000a     %u.%u.%u.%u " ..
  40de70:	4552 2051 6f4e 2074 6564 6966 656e 2064     REQ Not defined 
  40de80:	6425 000a 654b 2079 7369 6e20 746f 7620     %d..Key is not v
  40de90:	6c61 6469 000a 0000 6e49 6176 696c 2064     alid....Invalid 
  40dea0:	654b 0a79 0000 0000 5353 4449 4c20 4e45     Key.....SSID LEN
  40deb0:	4920 564e 4c41 4449 000a 0000 4843 4920      INVALID....CH I
  40dec0:	564e 4c41 4449 000a 6e49 6176 696c 2064     NVALID..Invalid 
  40ded0:	6557 2070 656b 2079 6e69 6564 2078 6425     Wep key index %d
  40dee0:	000a 0000 6e49 6176 696c 2064 6557 2070     ....Invalid Wep 
  40def0:	656b 2079 656c 676e 6874 2520 0a64 0000     key length %d...
  40df00:	6e49 6f63 7272 6365 2074 5350 204b 656b     Incorrect PSK ke
  40df10:	2079 656c 676e 6874 000a 0000 6e75 6564     y length....unde
  40df20:	6966 656e 2064 6573 2063 7974 6570 000a     fined sec type..
  40df30:	6946 6d72 6177 6572 7620 7265 2020 3a20     Firmware ver   :
  40df40:	2520 2e75 7525 252e 0a75 0000 694d 206e      %u.%u.%u...Min 
  40df50:	7264 7669 7265 7620 7265 3a20 2520 2e75     driver ver : %u.
  40df60:	7525 252e 0a75 0000 7543 7272 6420 6972     %u.%u...Curr dri
  40df70:	6576 2072 6576 3a72 2520 2e75 7525 252e     ver ver: %u.%u.%
  40df80:	0a75 0000 694d 6d73 7461 6863 4620 7269     u...Mismatch Fir
  40df90:	616d 7277 2065 6556 7372 6f69 0a6e 0000     mawre Version...

0040dfa0 <__FUNCTION__.9687>:
  40dfa0:	6d6e 635f 6b6c 656c 7373 775f 6b61 0065     nm_clkless_wake.

0040dfb0 <__FUNCTION__.9781>:
  40dfb0:	6863 7069 645f 6965 696e 0074 6166 6c69     chip_deinit.fail
  40dfc0:	6465 7420 206f 6564 692d 696e 6974 6c61     ed to de-initial
  40dfd0:	7a69 0a65 0000 0000 7245 6f72 2072 6877     ize.....Error wh
  40dfe0:	6c69 2065 7277 7469 6e69 2067 6572 0a67     ile writing reg.
  40dff0:	0000 0000 7245 6f72 2072 6877 6c69 2065     ....Error while 
  40e000:	6572 6461 6e69 2067 6572 0a67 0000 0000     reading reg.....
  40e010:	7542 2073 7265 6f72 2072 3128 2e29 5720     Bus error (1). W
  40e020:	6b61 2065 7075 6620 6961 656c 0a64 0000     ake up failed...
  40e030:	7542 2073 7265 6f72 2072 3228 2e29 5720     Bus error (2). W
  40e040:	6b61 2065 7075 6620 6961 656c 0a64 0000     ake up failed...
  40e050:	6c63 636f 736b 7320 6974 6c6c 4f20 4646     clocks still OFF
  40e060:	202e 6157 656b 7520 2070 6166 6c69 6465     . Wake up failed
  40e070:	000a 0000 6572 3a67 7825 2f20 2520 2078     ....reg:%x / %x 
  40e080:	000a 0000                                   ....

0040e084 <__FUNCTION__.9768>:
  40e084:	6d6e 645f 7672 695f 696e 0074               nm_drv_init.

0040e090 <__FUNCTION__.9775>:
  40e090:	6d6e 645f 7672 645f 6965 696e 0074 0000     nm_drv_deinit...
  40e0a0:	6e5b 696d 7320 6f74 5d70 203a 6863 7069     [nmi stop]: chip
  40e0b0:	645f 6965 696e 2074 6166 6c69 000a 0000     _deinit fail....
  40e0c0:	6e5b 696d 7320 6f74 5d70 203a 5053 2049     [nmi stop]: SPI 
  40e0d0:	6c66 7361 2068 6964 6173 6c62 2065 6166     flash disable fa
  40e0e0:	6c69 000a 6e5b 696d 7320 6f74 5d70 203a     il..[nmi stop]: 
  40e0f0:	6166 6c69 6920 696e 2074 7562 0a73 0000     fail init bus...
  40e100:	6166 6c69 6465 7420 206f 6e65 6261 656c     failed to enable
  40e110:	6920 746e 7265 7572 7470 2e73 0a2e 0000      interrupts.....
  40e120:	6e5b 696d 7320 6174 7472 3a5d 6620 6961     [nmi start]: fai
  40e130:	206c 6e69 7469 6220 7375 000a 6843 7069     l init bus..Chip
  40e140:	4920 2044 6c25 0a78 0000 0000                ID %lx.....

0040e14c <__FUNCTION__.9152>:
  40e14c:	7073 5f69 6d63 0064                         spi_cmd.

0040e154 <__FUNCTION__.9160>:
  40e154:	7073 5f69 6d63 5f64 7372 0070               spi_cmd_rsp.

0040e160 <__FUNCTION__.9176>:
  40e160:	7073 5f69 6164 6174 725f 6165 0064 0000     spi_data_read...

0040e170 <__FUNCTION__.9191>:
  40e170:	7073 5f69 6164 6174 775f 6972 6574 0000     spi_data_write..

0040e180 <__FUNCTION__.9201>:
  40e180:	7073 5f69 7277 7469 5f65 6572 0067 0000     spi_write_reg...

0040e190 <__FUNCTION__.9209>:
  40e190:	6d6e 735f 6970 775f 6972 6574 0000 0000     nm_spi_write....

0040e1a0 <__FUNCTION__.9218>:
  40e1a0:	7073 5f69 6572 6461 725f 6765 0000 0000     spi_read_reg....

0040e1b0 <__FUNCTION__.9226>:
  40e1b0:	6d6e 735f 6970 725f 6165 0064               nm_spi_read.

0040e1bc <__FUNCTION__.9243>:
  40e1bc:	6d6e 735f 6970 695f 696e 0074               nm_spi_init.

0040e1c8 <crc7_syndrome_table>:
  40e1c8:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
  40e1d8:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
  40e1e8:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
  40e1f8:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
  40e208:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
  40e218:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
  40e228:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
  40e238:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
  40e248:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
  40e258:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
  40e268:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
  40e278:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
  40e288:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
  40e298:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
  40e2a8:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
  40e2b8:	070e 151c 232a 3138 4f46 5d54 6b62 7970     ....*#81FOT]bkpy
  40e2c8:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  40e2d8:	2064 6e69 6574 6e72 6c61 7220 6165 2064     d internal read 
  40e2e8:	7270 746f 636f 6c6f 7720 7469 2068 5243     protocol with CR
  40e2f8:	2043 6e6f 202c 6572 7974 6972 676e 7720     C on, retyring w
  40e308:	7469 2068 5243 2043 666f 2e66 2e2e 000a     ith CRC off.....
  40e318:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  40e328:	2064 6e69 6574 6e72 6c61 7220 6165 2064     d internal read 
  40e338:	7270 746f 636f 6c6f 2e2e 0a2e 0000 0000     protocol........
  40e348:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  40e358:	2064 6e69 6574 6e72 6c61 7720 6972 6574     d internal write
  40e368:	7020 6f72 6f74 6f63 206c 6572 2e67 2e2e      protocol reg...
  40e378:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
  40e388:	6961 206c 6d63 2064 6572 6461 6320 6968     ail cmd read chi
  40e398:	2070 6469 2e2e 0a2e 0000 0000 6e5b 696d     p id........[nmi
  40e3a8:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
  40e3b8:	2c64 7220 6165 2064 6c62 636f 206b 2528     d, read block (%
  40e3c8:	3830 2978 2e2e 0a2e 0000 0000 6e5b 696d     08x)........[nmi
  40e3d8:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
  40e3e8:	2064 6572 7073 6e6f 6573 202c 6572 6461     d response, read
  40e3f8:	6220 6f6c 6b63 2820 3025 7838 2e29 2e2e      block (%08x)...
  40e408:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
  40e418:	6961 656c 2064 6c62 636f 206b 6164 6174     ailed block data
  40e428:	7220 6165 2e64 2e2e 000a 0000 6e5b 696d      read.......[nmi
  40e438:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
  40e448:	2c64 7720 6972 6574 6220 6f6c 6b63 2820     d, write block (
  40e458:	3025 7838 2e29 2e2e 000a 0000 6e5b 696d     %08x).......[nmi
  40e468:	7320 6970 5d20 203a 6146 6c69 6465 6320      spi ]: Failed c
  40e478:	646d 7220 7365 6f70 736e 2c65 7720 6972     md response, wri
  40e488:	6574 6220 6f6c 6b63 2820 3025 7838 2e29     te block (%08x).
  40e498:	2e2e 000a 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
  40e4a8:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
  40e4b8:	6320 646d 7720 6972 6574 202c 7562 2073      cmd write, bus 
  40e4c8:	7265 6f72 2e72 2e2e 000a 0000 6e5b 696d     error.......[nmi
  40e4d8:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
  40e4e8:	6174 6220 6f6c 6b63 7720 6972 6574 202c     ta block write, 
  40e4f8:	7562 2073 7265 6f72 2e72 2e2e 000a 0000     bus error.......
  40e508:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  40e518:	2064 6164 6174 6220 6f6c 6b63 6320 6372     d data block crc
  40e528:	7720 6972 6574 202c 7562 2073 7265 6f72      write, bus erro
  40e538:	2e72 2e2e 000a 0000 6e5b 696d 7320 6970     r.......[nmi spi
  40e548:	3a5d 4620 6961 656c 2064 6c62 636f 206b     ]: Failed block 
  40e558:	6164 6174 7720 6972 6574 2e2e 0a2e 0000     data write......
  40e568:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  40e578:	2064 6d63 2064 7277 7469 2c65 6220 7375     d cmd write, bus
  40e588:	6520 7272 726f 2e2e 0a2e 0000 6e5b 696d      error......[nmi
  40e598:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
  40e5a8:	2064 6572 7073 6e6f 6573 7220 6165 2c64     d response read,
  40e5b8:	6220 7375 6520 7272 726f 2e2e 0a2e 0000      bus error......
  40e5c8:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  40e5d8:	2064 6164 6174 7220 7365 6f70 736e 2065     d data response 
  40e5e8:	6572 6461 202c 7562 2073 7265 6f72 2e72     read, bus error.
  40e5f8:	2e2e 000a 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
  40e608:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
  40e618:	736e 2065 6572 6461 2e2e 282e 3025 7832     nse read...(%02x
  40e628:	0a29 0000 6e5b 696d 7320 6970 3a5d 4620     )...[nmi spi]: F
  40e638:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
  40e648:	7220 6165 2c64 6220 7375 6520 7272 726f      read, bus error
  40e658:	2e2e 0a2e 0000 0000 6e5b 696d 7320 6970     ........[nmi spi
  40e668:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
  40e678:	6f6c 6b63 6320 6372 7220 6165 2c64 6220     lock crc read, b
  40e688:	7375 6520 7272 726f 2e2e 0a2e 0000 0000     us error........
  40e698:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  40e6a8:	2064 6d63 2c64 7220 6165 2064 6572 2067     d cmd, read reg 
  40e6b8:	2528 3830 2978 2e2e 0a2e 0000 6e5b 696d     (%08x)......[nmi
  40e6c8:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
  40e6d8:	2064 6572 7073 6e6f 6573 202c 6572 6461     d response, read
  40e6e8:	7220 6765 2820 3025 7838 2e29 2e2e 000a      reg (%08x).....
  40e6f8:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  40e708:	2064 6164 6174 7220 6165 2e64 2e2e 000a     d data read.....
  40e718:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  40e728:	2064 6d63 2c64 7720 6972 6574 7220 6765     d cmd, write reg
  40e738:	2820 3025 7838 2e29 2e2e 000a 6e5b 696d      (%08x).....[nmi
  40e748:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
  40e758:	2064 6572 7073 6e6f 6573 202c 7277 7469     d response, writ
  40e768:	2065 6572 2067 2528 3830 2978 2e2e 0a2e     e reg (%08x)....
  40e778:	0000 0000 4528 5252 2952 7543 7272 6e65     ....(ERRR)Curren
  40e788:	2074 253c 3e64 000a 6325 0000 2d2d 5720     t <%d>..%c..-- W
  40e798:	4e49 3143 3035 2030 4354 2050 6573 7672     INC1500 TCP serv
  40e7a8:	7265 6520 6178 706d 656c 2d20 0d2d 2d0a     er example --..-
  40e7b8:	202d 4153 454d 3037 582d 4c50 2044 2d2d     - SAME70-XPLD --
  40e7c8:	0a0d 2d2d 4320 6d6f 6970 656c 3a64 4d20     ..-- Compiled: M
  40e7d8:	7961 3220 2039 3032 3731 3220 3a33 3730     ay 29 2017 23:07
  40e7e8:	333a 2037 2d2d 0a0d 0000 0000 6f63 6f63     :37 --......coco
  40e7f8:	0000 0000 616d 6e69 203a 326d 5f6d 6977     ....main: m2m_wi
  40e808:	6966 695f 696e 2074 6163 6c6c 6520 7272     fi_init call err
  40e818:	726f 2821 6425 0d29 000a 0000 616d 6e69     or!(%d).....main
  40e828:	203a 6166 6c69 6465 7420 206f 7263 6165     : failed to crea
  40e838:	6574 5420 5043 6320 696c 6e65 2074 6f73     te TCP client so
  40e848:	6b63 7465 6520 7272 726f 0d21 000a 0000     cket error!.....
  40e858:	616d 6e69 203a 6166 6c69 6465 7420 206f     main: failed to 
  40e868:	6f63 6e6e 6365 2074 6f73 6b63 7465 6520     connect socket e
  40e878:	7272 726f 0d21 000a 6f43 656e 7463 6461     rror!...Conectad
  40e888:	206f 2021 000a 0000 0a0c 2d0d 202d 4453     o ! .......-- SD
  40e898:	4d2f 434d 532f 4944 204f 6143 6472 4520     /MMC/SDIO Card E
  40e8a8:	6178 706d 656c 6f20 206e 6146 4674 2073     xample on FatFs 
  40e8b8:	2d2d 0d0a 0000 0000 6c50 6165 6573 7020     --......Please p
  40e8c8:	756c 2067 6e61 5320 2c44 4d20 434d 6f20     lug an SD, MMC o
  40e8d8:	2072 4453 4f49 6320 7261 2064 6e69 7320     r SDIO card in s
  40e8e8:	6f6c 2e74 0d0a 0000 6143 6472 6920 736e     lot.....Card ins
  40e8f8:	6174 6c6c 4620 4941 0a4c 000d 6c50 6165     tall FAIL...Plea
  40e908:	6573 7520 706e 756c 2067 6e61 2064 6572     se unplug and re
  40e918:	702d 756c 2067 6874 2065 6163 6472 0a2e     -plug the card..
  40e928:	000d 0000 6f4d 6e75 2074 6964 6b73 2820     ....Mount disk (
  40e938:	5f66 6f6d 6e75 2974 2e2e 0d2e 000a 0000     f_mount)........
  40e948:	465b 4941 5d4c 7220 7365 2520 0d64 000a     [FAIL] res %d...
  40e958:	4f5b 5d4b 0a0d 0000 7243 6165 6574 6920     [OK]....Create i
  40e968:	666e 206f 6966 656c 2820 5f66 706f 6e65     nfo file (f_open
  40e978:	2e29 2e2e 0a0d 0000 7257 7469 2065 6f74     ).......Write to
  40e988:	6920 666e 206f 6966 656c 2820 5f66 7570      info file (f_pu
  40e998:	7374 2e29 2e2e 0a0d 0000 0000 0a0d 0a0d     ts).............
  40e9a8:	0000 0000 6150 7372 6e69 2e67 2e2e 0a0d     ....Parsing.....
  40e9b8:	0000 0000 6546 6863 6e61 6f64 6120 7172     ....Fechando arq
  40e9c8:	6975 6f76 0a20 0000 6c50 6165 6573 7520     uivo ...Please u
  40e9d8:	706e 756c 2067 6874 2065 6163 6472 0a2e     nplug the card..
  40e9e8:	000d 0000 3a30 6e69 6f66 742e 7478 0000     ....0:info.txt..
  40e9f8:	4820 5454 2f50 2e31 0d31 200a 6341 6563      HTTP/1.1.. Acce
  40ea08:	7470 203a 2f2a 0d2a 0d0a 000a 7325 7325     pt: */*.....%s%s
  40ea18:	0000 0000 6f73 6b63 7465 635f 3a62 6320     ....socket_cb: c
  40ea28:	6e6f 656e 7463 7320 6375 6563 7373 0d21     onnect success!.
  40ea38:	000a 0000 6f73 6b63 7465 635f 3a62 6320     ....socket_cb: c
  40ea48:	6e6f 656e 7463 6520 7272 726f 0d21 000a     onnect error!...
  40ea58:	6f73 6b63 7465 635f 3a62 7320 6e65 2064     socket_cb: send 
  40ea68:	7573 6363 7365 2173 0a0d 0000 4341 4f48     success!....ACHO
  40ea78:	2055 4148 4148 0000 6f73 6b63 7465 635f     U HAHA..socket_c
  40ea88:	3a62 7220 6365 2076 7265 6f72 2172 0a0d     b: recv error!..
  40ea98:	0000 0000 6977 6966 635f 3a62 4d20 4d32     ....wifi_cb: M2M
  40eaa8:	575f 4649 5f49 4552 5053 435f 4e4f 535f     _WIFI_RESP_CON_S
  40eab8:	4154 4554 435f 4148 474e 4445 203a 4f43     TATE_CHANGED: CO
  40eac8:	4e4e 4345 4554 0d44 000a 0000 6977 6966     NNECTED.....wifi
  40ead8:	635f 3a62 4d20 4d32 575f 4649 5f49 4552     _cb: M2M_WIFI_RE
  40eae8:	5053 435f 4e4f 535f 4154 4554 435f 4148     SP_CON_STATE_CHA
  40eaf8:	474e 4445 203a 4944 4353 4e4f 454e 5443     NGED: DISCONNECT
  40eb08:	4445 0a0d 0000 0000 6d61 6d61 6d66 3031     ED......amamfm10
  40eb18:	0000 0000 6146 696d 796c 2e32 0034 0000     ....Family2.4...
  40eb28:	6977 6966 635f 3a62 4d20 4d32 575f 4649     wifi_cb: M2M_WIF
  40eb38:	5f49 4552 5f51 4844 5043 435f 4e4f 3a46     I_REQ_DHCP_CONF:
  40eb48:	4920 2050 7369 2520 2e75 7525 252e 2e75      IP is %u.%u.%u.
  40eb58:	7525 0a0d 0000 0000                         %u......

0040eb60 <_global_impure_ptr>:
  40eb60:	0050 2040 4e49 0046 6e69 0066 414e 004e     P.@ INF.inf.NAN.
  40eb70:	616e 006e 3130 3332 3534 3736 3938 4241     nan.0123456789AB
  40eb80:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
  40eb90:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
  40eba0:	296c 0000 0030 0000                         l)..0...

0040eba8 <blanks.7208>:
  40eba8:	2020 2020 2020 2020 2020 2020 2020 2020                     

0040ebb8 <zeroes.7209>:
  40ebb8:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

0040ebc8 <blanks.7202>:
  40ebc8:	2020 2020 2020 2020 2020 2020 2020 2020                     

0040ebd8 <zeroes.7203>:
  40ebd8:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  40ebe8:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
  40ebf8:	0043 0000 4f50 4953 0058 0000 002e 0000     C...POSIX.......

0040ec08 <__mprec_bigtens>:
  40ec08:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  40ec18:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  40ec28:	bf3c 7f73 4fdd 7515                         <.s..O.u

0040ec30 <__mprec_tens>:
  40ec30:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  40ec40:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  40ec50:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  40ec60:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  40ec70:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  40ec80:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  40ec90:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  40eca0:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  40ecb0:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  40ecc0:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  40ecd0:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  40ece0:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  40ecf0:	9db4 79d9 7843 44ea                         ...yCx.D

0040ecf8 <p05.6040>:
  40ecf8:	0005 0000 0019 0000 007d 0000               ........}...

0040ed04 <_ctype_>:
  40ed04:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  40ed14:	2020 2020 2020 2020 2020 2020 2020 2020                     
  40ed24:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  40ed34:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  40ed44:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  40ed54:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  40ed64:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  40ed74:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  40ed84:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0040ee08 <_init>:
  40ee08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40ee0a:	bf00      	nop
  40ee0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40ee0e:	bc08      	pop	{r3}
  40ee10:	469e      	mov	lr, r3
  40ee12:	4770      	bx	lr

0040ee14 <__init_array_start>:
  40ee14:	00409f5d 	.word	0x00409f5d

0040ee18 <__frame_dummy_init_array_entry>:
  40ee18:	00400165                                e.@.

0040ee1c <_fini>:
  40ee1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40ee1e:	bf00      	nop
  40ee20:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40ee22:	bc08      	pop	{r3}
  40ee24:	469e      	mov	lr, r3
  40ee26:	4770      	bx	lr

0040ee28 <__fini_array_start>:
  40ee28:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <sd_mmc_cards>:
	...
20400014:	0050 0000 0000 0000 0000 0000 0000 0000     P...............
	...

20400030 <egstrNmBusCapabilities>:
20400030:	1000 0000                                   ....

20400034 <clk_status_reg_adr>:
20400034:	000f 0000                                   ....

20400038 <g_interrupt_enabled>:
20400038:	0001 0000                                   ....

2040003c <SystemCoreClock>:
2040003c:	0900 003d                                   ..=.

20400040 <host_msg>:
20400040:	4547 2054 002f                              GET /.

20400046 <tcp_client_socket>:
20400046:	00ff                                        ..

20400048 <_impure_ptr>:
20400048:	0050 2040 0000 0000                         P.@ ....

20400050 <impure_data>:
20400050:	0000 0000 033c 2040 03a4 2040 040c 2040     ....<.@ ..@ ..@ 
	...
204000f8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20400108:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400478 <__malloc_av_>:
	...
20400480:	0478 2040 0478 2040 0480 2040 0480 2040     x.@ x.@ ..@ ..@ 
20400490:	0488 2040 0488 2040 0490 2040 0490 2040     ..@ ..@ ..@ ..@ 
204004a0:	0498 2040 0498 2040 04a0 2040 04a0 2040     ..@ ..@ ..@ ..@ 
204004b0:	04a8 2040 04a8 2040 04b0 2040 04b0 2040     ..@ ..@ ..@ ..@ 
204004c0:	04b8 2040 04b8 2040 04c0 2040 04c0 2040     ..@ ..@ ..@ ..@ 
204004d0:	04c8 2040 04c8 2040 04d0 2040 04d0 2040     ..@ ..@ ..@ ..@ 
204004e0:	04d8 2040 04d8 2040 04e0 2040 04e0 2040     ..@ ..@ ..@ ..@ 
204004f0:	04e8 2040 04e8 2040 04f0 2040 04f0 2040     ..@ ..@ ..@ ..@ 
20400500:	04f8 2040 04f8 2040 0500 2040 0500 2040     ..@ ..@ ..@ ..@ 
20400510:	0508 2040 0508 2040 0510 2040 0510 2040     ..@ ..@ ..@ ..@ 
20400520:	0518 2040 0518 2040 0520 2040 0520 2040     ..@ ..@  .@  .@ 
20400530:	0528 2040 0528 2040 0530 2040 0530 2040     (.@ (.@ 0.@ 0.@ 
20400540:	0538 2040 0538 2040 0540 2040 0540 2040     8.@ 8.@ @.@ @.@ 
20400550:	0548 2040 0548 2040 0550 2040 0550 2040     H.@ H.@ P.@ P.@ 
20400560:	0558 2040 0558 2040 0560 2040 0560 2040     X.@ X.@ `.@ `.@ 
20400570:	0568 2040 0568 2040 0570 2040 0570 2040     h.@ h.@ p.@ p.@ 
20400580:	0578 2040 0578 2040 0580 2040 0580 2040     x.@ x.@ ..@ ..@ 
20400590:	0588 2040 0588 2040 0590 2040 0590 2040     ..@ ..@ ..@ ..@ 
204005a0:	0598 2040 0598 2040 05a0 2040 05a0 2040     ..@ ..@ ..@ ..@ 
204005b0:	05a8 2040 05a8 2040 05b0 2040 05b0 2040     ..@ ..@ ..@ ..@ 
204005c0:	05b8 2040 05b8 2040 05c0 2040 05c0 2040     ..@ ..@ ..@ ..@ 
204005d0:	05c8 2040 05c8 2040 05d0 2040 05d0 2040     ..@ ..@ ..@ ..@ 
204005e0:	05d8 2040 05d8 2040 05e0 2040 05e0 2040     ..@ ..@ ..@ ..@ 
204005f0:	05e8 2040 05e8 2040 05f0 2040 05f0 2040     ..@ ..@ ..@ ..@ 
20400600:	05f8 2040 05f8 2040 0600 2040 0600 2040     ..@ ..@ ..@ ..@ 
20400610:	0608 2040 0608 2040 0610 2040 0610 2040     ..@ ..@ ..@ ..@ 
20400620:	0618 2040 0618 2040 0620 2040 0620 2040     ..@ ..@  .@  .@ 
20400630:	0628 2040 0628 2040 0630 2040 0630 2040     (.@ (.@ 0.@ 0.@ 
20400640:	0638 2040 0638 2040 0640 2040 0640 2040     8.@ 8.@ @.@ @.@ 
20400650:	0648 2040 0648 2040 0650 2040 0650 2040     H.@ H.@ P.@ P.@ 
20400660:	0658 2040 0658 2040 0660 2040 0660 2040     X.@ X.@ `.@ `.@ 
20400670:	0668 2040 0668 2040 0670 2040 0670 2040     h.@ h.@ p.@ p.@ 
20400680:	0678 2040 0678 2040 0680 2040 0680 2040     x.@ x.@ ..@ ..@ 
20400690:	0688 2040 0688 2040 0690 2040 0690 2040     ..@ ..@ ..@ ..@ 
204006a0:	0698 2040 0698 2040 06a0 2040 06a0 2040     ..@ ..@ ..@ ..@ 
204006b0:	06a8 2040 06a8 2040 06b0 2040 06b0 2040     ..@ ..@ ..@ ..@ 
204006c0:	06b8 2040 06b8 2040 06c0 2040 06c0 2040     ..@ ..@ ..@ ..@ 
204006d0:	06c8 2040 06c8 2040 06d0 2040 06d0 2040     ..@ ..@ ..@ ..@ 
204006e0:	06d8 2040 06d8 2040 06e0 2040 06e0 2040     ..@ ..@ ..@ ..@ 
204006f0:	06e8 2040 06e8 2040 06f0 2040 06f0 2040     ..@ ..@ ..@ ..@ 
20400700:	06f8 2040 06f8 2040 0700 2040 0700 2040     ..@ ..@ ..@ ..@ 
20400710:	0708 2040 0708 2040 0710 2040 0710 2040     ..@ ..@ ..@ ..@ 
20400720:	0718 2040 0718 2040 0720 2040 0720 2040     ..@ ..@  .@  .@ 
20400730:	0728 2040 0728 2040 0730 2040 0730 2040     (.@ (.@ 0.@ 0.@ 
20400740:	0738 2040 0738 2040 0740 2040 0740 2040     8.@ 8.@ @.@ @.@ 
20400750:	0748 2040 0748 2040 0750 2040 0750 2040     H.@ H.@ P.@ P.@ 
20400760:	0758 2040 0758 2040 0760 2040 0760 2040     X.@ X.@ `.@ `.@ 
20400770:	0768 2040 0768 2040 0770 2040 0770 2040     h.@ h.@ p.@ p.@ 
20400780:	0778 2040 0778 2040 0780 2040 0780 2040     x.@ x.@ ..@ ..@ 
20400790:	0788 2040 0788 2040 0790 2040 0790 2040     ..@ ..@ ..@ ..@ 
204007a0:	0798 2040 0798 2040 07a0 2040 07a0 2040     ..@ ..@ ..@ ..@ 
204007b0:	07a8 2040 07a8 2040 07b0 2040 07b0 2040     ..@ ..@ ..@ ..@ 
204007c0:	07b8 2040 07b8 2040 07c0 2040 07c0 2040     ..@ ..@ ..@ ..@ 
204007d0:	07c8 2040 07c8 2040 07d0 2040 07d0 2040     ..@ ..@ ..@ ..@ 
204007e0:	07d8 2040 07d8 2040 07e0 2040 07e0 2040     ..@ ..@ ..@ ..@ 
204007f0:	07e8 2040 07e8 2040 07f0 2040 07f0 2040     ..@ ..@ ..@ ..@ 
20400800:	07f8 2040 07f8 2040 0800 2040 0800 2040     ..@ ..@ ..@ ..@ 
20400810:	0808 2040 0808 2040 0810 2040 0810 2040     ..@ ..@ ..@ ..@ 
20400820:	0818 2040 0818 2040 0820 2040 0820 2040     ..@ ..@  .@  .@ 
20400830:	0828 2040 0828 2040 0830 2040 0830 2040     (.@ (.@ 0.@ 0.@ 
20400840:	0838 2040 0838 2040 0840 2040 0840 2040     8.@ 8.@ @.@ @.@ 
20400850:	0848 2040 0848 2040 0850 2040 0850 2040     H.@ H.@ P.@ P.@ 
20400860:	0858 2040 0858 2040 0860 2040 0860 2040     X.@ X.@ `.@ `.@ 
20400870:	0868 2040 0868 2040 0870 2040 0870 2040     h.@ h.@ p.@ p.@ 

20400880 <__malloc_sbrk_base>:
20400880:	ffff ffff                                   ....

20400884 <__malloc_trim_threshold>:
20400884:	0000 0002                                   ....

20400888 <__global_locale>:
20400888:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008a8:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008c8:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008e8:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400908:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400928:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400948:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400968:	c6a1 0040 b93d 0040 0000 0000 ed04 0040     ..@.=.@.......@.
20400978:	ec04 0040 e9a8 0040 e9a8 0040 e9a8 0040     ..@...@...@...@.
20400988:	e9a8 0040 e9a8 0040 e9a8 0040 e9a8 0040     ..@...@...@...@.
20400998:	e9a8 0040 e9a8 0040 ffff ffff ffff ffff     ..@...@.........
204009a8:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204009d0:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
