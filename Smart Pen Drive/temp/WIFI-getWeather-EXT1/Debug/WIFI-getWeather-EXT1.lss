
WIFI-getWeather-EXT1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008694  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00408694  00408694  00018694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000008f4  20400000  0040869c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000075c  204008f4  00408f90  000208f4  2**2
                  ALLOC
  4 .stack        00002000  20401050  004096ec  000208f4  2**0
                  ALLOC
  5 .heap         00000200  20403050  0040b6ec  000208f4  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000208f4  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020922  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001b69c  00000000  00000000  0002097b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003dfe  00000000  00000000  0003c017  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000dab6  00000000  00000000  0003fe15  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001060  00000000  00000000  0004d8cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001078  00000000  00000000  0004e92b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00024387  00000000  00000000  0004f9a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000152b8  00000000  00000000  00073d2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00091aea  00000000  00000000  00088fe2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003644  00000000  00000000  0011aacc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20403050 	.word	0x20403050
  400004:	00403b25 	.word	0x00403b25
  400008:	00403b21 	.word	0x00403b21
  40000c:	00403b21 	.word	0x00403b21
  400010:	00403b21 	.word	0x00403b21
  400014:	00403b21 	.word	0x00403b21
  400018:	00403b21 	.word	0x00403b21
	...
  40002c:	00403b21 	.word	0x00403b21
  400030:	00403b21 	.word	0x00403b21
  400034:	00000000 	.word	0x00000000
  400038:	00403b21 	.word	0x00403b21
  40003c:	00403b21 	.word	0x00403b21
  400040:	00403b21 	.word	0x00403b21
  400044:	00403b21 	.word	0x00403b21
  400048:	00403b21 	.word	0x00403b21
  40004c:	00403b21 	.word	0x00403b21
  400050:	00403b21 	.word	0x00403b21
  400054:	00403b21 	.word	0x00403b21
  400058:	00403b21 	.word	0x00403b21
  40005c:	00403b21 	.word	0x00403b21
  400060:	00403b21 	.word	0x00403b21
  400064:	00000000 	.word	0x00000000
  400068:	00403611 	.word	0x00403611
  40006c:	00403625 	.word	0x00403625
  400070:	00403639 	.word	0x00403639
  400074:	00403b21 	.word	0x00403b21
  400078:	00403b21 	.word	0x00403b21
  40007c:	00403b21 	.word	0x00403b21
  400080:	0040364d 	.word	0x0040364d
  400084:	00403661 	.word	0x00403661
  400088:	00403b21 	.word	0x00403b21
  40008c:	00403b21 	.word	0x00403b21
  400090:	00403b21 	.word	0x00403b21
  400094:	00403b21 	.word	0x00403b21
  400098:	00403b21 	.word	0x00403b21
  40009c:	00403b21 	.word	0x00403b21
  4000a0:	00403b21 	.word	0x00403b21
  4000a4:	00403b21 	.word	0x00403b21
  4000a8:	00403b21 	.word	0x00403b21
  4000ac:	00403b21 	.word	0x00403b21
  4000b0:	00403b21 	.word	0x00403b21
  4000b4:	00403b21 	.word	0x00403b21
  4000b8:	00403b21 	.word	0x00403b21
  4000bc:	00403b21 	.word	0x00403b21
  4000c0:	00403b21 	.word	0x00403b21
  4000c4:	00403b21 	.word	0x00403b21
  4000c8:	00403b21 	.word	0x00403b21
  4000cc:	00403b21 	.word	0x00403b21
  4000d0:	00000000 	.word	0x00000000
  4000d4:	00403b21 	.word	0x00403b21
  4000d8:	00000000 	.word	0x00000000
  4000dc:	00403b21 	.word	0x00403b21
  4000e0:	00403b21 	.word	0x00403b21
  4000e4:	00403b21 	.word	0x00403b21
  4000e8:	00403b21 	.word	0x00403b21
  4000ec:	00403b21 	.word	0x00403b21
  4000f0:	00403b21 	.word	0x00403b21
  4000f4:	00403b21 	.word	0x00403b21
  4000f8:	00403b21 	.word	0x00403b21
  4000fc:	00403b21 	.word	0x00403b21
  400100:	00403b21 	.word	0x00403b21
  400104:	00403b21 	.word	0x00403b21
  400108:	00403b21 	.word	0x00403b21
  40010c:	00403b21 	.word	0x00403b21
  400110:	00403b21 	.word	0x00403b21
	...
  400120:	00403b21 	.word	0x00403b21
  400124:	00403b21 	.word	0x00403b21
  400128:	00403b21 	.word	0x00403b21
  40012c:	00403b21 	.word	0x00403b21
  400130:	00403b21 	.word	0x00403b21
  400134:	00000000 	.word	0x00000000
  400138:	00403b21 	.word	0x00403b21
  40013c:	00403b21 	.word	0x00403b21

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204008f4 	.word	0x204008f4
  40015c:	00000000 	.word	0x00000000
  400160:	0040869c 	.word	0x0040869c

00400164 <frame_dummy>:
  400164:	4b08      	ldr	r3, [pc, #32]	; (400188 <frame_dummy+0x24>)
  400166:	b510      	push	{r4, lr}
  400168:	b11b      	cbz	r3, 400172 <frame_dummy+0xe>
  40016a:	4908      	ldr	r1, [pc, #32]	; (40018c <frame_dummy+0x28>)
  40016c:	4808      	ldr	r0, [pc, #32]	; (400190 <frame_dummy+0x2c>)
  40016e:	f3af 8000 	nop.w
  400172:	4808      	ldr	r0, [pc, #32]	; (400194 <frame_dummy+0x30>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b903      	cbnz	r3, 40017a <frame_dummy+0x16>
  400178:	bd10      	pop	{r4, pc}
  40017a:	4b07      	ldr	r3, [pc, #28]	; (400198 <frame_dummy+0x34>)
  40017c:	2b00      	cmp	r3, #0
  40017e:	d0fb      	beq.n	400178 <frame_dummy+0x14>
  400180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400184:	4718      	bx	r3
  400186:	bf00      	nop
  400188:	00000000 	.word	0x00000000
  40018c:	204008f8 	.word	0x204008f8
  400190:	0040869c 	.word	0x0040869c
  400194:	0040869c 	.word	0x0040869c
  400198:	00000000 	.word	0x00000000

0040019c <chip_isr>:

static tpfNmBspIsr gpfIsr;

static void chip_isr(uint32_t id, uint32_t mask)
{
	if ((id == CONF_WINC_SPI_INT_PIO_ID) && (mask == CONF_WINC_SPI_INT_MASK)) {
  40019c:	2810      	cmp	r0, #16
  40019e:	d108      	bne.n	4001b2 <chip_isr+0x16>
  4001a0:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4001a4:	d105      	bne.n	4001b2 <chip_isr+0x16>
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(uint32_t id, uint32_t mask)
{
  4001a6:	b508      	push	{r3, lr}
	if ((id == CONF_WINC_SPI_INT_PIO_ID) && (mask == CONF_WINC_SPI_INT_MASK)) {
		if (gpfIsr) {
  4001a8:	4b02      	ldr	r3, [pc, #8]	; (4001b4 <chip_isr+0x18>)
  4001aa:	681b      	ldr	r3, [r3, #0]
  4001ac:	b103      	cbz	r3, 4001b0 <chip_isr+0x14>
			gpfIsr();
  4001ae:	4798      	blx	r3
  4001b0:	bd08      	pop	{r3, pc}
  4001b2:	4770      	bx	lr
  4001b4:	20400910 	.word	0x20400910

004001b8 <nm_bsp_sleep>:
*	@param[IN]	u32TimeMsec
*				Time in milliseconds
*/
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while(u32TimeMsec--) {
  4001b8:	b140      	cbz	r0, 4001cc <nm_bsp_sleep+0x14>
*	@brief	Sleep in units of mSec
*	@param[IN]	u32TimeMsec
*				Time in milliseconds
*/
void nm_bsp_sleep(uint32 u32TimeMsec)
{
  4001ba:	b570      	push	{r4, r5, r6, lr}
  4001bc:	4604      	mov	r4, r0
	while(u32TimeMsec--) {
		delay_ms(4);
  4001be:	4e04      	ldr	r6, [pc, #16]	; (4001d0 <nm_bsp_sleep+0x18>)
  4001c0:	4d04      	ldr	r5, [pc, #16]	; (4001d4 <nm_bsp_sleep+0x1c>)
  4001c2:	4630      	mov	r0, r6
  4001c4:	47a8      	blx	r5
*	@param[IN]	u32TimeMsec
*				Time in milliseconds
*/
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while(u32TimeMsec--) {
  4001c6:	3c01      	subs	r4, #1
  4001c8:	d1fb      	bne.n	4001c2 <nm_bsp_sleep+0xa>
  4001ca:	bd70      	pop	{r4, r5, r6, pc}
  4001cc:	4770      	bx	lr
  4001ce:	bf00      	nop
  4001d0:	00031635 	.word	0x00031635
  4001d4:	20400001 	.word	0x20400001

004001d8 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset WINC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
  4001d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4001dc:	4f09      	ldr	r7, [pc, #36]	; (400204 <nm_bsp_reset+0x2c>)
  4001de:	f44f 3800 	mov.w	r8, #131072	; 0x20000
  4001e2:	f8c7 8034 	str.w	r8, [r7, #52]	; 0x34
  4001e6:	4d08      	ldr	r5, [pc, #32]	; (400208 <nm_bsp_reset+0x30>)
  4001e8:	2608      	movs	r6, #8
  4001ea:	636e      	str	r6, [r5, #52]	; 0x34
	ioport_set_pin_level(CONF_WINC_PIN_CHIP_ENABLE, IOPORT_PIN_LEVEL_LOW);
	ioport_set_pin_level(CONF_WINC_PIN_RESET, IOPORT_PIN_LEVEL_LOW);
	nm_bsp_sleep(100);
  4001ec:	2064      	movs	r0, #100	; 0x64
  4001ee:	4c07      	ldr	r4, [pc, #28]	; (40020c <nm_bsp_reset+0x34>)
  4001f0:	47a0      	blx	r4
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4001f2:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
	ioport_set_pin_level(CONF_WINC_PIN_CHIP_ENABLE, IOPORT_PIN_LEVEL_HIGH);
	nm_bsp_sleep(100);
  4001f6:	2064      	movs	r0, #100	; 0x64
  4001f8:	47a0      	blx	r4
  4001fa:	632e      	str	r6, [r5, #48]	; 0x30
	ioport_set_pin_level(CONF_WINC_PIN_RESET, IOPORT_PIN_LEVEL_HIGH);
	nm_bsp_sleep(100);
  4001fc:	2064      	movs	r0, #100	; 0x64
  4001fe:	47a0      	blx	r4
  400200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400204:	400e1200 	.word	0x400e1200
  400208:	400e1000 	.word	0x400e1000
  40020c:	004001b9 	.word	0x004001b9

00400210 <nm_bsp_init>:
*	@fn		nm_bsp_init
*	@brief	Initialize BSP
*	@return	0 in case of success and -1 in case of failure
*/
sint8 nm_bsp_init(void)
{
  400210:	b510      	push	{r4, lr}
	gpfIsr = NULL;
  400212:	2200      	movs	r2, #0
  400214:	4b14      	ldr	r3, [pc, #80]	; (400268 <nm_bsp_init+0x58>)
  400216:	601a      	str	r2, [r3, #0]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400218:	200a      	movs	r0, #10
  40021a:	4c14      	ldr	r4, [pc, #80]	; (40026c <nm_bsp_init+0x5c>)
  40021c:	47a0      	blx	r4
  40021e:	200b      	movs	r0, #11
  400220:	47a0      	blx	r4
  400222:	200c      	movs	r0, #12
  400224:	47a0      	blx	r4
  400226:	2010      	movs	r0, #16
  400228:	47a0      	blx	r4
  40022a:	2011      	movs	r0, #17
  40022c:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40022e:	4b10      	ldr	r3, [pc, #64]	; (400270 <nm_bsp_init+0x60>)
  400230:	2208      	movs	r2, #8
  400232:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400234:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400238:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40023a:	4a0e      	ldr	r2, [pc, #56]	; (400274 <nm_bsp_init+0x64>)
  40023c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  400240:	6111      	str	r1, [r2, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400242:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400246:	6311      	str	r1, [r2, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400248:	2204      	movs	r2, #4
  40024a:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40024c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400250:	631a      	str	r2, [r3, #48]	; 0x30

	/* Initialize chip IOs. */
	init_chip_pins();

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
  400252:	4b09      	ldr	r3, [pc, #36]	; (400278 <nm_bsp_init+0x68>)
  400254:	681b      	ldr	r3, [r3, #0]
  400256:	f013 0f01 	tst.w	r3, #1
  40025a:	d001      	beq.n	400260 <nm_bsp_init+0x50>
  40025c:	4b06      	ldr	r3, [pc, #24]	; (400278 <nm_bsp_init+0x68>)
  40025e:	681b      	ldr	r3, [r3, #0]
	    delay_init();
    }

	/* Perform chip reset. */
	nm_bsp_reset();
  400260:	4b06      	ldr	r3, [pc, #24]	; (40027c <nm_bsp_init+0x6c>)
  400262:	4798      	blx	r3

	return 0;
}
  400264:	2000      	movs	r0, #0
  400266:	bd10      	pop	{r4, pc}
  400268:	20400910 	.word	0x20400910
  40026c:	00403821 	.word	0x00403821
  400270:	400e1000 	.word	0x400e1000
  400274:	400e1200 	.word	0x400e1200
  400278:	e000e010 	.word	0xe000e010
  40027c:	004001d9 	.word	0x004001d9

00400280 <nm_bsp_register_isr>:
*	@brief	Register interrupt service routine
*	@param[IN]	pfIsr
*				Pointer to ISR handler
*/
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
  400280:	b530      	push	{r4, r5, lr}
  400282:	b083      	sub	sp, #12
	gpfIsr = pfIsr;
  400284:	4b14      	ldr	r3, [pc, #80]	; (4002d8 <nm_bsp_register_isr+0x58>)
  400286:	6018      	str	r0, [r3, #0]

	/* Configure PGIO pin for interrupt from SPI slave, used when slave has data to send. */
	pmc_enable_periph_clk(CONF_WINC_SPI_INT_PIO_ID);
  400288:	2010      	movs	r0, #16
  40028a:	4b14      	ldr	r3, [pc, #80]	; (4002dc <nm_bsp_register_isr+0x5c>)
  40028c:	4798      	blx	r3
	pio_configure_pin(CONF_WINC_SPI_INT_PIN, PIO_TYPE_PIO_INPUT);
  40028e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  400292:	207c      	movs	r0, #124	; 0x7c
  400294:	4b12      	ldr	r3, [pc, #72]	; (4002e0 <nm_bsp_register_isr+0x60>)
  400296:	4798      	blx	r3
	pio_pull_up(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK, PIO_PULLUP);
  400298:	4c12      	ldr	r4, [pc, #72]	; (4002e4 <nm_bsp_register_isr+0x64>)
  40029a:	2201      	movs	r2, #1
  40029c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4002a0:	4620      	mov	r0, r4
  4002a2:	4b11      	ldr	r3, [pc, #68]	; (4002e8 <nm_bsp_register_isr+0x68>)
  4002a4:	4798      	blx	r3
	/*Interrupt on falling edge*/
	pio_handler_set(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_PIO_ID,
  4002a6:	4b11      	ldr	r3, [pc, #68]	; (4002ec <nm_bsp_register_isr+0x6c>)
  4002a8:	9300      	str	r3, [sp, #0]
  4002aa:	2351      	movs	r3, #81	; 0x51
  4002ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4002b0:	2110      	movs	r1, #16
  4002b2:	4620      	mov	r0, r4
  4002b4:	4d0e      	ldr	r5, [pc, #56]	; (4002f0 <nm_bsp_register_isr+0x70>)
  4002b6:	47a8      	blx	r5
	CONF_WINC_SPI_INT_MASK, PIO_PULLUP | PIO_IT_FALL_EDGE, chip_isr);
	pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  4002b8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4002bc:	4620      	mov	r0, r4
  4002be:	4b0d      	ldr	r3, [pc, #52]	; (4002f4 <nm_bsp_register_isr+0x74>)
  4002c0:	4798      	blx	r3
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4002c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  4002c6:	4b0c      	ldr	r3, [pc, #48]	; (4002f8 <nm_bsp_register_isr+0x78>)
  4002c8:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ((IRQn_Type) CONF_WINC_SPI_INT_PIO_ID);
	pio_handler_set_priority(CONF_WINC_SPI_INT_PIO, (IRQn_Type)CONF_WINC_SPI_INT_PIO_ID,
  4002ca:	2200      	movs	r2, #0
  4002cc:	2110      	movs	r1, #16
  4002ce:	4620      	mov	r0, r4
  4002d0:	4b0a      	ldr	r3, [pc, #40]	; (4002fc <nm_bsp_register_isr+0x7c>)
  4002d2:	4798      	blx	r3
			CONF_WINC_SPI_INT_PRIORITY);
}
  4002d4:	b003      	add	sp, #12
  4002d6:	bd30      	pop	{r4, r5, pc}
  4002d8:	20400910 	.word	0x20400910
  4002dc:	00403821 	.word	0x00403821
  4002e0:	00403421 	.word	0x00403421
  4002e4:	400e1400 	.word	0x400e1400
  4002e8:	004032dd 	.word	0x004032dd
  4002ec:	0040019d 	.word	0x0040019d
  4002f0:	004035a5 	.word	0x004035a5
  4002f4:	00403411 	.word	0x00403411
  4002f8:	e000e100 	.word	0xe000e100
  4002fc:	00403675 	.word	0x00403675

00400300 <nm_bsp_interrupt_ctrl>:
*	@brief	Enable/Disable interrupts
*	@param[IN]	u8Enable
*				'0' disable interrupts. '1' enable interrupts
*/
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
  400300:	b508      	push	{r3, lr}
	if (u8Enable) {
  400302:	b128      	cbz	r0, 400310 <nm_bsp_interrupt_ctrl+0x10>
		pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  400304:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400308:	4804      	ldr	r0, [pc, #16]	; (40031c <nm_bsp_interrupt_ctrl+0x1c>)
  40030a:	4b05      	ldr	r3, [pc, #20]	; (400320 <nm_bsp_interrupt_ctrl+0x20>)
  40030c:	4798      	blx	r3
  40030e:	bd08      	pop	{r3, pc}
	}
	else {
		pio_disable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  400310:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400314:	4801      	ldr	r0, [pc, #4]	; (40031c <nm_bsp_interrupt_ctrl+0x1c>)
  400316:	4b03      	ldr	r3, [pc, #12]	; (400324 <nm_bsp_interrupt_ctrl+0x24>)
  400318:	4798      	blx	r3
  40031a:	bd08      	pop	{r3, pc}
  40031c:	400e1400 	.word	0x400e1400
  400320:	00403411 	.word	0x00403411
  400324:	00403415 	.word	0x00403415

00400328 <nm_bus_init>:
 *	@fn		nm_bus_init
 *	@brief	Initialize the bus wrapper
 *	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_bus_init(void *pvinit)
{
  400328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  40032a:	4c39      	ldr	r4, [pc, #228]	; (400410 <nm_bus_init+0xe8>)
  40032c:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  400330:	6621      	str	r1, [r4, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400332:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400336:	6561      	str	r1, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400338:	6261      	str	r1, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40033a:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  40033e:	6f23      	ldr	r3, [r4, #112]	; 0x70
  400340:	430b      	orrs	r3, r1
  400342:	6723      	str	r3, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400344:	6f63      	ldr	r3, [r4, #116]	; 0x74
  400346:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
  40034a:	6763      	str	r3, [r4, #116]	; 0x74
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  40034c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400350:	6622      	str	r2, [r4, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400352:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400356:	6562      	str	r2, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400358:	6262      	str	r2, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40035a:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  40035e:	6f23      	ldr	r3, [r4, #112]	; 0x70
  400360:	4313      	orrs	r3, r2
  400362:	6723      	str	r3, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400364:	6f63      	ldr	r3, [r4, #116]	; 0x74
  400366:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  40036a:	6763      	str	r3, [r4, #116]	; 0x74
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  40036c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  400370:	6623      	str	r3, [r4, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400372:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400376:	6563      	str	r3, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400378:	6263      	str	r3, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40037a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  40037e:	6f20      	ldr	r0, [r4, #112]	; 0x70
  400380:	4318      	orrs	r0, r3
  400382:	6720      	str	r0, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400384:	6f60      	ldr	r0, [r4, #116]	; 0x74
  400386:	f420 0080 	bic.w	r0, r0, #4194304	; 0x400000
  40038a:	6760      	str	r0, [r4, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40038c:	6061      	str	r1, [r4, #4]
  40038e:	6062      	str	r2, [r4, #4]
  400390:	6063      	str	r3, [r4, #4]
  400392:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
  400396:	6066      	str	r6, [r4, #4]
	ioport_disable_pin(CONF_WINC_SPI_MOSI_GPIO);
	ioport_disable_pin(CONF_WINC_SPI_CLK_GPIO);
	ioport_disable_pin(CONF_WINC_SPI_CS_GPIO);
	
	/* disable CS control by peripheral */
	PIOD->PIO_PER = (1<<25);
  400398:	6026      	str	r6, [r4, #0]
	PIOD->PIO_OER = (1<<25);
  40039a:	6126      	str	r6, [r4, #16]
	SPI_DEASSERT_CS();
  40039c:	6326      	str	r6, [r4, #48]	; 0x30

	spi_enable_clock(CONF_WINC_SPI);
  40039e:	4d1d      	ldr	r5, [pc, #116]	; (400414 <nm_bus_init+0xec>)
  4003a0:	4628      	mov	r0, r5
  4003a2:	4b1d      	ldr	r3, [pc, #116]	; (400418 <nm_bus_init+0xf0>)
  4003a4:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  4003a6:	2302      	movs	r3, #2
  4003a8:	602b      	str	r3, [r5, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
  4003aa:	2380      	movs	r3, #128	; 0x80
  4003ac:	602b      	str	r3, [r5, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  4003ae:	686b      	ldr	r3, [r5, #4]
  4003b0:	f043 0301 	orr.w	r3, r3, #1
  4003b4:	606b      	str	r3, [r5, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  4003b6:	686b      	ldr	r3, [r5, #4]
  4003b8:	f043 0310 	orr.w	r3, r3, #16
  4003bc:	606b      	str	r3, [r5, #4]
	spi_disable(CONF_WINC_SPI);
	spi_reset(CONF_WINC_SPI);
	spi_set_master_mode(CONF_WINC_SPI);
	spi_disable_mode_fault_detect(CONF_WINC_SPI);
	spi_set_peripheral_chip_select_value(CONF_WINC_SPI, CONF_WINC_SPI_NPCS);
  4003be:	2101      	movs	r1, #1
  4003c0:	4628      	mov	r0, r5
  4003c2:	4b16      	ldr	r3, [pc, #88]	; (40041c <nm_bus_init+0xf4>)
  4003c4:	4798      	blx	r3
	spi_set_clock_polarity(CONF_WINC_SPI,
  4003c6:	2200      	movs	r2, #0
  4003c8:	2101      	movs	r1, #1
  4003ca:	4628      	mov	r0, r5
  4003cc:	4b14      	ldr	r3, [pc, #80]	; (400420 <nm_bus_init+0xf8>)
  4003ce:	4798      	blx	r3
			CONF_WINC_SPI_NPCS, CONF_WINC_SPI_POL);
	spi_set_clock_phase(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_PHA);
  4003d0:	2201      	movs	r2, #1
  4003d2:	4611      	mov	r1, r2
  4003d4:	4628      	mov	r0, r5
  4003d6:	4b13      	ldr	r3, [pc, #76]	; (400424 <nm_bus_init+0xfc>)
  4003d8:	4798      	blx	r3
	spi_set_bits_per_transfer(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, SPI_CSR_BITS_8_BIT);
  4003da:	2200      	movs	r2, #0
  4003dc:	2101      	movs	r1, #1
  4003de:	4628      	mov	r0, r5
  4003e0:	4b11      	ldr	r3, [pc, #68]	; (400428 <nm_bus_init+0x100>)
  4003e2:	4798      	blx	r3
	spi_set_baudrate_div(CONF_WINC_SPI, CONF_WINC_SPI_NPCS,
			spi_calc_baudrate_div(CONF_WINC_SPI_CLOCK, sysclk_get_cpu_hz()));
  4003e4:	4911      	ldr	r1, [pc, #68]	; (40042c <nm_bus_init+0x104>)
  4003e6:	4812      	ldr	r0, [pc, #72]	; (400430 <nm_bus_init+0x108>)
  4003e8:	4b12      	ldr	r3, [pc, #72]	; (400434 <nm_bus_init+0x10c>)
  4003ea:	4798      	blx	r3
	spi_set_peripheral_chip_select_value(CONF_WINC_SPI, CONF_WINC_SPI_NPCS);
	spi_set_clock_polarity(CONF_WINC_SPI,
			CONF_WINC_SPI_NPCS, CONF_WINC_SPI_POL);
	spi_set_clock_phase(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_PHA);
	spi_set_bits_per_transfer(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, SPI_CSR_BITS_8_BIT);
	spi_set_baudrate_div(CONF_WINC_SPI, CONF_WINC_SPI_NPCS,
  4003ec:	b2c2      	uxtb	r2, r0
  4003ee:	2101      	movs	r1, #1
  4003f0:	4628      	mov	r0, r5
  4003f2:	4b11      	ldr	r3, [pc, #68]	; (400438 <nm_bus_init+0x110>)
  4003f4:	4798      	blx	r3
			spi_calc_baudrate_div(CONF_WINC_SPI_CLOCK, sysclk_get_cpu_hz()));
	spi_set_transfer_delay(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_DLYBS,
  4003f6:	2300      	movs	r3, #0
  4003f8:	461a      	mov	r2, r3
  4003fa:	2101      	movs	r1, #1
  4003fc:	4628      	mov	r0, r5
  4003fe:	4f0f      	ldr	r7, [pc, #60]	; (40043c <nm_bus_init+0x114>)
  400400:	47b8      	blx	r7
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400402:	2301      	movs	r3, #1
  400404:	602b      	str	r3, [r5, #0]
			CONF_WINC_SPI_DLYBCT);
	spi_enable(CONF_WINC_SPI);
	
	SPI_DEASSERT_CS();
  400406:	6326      	str	r6, [r4, #48]	; 0x30
	nm_bsp_reset();
  400408:	4b0d      	ldr	r3, [pc, #52]	; (400440 <nm_bus_init+0x118>)
  40040a:	4798      	blx	r3
#endif
	return result;
}
  40040c:	2000      	movs	r0, #0
  40040e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400410:	400e1400 	.word	0x400e1400
  400414:	40008000 	.word	0x40008000
  400418:	00403875 	.word	0x00403875
  40041c:	004038a1 	.word	0x004038a1
  400420:	00403925 	.word	0x00403925
  400424:	00403945 	.word	0x00403945
  400428:	00403965 	.word	0x00403965
  40042c:	11e1a300 	.word	0x11e1a300
  400430:	02dc6c00 	.word	0x02dc6c00
  400434:	00403979 	.word	0x00403979
  400438:	00403991 	.word	0x00403991
  40043c:	004039bd 	.word	0x004039bd
  400440:	004001d9 	.word	0x004001d9

00400444 <nm_bus_ioctl>:
 *					Arbitrary parameter depenging on IOCTL
 *	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 *	@note	For SPI only, it's important to be able to send/receive at the same time
 */
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
  400444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400448:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
  40044a:	2803      	cmp	r0, #3
  40044c:	d141      	bne.n	4004d2 <nm_bus_ioctl+0x8e>
		}
		break;
#elif CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
  40044e:	680e      	ldr	r6, [r1, #0]
  400450:	684d      	ldr	r5, [r1, #4]
  400452:	890c      	ldrh	r4, [r1, #8]
	uint16 cpu16Sz		= u16Sz;
	uint8 *cppu8Mosi	= pu8Mosi;
	uint8 *cppu8Miso	= pu8Miso;
	*/
	
	uint8 u8Dummy = 0;
  400454:	2300      	movs	r3, #0
  400456:	f88d 3004 	strb.w	r3, [sp, #4]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
	uint16_t txd_data = 0;
	uint16_t rxd_data = 0;
  40045a:	f8ad 3006 	strh.w	r3, [sp, #6]
	uint8_t uc_pcs;

	if (!pu8Mosi) {
  40045e:	b136      	cbz	r6, 40046e <nm_bus_ioctl+0x2a>
		pu8Mosi = &u8Dummy;
		u8SkipMosi = 1;
	}
	else if(!pu8Miso) {
  400460:	2d00      	cmp	r5, #0
  400462:	d133      	bne.n	4004cc <nm_bus_ioctl+0x88>
		pu8Miso = &u8Dummy;
		u8SkipMiso = 1;
  400464:	f04f 0801 	mov.w	r8, #1
	uint8 *cppu8Mosi	= pu8Mosi;
	uint8 *cppu8Miso	= pu8Miso;
	*/
	
	uint8 u8Dummy = 0;
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
  400468:	4699      	mov	r9, r3
	if (!pu8Mosi) {
		pu8Mosi = &u8Dummy;
		u8SkipMosi = 1;
	}
	else if(!pu8Miso) {
		pu8Miso = &u8Dummy;
  40046a:	ad01      	add	r5, sp, #4
  40046c:	e004      	b.n	400478 <nm_bus_ioctl+0x34>
	uint8 *cppu8Mosi	= pu8Mosi;
	uint8 *cppu8Miso	= pu8Miso;
	*/
	
	uint8 u8Dummy = 0;
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
  40046e:	f04f 0800 	mov.w	r8, #0
	uint16_t rxd_data = 0;
	uint8_t uc_pcs;

	if (!pu8Mosi) {
		pu8Mosi = &u8Dummy;
		u8SkipMosi = 1;
  400472:	f04f 0901 	mov.w	r9, #1
	uint16_t txd_data = 0;
	uint16_t rxd_data = 0;
	uint8_t uc_pcs;

	if (!pu8Mosi) {
		pu8Mosi = &u8Dummy;
  400476:	ae01      	add	r6, sp, #4
	}
	else {
		return M2M_ERR_BUS_FAIL;
	}
	
	SPI_ASSERT_CS();
  400478:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40047c:	4b1c      	ldr	r3, [pc, #112]	; (4004f0 <nm_bus_ioctl+0xac>)
  40047e:	635a      	str	r2, [r3, #52]	; 0x34
	while (u16Sz) {
  400480:	b1f4      	cbz	r4, 4004c0 <nm_bus_ioctl+0x7c>
		txd_data = *pu8Mosi;
		spi_write(CONF_WINC_SPI, txd_data, 0, 0);
  400482:	4f1c      	ldr	r7, [pc, #112]	; (4004f4 <nm_bus_ioctl+0xb0>)
  400484:	f8df b084 	ldr.w	fp, [pc, #132]	; 40050c <nm_bus_ioctl+0xc8>
		
		/* Read SPI master data register. */
		spi_read(CONF_WINC_SPI, &rxd_data, &uc_pcs);
  400488:	f8df a084 	ldr.w	sl, [pc, #132]	; 400510 <nm_bus_ioctl+0xcc>
	}
	
	SPI_ASSERT_CS();
	while (u16Sz) {
		txd_data = *pu8Mosi;
		spi_write(CONF_WINC_SPI, txd_data, 0, 0);
  40048c:	2300      	movs	r3, #0
  40048e:	461a      	mov	r2, r3
  400490:	7831      	ldrb	r1, [r6, #0]
  400492:	4638      	mov	r0, r7
  400494:	47d8      	blx	fp
		
		/* Read SPI master data register. */
		spi_read(CONF_WINC_SPI, &rxd_data, &uc_pcs);
  400496:	f10d 0205 	add.w	r2, sp, #5
  40049a:	f10d 0106 	add.w	r1, sp, #6
  40049e:	4638      	mov	r0, r7
  4004a0:	47d0      	blx	sl
		*pu8Miso = rxd_data;
  4004a2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  4004a6:	702b      	strb	r3, [r5, #0]

		u16Sz--;
  4004a8:	3c01      	subs	r4, #1
  4004aa:	b2a4      	uxth	r4, r4
		if (!u8SkipMiso)
  4004ac:	f1b8 0f00 	cmp.w	r8, #0
  4004b0:	d100      	bne.n	4004b4 <nm_bus_ioctl+0x70>
			pu8Miso++;
  4004b2:	3501      	adds	r5, #1
		if (!u8SkipMosi)
  4004b4:	f1b9 0f00 	cmp.w	r9, #0
  4004b8:	d100      	bne.n	4004bc <nm_bus_ioctl+0x78>
			pu8Mosi++;
  4004ba:	3601      	adds	r6, #1
	else {
		return M2M_ERR_BUS_FAIL;
	}
	
	SPI_ASSERT_CS();
	while (u16Sz) {
  4004bc:	2c00      	cmp	r4, #0
  4004be:	d1e5      	bne.n	40048c <nm_bus_ioctl+0x48>
		if (!u8SkipMiso)
			pu8Miso++;
		if (!u8SkipMosi)
			pu8Mosi++;
	}
	SPI_DEASSERT_CS();
  4004c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4004c4:	4b0a      	ldr	r3, [pc, #40]	; (4004f0 <nm_bus_ioctl+0xac>)
  4004c6:	631a      	str	r2, [r3, #48]	; 0x30
	printf(" / MISO: 0x");
	for(i = 0; i<cpu16Sz; i++)
		printf("%x", *(cppu8Miso+i) );
	printf(" / Size %d \n", cpu16Sz);
*/
	return M2M_SUCCESS;
  4004c8:	2000      	movs	r0, #0
  4004ca:	e00e      	b.n	4004ea <nm_bus_ioctl+0xa6>
	else if(!pu8Miso) {
		pu8Miso = &u8Dummy;
		u8SkipMiso = 1;
	}
	else {
		return M2M_ERR_BUS_FAIL;
  4004cc:	f06f 0005 	mvn.w	r0, #5
#elif CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
		}
		break;
  4004d0:	e00b      	b.n	4004ea <nm_bus_ioctl+0xa6>
#endif
		default:
			s8Ret = -1;
			M2M_ERR("Invalid IOCTL command!\n");
  4004d2:	f240 121f 	movw	r2, #287	; 0x11f
  4004d6:	4908      	ldr	r1, [pc, #32]	; (4004f8 <nm_bus_ioctl+0xb4>)
  4004d8:	4808      	ldr	r0, [pc, #32]	; (4004fc <nm_bus_ioctl+0xb8>)
  4004da:	4c09      	ldr	r4, [pc, #36]	; (400500 <nm_bus_ioctl+0xbc>)
  4004dc:	47a0      	blx	r4
  4004de:	4809      	ldr	r0, [pc, #36]	; (400504 <nm_bus_ioctl+0xc0>)
  4004e0:	47a0      	blx	r4
  4004e2:	4809      	ldr	r0, [pc, #36]	; (400508 <nm_bus_ioctl+0xc4>)
  4004e4:	47a0      	blx	r4
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
		}
		break;
#endif
		default:
			s8Ret = -1;
  4004e6:	f04f 30ff 	mov.w	r0, #4294967295
			M2M_ERR("Invalid IOCTL command!\n");
			break;
	}

	return s8Ret;
}
  4004ea:	b003      	add	sp, #12
  4004ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4004f0:	400e1400 	.word	0x400e1400
  4004f4:	40008000 	.word	0x40008000
  4004f8:	004074c0 	.word	0x004074c0
  4004fc:	00407490 	.word	0x00407490
  400500:	00404475 	.word	0x00404475
  400504:	004074a4 	.word	0x004074a4
  400508:	004074bc 	.word	0x004074bc
  40050c:	004038ed 	.word	0x004038ed
  400510:	004038b9 	.word	0x004038b9

00400514 <nm_bus_deinit>:
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  400514:	2202      	movs	r2, #2
  400516:	4b0e      	ldr	r3, [pc, #56]	; (400550 <nm_bus_deinit+0x3c>)
  400518:	601a      	str	r2, [r3, #0]
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40051a:	f503 2359 	add.w	r3, r3, #888832	; 0xd9000
  40051e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  400522:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400526:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400528:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40052c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  400530:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400532:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400536:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40053a:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40053c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400540:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400544:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400546:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_dir(CONF_WINC_SPI_MOSI_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_MISO_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_CLK_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_CS_GPIO, IOPORT_DIR_INPUT);
	return M2M_SUCCESS;
}
  40054a:	2000      	movs	r0, #0
  40054c:	4770      	bx	lr
  40054e:	bf00      	nop
  400550:	40008000 	.word	0x40008000

00400554 <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
  400554:	b13a      	cbz	r2, 400566 <m2m_memcpy+0x12>
  400556:	3901      	subs	r1, #1
  400558:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
  40055a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  40055e:	f800 3b01 	strb.w	r3, [r0], #1
		pDst++;
		pSrc++;
	}while(--sz);
  400562:	4290      	cmp	r0, r2
  400564:	d1f9      	bne.n	40055a <m2m_memcpy+0x6>
  400566:	4770      	bx	lr

00400568 <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
  400568:	b122      	cbz	r2, 400574 <m2m_memset+0xc>
  40056a:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
  40056c:	f800 1b01 	strb.w	r1, [r0], #1
		pBuf++;
	}while(--sz);
  400570:	4290      	cmp	r0, r2
  400572:	d1fb      	bne.n	40056c <m2m_memset+0x4>
  400574:	4770      	bx	lr
  400576:	bf00      	nop

00400578 <m2m_strlen>:
}

uint16 m2m_strlen(uint8 * pcStr)
{
  400578:	4603      	mov	r3, r0
	uint16	u16StrLen = 0;
	while(*pcStr)
  40057a:	7802      	ldrb	r2, [r0, #0]
  40057c:	b13a      	cbz	r2, 40058e <m2m_strlen+0x16>
  40057e:	2000      	movs	r0, #0
	{
		u16StrLen ++;
  400580:	3001      	adds	r0, #1
  400582:	b280      	uxth	r0, r0
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
	while(*pcStr)
  400584:	f813 2f01 	ldrb.w	r2, [r3, #1]!
  400588:	2a00      	cmp	r2, #0
  40058a:	d1f9      	bne.n	400580 <m2m_strlen+0x8>
  40058c:	4770      	bx	lr
	}while(--sz);
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
  40058e:	2000      	movs	r0, #0
	{
		u16StrLen ++;
		pcStr++;
	}
	return u16StrLen;
}
  400590:	4770      	bx	lr
  400592:	bf00      	nop

00400594 <isr>:
tpfHifCallBack pfHifCb = NULL;
tpfHifCallBack pfCryptoCb = NULL;

static void isr(void)
{
	gu8Interrupt++;
  400594:	4a02      	ldr	r2, [pc, #8]	; (4005a0 <isr+0xc>)
  400596:	7813      	ldrb	r3, [r2, #0]
  400598:	3301      	adds	r3, #1
  40059a:	b2db      	uxtb	r3, r3
  40059c:	7013      	strb	r3, [r2, #0]
  40059e:	4770      	bx	lr
  4005a0:	2040091c 	.word	0x2040091c

004005a4 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
  4005a4:	4770      	bx	lr
  4005a6:	bf00      	nop

004005a8 <hif_set_rx_done>:
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
static sint8 hif_set_rx_done(void)
{
  4005a8:	b500      	push	{lr}
  4005aa:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
  4005ac:	2001      	movs	r0, #1
  4005ae:	4b0b      	ldr	r3, [pc, #44]	; (4005dc <hif_set_rx_done+0x34>)
  4005b0:	4798      	blx	r3
#endif

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
  4005b2:	a901      	add	r1, sp, #4
  4005b4:	f241 0070 	movw	r0, #4208	; 0x1070
  4005b8:	4b09      	ldr	r3, [pc, #36]	; (4005e0 <hif_set_rx_done+0x38>)
  4005ba:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  4005bc:	4603      	mov	r3, r0
  4005be:	b940      	cbnz	r0, 4005d2 <hif_set_rx_done+0x2a>
	//reg &= ~(1<<0);

	/* Set RX Done */
	reg |= (1<<1);
  4005c0:	9901      	ldr	r1, [sp, #4]
  4005c2:	f041 0102 	orr.w	r1, r1, #2
  4005c6:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
  4005c8:	f241 0070 	movw	r0, #4208	; 0x1070
  4005cc:	4b05      	ldr	r3, [pc, #20]	; (4005e4 <hif_set_rx_done+0x3c>)
  4005ce:	4798      	blx	r3
  4005d0:	4603      	mov	r3, r0
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;

}
  4005d2:	4618      	mov	r0, r3
  4005d4:	b003      	add	sp, #12
  4005d6:	f85d fb04 	ldr.w	pc, [sp], #4
  4005da:	bf00      	nop
  4005dc:	00400301 	.word	0x00400301
  4005e0:	00401c45 	.word	0x00401c45
  4005e4:	00401c51 	.word	0x00401c51

004005e8 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
  4005e8:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	if(gu8ChipSleep == 0)
  4005ea:	4b11      	ldr	r3, [pc, #68]	; (400630 <hif_chip_wake+0x48>)
  4005ec:	781b      	ldrb	r3, [r3, #0]
  4005ee:	f013 0fff 	tst.w	r3, #255	; 0xff
  4005f2:	d115      	bne.n	400620 <hif_chip_wake+0x38>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
  4005f4:	4b0f      	ldr	r3, [pc, #60]	; (400634 <hif_chip_wake+0x4c>)
  4005f6:	781b      	ldrb	r3, [r3, #0]
  4005f8:	b2db      	uxtb	r3, r3
  4005fa:	2b03      	cmp	r3, #3
  4005fc:	d004      	beq.n	400608 <hif_chip_wake+0x20>
  4005fe:	4b0d      	ldr	r3, [pc, #52]	; (400634 <hif_chip_wake+0x4c>)
  400600:	781b      	ldrb	r3, [r3, #0]
  400602:	b2db      	uxtb	r3, r3
  400604:	2b04      	cmp	r3, #4
  400606:	d10b      	bne.n	400620 <hif_chip_wake+0x38>
		{
			ret = nm_clkless_wake();
  400608:	4b0b      	ldr	r3, [pc, #44]	; (400638 <hif_chip_wake+0x50>)
  40060a:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  40060c:	4603      	mov	r3, r0
  40060e:	b968      	cbnz	r0, 40062c <hif_chip_wake+0x44>
			ret = nm_write_reg(WAKE_REG, WAKE_VALUE);
  400610:	f245 6178 	movw	r1, #22136	; 0x5678
  400614:	f241 0074 	movw	r0, #4212	; 0x1074
  400618:	4b08      	ldr	r3, [pc, #32]	; (40063c <hif_chip_wake+0x54>)
  40061a:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  40061c:	4603      	mov	r3, r0
  40061e:	b928      	cbnz	r0, 40062c <hif_chip_wake+0x44>
		}
		else
		{
		}
	}
	gu8ChipSleep++;
  400620:	4a03      	ldr	r2, [pc, #12]	; (400630 <hif_chip_wake+0x48>)
  400622:	7813      	ldrb	r3, [r2, #0]
  400624:	3301      	adds	r3, #1
  400626:	b2db      	uxtb	r3, r3
  400628:	7013      	strb	r3, [r2, #0]
  40062a:	2300      	movs	r3, #0
ERR1:
	return ret;
}
  40062c:	4618      	mov	r0, r3
  40062e:	bd08      	pop	{r3, pc}
  400630:	20400938 	.word	0x20400938
  400634:	20400928 	.word	0x20400928
  400638:	004016c1 	.word	0x004016c1
  40063c:	00401c51 	.word	0x00401c51

00400640 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
  400640:	b500      	push	{lr}
  400642:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;

	if(gu8ChipSleep >= 1)
  400644:	4b1d      	ldr	r3, [pc, #116]	; (4006bc <hif_chip_sleep+0x7c>)
  400646:	781b      	ldrb	r3, [r3, #0]
  400648:	f013 0fff 	tst.w	r3, #255	; 0xff
  40064c:	d004      	beq.n	400658 <hif_chip_sleep+0x18>
	{
		gu8ChipSleep--;
  40064e:	4a1b      	ldr	r2, [pc, #108]	; (4006bc <hif_chip_sleep+0x7c>)
  400650:	7813      	ldrb	r3, [r2, #0]
  400652:	3b01      	subs	r3, #1
  400654:	b2db      	uxtb	r3, r3
  400656:	7013      	strb	r3, [r2, #0]
	}
	
	if(gu8ChipSleep == 0)
  400658:	4b18      	ldr	r3, [pc, #96]	; (4006bc <hif_chip_sleep+0x7c>)
  40065a:	781b      	ldrb	r3, [r3, #0]
  40065c:	f013 0fff 	tst.w	r3, #255	; 0xff
  400660:	d125      	bne.n	4006ae <hif_chip_sleep+0x6e>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
  400662:	4b17      	ldr	r3, [pc, #92]	; (4006c0 <hif_chip_sleep+0x80>)
  400664:	781b      	ldrb	r3, [r3, #0]
  400666:	b2db      	uxtb	r3, r3
  400668:	2b03      	cmp	r3, #3
  40066a:	d004      	beq.n	400676 <hif_chip_sleep+0x36>
  40066c:	4b14      	ldr	r3, [pc, #80]	; (4006c0 <hif_chip_sleep+0x80>)
  40066e:	781b      	ldrb	r3, [r3, #0]
  400670:	b2db      	uxtb	r3, r3
  400672:	2b04      	cmp	r3, #4
  400674:	d11d      	bne.n	4006b2 <hif_chip_sleep+0x72>
		{
			uint32 reg = 0;
  400676:	2300      	movs	r3, #0
  400678:	9301      	str	r3, [sp, #4]
			ret = nm_write_reg(WAKE_REG, SLEEP_VALUE);
  40067a:	f244 3121 	movw	r1, #17185	; 0x4321
  40067e:	f241 0074 	movw	r0, #4212	; 0x1074
  400682:	4b10      	ldr	r3, [pc, #64]	; (4006c4 <hif_chip_sleep+0x84>)
  400684:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  400686:	4603      	mov	r3, r0
  400688:	b9a0      	cbnz	r0, 4006b4 <hif_chip_sleep+0x74>
			/* Clear bit 1 */
			ret = nm_read_reg_with_ret(0x1, &reg);
  40068a:	a901      	add	r1, sp, #4
  40068c:	2001      	movs	r0, #1
  40068e:	4b0e      	ldr	r3, [pc, #56]	; (4006c8 <hif_chip_sleep+0x88>)
  400690:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  400692:	4603      	mov	r3, r0
  400694:	b970      	cbnz	r0, 4006b4 <hif_chip_sleep+0x74>
			if(reg&0x2)
  400696:	9901      	ldr	r1, [sp, #4]
  400698:	f011 0f02 	tst.w	r1, #2
  40069c:	d00a      	beq.n	4006b4 <hif_chip_sleep+0x74>
			{
				reg &=~(1 << 1);
  40069e:	f021 0102 	bic.w	r1, r1, #2
  4006a2:	9101      	str	r1, [sp, #4]
				ret = nm_write_reg(0x1, reg);
  4006a4:	2001      	movs	r0, #1
  4006a6:	4b07      	ldr	r3, [pc, #28]	; (4006c4 <hif_chip_sleep+0x84>)
  4006a8:	4798      	blx	r3
  4006aa:	4603      	mov	r3, r0
  4006ac:	e002      	b.n	4006b4 <hif_chip_sleep+0x74>
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
	sint8 ret = M2M_SUCCESS;
  4006ae:	2300      	movs	r3, #0
  4006b0:	e000      	b.n	4006b4 <hif_chip_sleep+0x74>
  4006b2:	2300      	movs	r3, #0
		{
		}
	}
ERR1:
	return ret;
}
  4006b4:	4618      	mov	r0, r3
  4006b6:	b003      	add	sp, #12
  4006b8:	f85d fb04 	ldr.w	pc, [sp], #4
  4006bc:	20400938 	.word	0x20400938
  4006c0:	20400928 	.word	0x20400928
  4006c4:	00401c51 	.word	0x00401c51
  4006c8:	00401c45 	.word	0x00401c45

004006cc <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
  4006cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4006d0:	b087      	sub	sp, #28
  4006d2:	4680      	mov	r8, r0
  4006d4:	460f      	mov	r7, r1
  4006d6:	4692      	mov	sl, r2
  4006d8:	4699      	mov	r9, r3
  4006da:	9c10      	ldr	r4, [sp, #64]	; 0x40
  4006dc:	f8bd 6044 	ldrh.w	r6, [sp, #68]	; 0x44
  4006e0:	f8bd 5048 	ldrh.w	r5, [sp, #72]	; 0x48
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
  4006e4:	f001 037f 	and.w	r3, r1, #127	; 0x7f
  4006e8:	f88d 3015 	strb.w	r3, [sp, #21]
	strHif.u8Gid		= u8Gid;
  4006ec:	f88d 0014 	strb.w	r0, [sp, #20]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
  4006f0:	2308      	movs	r3, #8
  4006f2:	f8ad 3016 	strh.w	r3, [sp, #22]
	if(pu8DataBuf != NULL)
  4006f6:	b144      	cbz	r4, 40070a <hif_send+0x3e>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
  4006f8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  4006fc:	fa16 f383 	uxtah	r3, r6, r3
  400700:	442b      	add	r3, r5
  400702:	b29b      	uxth	r3, r3
  400704:	f8ad 3016 	strh.w	r3, [sp, #22]
  400708:	e006      	b.n	400718 <hif_send+0x4c>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
  40070a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  40070e:	fa19 f383 	uxtah	r3, r9, r3
  400712:	b29b      	uxth	r3, r3
  400714:	f8ad 3016 	strh.w	r3, [sp, #22]
	}
	ret = hif_chip_wake();
  400718:	4b57      	ldr	r3, [pc, #348]	; (400878 <hif_send+0x1ac>)
  40071a:	4798      	blx	r3
	if(ret == M2M_SUCCESS)
  40071c:	4683      	mov	fp, r0
  40071e:	2800      	cmp	r0, #0
  400720:	f040 8095 	bne.w	40084e <hif_send+0x182>
	{
		volatile uint32 reg, dma_addr = 0;
  400724:	2300      	movs	r3, #0
  400726:	9303      	str	r3, [sp, #12]
		volatile uint16 cnt = 0;
  400728:	f8ad 3006 	strh.w	r3, [sp, #6]

		reg = 0UL;
  40072c:	9302      	str	r3, [sp, #8]
		reg |= (uint32)u8Gid;
  40072e:	9b02      	ldr	r3, [sp, #8]
  400730:	ea48 0303 	orr.w	r3, r8, r3
  400734:	9302      	str	r3, [sp, #8]
		reg |= ((uint32)u8Opcode<<8);
  400736:	9b02      	ldr	r3, [sp, #8]
  400738:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
  40073c:	9702      	str	r7, [sp, #8]
		reg |= ((uint32)strHif.u16Length<<16);
  40073e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  400742:	9b02      	ldr	r3, [sp, #8]
  400744:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  400748:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(NMI_STATE_REG,reg);
  40074a:	9902      	ldr	r1, [sp, #8]
  40074c:	f241 008c 	movw	r0, #4236	; 0x108c
  400750:	4b4a      	ldr	r3, [pc, #296]	; (40087c <hif_send+0x1b0>)
  400752:	4798      	blx	r3
		if(M2M_SUCCESS != ret) goto ERR1;
  400754:	4683      	mov	fp, r0
  400756:	2800      	cmp	r0, #0
  400758:	f040 808a 	bne.w	400870 <hif_send+0x1a4>


		reg = 0;
  40075c:	2300      	movs	r3, #0
  40075e:	9302      	str	r3, [sp, #8]
		reg |= (1<<1);
  400760:	9b02      	ldr	r3, [sp, #8]
  400762:	f043 0302 	orr.w	r3, r3, #2
  400766:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
  400768:	9902      	ldr	r1, [sp, #8]
  40076a:	f241 0078 	movw	r0, #4216	; 0x1078
  40076e:	4b43      	ldr	r3, [pc, #268]	; (40087c <hif_send+0x1b0>)
  400770:	4798      	blx	r3
		if(M2M_SUCCESS != ret) goto ERR1;
  400772:	4683      	mov	fp, r0
  400774:	2800      	cmp	r0, #0
  400776:	d17b      	bne.n	400870 <hif_send+0x1a4>
		dma_addr = 0;
  400778:	2300      	movs	r3, #0
  40077a:	9303      	str	r3, [sp, #12]

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
  40077c:	f8ad 3006 	strh.w	r3, [sp, #6]
  400780:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  400784:	b29b      	uxth	r3, r3
  400786:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  40078a:	d21e      	bcs.n	4007ca <hif_send+0xfe>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
  40078c:	f241 0878 	movw	r8, #4216	; 0x1078
  400790:	4f3b      	ldr	r7, [pc, #236]	; (400880 <hif_send+0x1b4>)
  400792:	a902      	add	r1, sp, #8
  400794:	4640      	mov	r0, r8
  400796:	47b8      	blx	r7
			if(ret != M2M_SUCCESS) break;
  400798:	b9b8      	cbnz	r0, 4007ca <hif_send+0xfe>
			if (!(reg & 0x2))
  40079a:	9b02      	ldr	r3, [sp, #8]
  40079c:	f013 0f02 	tst.w	r3, #2
  4007a0:	d107      	bne.n	4007b2 <hif_send+0xe6>
			{
				ret = nm_read_reg_with_ret(0x150400,(uint32 *)&dma_addr);
  4007a2:	a903      	add	r1, sp, #12
  4007a4:	4837      	ldr	r0, [pc, #220]	; (400884 <hif_send+0x1b8>)
  4007a6:	4b36      	ldr	r3, [pc, #216]	; (400880 <hif_send+0x1b4>)
  4007a8:	4798      	blx	r3
				if(ret != M2M_SUCCESS) {
  4007aa:	b170      	cbz	r0, 4007ca <hif_send+0xfe>
					/*in case of read error clear the dma address and return error*/
					dma_addr = 0;
  4007ac:	2300      	movs	r3, #0
  4007ae:	9303      	str	r3, [sp, #12]
  4007b0:	e00b      	b.n	4007ca <hif_send+0xfe>
		if(M2M_SUCCESS != ret) goto ERR1;
		dma_addr = 0;

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
  4007b2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  4007b6:	3301      	adds	r3, #1
  4007b8:	b29b      	uxth	r3, r3
  4007ba:	f8ad 3006 	strh.w	r3, [sp, #6]
  4007be:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  4007c2:	b29b      	uxth	r3, r3
  4007c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  4007c8:	d3e3      	bcc.n	400792 <hif_send+0xc6>
				break;
			}
		}
		//nm_bsp_interrupt_ctrl(1);

		if (dma_addr != 0)
  4007ca:	9b03      	ldr	r3, [sp, #12]
  4007cc:	2b00      	cmp	r3, #0
  4007ce:	d04d      	beq.n	40086c <hif_send+0x1a0>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
  4007d0:	9b03      	ldr	r3, [sp, #12]
  4007d2:	9304      	str	r3, [sp, #16]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
  4007d4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  4007d8:	b29b      	uxth	r3, r3
  4007da:	f8ad 3016 	strh.w	r3, [sp, #22]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
  4007de:	9804      	ldr	r0, [sp, #16]
  4007e0:	2208      	movs	r2, #8
  4007e2:	a905      	add	r1, sp, #20
  4007e4:	4b28      	ldr	r3, [pc, #160]	; (400888 <hif_send+0x1bc>)
  4007e6:	4798      	blx	r3
		#ifdef CONF_WINC_USE_I2C
			nm_bsp_sleep(1);
		#endif
			if(M2M_SUCCESS != ret) goto ERR1;
  4007e8:	4683      	mov	fp, r0
  4007ea:	2800      	cmp	r0, #0
  4007ec:	d140      	bne.n	400870 <hif_send+0x1a4>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
  4007ee:	9b04      	ldr	r3, [sp, #16]
  4007f0:	3308      	adds	r3, #8
  4007f2:	9304      	str	r3, [sp, #16]
			if(pu8CtrlBuf != NULL)
  4007f4:	f1ba 0f00 	cmp.w	sl, #0
  4007f8:	d00a      	beq.n	400810 <hif_send+0x144>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
  4007fa:	9804      	ldr	r0, [sp, #16]
  4007fc:	464a      	mov	r2, r9
  4007fe:	4651      	mov	r1, sl
  400800:	4b21      	ldr	r3, [pc, #132]	; (400888 <hif_send+0x1bc>)
  400802:	4798      	blx	r3
			#ifdef CONF_WINC_USE_I2C
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  400804:	4683      	mov	fp, r0
  400806:	2800      	cmp	r0, #0
  400808:	d132      	bne.n	400870 <hif_send+0x1a4>
				u32CurrAddr += u16CtrlBufSize;
  40080a:	9b04      	ldr	r3, [sp, #16]
  40080c:	444b      	add	r3, r9
  40080e:	9304      	str	r3, [sp, #16]
			}
			if(pu8DataBuf != NULL)
  400810:	b174      	cbz	r4, 400830 <hif_send+0x164>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
  400812:	9b04      	ldr	r3, [sp, #16]
  400814:	ebc9 0505 	rsb	r5, r9, r5
  400818:	441d      	add	r5, r3
  40081a:	9504      	str	r5, [sp, #16]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
  40081c:	9804      	ldr	r0, [sp, #16]
  40081e:	4632      	mov	r2, r6
  400820:	4621      	mov	r1, r4
  400822:	4b19      	ldr	r3, [pc, #100]	; (400888 <hif_send+0x1bc>)
  400824:	4798      	blx	r3
			#ifdef CONF_WINC_USE_I2C	
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  400826:	4683      	mov	fp, r0
  400828:	bb10      	cbnz	r0, 400870 <hif_send+0x1a4>
				u32CurrAddr += u16DataSize;
  40082a:	9b04      	ldr	r3, [sp, #16]
  40082c:	441e      	add	r6, r3
  40082e:	9604      	str	r6, [sp, #16]
			}

			reg = dma_addr << 2;
  400830:	9b03      	ldr	r3, [sp, #12]
  400832:	009b      	lsls	r3, r3, #2
  400834:	9302      	str	r3, [sp, #8]
			reg |= (1 << 1);
  400836:	9b02      	ldr	r3, [sp, #8]
  400838:	f043 0302 	orr.w	r3, r3, #2
  40083c:	9302      	str	r3, [sp, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
  40083e:	9902      	ldr	r1, [sp, #8]
  400840:	f241 006c 	movw	r0, #4204	; 0x106c
  400844:	4b0d      	ldr	r3, [pc, #52]	; (40087c <hif_send+0x1b0>)
  400846:	4798      	blx	r3
			if(M2M_SUCCESS != ret) goto ERR1;
  400848:	4683      	mov	fp, r0
  40084a:	b988      	cbnz	r0, 400870 <hif_send+0x1a4>
  40084c:	e00a      	b.n	400864 <hif_send+0x198>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
  40084e:	f240 129f 	movw	r2, #415	; 0x19f
  400852:	490e      	ldr	r1, [pc, #56]	; (40088c <hif_send+0x1c0>)
  400854:	480e      	ldr	r0, [pc, #56]	; (400890 <hif_send+0x1c4>)
  400856:	4c0f      	ldr	r4, [pc, #60]	; (400894 <hif_send+0x1c8>)
  400858:	47a0      	blx	r4
  40085a:	480f      	ldr	r0, [pc, #60]	; (400898 <hif_send+0x1cc>)
  40085c:	47a0      	blx	r4
  40085e:	480f      	ldr	r0, [pc, #60]	; (40089c <hif_send+0x1d0>)
  400860:	47a0      	blx	r4
		goto ERR1;
  400862:	e005      	b.n	400870 <hif_send+0x1a4>
	}
	ret = hif_chip_sleep();
  400864:	4b0e      	ldr	r3, [pc, #56]	; (4008a0 <hif_send+0x1d4>)
  400866:	4798      	blx	r3
  400868:	4683      	mov	fp, r0
  40086a:	e001      	b.n	400870 <hif_send+0x1a4>
			if(M2M_SUCCESS != ret) goto ERR1;
		}
		else
		{
			M2M_DBG("Failed to alloc rx size\r");
			ret =  M2M_ERR_MEM_ALLOC;
  40086c:	f06f 0b02 	mvn.w	fp, #2
	}
	ret = hif_chip_sleep();

ERR1:
	return ret;
}
  400870:	4658      	mov	r0, fp
  400872:	b007      	add	sp, #28
  400874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400878:	004005e9 	.word	0x004005e9
  40087c:	00401c51 	.word	0x00401c51
  400880:	00401c45 	.word	0x00401c45
  400884:	00150400 	.word	0x00150400
  400888:	00401cbd 	.word	0x00401cbd
  40088c:	00407728 	.word	0x00407728
  400890:	00407490 	.word	0x00407490
  400894:	00404475 	.word	0x00404475
  400898:	004074e4 	.word	0x004074e4
  40089c:	004074bc 	.word	0x004074bc
  4008a0:	00400641 	.word	0x00400641

004008a4 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
  4008a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4008a8:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
  4008aa:	f8df 92fc 	ldr.w	r9, [pc, #764]	; 400ba8 <hif_handle_isr+0x304>
{
	sint8 ret = M2M_ERR_BUS_FAIL;
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = hif_chip_wake();
  4008ae:	4fa3      	ldr	r7, [pc, #652]	; (400b3c <hif_handle_isr+0x298>)
			goto ERR1;
		}
	}
	else
	{
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
  4008b0:	f8df 82f8 	ldr.w	r8, [pc, #760]	; 400bac <hif_handle_isr+0x308>
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
  4008b4:	4ea2      	ldr	r6, [pc, #648]	; (400b40 <hif_handle_isr+0x29c>)

sint8 hif_handle_isr(void)
{
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
  4008b6:	e17b      	b.n	400bb0 <hif_handle_isr+0x30c>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gu8Interrupt--;
  4008b8:	f899 3000 	ldrb.w	r3, [r9]
  4008bc:	3b01      	subs	r3, #1
  4008be:	b2db      	uxtb	r3, r3
  4008c0:	f889 3000 	strb.w	r3, [r9]
{
	sint8 ret = M2M_ERR_BUS_FAIL;
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = hif_chip_wake();
  4008c4:	47b8      	blx	r7
	if(ret == M2M_SUCCESS)
  4008c6:	4604      	mov	r4, r0
  4008c8:	2800      	cmp	r0, #0
  4008ca:	f040 811a 	bne.w	400b02 <hif_handle_isr+0x25e>
	{
		ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
  4008ce:	a903      	add	r1, sp, #12
  4008d0:	f241 0070 	movw	r0, #4208	; 0x1070
  4008d4:	4b9b      	ldr	r3, [pc, #620]	; (400b44 <hif_handle_isr+0x2a0>)
  4008d6:	4798      	blx	r3
		if(M2M_SUCCESS == ret)
  4008d8:	4604      	mov	r4, r0
  4008da:	2800      	cmp	r0, #0
  4008dc:	f040 8106 	bne.w	400aec <hif_handle_isr+0x248>
		{
			if(reg & 0x1)	/* New interrupt has been received */
  4008e0:	9b03      	ldr	r3, [sp, #12]
  4008e2:	f013 0f01 	tst.w	r3, #1
  4008e6:	f000 80f5 	beq.w	400ad4 <hif_handle_isr+0x230>
			{
				uint16 size;

				nm_bsp_interrupt_ctrl(0);
  4008ea:	4b97      	ldr	r3, [pc, #604]	; (400b48 <hif_handle_isr+0x2a4>)
  4008ec:	4798      	blx	r3
				/*Clearing RX interrupt*/
				reg &= ~(1<<0);
  4008ee:	9903      	ldr	r1, [sp, #12]
  4008f0:	f021 0101 	bic.w	r1, r1, #1
  4008f4:	9103      	str	r1, [sp, #12]
				ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
  4008f6:	f241 0070 	movw	r0, #4208	; 0x1070
  4008fa:	4b94      	ldr	r3, [pc, #592]	; (400b4c <hif_handle_isr+0x2a8>)
  4008fc:	4798      	blx	r3
				if(ret != M2M_SUCCESS)goto ERR1;
  4008fe:	4604      	mov	r4, r0
  400900:	2800      	cmp	r0, #0
  400902:	f040 810e 	bne.w	400b22 <hif_handle_isr+0x27e>
				gu8HifSizeDone = 0;
  400906:	2200      	movs	r2, #0
  400908:	4b91      	ldr	r3, [pc, #580]	; (400b50 <hif_handle_isr+0x2ac>)
  40090a:	701a      	strb	r2, [r3, #0]
				size = (uint16)((reg >> 2) & 0xfff);
  40090c:	9d03      	ldr	r5, [sp, #12]
  40090e:	f3c5 058b 	ubfx	r5, r5, #2, #12
				if (size > 0) {
  400912:	2d00      	cmp	r5, #0
  400914:	f000 80d1 	beq.w	400aba <hif_handle_isr+0x216>
					uint32 address = 0;
  400918:	a906      	add	r1, sp, #24
  40091a:	f841 2d04 	str.w	r2, [r1, #-4]!
					/**
					start bus transfer
					**/
					ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
  40091e:	f241 0084 	movw	r0, #4228	; 0x1084
  400922:	4b88      	ldr	r3, [pc, #544]	; (400b44 <hif_handle_isr+0x2a0>)
  400924:	4798      	blx	r3
					if(M2M_SUCCESS != ret)
  400926:	4604      	mov	r4, r0
  400928:	b168      	cbz	r0, 400946 <hif_handle_isr+0xa2>
					{
						M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
  40092a:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
  40092e:	4641      	mov	r1, r8
  400930:	4630      	mov	r0, r6
  400932:	4d88      	ldr	r5, [pc, #544]	; (400b54 <hif_handle_isr+0x2b0>)
  400934:	47a8      	blx	r5
  400936:	4888      	ldr	r0, [pc, #544]	; (400b58 <hif_handle_isr+0x2b4>)
  400938:	47a8      	blx	r5
  40093a:	4888      	ldr	r0, [pc, #544]	; (400b5c <hif_handle_isr+0x2b8>)
  40093c:	47a8      	blx	r5
						nm_bsp_interrupt_ctrl(1);
  40093e:	2001      	movs	r0, #1
  400940:	4b81      	ldr	r3, [pc, #516]	; (400b48 <hif_handle_isr+0x2a4>)
  400942:	4798      	blx	r3
  400944:	e0eb      	b.n	400b1e <hif_handle_isr+0x27a>
						goto ERR1;
					}
					ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
  400946:	2204      	movs	r2, #4
  400948:	a904      	add	r1, sp, #16
  40094a:	9805      	ldr	r0, [sp, #20]
  40094c:	4b84      	ldr	r3, [pc, #528]	; (400b60 <hif_handle_isr+0x2bc>)
  40094e:	4798      	blx	r3
					strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
  400950:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  400954:	b29b      	uxth	r3, r3
  400956:	f8ad 3012 	strh.w	r3, [sp, #18]
					if(M2M_SUCCESS != ret)
  40095a:	4604      	mov	r4, r0
  40095c:	b168      	cbz	r0, 40097a <hif_handle_isr+0xd6>
					{
						M2M_ERR("(hif) address bus fail\n");
  40095e:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
  400962:	4641      	mov	r1, r8
  400964:	4630      	mov	r0, r6
  400966:	4d7b      	ldr	r5, [pc, #492]	; (400b54 <hif_handle_isr+0x2b0>)
  400968:	47a8      	blx	r5
  40096a:	487e      	ldr	r0, [pc, #504]	; (400b64 <hif_handle_isr+0x2c0>)
  40096c:	47a8      	blx	r5
  40096e:	487b      	ldr	r0, [pc, #492]	; (400b5c <hif_handle_isr+0x2b8>)
  400970:	47a8      	blx	r5
						nm_bsp_interrupt_ctrl(1);
  400972:	2001      	movs	r0, #1
  400974:	4b74      	ldr	r3, [pc, #464]	; (400b48 <hif_handle_isr+0x2a4>)
  400976:	4798      	blx	r3
  400978:	e0d1      	b.n	400b1e <hif_handle_isr+0x27a>
						goto ERR1;
					}
					if(strHif.u16Length != size)
  40097a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  40097e:	b29b      	uxth	r3, r3
  400980:	429d      	cmp	r5, r3
  400982:	d01e      	beq.n	4009c2 <hif_handle_isr+0x11e>
					{
						if((size - strHif.u16Length) > 4)
  400984:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  400988:	b29b      	uxth	r3, r3
  40098a:	1aeb      	subs	r3, r5, r3
  40098c:	2b04      	cmp	r3, #4
  40098e:	dd18      	ble.n	4009c2 <hif_handle_isr+0x11e>
						{
							M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
  400990:	f240 12df 	movw	r2, #479	; 0x1df
  400994:	4641      	mov	r1, r8
  400996:	4630      	mov	r0, r6
  400998:	4c6e      	ldr	r4, [pc, #440]	; (400b54 <hif_handle_isr+0x2b0>)
  40099a:	47a0      	blx	r4
  40099c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  4009a0:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4009a4:	f89d 1011 	ldrb.w	r1, [sp, #17]
  4009a8:	9100      	str	r1, [sp, #0]
  4009aa:	b292      	uxth	r2, r2
  4009ac:	4629      	mov	r1, r5
  4009ae:	486e      	ldr	r0, [pc, #440]	; (400b68 <hif_handle_isr+0x2c4>)
  4009b0:	47a0      	blx	r4
  4009b2:	486a      	ldr	r0, [pc, #424]	; (400b5c <hif_handle_isr+0x2b8>)
  4009b4:	47a0      	blx	r4
								size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
							nm_bsp_interrupt_ctrl(1);
  4009b6:	2001      	movs	r0, #1
  4009b8:	4b63      	ldr	r3, [pc, #396]	; (400b48 <hif_handle_isr+0x2a4>)
  4009ba:	4798      	blx	r3
							ret = M2M_ERR_BUS_FAIL;
  4009bc:	f06f 0405 	mvn.w	r4, #5
  4009c0:	e0ad      	b.n	400b1e <hif_handle_isr+0x27a>
							goto ERR1;
						}
					}

					if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
  4009c2:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4009c6:	b2db      	uxtb	r3, r3
  4009c8:	2b01      	cmp	r3, #1
  4009ca:	d10d      	bne.n	4009e8 <hif_handle_isr+0x144>
					{
						if(pfWifiCb)
  4009cc:	4b67      	ldr	r3, [pc, #412]	; (400b6c <hif_handle_isr+0x2c8>)
  4009ce:	681b      	ldr	r3, [r3, #0]
  4009d0:	2b00      	cmp	r3, #0
  4009d2:	d060      	beq.n	400a96 <hif_handle_isr+0x1f2>
							pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  4009d4:	f89d 0011 	ldrb.w	r0, [sp, #17]
  4009d8:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  4009dc:	3908      	subs	r1, #8
  4009de:	9a05      	ldr	r2, [sp, #20]
  4009e0:	3208      	adds	r2, #8
  4009e2:	b289      	uxth	r1, r1
  4009e4:	4798      	blx	r3
  4009e6:	e056      	b.n	400a96 <hif_handle_isr+0x1f2>

					}
					else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
  4009e8:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4009ec:	b2db      	uxtb	r3, r3
  4009ee:	2b02      	cmp	r3, #2
  4009f0:	d10d      	bne.n	400a0e <hif_handle_isr+0x16a>
					{
						if(pfIpCb)
  4009f2:	4b5f      	ldr	r3, [pc, #380]	; (400b70 <hif_handle_isr+0x2cc>)
  4009f4:	681b      	ldr	r3, [r3, #0]
  4009f6:	2b00      	cmp	r3, #0
  4009f8:	d04d      	beq.n	400a96 <hif_handle_isr+0x1f2>
							pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  4009fa:	f89d 0011 	ldrb.w	r0, [sp, #17]
  4009fe:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  400a02:	3908      	subs	r1, #8
  400a04:	9a05      	ldr	r2, [sp, #20]
  400a06:	3208      	adds	r2, #8
  400a08:	b289      	uxth	r1, r1
  400a0a:	4798      	blx	r3
  400a0c:	e043      	b.n	400a96 <hif_handle_isr+0x1f2>
					}
					else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
  400a0e:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400a12:	b2db      	uxtb	r3, r3
  400a14:	2b04      	cmp	r3, #4
  400a16:	d10d      	bne.n	400a34 <hif_handle_isr+0x190>
					{
						if(pfOtaCb)
  400a18:	4b56      	ldr	r3, [pc, #344]	; (400b74 <hif_handle_isr+0x2d0>)
  400a1a:	681b      	ldr	r3, [r3, #0]
  400a1c:	2b00      	cmp	r3, #0
  400a1e:	d03a      	beq.n	400a96 <hif_handle_isr+0x1f2>
							pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  400a20:	f89d 0011 	ldrb.w	r0, [sp, #17]
  400a24:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  400a28:	3908      	subs	r1, #8
  400a2a:	9a05      	ldr	r2, [sp, #20]
  400a2c:	3208      	adds	r2, #8
  400a2e:	b289      	uxth	r1, r1
  400a30:	4798      	blx	r3
  400a32:	e030      	b.n	400a96 <hif_handle_isr+0x1f2>
					}
					else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
  400a34:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400a38:	b2db      	uxtb	r3, r3
  400a3a:	2b06      	cmp	r3, #6
  400a3c:	d10c      	bne.n	400a58 <hif_handle_isr+0x1b4>
					{
						if(pfCryptoCb)
  400a3e:	4b4e      	ldr	r3, [pc, #312]	; (400b78 <hif_handle_isr+0x2d4>)
  400a40:	681b      	ldr	r3, [r3, #0]
  400a42:	b343      	cbz	r3, 400a96 <hif_handle_isr+0x1f2>
							pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  400a44:	f89d 0011 	ldrb.w	r0, [sp, #17]
  400a48:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  400a4c:	3908      	subs	r1, #8
  400a4e:	9a05      	ldr	r2, [sp, #20]
  400a50:	3208      	adds	r2, #8
  400a52:	b289      	uxth	r1, r1
  400a54:	4798      	blx	r3
  400a56:	e01e      	b.n	400a96 <hif_handle_isr+0x1f2>
					}
					else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
  400a58:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400a5c:	b2db      	uxtb	r3, r3
  400a5e:	2b07      	cmp	r3, #7
  400a60:	d10c      	bne.n	400a7c <hif_handle_isr+0x1d8>
					{
						if(pfSigmaCb)
  400a62:	4b46      	ldr	r3, [pc, #280]	; (400b7c <hif_handle_isr+0x2d8>)
  400a64:	681b      	ldr	r3, [r3, #0]
  400a66:	b1b3      	cbz	r3, 400a96 <hif_handle_isr+0x1f2>
							pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  400a68:	f89d 0011 	ldrb.w	r0, [sp, #17]
  400a6c:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  400a70:	3908      	subs	r1, #8
  400a72:	9a05      	ldr	r2, [sp, #20]
  400a74:	3208      	adds	r2, #8
  400a76:	b289      	uxth	r1, r1
  400a78:	4798      	blx	r3
  400a7a:	e00c      	b.n	400a96 <hif_handle_isr+0x1f2>
					}
					else
					{
						M2M_ERR("(hif) invalid group ID\n");
  400a7c:	f240 2202 	movw	r2, #514	; 0x202
  400a80:	4641      	mov	r1, r8
  400a82:	4630      	mov	r0, r6
  400a84:	4c33      	ldr	r4, [pc, #204]	; (400b54 <hif_handle_isr+0x2b0>)
  400a86:	47a0      	blx	r4
  400a88:	483d      	ldr	r0, [pc, #244]	; (400b80 <hif_handle_isr+0x2dc>)
  400a8a:	47a0      	blx	r4
  400a8c:	4833      	ldr	r0, [pc, #204]	; (400b5c <hif_handle_isr+0x2b8>)
  400a8e:	47a0      	blx	r4
						ret = M2M_ERR_BUS_FAIL;
  400a90:	f06f 0405 	mvn.w	r4, #5
  400a94:	e043      	b.n	400b1e <hif_handle_isr+0x27a>
						goto ERR1;
					}
					#ifndef ENABLE_UNO_BOARD
					if(!gu8HifSizeDone)
  400a96:	4b2e      	ldr	r3, [pc, #184]	; (400b50 <hif_handle_isr+0x2ac>)
  400a98:	781b      	ldrb	r3, [r3, #0]
  400a9a:	f013 0fff 	tst.w	r3, #255	; 0xff
  400a9e:	d13b      	bne.n	400b18 <hif_handle_isr+0x274>
					{
						M2M_ERR("(hif) host app didn't set RX Done\n");
  400aa0:	f240 2209 	movw	r2, #521	; 0x209
  400aa4:	4641      	mov	r1, r8
  400aa6:	4630      	mov	r0, r6
  400aa8:	4c2a      	ldr	r4, [pc, #168]	; (400b54 <hif_handle_isr+0x2b0>)
  400aaa:	47a0      	blx	r4
  400aac:	4835      	ldr	r0, [pc, #212]	; (400b84 <hif_handle_isr+0x2e0>)
  400aae:	47a0      	blx	r4
  400ab0:	482a      	ldr	r0, [pc, #168]	; (400b5c <hif_handle_isr+0x2b8>)
  400ab2:	47a0      	blx	r4
						ret = hif_set_rx_done();
  400ab4:	4b34      	ldr	r3, [pc, #208]	; (400b88 <hif_handle_isr+0x2e4>)
  400ab6:	4798      	blx	r3
  400ab8:	e02e      	b.n	400b18 <hif_handle_isr+0x274>
					#endif
				}
				else
				{
					ret = M2M_ERR_RCV;
					M2M_ERR("(hif) Wrong Size\n");
  400aba:	f240 2211 	movw	r2, #529	; 0x211
  400abe:	4641      	mov	r1, r8
  400ac0:	4630      	mov	r0, r6
  400ac2:	4c24      	ldr	r4, [pc, #144]	; (400b54 <hif_handle_isr+0x2b0>)
  400ac4:	47a0      	blx	r4
  400ac6:	4831      	ldr	r0, [pc, #196]	; (400b8c <hif_handle_isr+0x2e8>)
  400ac8:	47a0      	blx	r4
  400aca:	4824      	ldr	r0, [pc, #144]	; (400b5c <hif_handle_isr+0x2b8>)
  400acc:	47a0      	blx	r4
					}
					#endif
				}
				else
				{
					ret = M2M_ERR_RCV;
  400ace:	f06f 0401 	mvn.w	r4, #1
  400ad2:	e026      	b.n	400b22 <hif_handle_isr+0x27e>
				}
			}
			else
			{
#ifndef WIN32
				M2M_ERR("(hif) False interrupt %lx",reg);
  400ad4:	f44f 7206 	mov.w	r2, #536	; 0x218
  400ad8:	4641      	mov	r1, r8
  400ada:	4630      	mov	r0, r6
  400adc:	4c1d      	ldr	r4, [pc, #116]	; (400b54 <hif_handle_isr+0x2b0>)
  400ade:	47a0      	blx	r4
  400ae0:	9903      	ldr	r1, [sp, #12]
  400ae2:	482b      	ldr	r0, [pc, #172]	; (400b90 <hif_handle_isr+0x2ec>)
  400ae4:	47a0      	blx	r4
  400ae6:	481d      	ldr	r0, [pc, #116]	; (400b5c <hif_handle_isr+0x2b8>)
  400ae8:	47a0      	blx	r4
  400aea:	e015      	b.n	400b18 <hif_handle_isr+0x274>
#endif
			}
		}
		else
		{
			M2M_ERR("(hif) Fail to Read interrupt reg\n");
  400aec:	f240 221e 	movw	r2, #542	; 0x21e
  400af0:	4641      	mov	r1, r8
  400af2:	4630      	mov	r0, r6
  400af4:	4d17      	ldr	r5, [pc, #92]	; (400b54 <hif_handle_isr+0x2b0>)
  400af6:	47a8      	blx	r5
  400af8:	4826      	ldr	r0, [pc, #152]	; (400b94 <hif_handle_isr+0x2f0>)
  400afa:	47a8      	blx	r5
  400afc:	4817      	ldr	r0, [pc, #92]	; (400b5c <hif_handle_isr+0x2b8>)
  400afe:	47a8      	blx	r5
  400b00:	e00f      	b.n	400b22 <hif_handle_isr+0x27e>
			goto ERR1;
		}
	}
	else
	{
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
  400b02:	f44f 7209 	mov.w	r2, #548	; 0x224
  400b06:	4641      	mov	r1, r8
  400b08:	4630      	mov	r0, r6
  400b0a:	4d12      	ldr	r5, [pc, #72]	; (400b54 <hif_handle_isr+0x2b0>)
  400b0c:	47a8      	blx	r5
  400b0e:	4822      	ldr	r0, [pc, #136]	; (400b98 <hif_handle_isr+0x2f4>)
  400b10:	47a8      	blx	r5
  400b12:	4812      	ldr	r0, [pc, #72]	; (400b5c <hif_handle_isr+0x2b8>)
  400b14:	47a8      	blx	r5
  400b16:	e004      	b.n	400b22 <hif_handle_isr+0x27e>
		goto ERR1;
	}

	ret = hif_chip_sleep();
  400b18:	4b20      	ldr	r3, [pc, #128]	; (400b9c <hif_handle_isr+0x2f8>)
  400b1a:	4798      	blx	r3
  400b1c:	4604      	mov	r4, r0
		/*when the interrupt enabled*/
		gu8Interrupt--;
		while(1)
		{
			ret = hif_isr();
			if(ret == M2M_SUCCESS) {
  400b1e:	2c00      	cmp	r4, #0
  400b20:	d046      	beq.n	400bb0 <hif_handle_isr+0x30c>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
  400b22:	f240 2243 	movw	r2, #579	; 0x243
  400b26:	491e      	ldr	r1, [pc, #120]	; (400ba0 <hif_handle_isr+0x2fc>)
  400b28:	4630      	mov	r0, r6
  400b2a:	4d0a      	ldr	r5, [pc, #40]	; (400b54 <hif_handle_isr+0x2b0>)
  400b2c:	47a8      	blx	r5
  400b2e:	4621      	mov	r1, r4
  400b30:	481c      	ldr	r0, [pc, #112]	; (400ba4 <hif_handle_isr+0x300>)
  400b32:	47a8      	blx	r5
  400b34:	4809      	ldr	r0, [pc, #36]	; (400b5c <hif_handle_isr+0x2b8>)
  400b36:	47a8      	blx	r5
			}
		}
  400b38:	e6c4      	b.n	4008c4 <hif_handle_isr+0x20>
  400b3a:	bf00      	nop
  400b3c:	004005e9 	.word	0x004005e9
  400b40:	00407490 	.word	0x00407490
  400b44:	00401c45 	.word	0x00401c45
  400b48:	00400301 	.word	0x00400301
  400b4c:	00401c51 	.word	0x00401c51
  400b50:	20400930 	.word	0x20400930
  400b54:	00404475 	.word	0x00404475
  400b58:	00407504 	.word	0x00407504
  400b5c:	004074bc 	.word	0x004074bc
  400b60:	00401c5d 	.word	0x00401c5d
  400b64:	0040752c 	.word	0x0040752c
  400b68:	00407544 	.word	0x00407544
  400b6c:	20400918 	.word	0x20400918
  400b70:	2040092c 	.word	0x2040092c
  400b74:	20400934 	.word	0x20400934
  400b78:	20400914 	.word	0x20400914
  400b7c:	20400924 	.word	0x20400924
  400b80:	00407584 	.word	0x00407584
  400b84:	0040759c 	.word	0x0040759c
  400b88:	004005a9 	.word	0x004005a9
  400b8c:	004075c0 	.word	0x004075c0
  400b90:	004075d4 	.word	0x004075d4
  400b94:	004075f0 	.word	0x004075f0
  400b98:	00407614 	.word	0x00407614
  400b9c:	00400641 	.word	0x00400641
  400ba0:	00407734 	.word	0x00407734
  400ba4:	00407634 	.word	0x00407634
  400ba8:	2040091c 	.word	0x2040091c
  400bac:	004074d0 	.word	0x004074d0

sint8 hif_handle_isr(void)
{
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
  400bb0:	f899 3000 	ldrb.w	r3, [r9]
  400bb4:	f013 0fff 	tst.w	r3, #255	; 0xff
  400bb8:	f47f ae7e 	bne.w	4008b8 <hif_handle_isr+0x14>
			}
		}
	}

	return ret;
}
  400bbc:	2000      	movs	r0, #0
  400bbe:	b007      	add	sp, #28
  400bc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00400bc4 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
  400bc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400bc8:	b083      	sub	sp, #12
  400bca:	461c      	mov	r4, r3
	uint32 address, reg;
	uint16 size;
	sint8 ret = M2M_SUCCESS;

	if(u32Addr == 0 ||pu8Buf == NULL || u16Sz == 0)
  400bcc:	2a00      	cmp	r2, #0
  400bce:	bf18      	it	ne
  400bd0:	2900      	cmpne	r1, #0
  400bd2:	d003      	beq.n	400bdc <hif_receive+0x18>
  400bd4:	4605      	mov	r5, r0
  400bd6:	460f      	mov	r7, r1
  400bd8:	4616      	mov	r6, r2
  400bda:	b9a0      	cbnz	r0, 400c06 <hif_receive+0x42>
	{
		if(isDone)
  400bdc:	b134      	cbz	r4, 400bec <hif_receive+0x28>
		{
			gu8HifSizeDone = 1;
  400bde:	2201      	movs	r2, #1
  400be0:	4b31      	ldr	r3, [pc, #196]	; (400ca8 <hif_receive+0xe4>)
  400be2:	701a      	strb	r2, [r3, #0]
			
			/* set RX done */
			ret = hif_set_rx_done();
  400be4:	4b31      	ldr	r3, [pc, #196]	; (400cac <hif_receive+0xe8>)
  400be6:	4798      	blx	r3
  400be8:	4603      	mov	r3, r0
  400bea:	e058      	b.n	400c9e <hif_receive+0xda>
		}
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
  400bec:	f240 2269 	movw	r2, #617	; 0x269
  400bf0:	492f      	ldr	r1, [pc, #188]	; (400cb0 <hif_receive+0xec>)
  400bf2:	4830      	ldr	r0, [pc, #192]	; (400cb4 <hif_receive+0xf0>)
  400bf4:	4c30      	ldr	r4, [pc, #192]	; (400cb8 <hif_receive+0xf4>)
  400bf6:	47a0      	blx	r4
  400bf8:	4830      	ldr	r0, [pc, #192]	; (400cbc <hif_receive+0xf8>)
  400bfa:	47a0      	blx	r4
  400bfc:	4830      	ldr	r0, [pc, #192]	; (400cc0 <hif_receive+0xfc>)
  400bfe:	47a0      	blx	r4
			/* set RX done */
			ret = hif_set_rx_done();
		}
		else
		{
			ret = M2M_ERR_FAIL;
  400c00:	f06f 030b 	mvn.w	r3, #11
  400c04:	e04b      	b.n	400c9e <hif_receive+0xda>
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
	}

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
  400c06:	4669      	mov	r1, sp
  400c08:	f241 0070 	movw	r0, #4208	; 0x1070
  400c0c:	4b2d      	ldr	r3, [pc, #180]	; (400cc4 <hif_receive+0x100>)
  400c0e:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  400c10:	4603      	mov	r3, r0
  400c12:	2800      	cmp	r0, #0
  400c14:	d143      	bne.n	400c9e <hif_receive+0xda>


	size = (uint16)((reg >> 2) & 0xfff);
  400c16:	f8dd 8000 	ldr.w	r8, [sp]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
  400c1a:	a901      	add	r1, sp, #4
  400c1c:	f241 0084 	movw	r0, #4228	; 0x1084
  400c20:	4b28      	ldr	r3, [pc, #160]	; (400cc4 <hif_receive+0x100>)
  400c22:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  400c24:	4603      	mov	r3, r0
  400c26:	2800      	cmp	r0, #0
  400c28:	d139      	bne.n	400c9e <hif_receive+0xda>

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
	if(ret != M2M_SUCCESS)goto ERR1;


	size = (uint16)((reg >> 2) & 0xfff);
  400c2a:	f3c8 088b 	ubfx	r8, r8, #2, #12
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
	if(ret != M2M_SUCCESS)goto ERR1;


	if(u16Sz > size)
  400c2e:	4546      	cmp	r6, r8
  400c30:	d90e      	bls.n	400c50 <hif_receive+0x8c>
	{
		ret = M2M_ERR_FAIL;
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
  400c32:	f240 227a 	movw	r2, #634	; 0x27a
  400c36:	491e      	ldr	r1, [pc, #120]	; (400cb0 <hif_receive+0xec>)
  400c38:	481e      	ldr	r0, [pc, #120]	; (400cb4 <hif_receive+0xf0>)
  400c3a:	4c1f      	ldr	r4, [pc, #124]	; (400cb8 <hif_receive+0xf4>)
  400c3c:	47a0      	blx	r4
  400c3e:	4642      	mov	r2, r8
  400c40:	4631      	mov	r1, r6
  400c42:	4821      	ldr	r0, [pc, #132]	; (400cc8 <hif_receive+0x104>)
  400c44:	47a0      	blx	r4
  400c46:	481e      	ldr	r0, [pc, #120]	; (400cc0 <hif_receive+0xfc>)
  400c48:	47a0      	blx	r4
	if(ret != M2M_SUCCESS)goto ERR1;


	if(u16Sz > size)
	{
		ret = M2M_ERR_FAIL;
  400c4a:	f06f 030b 	mvn.w	r3, #11
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
		goto ERR1;
  400c4e:	e026      	b.n	400c9e <hif_receive+0xda>
	}
	if((u32Addr < address)||((u32Addr + u16Sz)>(address+size)))
  400c50:	9b01      	ldr	r3, [sp, #4]
  400c52:	429d      	cmp	r5, r3
  400c54:	d304      	bcc.n	400c60 <hif_receive+0x9c>
  400c56:	eb05 0906 	add.w	r9, r5, r6
  400c5a:	4443      	add	r3, r8
  400c5c:	4599      	cmp	r9, r3
  400c5e:	d90c      	bls.n	400c7a <hif_receive+0xb6>
	{
		ret = M2M_ERR_FAIL;
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
  400c60:	f44f 7220 	mov.w	r2, #640	; 0x280
  400c64:	4912      	ldr	r1, [pc, #72]	; (400cb0 <hif_receive+0xec>)
  400c66:	4813      	ldr	r0, [pc, #76]	; (400cb4 <hif_receive+0xf0>)
  400c68:	4c13      	ldr	r4, [pc, #76]	; (400cb8 <hif_receive+0xf4>)
  400c6a:	47a0      	blx	r4
  400c6c:	4817      	ldr	r0, [pc, #92]	; (400ccc <hif_receive+0x108>)
  400c6e:	47a0      	blx	r4
  400c70:	4813      	ldr	r0, [pc, #76]	; (400cc0 <hif_receive+0xfc>)
  400c72:	47a0      	blx	r4
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
		goto ERR1;
	}
	if((u32Addr < address)||((u32Addr + u16Sz)>(address+size)))
	{
		ret = M2M_ERR_FAIL;
  400c74:	f06f 030b 	mvn.w	r3, #11
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
		goto ERR1;
  400c78:	e011      	b.n	400c9e <hif_receive+0xda>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
  400c7a:	4632      	mov	r2, r6
  400c7c:	4639      	mov	r1, r7
  400c7e:	4628      	mov	r0, r5
  400c80:	4b13      	ldr	r3, [pc, #76]	; (400cd0 <hif_receive+0x10c>)
  400c82:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  400c84:	4603      	mov	r3, r0
  400c86:	b950      	cbnz	r0, 400c9e <hif_receive+0xda>

	/* check if this is the last packet */
	if((((address + size) - (u32Addr + u16Sz)) <= 0) || isDone)
  400c88:	9a01      	ldr	r2, [sp, #4]
  400c8a:	4442      	add	r2, r8
  400c8c:	454a      	cmp	r2, r9
  400c8e:	d000      	beq.n	400c92 <hif_receive+0xce>
  400c90:	b12c      	cbz	r4, 400c9e <hif_receive+0xda>
	{
		gu8HifSizeDone = 1;
  400c92:	2201      	movs	r2, #1
  400c94:	4b04      	ldr	r3, [pc, #16]	; (400ca8 <hif_receive+0xe4>)
  400c96:	701a      	strb	r2, [r3, #0]

		/* set RX done */
		ret = hif_set_rx_done();
  400c98:	4b04      	ldr	r3, [pc, #16]	; (400cac <hif_receive+0xe8>)
  400c9a:	4798      	blx	r3
  400c9c:	4603      	mov	r3, r0



ERR1:
	return ret;
}
  400c9e:	4618      	mov	r0, r3
  400ca0:	b003      	add	sp, #12
  400ca2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  400ca6:	bf00      	nop
  400ca8:	20400930 	.word	0x20400930
  400cac:	004005a9 	.word	0x004005a9
  400cb0:	004074d8 	.word	0x004074d8
  400cb4:	00407490 	.word	0x00407490
  400cb8:	00404475 	.word	0x00404475
  400cbc:	00407664 	.word	0x00407664
  400cc0:	004074bc 	.word	0x004074bc
  400cc4:	00401c45 	.word	0x00401c45
  400cc8:	00407684 	.word	0x00407684
  400ccc:	004076c8 	.word	0x004076c8
  400cd0:	00401c5d 	.word	0x00401c5d

00400cd4 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
  400cd4:	b538      	push	{r3, r4, r5, lr}
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
  400cd6:	1e43      	subs	r3, r0, #1
  400cd8:	2b06      	cmp	r3, #6
  400cda:	d81d      	bhi.n	400d18 <hif_register_cb+0x44>
  400cdc:	e8df f003 	tbb	[pc, r3]
  400ce0:	0c100408 	.word	0x0c100408
  400ce4:	141c      	.short	0x141c
  400ce6:	18          	.byte	0x18
  400ce7:	00          	.byte	0x00
	{
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
  400ce8:	4b13      	ldr	r3, [pc, #76]	; (400d38 <hif_register_cb+0x64>)
  400cea:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  400cec:	2000      	movs	r0, #0
	switch(u8Grp)
	{
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
			break;
  400cee:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
  400cf0:	4b12      	ldr	r3, [pc, #72]	; (400d3c <hif_register_cb+0x68>)
  400cf2:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  400cf4:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
			break;
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
			break;
  400cf6:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
  400cf8:	4b11      	ldr	r3, [pc, #68]	; (400d40 <hif_register_cb+0x6c>)
  400cfa:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  400cfc:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
			break;
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
			break;
  400cfe:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
  400d00:	4b10      	ldr	r3, [pc, #64]	; (400d44 <hif_register_cb+0x70>)
  400d02:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  400d04:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
			break;
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
			break;
  400d06:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
  400d08:	4b0f      	ldr	r3, [pc, #60]	; (400d48 <hif_register_cb+0x74>)
  400d0a:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  400d0c:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
			break;
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
			break;
  400d0e:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_SIGMA:
			pfSigmaCb = fn;
  400d10:	4b0e      	ldr	r3, [pc, #56]	; (400d4c <hif_register_cb+0x78>)
  400d12:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  400d14:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
			break;
		case M2M_REQ_GROUP_SIGMA:
			pfSigmaCb = fn;
			break;
  400d16:	bd38      	pop	{r3, r4, r5, pc}
  400d18:	4604      	mov	r4, r0
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
  400d1a:	f240 22b9 	movw	r2, #697	; 0x2b9
  400d1e:	490c      	ldr	r1, [pc, #48]	; (400d50 <hif_register_cb+0x7c>)
  400d20:	480c      	ldr	r0, [pc, #48]	; (400d54 <hif_register_cb+0x80>)
  400d22:	4d0d      	ldr	r5, [pc, #52]	; (400d58 <hif_register_cb+0x84>)
  400d24:	47a8      	blx	r5
  400d26:	4621      	mov	r1, r4
  400d28:	480c      	ldr	r0, [pc, #48]	; (400d5c <hif_register_cb+0x88>)
  400d2a:	47a8      	blx	r5
  400d2c:	480c      	ldr	r0, [pc, #48]	; (400d60 <hif_register_cb+0x8c>)
  400d2e:	47a8      	blx	r5
			ret = M2M_ERR_FAIL;
  400d30:	f06f 000b 	mvn.w	r0, #11
			break;
	}
	return ret;
}
  400d34:	bd38      	pop	{r3, r4, r5, pc}
  400d36:	bf00      	nop
  400d38:	2040092c 	.word	0x2040092c
  400d3c:	20400918 	.word	0x20400918
  400d40:	20400934 	.word	0x20400934
  400d44:	20400920 	.word	0x20400920
  400d48:	20400914 	.word	0x20400914
  400d4c:	20400924 	.word	0x20400924
  400d50:	00407718 	.word	0x00407718
  400d54:	00407490 	.word	0x00407490
  400d58:	00404475 	.word	0x00404475
  400d5c:	0040770c 	.word	0x0040770c
  400d60:	004074bc 	.word	0x004074bc

00400d64 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
  400d64:	b510      	push	{r4, lr}
	pfWifiCb = NULL;
  400d66:	2400      	movs	r4, #0
  400d68:	4b09      	ldr	r3, [pc, #36]	; (400d90 <hif_init+0x2c>)
  400d6a:	601c      	str	r4, [r3, #0]
	pfIpCb = NULL;
  400d6c:	4b09      	ldr	r3, [pc, #36]	; (400d94 <hif_init+0x30>)
  400d6e:	601c      	str	r4, [r3, #0]

	gu8ChipSleep = 0;
  400d70:	4b09      	ldr	r3, [pc, #36]	; (400d98 <hif_init+0x34>)
  400d72:	701c      	strb	r4, [r3, #0]
	gu8ChipMode = M2M_NO_PS;
  400d74:	4b09      	ldr	r3, [pc, #36]	; (400d9c <hif_init+0x38>)
  400d76:	701c      	strb	r4, [r3, #0]

	gu8Interrupt = 0;
  400d78:	4b09      	ldr	r3, [pc, #36]	; (400da0 <hif_init+0x3c>)
  400d7a:	701c      	strb	r4, [r3, #0]
	nm_bsp_register_isr(isr);
  400d7c:	4809      	ldr	r0, [pc, #36]	; (400da4 <hif_init+0x40>)
  400d7e:	4b0a      	ldr	r3, [pc, #40]	; (400da8 <hif_init+0x44>)
  400d80:	4798      	blx	r3

	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
  400d82:	490a      	ldr	r1, [pc, #40]	; (400dac <hif_init+0x48>)
  400d84:	2003      	movs	r0, #3
  400d86:	4b0a      	ldr	r3, [pc, #40]	; (400db0 <hif_init+0x4c>)
  400d88:	4798      	blx	r3

	return M2M_SUCCESS;
}
  400d8a:	4620      	mov	r0, r4
  400d8c:	bd10      	pop	{r4, pc}
  400d8e:	bf00      	nop
  400d90:	20400918 	.word	0x20400918
  400d94:	2040092c 	.word	0x2040092c
  400d98:	20400938 	.word	0x20400938
  400d9c:	20400928 	.word	0x20400928
  400da0:	2040091c 	.word	0x2040091c
  400da4:	00400595 	.word	0x00400595
  400da8:	00400281 	.word	0x00400281
  400dac:	004005a5 	.word	0x004005a5
  400db0:	00400cd5 	.word	0x00400cd5

00400db4 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
  400db4:	b530      	push	{r4, r5, lr}
  400db6:	b09f      	sub	sp, #124	; 0x7c
  400db8:	4615      	mov	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
  400dba:	282c      	cmp	r0, #44	; 0x2c
  400dbc:	d111      	bne.n	400de2 <m2m_wifi_cb+0x2e>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
  400dbe:	2300      	movs	r3, #0
  400dc0:	2204      	movs	r2, #4
  400dc2:	a903      	add	r1, sp, #12
  400dc4:	4628      	mov	r0, r5
  400dc6:	4c90      	ldr	r4, [pc, #576]	; (401008 <m2m_wifi_cb+0x254>)
  400dc8:	47a0      	blx	r4
  400dca:	2800      	cmp	r0, #0
  400dcc:	f040 8119 	bne.w	401002 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  400dd0:	4b8e      	ldr	r3, [pc, #568]	; (40100c <m2m_wifi_cb+0x258>)
  400dd2:	681b      	ldr	r3, [r3, #0]
  400dd4:	2b00      	cmp	r3, #0
  400dd6:	f000 8114 	beq.w	401002 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
  400dda:	a903      	add	r1, sp, #12
  400ddc:	202c      	movs	r0, #44	; 0x2c
  400dde:	4798      	blx	r3
  400de0:	e10f      	b.n	401002 <m2m_wifi_cb+0x24e>
  400de2:	4604      	mov	r4, r0
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
  400de4:	281b      	cmp	r0, #27
  400de6:	d111      	bne.n	400e0c <m2m_wifi_cb+0x58>
	{
		tstrSystemTime strSysTime;
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
  400de8:	2300      	movs	r3, #0
  400dea:	2208      	movs	r2, #8
  400dec:	a903      	add	r1, sp, #12
  400dee:	4628      	mov	r0, r5
  400df0:	4c85      	ldr	r4, [pc, #532]	; (401008 <m2m_wifi_cb+0x254>)
  400df2:	47a0      	blx	r4
  400df4:	2800      	cmp	r0, #0
  400df6:	f040 8104 	bne.w	401002 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  400dfa:	4b84      	ldr	r3, [pc, #528]	; (40100c <m2m_wifi_cb+0x258>)
  400dfc:	681b      	ldr	r3, [r3, #0]
  400dfe:	2b00      	cmp	r3, #0
  400e00:	f000 80ff 	beq.w	401002 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
  400e04:	a903      	add	r1, sp, #12
  400e06:	201b      	movs	r0, #27
  400e08:	4798      	blx	r3
  400e0a:	e0fa      	b.n	401002 <m2m_wifi_cb+0x24e>
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
  400e0c:	2806      	cmp	r0, #6
  400e0e:	d111      	bne.n	400e34 <m2m_wifi_cb+0x80>
	{
		tstrM2MConnInfo		strConnInfo;
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
  400e10:	2301      	movs	r3, #1
  400e12:	2230      	movs	r2, #48	; 0x30
  400e14:	a903      	add	r1, sp, #12
  400e16:	4628      	mov	r0, r5
  400e18:	4c7b      	ldr	r4, [pc, #492]	; (401008 <m2m_wifi_cb+0x254>)
  400e1a:	47a0      	blx	r4
  400e1c:	2800      	cmp	r0, #0
  400e1e:	f040 80f0 	bne.w	401002 <m2m_wifi_cb+0x24e>
		{
			if(gpfAppWifiCb)
  400e22:	4b7a      	ldr	r3, [pc, #488]	; (40100c <m2m_wifi_cb+0x258>)
  400e24:	681b      	ldr	r3, [r3, #0]
  400e26:	2b00      	cmp	r3, #0
  400e28:	f000 80eb 	beq.w	401002 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
  400e2c:	a903      	add	r1, sp, #12
  400e2e:	2006      	movs	r0, #6
  400e30:	4798      	blx	r3
  400e32:	e0e6      	b.n	401002 <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
  400e34:	280e      	cmp	r0, #14
  400e36:	f000 80e4 	beq.w	401002 <m2m_wifi_cb+0x24e>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
  400e3a:	2832      	cmp	r0, #50	; 0x32
  400e3c:	d111      	bne.n	400e62 <m2m_wifi_cb+0xae>
	{
		tstrM2MIPConfig strIpConfig;
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
  400e3e:	2300      	movs	r3, #0
  400e40:	2210      	movs	r2, #16
  400e42:	a903      	add	r1, sp, #12
  400e44:	4628      	mov	r0, r5
  400e46:	4c70      	ldr	r4, [pc, #448]	; (401008 <m2m_wifi_cb+0x254>)
  400e48:	47a0      	blx	r4
  400e4a:	2800      	cmp	r0, #0
  400e4c:	f040 80d9 	bne.w	401002 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  400e50:	4b6e      	ldr	r3, [pc, #440]	; (40100c <m2m_wifi_cb+0x258>)
  400e52:	681b      	ldr	r3, [r3, #0]
  400e54:	2b00      	cmp	r3, #0
  400e56:	f000 80d4 	beq.w	401002 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
  400e5a:	a903      	add	r1, sp, #12
  400e5c:	2032      	movs	r0, #50	; 0x32
  400e5e:	4798      	blx	r3
  400e60:	e0cf      	b.n	401002 <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
  400e62:	282f      	cmp	r0, #47	; 0x2f
  400e64:	d116      	bne.n	400e94 <m2m_wifi_cb+0xe0>
	{
		tstrM2MWPSInfo strWps;
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
  400e66:	2264      	movs	r2, #100	; 0x64
  400e68:	2100      	movs	r1, #0
  400e6a:	a803      	add	r0, sp, #12
  400e6c:	4b68      	ldr	r3, [pc, #416]	; (401010 <m2m_wifi_cb+0x25c>)
  400e6e:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
  400e70:	2300      	movs	r3, #0
  400e72:	2264      	movs	r2, #100	; 0x64
  400e74:	a903      	add	r1, sp, #12
  400e76:	4628      	mov	r0, r5
  400e78:	4c63      	ldr	r4, [pc, #396]	; (401008 <m2m_wifi_cb+0x254>)
  400e7a:	47a0      	blx	r4
  400e7c:	2800      	cmp	r0, #0
  400e7e:	f040 80c0 	bne.w	401002 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  400e82:	4b62      	ldr	r3, [pc, #392]	; (40100c <m2m_wifi_cb+0x258>)
  400e84:	681b      	ldr	r3, [r3, #0]
  400e86:	2b00      	cmp	r3, #0
  400e88:	f000 80bb 	beq.w	401002 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
  400e8c:	a903      	add	r1, sp, #12
  400e8e:	202f      	movs	r0, #47	; 0x2f
  400e90:	4798      	blx	r3
  400e92:	e0b6      	b.n	401002 <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
  400e94:	2834      	cmp	r0, #52	; 0x34
  400e96:	d120      	bne.n	400eda <m2m_wifi_cb+0x126>
	{
		uint32  u32ConflictedIP;
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
  400e98:	2300      	movs	r3, #0
  400e9a:	2204      	movs	r2, #4
  400e9c:	a903      	add	r1, sp, #12
  400e9e:	4628      	mov	r0, r5
  400ea0:	4c59      	ldr	r4, [pc, #356]	; (401008 <m2m_wifi_cb+0x254>)
  400ea2:	47a0      	blx	r4
  400ea4:	2800      	cmp	r0, #0
  400ea6:	f040 80ac 	bne.w	401002 <m2m_wifi_cb+0x24e>
		{
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
  400eaa:	485a      	ldr	r0, [pc, #360]	; (401014 <m2m_wifi_cb+0x260>)
  400eac:	4c5a      	ldr	r4, [pc, #360]	; (401018 <m2m_wifi_cb+0x264>)
  400eae:	47a0      	blx	r4
  400eb0:	9903      	ldr	r1, [sp, #12]
  400eb2:	0e0b      	lsrs	r3, r1, #24
  400eb4:	9300      	str	r3, [sp, #0]
  400eb6:	f3c1 4307 	ubfx	r3, r1, #16, #8
  400eba:	f3c1 2207 	ubfx	r2, r1, #8, #8
  400ebe:	b2c9      	uxtb	r1, r1
  400ec0:	4856      	ldr	r0, [pc, #344]	; (40101c <m2m_wifi_cb+0x268>)
  400ec2:	47a0      	blx	r4
  400ec4:	4856      	ldr	r0, [pc, #344]	; (401020 <m2m_wifi_cb+0x26c>)
  400ec6:	47a0      	blx	r4
				BYTE_0(u32ConflictedIP),BYTE_1(u32ConflictedIP),BYTE_2(u32ConflictedIP),BYTE_3(u32ConflictedIP));
			if (gpfAppWifiCb)
  400ec8:	4b50      	ldr	r3, [pc, #320]	; (40100c <m2m_wifi_cb+0x258>)
  400eca:	681b      	ldr	r3, [r3, #0]
  400ecc:	2b00      	cmp	r3, #0
  400ece:	f000 8098 	beq.w	401002 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
  400ed2:	2100      	movs	r1, #0
  400ed4:	2034      	movs	r0, #52	; 0x34
  400ed6:	4798      	blx	r3
  400ed8:	e093      	b.n	401002 <m2m_wifi_cb+0x24e>

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
  400eda:	2811      	cmp	r0, #17
  400edc:	d116      	bne.n	400f0c <m2m_wifi_cb+0x158>
	{
		tstrM2mScanDone strState;
		gu8scanInProgress = 0;
  400ede:	2300      	movs	r3, #0
  400ee0:	4a50      	ldr	r2, [pc, #320]	; (401024 <m2m_wifi_cb+0x270>)
  400ee2:	7013      	strb	r3, [r2, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
  400ee4:	2204      	movs	r2, #4
  400ee6:	a903      	add	r1, sp, #12
  400ee8:	4628      	mov	r0, r5
  400eea:	4c47      	ldr	r4, [pc, #284]	; (401008 <m2m_wifi_cb+0x254>)
  400eec:	47a0      	blx	r4
  400eee:	2800      	cmp	r0, #0
  400ef0:	f040 8087 	bne.w	401002 <m2m_wifi_cb+0x24e>
		{
			gu8ChNum = strState.u8NumofCh;
  400ef4:	f89d 200c 	ldrb.w	r2, [sp, #12]
  400ef8:	4b4b      	ldr	r3, [pc, #300]	; (401028 <m2m_wifi_cb+0x274>)
  400efa:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
  400efc:	4b43      	ldr	r3, [pc, #268]	; (40100c <m2m_wifi_cb+0x258>)
  400efe:	681b      	ldr	r3, [r3, #0]
  400f00:	2b00      	cmp	r3, #0
  400f02:	d07e      	beq.n	401002 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
  400f04:	a903      	add	r1, sp, #12
  400f06:	2011      	movs	r0, #17
  400f08:	4798      	blx	r3
  400f0a:	e07a      	b.n	401002 <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
  400f0c:	2813      	cmp	r0, #19
  400f0e:	d10f      	bne.n	400f30 <m2m_wifi_cb+0x17c>
	{
		tstrM2mWifiscanResult strScanResult;
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
  400f10:	2300      	movs	r3, #0
  400f12:	222c      	movs	r2, #44	; 0x2c
  400f14:	a903      	add	r1, sp, #12
  400f16:	4628      	mov	r0, r5
  400f18:	4c3b      	ldr	r4, [pc, #236]	; (401008 <m2m_wifi_cb+0x254>)
  400f1a:	47a0      	blx	r4
  400f1c:	2800      	cmp	r0, #0
  400f1e:	d170      	bne.n	401002 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  400f20:	4b3a      	ldr	r3, [pc, #232]	; (40100c <m2m_wifi_cb+0x258>)
  400f22:	681b      	ldr	r3, [r3, #0]
  400f24:	2b00      	cmp	r3, #0
  400f26:	d06c      	beq.n	401002 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
  400f28:	a903      	add	r1, sp, #12
  400f2a:	2013      	movs	r0, #19
  400f2c:	4798      	blx	r3
  400f2e:	e068      	b.n	401002 <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
  400f30:	2804      	cmp	r0, #4
  400f32:	d10f      	bne.n	400f54 <m2m_wifi_cb+0x1a0>
	{
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
  400f34:	2300      	movs	r3, #0
  400f36:	2204      	movs	r2, #4
  400f38:	a91c      	add	r1, sp, #112	; 0x70
  400f3a:	4628      	mov	r0, r5
  400f3c:	4c32      	ldr	r4, [pc, #200]	; (401008 <m2m_wifi_cb+0x254>)
  400f3e:	47a0      	blx	r4
  400f40:	2800      	cmp	r0, #0
  400f42:	d15e      	bne.n	401002 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  400f44:	4b31      	ldr	r3, [pc, #196]	; (40100c <m2m_wifi_cb+0x258>)
  400f46:	681b      	ldr	r3, [r3, #0]
  400f48:	2b00      	cmp	r3, #0
  400f4a:	d05a      	beq.n	401002 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
  400f4c:	a91c      	add	r1, sp, #112	; 0x70
  400f4e:	2004      	movs	r0, #4
  400f50:	4798      	blx	r3
  400f52:	e056      	b.n	401002 <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
  400f54:	2865      	cmp	r0, #101	; 0x65
  400f56:	d10f      	bne.n	400f78 <m2m_wifi_cb+0x1c4>
	{
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
  400f58:	2300      	movs	r3, #0
  400f5a:	2204      	movs	r2, #4
  400f5c:	a91c      	add	r1, sp, #112	; 0x70
  400f5e:	4628      	mov	r0, r5
  400f60:	4c29      	ldr	r4, [pc, #164]	; (401008 <m2m_wifi_cb+0x254>)
  400f62:	47a0      	blx	r4
  400f64:	2800      	cmp	r0, #0
  400f66:	d14c      	bne.n	401002 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  400f68:	4b28      	ldr	r3, [pc, #160]	; (40100c <m2m_wifi_cb+0x258>)
  400f6a:	681b      	ldr	r3, [r3, #0]
  400f6c:	2b00      	cmp	r3, #0
  400f6e:	d048      	beq.n	401002 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
  400f70:	a91c      	add	r1, sp, #112	; 0x70
  400f72:	2065      	movs	r0, #101	; 0x65
  400f74:	4798      	blx	r3
  400f76:	e044      	b.n	401002 <m2m_wifi_cb+0x24e>
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
  400f78:	2809      	cmp	r0, #9
  400f7a:	d10f      	bne.n	400f9c <m2m_wifi_cb+0x1e8>
	{
		tstrM2MProvisionInfo	strProvInfo;
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
  400f7c:	2301      	movs	r3, #1
  400f7e:	2264      	movs	r2, #100	; 0x64
  400f80:	a903      	add	r1, sp, #12
  400f82:	4628      	mov	r0, r5
  400f84:	4c20      	ldr	r4, [pc, #128]	; (401008 <m2m_wifi_cb+0x254>)
  400f86:	47a0      	blx	r4
  400f88:	2800      	cmp	r0, #0
  400f8a:	d13a      	bne.n	401002 <m2m_wifi_cb+0x24e>
		{
			if(gpfAppWifiCb)
  400f8c:	4b1f      	ldr	r3, [pc, #124]	; (40100c <m2m_wifi_cb+0x258>)
  400f8e:	681b      	ldr	r3, [r3, #0]
  400f90:	2b00      	cmp	r3, #0
  400f92:	d036      	beq.n	401002 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
  400f94:	a903      	add	r1, sp, #12
  400f96:	2009      	movs	r0, #9
  400f98:	4798      	blx	r3
  400f9a:	e032      	b.n	401002 <m2m_wifi_cb+0x24e>
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
  400f9c:	282a      	cmp	r0, #42	; 0x2a
  400f9e:	d10d      	bne.n	400fbc <m2m_wifi_cb+0x208>
	{
		tstrM2MDefaultConnResp	strResp;
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
  400fa0:	2301      	movs	r3, #1
  400fa2:	2204      	movs	r2, #4
  400fa4:	a903      	add	r1, sp, #12
  400fa6:	4628      	mov	r0, r5
  400fa8:	4c17      	ldr	r4, [pc, #92]	; (401008 <m2m_wifi_cb+0x254>)
  400faa:	47a0      	blx	r4
  400fac:	bb48      	cbnz	r0, 401002 <m2m_wifi_cb+0x24e>
		{
			if(gpfAppWifiCb)
  400fae:	4b17      	ldr	r3, [pc, #92]	; (40100c <m2m_wifi_cb+0x258>)
  400fb0:	681b      	ldr	r3, [r3, #0]
  400fb2:	b333      	cbz	r3, 401002 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
  400fb4:	a903      	add	r1, sp, #12
  400fb6:	202a      	movs	r0, #42	; 0x2a
  400fb8:	4798      	blx	r3
  400fba:	e022      	b.n	401002 <m2m_wifi_cb+0x24e>
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
  400fbc:	2820      	cmp	r0, #32
  400fbe:	d115      	bne.n	400fec <m2m_wifi_cb+0x238>
	{
		tstrPrng strPrng;
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
  400fc0:	2300      	movs	r3, #0
  400fc2:	2208      	movs	r2, #8
  400fc4:	a903      	add	r1, sp, #12
  400fc6:	4628      	mov	r0, r5
  400fc8:	4c0f      	ldr	r4, [pc, #60]	; (401008 <m2m_wifi_cb+0x254>)
  400fca:	47a0      	blx	r4
  400fcc:	b9c8      	cbnz	r0, 401002 <m2m_wifi_cb+0x24e>
		{
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
  400fce:	2301      	movs	r3, #1
  400fd0:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  400fd4:	9903      	ldr	r1, [sp, #12]
  400fd6:	f105 0008 	add.w	r0, r5, #8
  400fda:	47a0      	blx	r4
  400fdc:	b988      	cbnz	r0, 401002 <m2m_wifi_cb+0x24e>
			{
				if(gpfAppWifiCb)
  400fde:	4b0b      	ldr	r3, [pc, #44]	; (40100c <m2m_wifi_cb+0x258>)
  400fe0:	681b      	ldr	r3, [r3, #0]
  400fe2:	b173      	cbz	r3, 401002 <m2m_wifi_cb+0x24e>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
  400fe4:	a903      	add	r1, sp, #12
  400fe6:	2020      	movs	r0, #32
  400fe8:	4798      	blx	r3
  400fea:	e00a      	b.n	401002 <m2m_wifi_cb+0x24e>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
  400fec:	f44f 7295 	mov.w	r2, #298	; 0x12a
  400ff0:	490e      	ldr	r1, [pc, #56]	; (40102c <m2m_wifi_cb+0x278>)
  400ff2:	480f      	ldr	r0, [pc, #60]	; (401030 <m2m_wifi_cb+0x27c>)
  400ff4:	4d08      	ldr	r5, [pc, #32]	; (401018 <m2m_wifi_cb+0x264>)
  400ff6:	47a8      	blx	r5
  400ff8:	4621      	mov	r1, r4
  400ffa:	480e      	ldr	r0, [pc, #56]	; (401034 <m2m_wifi_cb+0x280>)
  400ffc:	47a8      	blx	r5
  400ffe:	4808      	ldr	r0, [pc, #32]	; (401020 <m2m_wifi_cb+0x26c>)
  401000:	47a8      	blx	r5
	}
}
  401002:	b01f      	add	sp, #124	; 0x7c
  401004:	bd30      	pop	{r4, r5, pc}
  401006:	bf00      	nop
  401008:	00400bc5 	.word	0x00400bc5
  40100c:	2040093c 	.word	0x2040093c
  401010:	00400569 	.word	0x00400569
  401014:	00407780 	.word	0x00407780
  401018:	00404475 	.word	0x00404475
  40101c:	0040778c 	.word	0x0040778c
  401020:	004074bc 	.word	0x004074bc
  401024:	20400940 	.word	0x20400940
  401028:	20400941 	.word	0x20400941
  40102c:	00407758 	.word	0x00407758
  401030:	00407490 	.word	0x00407490
  401034:	004077ac 	.word	0x004077ac

00401038 <m2m_validate_ap_parameters>:
_EXIT0:
	return ret;
}

static sint8 m2m_validate_ap_parameters(CONST tstrM2MAPConfig* pstrM2MAPConfig)
{
  401038:	b510      	push	{r4, lr}
	sint8 s8Ret = M2M_SUCCESS;
	/* Check for incoming pointer */
	if(pstrM2MAPConfig == NULL)
  40103a:	b960      	cbnz	r0, 401056 <m2m_validate_ap_parameters+0x1e>
	{
		M2M_ERR("INVALID POINTER\n");
  40103c:	f240 1243 	movw	r2, #323	; 0x143
  401040:	494e      	ldr	r1, [pc, #312]	; (40117c <m2m_validate_ap_parameters+0x144>)
  401042:	484f      	ldr	r0, [pc, #316]	; (401180 <m2m_validate_ap_parameters+0x148>)
  401044:	4c4f      	ldr	r4, [pc, #316]	; (401184 <m2m_validate_ap_parameters+0x14c>)
  401046:	47a0      	blx	r4
  401048:	484f      	ldr	r0, [pc, #316]	; (401188 <m2m_validate_ap_parameters+0x150>)
  40104a:	47a0      	blx	r4
  40104c:	484f      	ldr	r0, [pc, #316]	; (40118c <m2m_validate_ap_parameters+0x154>)
  40104e:	47a0      	blx	r4
		s8Ret = M2M_ERR_FAIL;
  401050:	f06f 000b 	mvn.w	r0, #11
		goto ERR1;
  401054:	bd10      	pop	{r4, pc}
  401056:	4604      	mov	r4, r0
	}
	/* Check for SSID */
	if((m2m_strlen((uint8 *)pstrM2MAPConfig->au8SSID) <= 0) || (m2m_strlen((uint8 *)pstrM2MAPConfig->au8SSID) >= M2M_MAX_SSID_LEN))
  401058:	4b4d      	ldr	r3, [pc, #308]	; (401190 <m2m_validate_ap_parameters+0x158>)
  40105a:	4798      	blx	r3
  40105c:	b120      	cbz	r0, 401068 <m2m_validate_ap_parameters+0x30>
  40105e:	4620      	mov	r0, r4
  401060:	4b4b      	ldr	r3, [pc, #300]	; (401190 <m2m_validate_ap_parameters+0x158>)
  401062:	4798      	blx	r3
  401064:	2820      	cmp	r0, #32
  401066:	d90c      	bls.n	401082 <m2m_validate_ap_parameters+0x4a>
	{
		M2M_ERR("INVALID SSID\n");
  401068:	f44f 72a5 	mov.w	r2, #330	; 0x14a
  40106c:	4943      	ldr	r1, [pc, #268]	; (40117c <m2m_validate_ap_parameters+0x144>)
  40106e:	4844      	ldr	r0, [pc, #272]	; (401180 <m2m_validate_ap_parameters+0x148>)
  401070:	4c44      	ldr	r4, [pc, #272]	; (401184 <m2m_validate_ap_parameters+0x14c>)
  401072:	47a0      	blx	r4
  401074:	4847      	ldr	r0, [pc, #284]	; (401194 <m2m_validate_ap_parameters+0x15c>)
  401076:	47a0      	blx	r4
  401078:	4844      	ldr	r0, [pc, #272]	; (40118c <m2m_validate_ap_parameters+0x154>)
  40107a:	47a0      	blx	r4
		s8Ret = M2M_ERR_FAIL;
  40107c:	f06f 000b 	mvn.w	r0, #11
		goto ERR1;
  401080:	bd10      	pop	{r4, pc}
	}
	/* Check for Channel */
	if(pstrM2MAPConfig->u8ListenChannel > M2M_WIFI_CH_14 || pstrM2MAPConfig->u8ListenChannel < M2M_WIFI_CH_1)
  401082:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
  401086:	2b0d      	cmp	r3, #13
  401088:	d90c      	bls.n	4010a4 <m2m_validate_ap_parameters+0x6c>
	{
		M2M_ERR("INVALID CH\n");
  40108a:	f240 1251 	movw	r2, #337	; 0x151
  40108e:	493b      	ldr	r1, [pc, #236]	; (40117c <m2m_validate_ap_parameters+0x144>)
  401090:	483b      	ldr	r0, [pc, #236]	; (401180 <m2m_validate_ap_parameters+0x148>)
  401092:	4c3c      	ldr	r4, [pc, #240]	; (401184 <m2m_validate_ap_parameters+0x14c>)
  401094:	47a0      	blx	r4
  401096:	4840      	ldr	r0, [pc, #256]	; (401198 <m2m_validate_ap_parameters+0x160>)
  401098:	47a0      	blx	r4
  40109a:	483c      	ldr	r0, [pc, #240]	; (40118c <m2m_validate_ap_parameters+0x154>)
  40109c:	47a0      	blx	r4
		s8Ret = M2M_ERR_FAIL;
  40109e:	f06f 000b 	mvn.w	r0, #11
		goto ERR1;
  4010a2:	bd10      	pop	{r4, pc}
	}
	/* Check for DHCP Server IP address */
	if(!(pstrM2MAPConfig->au8DHCPServerIP[0] || pstrM2MAPConfig->au8DHCPServerIP[1]))
  4010a4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  4010a8:	b993      	cbnz	r3, 4010d0 <m2m_validate_ap_parameters+0x98>
  4010aa:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  4010ae:	b97b      	cbnz	r3, 4010d0 <m2m_validate_ap_parameters+0x98>
	{
		if(!(pstrM2MAPConfig->au8DHCPServerIP[2]))
  4010b0:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
  4010b4:	b963      	cbnz	r3, 4010d0 <m2m_validate_ap_parameters+0x98>
		{
			M2M_ERR("INVALID DHCP SERVER IP\n");
  4010b6:	f44f 72ad 	mov.w	r2, #346	; 0x15a
  4010ba:	4930      	ldr	r1, [pc, #192]	; (40117c <m2m_validate_ap_parameters+0x144>)
  4010bc:	4830      	ldr	r0, [pc, #192]	; (401180 <m2m_validate_ap_parameters+0x148>)
  4010be:	4c31      	ldr	r4, [pc, #196]	; (401184 <m2m_validate_ap_parameters+0x14c>)
  4010c0:	47a0      	blx	r4
  4010c2:	4836      	ldr	r0, [pc, #216]	; (40119c <m2m_validate_ap_parameters+0x164>)
  4010c4:	47a0      	blx	r4
  4010c6:	4831      	ldr	r0, [pc, #196]	; (40118c <m2m_validate_ap_parameters+0x154>)
  4010c8:	47a0      	blx	r4
			s8Ret = M2M_ERR_FAIL;
  4010ca:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  4010ce:	bd10      	pop	{r4, pc}
		}
	}
	/* Check for Security */
	if(pstrM2MAPConfig->u8SecType == M2M_WIFI_SEC_OPEN)
  4010d0:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
  4010d4:	2b01      	cmp	r3, #1
  4010d6:	d04c      	beq.n	401172 <m2m_validate_ap_parameters+0x13a>
	{
		goto ERR1;
	}
	else if(pstrM2MAPConfig->u8SecType == M2M_WIFI_SEC_WEP)
  4010d8:	2b03      	cmp	r3, #3
  4010da:	d13d      	bne.n	401158 <m2m_validate_ap_parameters+0x120>
	{
		/* Check for WEP Key index */
		if((pstrM2MAPConfig->u8KeyIndx <= 0) || (pstrM2MAPConfig->u8KeyIndx > WEP_KEY_MAX_INDEX))
  4010dc:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
  4010e0:	3b01      	subs	r3, #1
  4010e2:	b2db      	uxtb	r3, r3
  4010e4:	2b03      	cmp	r3, #3
  4010e6:	d90c      	bls.n	401102 <m2m_validate_ap_parameters+0xca>
		{
			M2M_ERR("INVALID KEY INDEX\n");
  4010e8:	f240 1269 	movw	r2, #361	; 0x169
  4010ec:	4923      	ldr	r1, [pc, #140]	; (40117c <m2m_validate_ap_parameters+0x144>)
  4010ee:	4824      	ldr	r0, [pc, #144]	; (401180 <m2m_validate_ap_parameters+0x148>)
  4010f0:	4c24      	ldr	r4, [pc, #144]	; (401184 <m2m_validate_ap_parameters+0x14c>)
  4010f2:	47a0      	blx	r4
  4010f4:	482a      	ldr	r0, [pc, #168]	; (4011a0 <m2m_validate_ap_parameters+0x168>)
  4010f6:	47a0      	blx	r4
  4010f8:	4824      	ldr	r0, [pc, #144]	; (40118c <m2m_validate_ap_parameters+0x154>)
  4010fa:	47a0      	blx	r4
			s8Ret = M2M_ERR_FAIL;
  4010fc:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  401100:	bd10      	pop	{r4, pc}
		}
		/* Check for WEP Key size */
		if(	(pstrM2MAPConfig->u8KeySz != WEP_40_KEY_STRING_SIZE) &&
  401102:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
  401106:	f003 03ef 	and.w	r3, r3, #239	; 0xef
  40110a:	2b0a      	cmp	r3, #10
  40110c:	d00c      	beq.n	401128 <m2m_validate_ap_parameters+0xf0>
			(pstrM2MAPConfig->u8KeySz != WEP_104_KEY_STRING_SIZE)
		)
		{
			M2M_ERR("INVALID KEY SIZE\n");
  40110e:	f44f 72b9 	mov.w	r2, #370	; 0x172
  401112:	491a      	ldr	r1, [pc, #104]	; (40117c <m2m_validate_ap_parameters+0x144>)
  401114:	481a      	ldr	r0, [pc, #104]	; (401180 <m2m_validate_ap_parameters+0x148>)
  401116:	4c1b      	ldr	r4, [pc, #108]	; (401184 <m2m_validate_ap_parameters+0x14c>)
  401118:	47a0      	blx	r4
  40111a:	4822      	ldr	r0, [pc, #136]	; (4011a4 <m2m_validate_ap_parameters+0x16c>)
  40111c:	47a0      	blx	r4
  40111e:	481b      	ldr	r0, [pc, #108]	; (40118c <m2m_validate_ap_parameters+0x154>)
  401120:	47a0      	blx	r4
			s8Ret = M2M_ERR_FAIL;
  401122:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  401126:	bd10      	pop	{r4, pc}
		}
		/* Check for WEP Key */
		if((pstrM2MAPConfig->au8WepKey == NULL) || (m2m_strlen((uint8 *)pstrM2MAPConfig->au8WepKey) <= 0) || (m2m_strlen((uint8 *)pstrM2MAPConfig->au8WepKey) > WEP_104_KEY_STRING_SIZE))
  401128:	3424      	adds	r4, #36	; 0x24
  40112a:	d008      	beq.n	40113e <m2m_validate_ap_parameters+0x106>
  40112c:	4620      	mov	r0, r4
  40112e:	4b18      	ldr	r3, [pc, #96]	; (401190 <m2m_validate_ap_parameters+0x158>)
  401130:	4798      	blx	r3
  401132:	b120      	cbz	r0, 40113e <m2m_validate_ap_parameters+0x106>
  401134:	4620      	mov	r0, r4
  401136:	4b16      	ldr	r3, [pc, #88]	; (401190 <m2m_validate_ap_parameters+0x158>)
  401138:	4798      	blx	r3
  40113a:	281a      	cmp	r0, #26
  40113c:	d91b      	bls.n	401176 <m2m_validate_ap_parameters+0x13e>
		{
			M2M_ERR("INVALID WEP KEY\n");
  40113e:	f240 1279 	movw	r2, #377	; 0x179
  401142:	490e      	ldr	r1, [pc, #56]	; (40117c <m2m_validate_ap_parameters+0x144>)
  401144:	480e      	ldr	r0, [pc, #56]	; (401180 <m2m_validate_ap_parameters+0x148>)
  401146:	4c0f      	ldr	r4, [pc, #60]	; (401184 <m2m_validate_ap_parameters+0x14c>)
  401148:	47a0      	blx	r4
  40114a:	4817      	ldr	r0, [pc, #92]	; (4011a8 <m2m_validate_ap_parameters+0x170>)
  40114c:	47a0      	blx	r4
  40114e:	480f      	ldr	r0, [pc, #60]	; (40118c <m2m_validate_ap_parameters+0x154>)
  401150:	47a0      	blx	r4
			s8Ret = M2M_ERR_FAIL;
  401152:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  401156:	bd10      	pop	{r4, pc}
		}
	}
	else
	{
		M2M_ERR("INVALID AUTHENTICATION MODE\n");
  401158:	f44f 72c0 	mov.w	r2, #384	; 0x180
  40115c:	4907      	ldr	r1, [pc, #28]	; (40117c <m2m_validate_ap_parameters+0x144>)
  40115e:	4808      	ldr	r0, [pc, #32]	; (401180 <m2m_validate_ap_parameters+0x148>)
  401160:	4c08      	ldr	r4, [pc, #32]	; (401184 <m2m_validate_ap_parameters+0x14c>)
  401162:	47a0      	blx	r4
  401164:	4811      	ldr	r0, [pc, #68]	; (4011ac <m2m_validate_ap_parameters+0x174>)
  401166:	47a0      	blx	r4
  401168:	4808      	ldr	r0, [pc, #32]	; (40118c <m2m_validate_ap_parameters+0x154>)
  40116a:	47a0      	blx	r4
		s8Ret = M2M_ERR_FAIL;
  40116c:	f06f 000b 	mvn.w	r0, #11
		goto ERR1;
  401170:	bd10      	pop	{r4, pc}
	return ret;
}

static sint8 m2m_validate_ap_parameters(CONST tstrM2MAPConfig* pstrM2MAPConfig)
{
	sint8 s8Ret = M2M_SUCCESS;
  401172:	2000      	movs	r0, #0
  401174:	bd10      	pop	{r4, pc}
  401176:	2000      	movs	r0, #0
		goto ERR1;
	}
	
ERR1:
	return s8Ret;
}
  401178:	bd10      	pop	{r4, pc}
  40117a:	bf00      	nop
  40117c:	00407764 	.word	0x00407764
  401180:	00407490 	.word	0x00407490
  401184:	00404475 	.word	0x00404475
  401188:	004077c0 	.word	0x004077c0
  40118c:	004074bc 	.word	0x004074bc
  401190:	00400579 	.word	0x00400579
  401194:	004077d4 	.word	0x004077d4
  401198:	004077e4 	.word	0x004077e4
  40119c:	004077f0 	.word	0x004077f0
  4011a0:	00407808 	.word	0x00407808
  4011a4:	0040781c 	.word	0x0040781c
  4011a8:	00407830 	.word	0x00407830
  4011ac:	00407844 	.word	0x00407844

004011b0 <m2m_wifi_init>:
	}	
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
  4011b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4011b2:	b08b      	sub	sp, #44	; 0x2c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
  4011b4:	2301      	movs	r3, #1
  4011b6:	f88d 3007 	strb.w	r3, [sp, #7]
	
	if(param == NULL) {
  4011ba:	2800      	cmp	r0, #0
  4011bc:	d04e      	beq.n	40125c <m2m_wifi_init+0xac>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
  4011be:	6802      	ldr	r2, [r0, #0]
  4011c0:	4b29      	ldr	r3, [pc, #164]	; (401268 <m2m_wifi_init+0xb8>)
  4011c2:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
  4011c4:	2200      	movs	r2, #0
  4011c6:	4b29      	ldr	r3, [pc, #164]	; (40126c <m2m_wifi_init+0xbc>)
  4011c8:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
  4011ca:	f10d 0007 	add.w	r0, sp, #7
  4011ce:	4b28      	ldr	r3, [pc, #160]	; (401270 <m2m_wifi_init+0xc0>)
  4011d0:	4798      	blx	r3
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
  4011d2:	4604      	mov	r4, r0
  4011d4:	2800      	cmp	r0, #0
  4011d6:	d143      	bne.n	401260 <m2m_wifi_init+0xb0>
	/* Initialize host interface module */
	ret = hif_init(NULL);
  4011d8:	4b26      	ldr	r3, [pc, #152]	; (401274 <m2m_wifi_init+0xc4>)
  4011da:	4798      	blx	r3
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
  4011dc:	4604      	mov	r4, r0
  4011de:	2800      	cmp	r0, #0
  4011e0:	d138      	bne.n	401254 <m2m_wifi_init+0xa4>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
  4011e2:	4925      	ldr	r1, [pc, #148]	; (401278 <m2m_wifi_init+0xc8>)
  4011e4:	2001      	movs	r0, #1
  4011e6:	4b25      	ldr	r3, [pc, #148]	; (40127c <m2m_wifi_init+0xcc>)
  4011e8:	4798      	blx	r3

	ret = nm_get_firmware_info(&strtmp);
  4011ea:	a802      	add	r0, sp, #8
  4011ec:	4b24      	ldr	r3, [pc, #144]	; (401280 <m2m_wifi_init+0xd0>)
  4011ee:	4798      	blx	r3
  4011f0:	4604      	mov	r4, r0

	M2M_INFO("Firmware ver   : %u.%u.%u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch);
  4011f2:	4f24      	ldr	r7, [pc, #144]	; (401284 <m2m_wifi_init+0xd4>)
  4011f4:	4638      	mov	r0, r7
  4011f6:	4d24      	ldr	r5, [pc, #144]	; (401288 <m2m_wifi_init+0xd8>)
  4011f8:	47a8      	blx	r5
  4011fa:	f89d 300e 	ldrb.w	r3, [sp, #14]
  4011fe:	f89d 200d 	ldrb.w	r2, [sp, #13]
  401202:	f89d 100c 	ldrb.w	r1, [sp, #12]
  401206:	4821      	ldr	r0, [pc, #132]	; (40128c <m2m_wifi_init+0xdc>)
  401208:	47a8      	blx	r5
  40120a:	4e21      	ldr	r6, [pc, #132]	; (401290 <m2m_wifi_init+0xe0>)
  40120c:	4630      	mov	r0, r6
  40120e:	47a8      	blx	r5
	M2M_INFO("Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
  401210:	4638      	mov	r0, r7
  401212:	47a8      	blx	r5
  401214:	f89d 3011 	ldrb.w	r3, [sp, #17]
  401218:	f89d 2010 	ldrb.w	r2, [sp, #16]
  40121c:	f89d 100f 	ldrb.w	r1, [sp, #15]
  401220:	481c      	ldr	r0, [pc, #112]	; (401294 <m2m_wifi_init+0xe4>)
  401222:	47a8      	blx	r5
  401224:	4630      	mov	r0, r6
  401226:	47a8      	blx	r5
	M2M_INFO("Curr driver ver: %u.%u.%u\n", M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
  401228:	4638      	mov	r0, r7
  40122a:	47a8      	blx	r5
  40122c:	2300      	movs	r3, #0
  40122e:	2203      	movs	r2, #3
  401230:	2113      	movs	r1, #19
  401232:	4819      	ldr	r0, [pc, #100]	; (401298 <m2m_wifi_init+0xe8>)
  401234:	47a8      	blx	r5
  401236:	4630      	mov	r0, r6
  401238:	47a8      	blx	r5
	if(M2M_ERR_FW_VER_MISMATCH == ret)
  40123a:	f114 0f0d 	cmn.w	r4, #13
  40123e:	d10f      	bne.n	401260 <m2m_wifi_init+0xb0>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
  401240:	f240 12d5 	movw	r2, #469	; 0x1d5
  401244:	4915      	ldr	r1, [pc, #84]	; (40129c <m2m_wifi_init+0xec>)
  401246:	4816      	ldr	r0, [pc, #88]	; (4012a0 <m2m_wifi_init+0xf0>)
  401248:	47a8      	blx	r5
  40124a:	4816      	ldr	r0, [pc, #88]	; (4012a4 <m2m_wifi_init+0xf4>)
  40124c:	47a8      	blx	r5
  40124e:	4630      	mov	r0, r6
  401250:	47a8      	blx	r5
  401252:	e005      	b.n	401260 <m2m_wifi_init+0xb0>
	}

	goto _EXIT0;

_EXIT1:
	nm_drv_deinit(NULL);
  401254:	2000      	movs	r0, #0
  401256:	4b14      	ldr	r3, [pc, #80]	; (4012a8 <m2m_wifi_init+0xf8>)
  401258:	4798      	blx	r3
  40125a:	e001      	b.n	401260 <m2m_wifi_init+0xb0>
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
	
	if(param == NULL) {
		ret = M2M_ERR_FAIL;
  40125c:	f06f 040b 	mvn.w	r4, #11

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
  401260:	4620      	mov	r0, r4
  401262:	b00b      	add	sp, #44	; 0x2c
  401264:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401266:	bf00      	nop
  401268:	2040093c 	.word	0x2040093c
  40126c:	20400940 	.word	0x20400940
  401270:	00401dc9 	.word	0x00401dc9
  401274:	00400d65 	.word	0x00400d65
  401278:	00400db5 	.word	0x00400db5
  40127c:	00400cd5 	.word	0x00400cd5
  401280:	00401d1d 	.word	0x00401d1d
  401284:	00407780 	.word	0x00407780
  401288:	00404475 	.word	0x00404475
  40128c:	00407864 	.word	0x00407864
  401290:	004074bc 	.word	0x004074bc
  401294:	00407880 	.word	0x00407880
  401298:	0040789c 	.word	0x0040789c
  40129c:	00407aa8 	.word	0x00407aa8
  4012a0:	00407490 	.word	0x00407490
  4012a4:	004078b8 	.word	0x004078b8
  4012a8:	00401e91 	.word	0x00401e91

004012ac <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
  4012ac:	b508      	push	{r3, lr}
	return hif_handle_isr();
  4012ae:	4b01      	ldr	r3, [pc, #4]	; (4012b4 <m2m_wifi_handle_events+0x8>)
  4012b0:	4798      	blx	r3
}
  4012b2:	bd08      	pop	{r3, pc}
  4012b4:	004008a5 	.word	0x004008a5

004012b8 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
  4012b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4012bc:	b0a0      	sub	sp, #128	; 0x80
  4012be:	4680      	mov	r8, r0
  4012c0:	460d      	mov	r5, r1
  4012c2:	4614      	mov	r4, r2
  4012c4:	461e      	mov	r6, r3
  4012c6:	f8bd 7098 	ldrh.w	r7, [sp, #152]	; 0x98
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
  4012ca:	2a01      	cmp	r2, #1
  4012cc:	d045      	beq.n	40135a <m2m_wifi_connect_sc+0xa2>
	{
		if(pvAuthInfo == NULL)
  4012ce:	b963      	cbnz	r3, 4012ea <m2m_wifi_connect_sc+0x32>
		{
			M2M_ERR("Key is not valid\n");
  4012d0:	f240 2203 	movw	r2, #515	; 0x203
  4012d4:	497a      	ldr	r1, [pc, #488]	; (4014c0 <m2m_wifi_connect_sc+0x208>)
  4012d6:	487b      	ldr	r0, [pc, #492]	; (4014c4 <m2m_wifi_connect_sc+0x20c>)
  4012d8:	4c7b      	ldr	r4, [pc, #492]	; (4014c8 <m2m_wifi_connect_sc+0x210>)
  4012da:	47a0      	blx	r4
  4012dc:	487b      	ldr	r0, [pc, #492]	; (4014cc <m2m_wifi_connect_sc+0x214>)
  4012de:	47a0      	blx	r4
  4012e0:	487b      	ldr	r0, [pc, #492]	; (4014d0 <m2m_wifi_connect_sc+0x218>)
  4012e2:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  4012e4:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  4012e8:	e0e7      	b.n	4014ba <m2m_wifi_connect_sc+0x202>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
  4012ea:	2a02      	cmp	r2, #2
  4012ec:	d135      	bne.n	40135a <m2m_wifi_connect_sc+0xa2>
  4012ee:	4618      	mov	r0, r3
  4012f0:	4b78      	ldr	r3, [pc, #480]	; (4014d4 <m2m_wifi_connect_sc+0x21c>)
  4012f2:	4798      	blx	r3
  4012f4:	2840      	cmp	r0, #64	; 0x40
  4012f6:	d130      	bne.n	40135a <m2m_wifi_connect_sc+0xa2>
		{
			uint8 i = 0;
			uint8* pu8Psk = (uint8*)pvAuthInfo;
			while(i < (M2M_MAX_PSK_LEN-1))
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
  4012f8:	7833      	ldrb	r3, [r6, #0]
  4012fa:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4012fe:	b2d2      	uxtb	r2, r2
  401300:	2a36      	cmp	r2, #54	; 0x36
  401302:	d81b      	bhi.n	40133c <m2m_wifi_connect_sc+0x84>
  401304:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
  401308:	b2d2      	uxtb	r2, r2
  40130a:	2a06      	cmp	r2, #6
  40130c:	d916      	bls.n	40133c <m2m_wifi_connect_sc+0x84>
  40130e:	3b47      	subs	r3, #71	; 0x47
  401310:	b2db      	uxtb	r3, r3
  401312:	2b19      	cmp	r3, #25
  401314:	d912      	bls.n	40133c <m2m_wifi_connect_sc+0x84>
  401316:	4631      	mov	r1, r6
  401318:	f106 003f 	add.w	r0, r6, #63	; 0x3f
  40131c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  401320:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
  401324:	b2d2      	uxtb	r2, r2
  401326:	2a06      	cmp	r2, #6
  401328:	d908      	bls.n	40133c <m2m_wifi_connect_sc+0x84>
  40132a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40132e:	b2d2      	uxtb	r2, r2
  401330:	2a36      	cmp	r2, #54	; 0x36
  401332:	d803      	bhi.n	40133c <m2m_wifi_connect_sc+0x84>
  401334:	3b47      	subs	r3, #71	; 0x47
  401336:	b2db      	uxtb	r3, r3
  401338:	2b19      	cmp	r3, #25
  40133a:	d80c      	bhi.n	401356 <m2m_wifi_connect_sc+0x9e>
				{
					M2M_ERR("Invalid Key\n");
  40133c:	f240 220f 	movw	r2, #527	; 0x20f
  401340:	495f      	ldr	r1, [pc, #380]	; (4014c0 <m2m_wifi_connect_sc+0x208>)
  401342:	4860      	ldr	r0, [pc, #384]	; (4014c4 <m2m_wifi_connect_sc+0x20c>)
  401344:	4c60      	ldr	r4, [pc, #384]	; (4014c8 <m2m_wifi_connect_sc+0x210>)
  401346:	47a0      	blx	r4
  401348:	4863      	ldr	r0, [pc, #396]	; (4014d8 <m2m_wifi_connect_sc+0x220>)
  40134a:	47a0      	blx	r4
  40134c:	4860      	ldr	r0, [pc, #384]	; (4014d0 <m2m_wifi_connect_sc+0x218>)
  40134e:	47a0      	blx	r4
					ret = M2M_ERR_FAIL;
  401350:	f06f 000b 	mvn.w	r0, #11
					goto ERR1;
  401354:	e0b1      	b.n	4014ba <m2m_wifi_connect_sc+0x202>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
		{
			uint8 i = 0;
			uint8* pu8Psk = (uint8*)pvAuthInfo;
			while(i < (M2M_MAX_PSK_LEN-1))
  401356:	4288      	cmp	r0, r1
  401358:	d1e0      	bne.n	40131c <m2m_wifi_connect_sc+0x64>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
  40135a:	1e6b      	subs	r3, r5, #1
  40135c:	b2db      	uxtb	r3, r3
  40135e:	2b1f      	cmp	r3, #31
  401360:	d90c      	bls.n	40137c <m2m_wifi_connect_sc+0xc4>
	{
		M2M_ERR("SSID LEN INVALID\n");
  401362:	f240 2219 	movw	r2, #537	; 0x219
  401366:	4956      	ldr	r1, [pc, #344]	; (4014c0 <m2m_wifi_connect_sc+0x208>)
  401368:	4856      	ldr	r0, [pc, #344]	; (4014c4 <m2m_wifi_connect_sc+0x20c>)
  40136a:	4c57      	ldr	r4, [pc, #348]	; (4014c8 <m2m_wifi_connect_sc+0x210>)
  40136c:	47a0      	blx	r4
  40136e:	485b      	ldr	r0, [pc, #364]	; (4014dc <m2m_wifi_connect_sc+0x224>)
  401370:	47a0      	blx	r4
  401372:	4857      	ldr	r0, [pc, #348]	; (4014d0 <m2m_wifi_connect_sc+0x218>)
  401374:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  401376:	f06f 000b 	mvn.w	r0, #11
		goto ERR1;
  40137a:	e09e      	b.n	4014ba <m2m_wifi_connect_sc+0x202>
	}

	if(u16Ch>M2M_WIFI_CH_14)
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
  40137c:	2fff      	cmp	r7, #255	; 0xff
  40137e:	d00e      	beq.n	40139e <m2m_wifi_connect_sc+0xe6>
  401380:	2f0d      	cmp	r7, #13
  401382:	d90c      	bls.n	40139e <m2m_wifi_connect_sc+0xe6>
		{
			M2M_ERR("CH INVALID\n");
  401384:	f240 2222 	movw	r2, #546	; 0x222
  401388:	494d      	ldr	r1, [pc, #308]	; (4014c0 <m2m_wifi_connect_sc+0x208>)
  40138a:	484e      	ldr	r0, [pc, #312]	; (4014c4 <m2m_wifi_connect_sc+0x20c>)
  40138c:	4c4e      	ldr	r4, [pc, #312]	; (4014c8 <m2m_wifi_connect_sc+0x210>)
  40138e:	47a0      	blx	r4
  401390:	4853      	ldr	r0, [pc, #332]	; (4014e0 <m2m_wifi_connect_sc+0x228>)
  401392:	47a0      	blx	r4
  401394:	484e      	ldr	r0, [pc, #312]	; (4014d0 <m2m_wifi_connect_sc+0x218>)
  401396:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  401398:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  40139c:	e08d      	b.n	4014ba <m2m_wifi_connect_sc+0x202>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
  40139e:	462a      	mov	r2, r5
  4013a0:	4641      	mov	r1, r8
  4013a2:	f10d 005a 	add.w	r0, sp, #90	; 0x5a
  4013a6:	4b4f      	ldr	r3, [pc, #316]	; (4014e4 <m2m_wifi_connect_sc+0x22c>)
  4013a8:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
  4013aa:	ab20      	add	r3, sp, #128	; 0x80
  4013ac:	441d      	add	r5, r3
  4013ae:	2300      	movs	r3, #0
  4013b0:	f805 3c26 	strb.w	r3, [r5, #-38]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
  4013b4:	f8ad 7058 	strh.w	r7, [sp, #88]	; 0x58
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
  4013b8:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
  4013bc:	3300      	adds	r3, #0
  4013be:	bf18      	it	ne
  4013c0:	2301      	movne	r3, #1
  4013c2:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
  4013c6:	f88d 4055 	strb.w	r4, [sp, #85]	; 0x55

	if(u8SecType == M2M_WIFI_SEC_WEP)
  4013ca:	2c03      	cmp	r4, #3
  4013cc:	d138      	bne.n	401440 <m2m_wifi_connect_sc+0x188>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
  4013ce:	7833      	ldrb	r3, [r6, #0]
  4013d0:	3b01      	subs	r3, #1
  4013d2:	b2db      	uxtb	r3, r3
  4013d4:	f88d 3014 	strb.w	r3, [sp, #20]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
  4013d8:	2b03      	cmp	r3, #3
  4013da:	d90e      	bls.n	4013fa <m2m_wifi_connect_sc+0x142>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
  4013dc:	f240 2239 	movw	r2, #569	; 0x239
  4013e0:	4937      	ldr	r1, [pc, #220]	; (4014c0 <m2m_wifi_connect_sc+0x208>)
  4013e2:	4838      	ldr	r0, [pc, #224]	; (4014c4 <m2m_wifi_connect_sc+0x20c>)
  4013e4:	4c38      	ldr	r4, [pc, #224]	; (4014c8 <m2m_wifi_connect_sc+0x210>)
  4013e6:	47a0      	blx	r4
  4013e8:	f89d 1014 	ldrb.w	r1, [sp, #20]
  4013ec:	483e      	ldr	r0, [pc, #248]	; (4014e8 <m2m_wifi_connect_sc+0x230>)
  4013ee:	47a0      	blx	r4
  4013f0:	4837      	ldr	r0, [pc, #220]	; (4014d0 <m2m_wifi_connect_sc+0x218>)
  4013f2:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  4013f4:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  4013f8:	e05f      	b.n	4014ba <m2m_wifi_connect_sc+0x202>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
  4013fa:	7872      	ldrb	r2, [r6, #1]
  4013fc:	1e53      	subs	r3, r2, #1
  4013fe:	f88d 3015 	strb.w	r3, [sp, #21]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
  401402:	f002 03ef 	and.w	r3, r2, #239	; 0xef
  401406:	2b0b      	cmp	r3, #11
  401408:	d00e      	beq.n	401428 <m2m_wifi_connect_sc+0x170>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
  40140a:	f44f 7210 	mov.w	r2, #576	; 0x240
  40140e:	492c      	ldr	r1, [pc, #176]	; (4014c0 <m2m_wifi_connect_sc+0x208>)
  401410:	482c      	ldr	r0, [pc, #176]	; (4014c4 <m2m_wifi_connect_sc+0x20c>)
  401412:	4c2d      	ldr	r4, [pc, #180]	; (4014c8 <m2m_wifi_connect_sc+0x210>)
  401414:	47a0      	blx	r4
  401416:	f89d 1015 	ldrb.w	r1, [sp, #21]
  40141a:	4834      	ldr	r0, [pc, #208]	; (4014ec <m2m_wifi_connect_sc+0x234>)
  40141c:	47a0      	blx	r4
  40141e:	482c      	ldr	r0, [pc, #176]	; (4014d0 <m2m_wifi_connect_sc+0x218>)
  401420:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  401422:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  401426:	e048      	b.n	4014ba <m2m_wifi_connect_sc+0x202>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
  401428:	1cb1      	adds	r1, r6, #2
  40142a:	f10d 0016 	add.w	r0, sp, #22
  40142e:	4b2d      	ldr	r3, [pc, #180]	; (4014e4 <m2m_wifi_connect_sc+0x22c>)
  401430:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
  401432:	7873      	ldrb	r3, [r6, #1]
  401434:	aa20      	add	r2, sp, #128	; 0x80
  401436:	4413      	add	r3, r2
  401438:	2200      	movs	r2, #0
  40143a:	f803 2c6a 	strb.w	r2, [r3, #-106]
  40143e:	e032      	b.n	4014a6 <m2m_wifi_connect_sc+0x1ee>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
  401440:	2c02      	cmp	r4, #2
  401442:	d119      	bne.n	401478 <m2m_wifi_connect_sc+0x1c0>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
  401444:	4630      	mov	r0, r6
  401446:	4b23      	ldr	r3, [pc, #140]	; (4014d4 <m2m_wifi_connect_sc+0x21c>)
  401448:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
  40144a:	1e43      	subs	r3, r0, #1
  40144c:	b29b      	uxth	r3, r3
  40144e:	2b3f      	cmp	r3, #63	; 0x3f
  401450:	d90c      	bls.n	40146c <m2m_wifi_connect_sc+0x1b4>
		{
			M2M_ERR("Incorrect PSK key length\n");
  401452:	f240 224f 	movw	r2, #591	; 0x24f
  401456:	491a      	ldr	r1, [pc, #104]	; (4014c0 <m2m_wifi_connect_sc+0x208>)
  401458:	481a      	ldr	r0, [pc, #104]	; (4014c4 <m2m_wifi_connect_sc+0x20c>)
  40145a:	4c1b      	ldr	r4, [pc, #108]	; (4014c8 <m2m_wifi_connect_sc+0x210>)
  40145c:	47a0      	blx	r4
  40145e:	4824      	ldr	r0, [pc, #144]	; (4014f0 <m2m_wifi_connect_sc+0x238>)
  401460:	47a0      	blx	r4
  401462:	481b      	ldr	r0, [pc, #108]	; (4014d0 <m2m_wifi_connect_sc+0x218>)
  401464:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  401466:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  40146a:	e026      	b.n	4014ba <m2m_wifi_connect_sc+0x202>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
  40146c:	1c42      	adds	r2, r0, #1
  40146e:	4631      	mov	r1, r6
  401470:	a805      	add	r0, sp, #20
  401472:	4b1c      	ldr	r3, [pc, #112]	; (4014e4 <m2m_wifi_connect_sc+0x22c>)
  401474:	4798      	blx	r3
  401476:	e016      	b.n	4014a6 <m2m_wifi_connect_sc+0x1ee>
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
  401478:	2c04      	cmp	r4, #4
  40147a:	d105      	bne.n	401488 <m2m_wifi_connect_sc+0x1d0>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
  40147c:	223e      	movs	r2, #62	; 0x3e
  40147e:	4631      	mov	r1, r6
  401480:	a805      	add	r0, sp, #20
  401482:	4b18      	ldr	r3, [pc, #96]	; (4014e4 <m2m_wifi_connect_sc+0x22c>)
  401484:	4798      	blx	r3
  401486:	e00e      	b.n	4014a6 <m2m_wifi_connect_sc+0x1ee>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
  401488:	2c01      	cmp	r4, #1
  40148a:	d00c      	beq.n	4014a6 <m2m_wifi_connect_sc+0x1ee>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
  40148c:	f240 225f 	movw	r2, #607	; 0x25f
  401490:	490b      	ldr	r1, [pc, #44]	; (4014c0 <m2m_wifi_connect_sc+0x208>)
  401492:	480c      	ldr	r0, [pc, #48]	; (4014c4 <m2m_wifi_connect_sc+0x20c>)
  401494:	4c0c      	ldr	r4, [pc, #48]	; (4014c8 <m2m_wifi_connect_sc+0x210>)
  401496:	47a0      	blx	r4
  401498:	4816      	ldr	r0, [pc, #88]	; (4014f4 <m2m_wifi_connect_sc+0x23c>)
  40149a:	47a0      	blx	r4
  40149c:	480c      	ldr	r0, [pc, #48]	; (4014d0 <m2m_wifi_connect_sc+0x218>)
  40149e:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  4014a0:	f06f 000b 	mvn.w	r0, #11
		goto ERR1;
  4014a4:	e009      	b.n	4014ba <m2m_wifi_connect_sc+0x202>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
  4014a6:	2300      	movs	r3, #0
  4014a8:	9302      	str	r3, [sp, #8]
  4014aa:	9301      	str	r3, [sp, #4]
  4014ac:	9300      	str	r3, [sp, #0]
  4014ae:	236c      	movs	r3, #108	; 0x6c
  4014b0:	aa05      	add	r2, sp, #20
  4014b2:	2128      	movs	r1, #40	; 0x28
  4014b4:	2001      	movs	r0, #1
  4014b6:	4c10      	ldr	r4, [pc, #64]	; (4014f8 <m2m_wifi_connect_sc+0x240>)
  4014b8:	47a0      	blx	r4

ERR1:
	return ret;
}
  4014ba:	b020      	add	sp, #128	; 0x80
  4014bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4014c0:	00407744 	.word	0x00407744
  4014c4:	00407490 	.word	0x00407490
  4014c8:	00404475 	.word	0x00404475
  4014cc:	004078d4 	.word	0x004078d4
  4014d0:	004074bc 	.word	0x004074bc
  4014d4:	00400579 	.word	0x00400579
  4014d8:	004078e8 	.word	0x004078e8
  4014dc:	004078f8 	.word	0x004078f8
  4014e0:	0040790c 	.word	0x0040790c
  4014e4:	00400555 	.word	0x00400555
  4014e8:	00407918 	.word	0x00407918
  4014ec:	00407934 	.word	0x00407934
  4014f0:	00407950 	.word	0x00407950
  4014f4:	0040796c 	.word	0x0040796c
  4014f8:	004006cd 	.word	0x004006cd

004014fc <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
  4014fc:	b510      	push	{r4, lr}
  4014fe:	b082      	sub	sp, #8
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
  401500:	2400      	movs	r4, #0
  401502:	9401      	str	r4, [sp, #4]
  401504:	f8bd 4010 	ldrh.w	r4, [sp, #16]
  401508:	9400      	str	r4, [sp, #0]
  40150a:	4c02      	ldr	r4, [pc, #8]	; (401514 <m2m_wifi_connect+0x18>)
  40150c:	47a0      	blx	r4
}
  40150e:	b002      	add	sp, #8
  401510:	bd10      	pop	{r4, pc}
  401512:	bf00      	nop
  401514:	004012b9 	.word	0x004012b9

00401518 <m2m_wifi_set_mac_address>:
sint8 m2m_wifi_disconnect(void)
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DISCONNECT, NULL, 0, NULL, 0,0);
}
sint8 m2m_wifi_set_mac_address(uint8 au8MacAddress[6])
{
  401518:	b510      	push	{r4, lr}
  40151a:	b086      	sub	sp, #24
	tstrM2mSetMacAddress strTmp;
	m2m_memcpy((uint8*) strTmp.au8Mac, (uint8*) au8MacAddress, 6);
  40151c:	2206      	movs	r2, #6
  40151e:	4601      	mov	r1, r0
  401520:	a804      	add	r0, sp, #16
  401522:	4b07      	ldr	r3, [pc, #28]	; (401540 <m2m_wifi_set_mac_address+0x28>)
  401524:	4798      	blx	r3
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SET_MAC_ADDRESS,
  401526:	2300      	movs	r3, #0
  401528:	9302      	str	r3, [sp, #8]
  40152a:	9301      	str	r3, [sp, #4]
  40152c:	9300      	str	r3, [sp, #0]
  40152e:	2308      	movs	r3, #8
  401530:	aa04      	add	r2, sp, #16
  401532:	2102      	movs	r1, #2
  401534:	2001      	movs	r0, #1
  401536:	4c03      	ldr	r4, [pc, #12]	; (401544 <m2m_wifi_set_mac_address+0x2c>)
  401538:	47a0      	blx	r4
		(uint8*) &strTmp, sizeof(tstrM2mSetMacAddress), NULL, 0,0);
}
  40153a:	b006      	add	sp, #24
  40153c:	bd10      	pop	{r4, pc}
  40153e:	bf00      	nop
  401540:	00400555 	.word	0x00400555
  401544:	004006cd 	.word	0x004006cd

00401548 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
  401548:	2000      	movs	r0, #0
  40154a:	4770      	bx	lr

0040154c <m2m_wifi_get_otp_mac_address>:
@return      The function shall return M2M_SUCCESS for success and a negative value otherwise.
@sa          m2m_wifi_get_mac_address             
@pre         m2m_wifi_init required to call any WIFI/socket function
*/
sint8 m2m_wifi_get_otp_mac_address(uint8 *pu8MacAddr, uint8* pu8IsValid)
{
  40154c:	b538      	push	{r3, r4, r5, lr}
  40154e:	4604      	mov	r4, r0
  401550:	460d      	mov	r5, r1
	sint8 ret = M2M_SUCCESS;
	ret = hif_chip_wake();
  401552:	4b07      	ldr	r3, [pc, #28]	; (401570 <m2m_wifi_get_otp_mac_address+0x24>)
  401554:	4798      	blx	r3
	if(ret == M2M_SUCCESS)
  401556:	4603      	mov	r3, r0
  401558:	b940      	cbnz	r0, 40156c <m2m_wifi_get_otp_mac_address+0x20>
	{
		ret = nmi_get_otp_mac_address(pu8MacAddr, pu8IsValid);
  40155a:	4629      	mov	r1, r5
  40155c:	4620      	mov	r0, r4
  40155e:	4b05      	ldr	r3, [pc, #20]	; (401574 <m2m_wifi_get_otp_mac_address+0x28>)
  401560:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
  401562:	4603      	mov	r3, r0
  401564:	b910      	cbnz	r0, 40156c <m2m_wifi_get_otp_mac_address+0x20>
		{
			ret = hif_chip_sleep();
  401566:	4b04      	ldr	r3, [pc, #16]	; (401578 <m2m_wifi_get_otp_mac_address+0x2c>)
  401568:	4798      	blx	r3
  40156a:	4603      	mov	r3, r0
		}
	}
	return ret;
}
  40156c:	4618      	mov	r0, r3
  40156e:	bd38      	pop	{r3, r4, r5, pc}
  401570:	004005e9 	.word	0x004005e9
  401574:	00401b2d 	.word	0x00401b2d
  401578:	00400641 	.word	0x00400641

0040157c <m2m_wifi_get_mac_address>:
@return      The function shall return M2M_SUCCESS for success and a negative value otherwise.
@sa          m2m_wifi_get_otp_mac_address             
@pre         m2m_wifi_init required to call any WIFI/socket function
*/
sint8 m2m_wifi_get_mac_address(uint8 *pu8MacAddr)
{
  40157c:	b510      	push	{r4, lr}
  40157e:	4604      	mov	r4, r0
	sint8 ret = M2M_SUCCESS;
	ret = hif_chip_wake();
  401580:	4b06      	ldr	r3, [pc, #24]	; (40159c <m2m_wifi_get_mac_address+0x20>)
  401582:	4798      	blx	r3
	if(ret == M2M_SUCCESS)
  401584:	4603      	mov	r3, r0
  401586:	b938      	cbnz	r0, 401598 <m2m_wifi_get_mac_address+0x1c>
	{
		ret = nmi_get_mac_address(pu8MacAddr);
  401588:	4620      	mov	r0, r4
  40158a:	4b05      	ldr	r3, [pc, #20]	; (4015a0 <m2m_wifi_get_mac_address+0x24>)
  40158c:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
  40158e:	4603      	mov	r3, r0
  401590:	b910      	cbnz	r0, 401598 <m2m_wifi_get_mac_address+0x1c>
		{
			ret = hif_chip_sleep();
  401592:	4b04      	ldr	r3, [pc, #16]	; (4015a4 <m2m_wifi_get_mac_address+0x28>)
  401594:	4798      	blx	r3
  401596:	4603      	mov	r3, r0
		}
	}

	return ret;
}
  401598:	4618      	mov	r0, r3
  40159a:	bd10      	pop	{r4, pc}
  40159c:	004005e9 	.word	0x004005e9
  4015a0:	00401bc1 	.word	0x00401bc1
  4015a4:	00400641 	.word	0x00400641

004015a8 <m2m_wifi_set_device_name>:
			Length of the device name.
@return		The function SHALL return M2M_SUCCESS for success and a negative value otherwise.
@warning	The Function called once after initialization. 
*/
sint8 m2m_wifi_set_device_name(uint8 *pu8DeviceName, uint8 u8DeviceNameLength)
{
  4015a8:	b510      	push	{r4, lr}
  4015aa:	b090      	sub	sp, #64	; 0x40
	tstrM2MDeviceNameConfig strDeviceName;
	if(u8DeviceNameLength >= M2M_DEVICE_NAME_MAX)
	{
		u8DeviceNameLength = M2M_DEVICE_NAME_MAX;
  4015ac:	2930      	cmp	r1, #48	; 0x30
  4015ae:	bf28      	it	cs
  4015b0:	2130      	movcs	r1, #48	; 0x30
	}
	//pu8DeviceName[u8DeviceNameLength] = '\0';
	u8DeviceNameLength ++;
	m2m_memcpy(strDeviceName.au8DeviceName, pu8DeviceName, u8DeviceNameLength);
  4015b2:	1c4a      	adds	r2, r1, #1
  4015b4:	b2d2      	uxtb	r2, r2
  4015b6:	4601      	mov	r1, r0
  4015b8:	a804      	add	r0, sp, #16
  4015ba:	4b07      	ldr	r3, [pc, #28]	; (4015d8 <m2m_wifi_set_device_name+0x30>)
  4015bc:	4798      	blx	r3
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SET_DEVICE_NAME,
  4015be:	2300      	movs	r3, #0
  4015c0:	9302      	str	r3, [sp, #8]
  4015c2:	9301      	str	r3, [sp, #4]
  4015c4:	9300      	str	r3, [sp, #0]
  4015c6:	2330      	movs	r3, #48	; 0x30
  4015c8:	aa04      	add	r2, sp, #16
  4015ca:	2107      	movs	r1, #7
  4015cc:	2001      	movs	r0, #1
  4015ce:	4c03      	ldr	r4, [pc, #12]	; (4015dc <m2m_wifi_set_device_name+0x34>)
  4015d0:	47a0      	blx	r4
		(uint8*)&strDeviceName, sizeof(tstrM2MDeviceNameConfig), NULL, 0,0);
}
  4015d2:	b010      	add	sp, #64	; 0x40
  4015d4:	bd10      	pop	{r4, pc}
  4015d6:	bf00      	nop
  4015d8:	00400555 	.word	0x00400555
  4015dc:	004006cd 	.word	0x004006cd

004015e0 <m2m_wifi_start_provision_mode>:

sint8 m2m_wifi_start_provision_mode(tstrM2MAPConfig *pstrAPConfig, char *pcHttpServerDomainName, uint8 bEnableHttpRedirect)
{
	sint8	s8Ret = M2M_ERR_FAIL;

	if((pstrAPConfig != NULL))
  4015e0:	2800      	cmp	r0, #0
  4015e2:	d036      	beq.n	401652 <m2m_wifi_start_provision_mode+0x72>
	return s8Ret;
}
#endif

sint8 m2m_wifi_start_provision_mode(tstrM2MAPConfig *pstrAPConfig, char *pcHttpServerDomainName, uint8 bEnableHttpRedirect)
{
  4015e4:	b570      	push	{r4, r5, r6, lr}
  4015e6:	b0a8      	sub	sp, #160	; 0xa0
  4015e8:	4604      	mov	r4, r0
  4015ea:	4616      	mov	r6, r2
  4015ec:	460d      	mov	r5, r1
	sint8	s8Ret = M2M_ERR_FAIL;

	if((pstrAPConfig != NULL))
	{
		tstrM2MProvisionModeConfig	strProvConfig;
		if(M2M_SUCCESS == m2m_validate_ap_parameters(pstrAPConfig))
  4015ee:	4b1b      	ldr	r3, [pc, #108]	; (40165c <m2m_wifi_start_provision_mode+0x7c>)
  4015f0:	4798      	blx	r3
  4015f2:	2800      	cmp	r0, #0
  4015f4:	d12a      	bne.n	40164c <m2m_wifi_start_provision_mode+0x6c>
		{
			m2m_memcpy((uint8*)&strProvConfig.strApConfig, (uint8*)pstrAPConfig, sizeof(tstrM2MAPConfig));
  4015f6:	2248      	movs	r2, #72	; 0x48
  4015f8:	4621      	mov	r1, r4
  4015fa:	a805      	add	r0, sp, #20
  4015fc:	4b18      	ldr	r3, [pc, #96]	; (401660 <m2m_wifi_start_provision_mode+0x80>)
  4015fe:	4798      	blx	r3
			if((m2m_strlen((uint8 *)pcHttpServerDomainName) <= 0) || (NULL == pcHttpServerDomainName))
  401600:	4628      	mov	r0, r5
  401602:	4b18      	ldr	r3, [pc, #96]	; (401664 <m2m_wifi_start_provision_mode+0x84>)
  401604:	4798      	blx	r3
  401606:	b105      	cbz	r5, 40160a <m2m_wifi_start_provision_mode+0x2a>
  401608:	b960      	cbnz	r0, 401624 <m2m_wifi_start_provision_mode+0x44>
			{
				M2M_ERR("INVALID DOMAIN NAME\n");
  40160a:	f240 424a 	movw	r2, #1098	; 0x44a
  40160e:	4916      	ldr	r1, [pc, #88]	; (401668 <m2m_wifi_start_provision_mode+0x88>)
  401610:	4816      	ldr	r0, [pc, #88]	; (40166c <m2m_wifi_start_provision_mode+0x8c>)
  401612:	4c17      	ldr	r4, [pc, #92]	; (401670 <m2m_wifi_start_provision_mode+0x90>)
  401614:	47a0      	blx	r4
  401616:	4817      	ldr	r0, [pc, #92]	; (401674 <m2m_wifi_start_provision_mode+0x94>)
  401618:	47a0      	blx	r4
  40161a:	4817      	ldr	r0, [pc, #92]	; (401678 <m2m_wifi_start_provision_mode+0x98>)
  40161c:	47a0      	blx	r4
}
#endif

sint8 m2m_wifi_start_provision_mode(tstrM2MAPConfig *pstrAPConfig, char *pcHttpServerDomainName, uint8 bEnableHttpRedirect)
{
	sint8	s8Ret = M2M_ERR_FAIL;
  40161e:	f06f 000b 	mvn.w	r0, #11
  401622:	e019      	b.n	401658 <m2m_wifi_start_provision_mode+0x78>
			if((m2m_strlen((uint8 *)pcHttpServerDomainName) <= 0) || (NULL == pcHttpServerDomainName))
			{
				M2M_ERR("INVALID DOMAIN NAME\n");
				goto ERR1;
			}
			m2m_memcpy((uint8*)strProvConfig.acHttpServerDomainName, (uint8*)pcHttpServerDomainName, 64);
  401624:	2240      	movs	r2, #64	; 0x40
  401626:	4629      	mov	r1, r5
  401628:	a817      	add	r0, sp, #92	; 0x5c
  40162a:	4b0d      	ldr	r3, [pc, #52]	; (401660 <m2m_wifi_start_provision_mode+0x80>)
  40162c:	4798      	blx	r3
			strProvConfig.u8EnableRedirect = bEnableHttpRedirect;
  40162e:	f88d 609c 	strb.w	r6, [sp, #156]	; 0x9c
		
			/* Stop Scan if it is ongoing.
			*/
			gu8scanInProgress = 0;
  401632:	2300      	movs	r3, #0
  401634:	4a11      	ldr	r2, [pc, #68]	; (40167c <m2m_wifi_start_provision_mode+0x9c>)
  401636:	7013      	strb	r3, [r2, #0]
			s8Ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_START_PROVISION_MODE | M2M_REQ_DATA_PKT, 
  401638:	9302      	str	r3, [sp, #8]
  40163a:	9301      	str	r3, [sp, #4]
  40163c:	9300      	str	r3, [sp, #0]
  40163e:	238c      	movs	r3, #140	; 0x8c
  401640:	aa05      	add	r2, sp, #20
  401642:	2188      	movs	r1, #136	; 0x88
  401644:	2001      	movs	r0, #1
  401646:	4c0e      	ldr	r4, [pc, #56]	; (401680 <m2m_wifi_start_provision_mode+0xa0>)
  401648:	47a0      	blx	r4
  40164a:	e005      	b.n	401658 <m2m_wifi_start_provision_mode+0x78>
}
#endif

sint8 m2m_wifi_start_provision_mode(tstrM2MAPConfig *pstrAPConfig, char *pcHttpServerDomainName, uint8 bEnableHttpRedirect)
{
	sint8	s8Ret = M2M_ERR_FAIL;
  40164c:	f06f 000b 	mvn.w	r0, #11
  401650:	e002      	b.n	401658 <m2m_wifi_start_provision_mode+0x78>
  401652:	f06f 000b 	mvn.w	r0, #11
  401656:	4770      	bx	lr
			/*goto ERR1;*/
		}
	}
ERR1:
	return s8Ret;
}
  401658:	b028      	add	sp, #160	; 0xa0
  40165a:	bd70      	pop	{r4, r5, r6, pc}
  40165c:	00401039 	.word	0x00401039
  401660:	00400555 	.word	0x00400555
  401664:	00400579 	.word	0x00400579
  401668:	00407ab8 	.word	0x00407ab8
  40166c:	00407490 	.word	0x00407490
  401670:	00404475 	.word	0x00404475
  401674:	00407a58 	.word	0x00407a58
  401678:	004074bc 	.word	0x004074bc
  40167c:	20400940 	.word	0x20400940
  401680:	004006cd 	.word	0x004006cd

00401684 <chip_apply_conf>:
#define M2M_DISABLE_PS				(0xd0ul)

static uint32 clk_status_reg_adr = 0xf; /* Assume initially it is B0 chip */

sint8 chip_apply_conf(uint32 u32Conf)
{
  401684:	b5f0      	push	{r4, r5, r6, r7, lr}
  401686:	b083      	sub	sp, #12
  401688:	4604      	mov	r4, r0
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
  40168a:	f44f 55a5 	mov.w	r5, #5280	; 0x14a0
  40168e:	4e0a      	ldr	r6, [pc, #40]	; (4016b8 <chip_apply_conf+0x34>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
  401690:	4f0a      	ldr	r7, [pc, #40]	; (4016bc <chip_apply_conf+0x38>)
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
  401692:	4621      	mov	r1, r4
  401694:	4628      	mov	r0, r5
  401696:	47b0      	blx	r6
		if(val32 != 0) {		
  401698:	b154      	cbz	r4, 4016b0 <chip_apply_conf+0x2c>
			uint32 reg = 0;
  40169a:	a902      	add	r1, sp, #8
  40169c:	2300      	movs	r3, #0
  40169e:	f841 3d04 	str.w	r3, [r1, #-4]!
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
  4016a2:	4628      	mov	r0, r5
  4016a4:	47b8      	blx	r7
			if(ret == M2M_SUCCESS) {
  4016a6:	2800      	cmp	r0, #0
  4016a8:	d1f3      	bne.n	401692 <chip_apply_conf+0xe>
				if(reg == val32)
  4016aa:	9b01      	ldr	r3, [sp, #4]
  4016ac:	429c      	cmp	r4, r3
  4016ae:	d1f0      	bne.n	401692 <chip_apply_conf+0xe>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
  4016b0:	2000      	movs	r0, #0
  4016b2:	b003      	add	sp, #12
  4016b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4016b6:	bf00      	nop
  4016b8:	00401c51 	.word	0x00401c51
  4016bc:	00401c45 	.word	0x00401c45

004016c0 <nm_clkless_wake>:
*	@author	Samer Sarhan
*	@date	06 June 2014
*	@version	1.0
*/
sint8 nm_clkless_wake(void)
{
  4016c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4016c4:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg, clk_status_reg,trials = 0;
	/* wait 1ms, spi data read */
	nm_bsp_sleep(1);
  4016c6:	2001      	movs	r0, #1
  4016c8:	4b3d      	ldr	r3, [pc, #244]	; (4017c0 <nm_clkless_wake+0x100>)
  4016ca:	4798      	blx	r3
	ret = nm_read_reg_with_ret(0x1, &reg);
  4016cc:	a901      	add	r1, sp, #4
  4016ce:	2001      	movs	r0, #1
  4016d0:	4b3c      	ldr	r3, [pc, #240]	; (4017c4 <nm_clkless_wake+0x104>)
  4016d2:	4798      	blx	r3
	if(ret != M2M_SUCCESS) {
  4016d4:	4682      	mov	sl, r0
  4016d6:	b148      	cbz	r0, 4016ec <nm_clkless_wake+0x2c>
		M2M_ERR("Bus error (1). Wake up failed\n");
  4016d8:	2272      	movs	r2, #114	; 0x72
  4016da:	493b      	ldr	r1, [pc, #236]	; (4017c8 <nm_clkless_wake+0x108>)
  4016dc:	483b      	ldr	r0, [pc, #236]	; (4017cc <nm_clkless_wake+0x10c>)
  4016de:	4c3c      	ldr	r4, [pc, #240]	; (4017d0 <nm_clkless_wake+0x110>)
  4016e0:	47a0      	blx	r4
  4016e2:	483c      	ldr	r0, [pc, #240]	; (4017d4 <nm_clkless_wake+0x114>)
  4016e4:	47a0      	blx	r4
  4016e6:	483c      	ldr	r0, [pc, #240]	; (4017d8 <nm_clkless_wake+0x118>)
  4016e8:	47a0      	blx	r4
		goto _WAKE_EXIT;
  4016ea:	e064      	b.n	4017b6 <nm_clkless_wake+0xf6>
  4016ec:	2400      	movs	r4, #0
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
  4016ee:	f04f 0801 	mov.w	r8, #1
  4016f2:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 4017ec <nm_clkless_wake+0x12c>
		/* wait 1ms, spi data read */
		nm_bsp_sleep(1);
  4016f6:	4d32      	ldr	r5, [pc, #200]	; (4017c0 <nm_clkless_wake+0x100>)
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
  4016f8:	4f38      	ldr	r7, [pc, #224]	; (4017dc <nm_clkless_wake+0x11c>)
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
  4016fa:	9901      	ldr	r1, [sp, #4]
  4016fc:	f041 0102 	orr.w	r1, r1, #2
  401700:	4640      	mov	r0, r8
  401702:	47c8      	blx	r9
		/* wait 1ms, spi data read */
		nm_bsp_sleep(1);
  401704:	4640      	mov	r0, r8
  401706:	47a8      	blx	r5
		// Check the clock status
		ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  401708:	4669      	mov	r1, sp
  40170a:	4b35      	ldr	r3, [pc, #212]	; (4017e0 <nm_clkless_wake+0x120>)
  40170c:	6818      	ldr	r0, [r3, #0]
  40170e:	4b2d      	ldr	r3, [pc, #180]	; (4017c4 <nm_clkless_wake+0x104>)
  401710:	4798      	blx	r3
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
  401712:	b918      	cbnz	r0, 40171c <nm_clkless_wake+0x5c>
  401714:	9b00      	ldr	r3, [sp, #0]
  401716:	b10b      	cbz	r3, 40171c <nm_clkless_wake+0x5c>
			/* Wait for the chip to stabilize*/
			nm_bsp_sleep(2);

			// Make sure chip is awake. This is an extra step that can be removed
			// later to avoid the bus access overhead
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  401718:	4e31      	ldr	r6, [pc, #196]	; (4017e0 <nm_clkless_wake+0x120>)
  40171a:	e037      	b.n	40178c <nm_clkless_wake+0xcc>
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
			/* Register 0xf did not exist in A0.
			 * If register 0xf fails to read or if it reads 0,
			 * then the chip is A0.
			 */
			clk_status_reg_adr = 0xe;
  40171c:	4e30      	ldr	r6, [pc, #192]	; (4017e0 <nm_clkless_wake+0x120>)
  40171e:	230e      	movs	r3, #14
  401720:	6033      	str	r3, [r6, #0]
			/* wait 1ms, spi data read */
			nm_bsp_sleep(1);
  401722:	4640      	mov	r0, r8
  401724:	47a8      	blx	r5
			ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  401726:	4669      	mov	r1, sp
  401728:	6830      	ldr	r0, [r6, #0]
  40172a:	4b26      	ldr	r3, [pc, #152]	; (4017c4 <nm_clkless_wake+0x104>)
  40172c:	4798      	blx	r3
			
			/* Aelmeleh 24-08-2015*/
			/* Check for C3000 rev. D0 value */
			if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
  40172e:	b910      	cbnz	r0, 401736 <nm_clkless_wake+0x76>
  401730:	9b00      	ldr	r3, [sp, #0]
  401732:	2b00      	cmp	r3, #0
  401734:	d1f0      	bne.n	401718 <nm_clkless_wake+0x58>
				 
				clk_status_reg_adr = 0x13;
  401736:	4e2a      	ldr	r6, [pc, #168]	; (4017e0 <nm_clkless_wake+0x120>)
  401738:	2313      	movs	r3, #19
  40173a:	6033      	str	r3, [r6, #0]
				/* wait 1ms, spi data read */
				nm_bsp_sleep(1);
  40173c:	4640      	mov	r0, r8
  40173e:	47a8      	blx	r5
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  401740:	4669      	mov	r1, sp
  401742:	6830      	ldr	r0, [r6, #0]
  401744:	4b1f      	ldr	r3, [pc, #124]	; (4017c4 <nm_clkless_wake+0x104>)
  401746:	4798      	blx	r3
			
				if(ret != M2M_SUCCESS) {
  401748:	4606      	mov	r6, r0
  40174a:	2800      	cmp	r0, #0
  40174c:	d0e4      	beq.n	401718 <nm_clkless_wake+0x58>
					M2M_ERR("Bus error (2). Wake up failed\n");
  40174e:	2296      	movs	r2, #150	; 0x96
  401750:	491d      	ldr	r1, [pc, #116]	; (4017c8 <nm_clkless_wake+0x108>)
  401752:	481e      	ldr	r0, [pc, #120]	; (4017cc <nm_clkless_wake+0x10c>)
  401754:	4c1e      	ldr	r4, [pc, #120]	; (4017d0 <nm_clkless_wake+0x110>)
  401756:	47a0      	blx	r4
  401758:	4822      	ldr	r0, [pc, #136]	; (4017e4 <nm_clkless_wake+0x124>)
  40175a:	47a0      	blx	r4
  40175c:	481e      	ldr	r0, [pc, #120]	; (4017d8 <nm_clkless_wake+0x118>)
  40175e:	47a0      	blx	r4
			if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
				 
				clk_status_reg_adr = 0x13;
				/* wait 1ms, spi data read */
				nm_bsp_sleep(1);
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  401760:	46b2      	mov	sl, r6
			
				if(ret != M2M_SUCCESS) {
					M2M_ERR("Bus error (2). Wake up failed\n");
					goto _WAKE_EXIT;
  401762:	e028      	b.n	4017b6 <nm_clkless_wake+0xf6>
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
		{
			/* Wait for the chip to stabilize*/
			nm_bsp_sleep(2);
  401764:	2002      	movs	r0, #2
  401766:	47a8      	blx	r5

			// Make sure chip is awake. This is an extra step that can be removed
			// later to avoid the bus access overhead
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  401768:	4669      	mov	r1, sp
  40176a:	6830      	ldr	r0, [r6, #0]
  40176c:	4b15      	ldr	r3, [pc, #84]	; (4017c4 <nm_clkless_wake+0x104>)
  40176e:	4798      	blx	r3

			if((clk_status_reg & 0x4) == 0)
  401770:	9b00      	ldr	r3, [sp, #0]
  401772:	f013 0f04 	tst.w	r3, #4
  401776:	d109      	bne.n	40178c <nm_clkless_wake+0xcc>
			{
				M2M_ERR("clocks still OFF. Wake up failed\n");
  401778:	22aa      	movs	r2, #170	; 0xaa
  40177a:	4913      	ldr	r1, [pc, #76]	; (4017c8 <nm_clkless_wake+0x108>)
  40177c:	4813      	ldr	r0, [pc, #76]	; (4017cc <nm_clkless_wake+0x10c>)
  40177e:	f8df b050 	ldr.w	fp, [pc, #80]	; 4017d0 <nm_clkless_wake+0x110>
  401782:	47d8      	blx	fp
  401784:	4818      	ldr	r0, [pc, #96]	; (4017e8 <nm_clkless_wake+0x128>)
  401786:	47d8      	blx	fp
  401788:	4813      	ldr	r0, [pc, #76]	; (4017d8 <nm_clkless_wake+0x118>)
  40178a:	47d8      	blx	fp
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
  40178c:	9b00      	ldr	r3, [sp, #0]
  40178e:	f013 0f04 	tst.w	r3, #4
  401792:	d110      	bne.n	4017b6 <nm_clkless_wake+0xf6>
  401794:	3401      	adds	r4, #1
  401796:	fba7 2304 	umull	r2, r3, r7, r4
  40179a:	085b      	lsrs	r3, r3, #1
  40179c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  4017a0:	429c      	cmp	r4, r3
  4017a2:	d0df      	beq.n	401764 <nm_clkless_wake+0xa4>
		}
		// in case of failure, Reset the wakeup bit to introduce a new edge on the next loop
		if((clk_status_reg & 0x4) == 0)
		{
			// Reset bit 0
			nm_write_reg(0x1, reg | (1 << 1));
  4017a4:	9901      	ldr	r1, [sp, #4]
  4017a6:	f041 0102 	orr.w	r1, r1, #2
  4017aa:	4640      	mov	r0, r8
  4017ac:	47c8      	blx	r9
		}
	} while((clk_status_reg & 0x4) == 0);
  4017ae:	9b00      	ldr	r3, [sp, #0]
  4017b0:	f013 0f04 	tst.w	r3, #4
  4017b4:	d0a1      	beq.n	4016fa <nm_clkless_wake+0x3a>

_WAKE_EXIT:
	return ret;
}
  4017b6:	4650      	mov	r0, sl
  4017b8:	b003      	add	sp, #12
  4017ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4017be:	bf00      	nop
  4017c0:	004001b9 	.word	0x004001b9
  4017c4:	00401c45 	.word	0x00401c45
  4017c8:	00407ae4 	.word	0x00407ae4
  4017cc:	00407490 	.word	0x00407490
  4017d0:	00404475 	.word	0x00404475
  4017d4:	00407af4 	.word	0x00407af4
  4017d8:	004074bc 	.word	0x004074bc
  4017dc:	aaaaaaab 	.word	0xaaaaaaab
  4017e0:	20400010 	.word	0x20400010
  4017e4:	00407b14 	.word	0x00407b14
  4017e8:	00407b34 	.word	0x00407b34
  4017ec:	00401c51 	.word	0x00401c51

004017f0 <enable_interrupts>:
	nm_write_reg(0x6, 0x0);
	nm_write_reg(0x7, 0x0);
}

sint8 enable_interrupts(void)
{
  4017f0:	b500      	push	{lr}
  4017f2:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
  4017f4:	a901      	add	r1, sp, #4
  4017f6:	f241 4008 	movw	r0, #5128	; 0x1408
  4017fa:	4b15      	ldr	r3, [pc, #84]	; (401850 <enable_interrupts+0x60>)
  4017fc:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  4017fe:	b9e0      	cbnz	r0, 40183a <enable_interrupts+0x4a>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 8);
  401800:	9901      	ldr	r1, [sp, #4]
  401802:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  401806:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
  401808:	f241 4008 	movw	r0, #5128	; 0x1408
  40180c:	4b11      	ldr	r3, [pc, #68]	; (401854 <enable_interrupts+0x64>)
  40180e:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401810:	b9b0      	cbnz	r0, 401840 <enable_interrupts+0x50>
		return M2M_ERR_BUS_FAIL;
	}
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
  401812:	a901      	add	r1, sp, #4
  401814:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
  401818:	4b0d      	ldr	r3, [pc, #52]	; (401850 <enable_interrupts+0x60>)
  40181a:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  40181c:	b998      	cbnz	r0, 401846 <enable_interrupts+0x56>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 16);
  40181e:	9901      	ldr	r1, [sp, #4]
  401820:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  401824:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
  401826:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
  40182a:	4b0a      	ldr	r3, [pc, #40]	; (401854 <enable_interrupts+0x64>)
  40182c:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  40182e:	2800      	cmp	r0, #0
		return M2M_ERR_BUS_FAIL;
	}
	return M2M_SUCCESS;
  401830:	bf14      	ite	ne
  401832:	f06f 0005 	mvnne.w	r0, #5
  401836:	2000      	moveq	r0, #0
  401838:	e007      	b.n	40184a <enable_interrupts+0x5a>
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
  40183a:	f06f 0005 	mvn.w	r0, #5
  40183e:	e004      	b.n	40184a <enable_interrupts+0x5a>
	}
	reg |= ((uint32) 1 << 8);
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
  401840:	f06f 0005 	mvn.w	r0, #5
  401844:	e001      	b.n	40184a <enable_interrupts+0x5a>
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
  401846:	f06f 0005 	mvn.w	r0, #5
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
	}
	return M2M_SUCCESS;
}
  40184a:	b003      	add	sp, #12
  40184c:	f85d fb04 	ldr.w	pc, [sp], #4
  401850:	00401c45 	.word	0x00401c45
  401854:	00401c51 	.word	0x00401c51

00401858 <nmi_get_chipid>:
	nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
	return ret;
}

uint32 nmi_get_chipid(void)
{
  401858:	b510      	push	{r4, lr}
  40185a:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
  40185c:	4b24      	ldr	r3, [pc, #144]	; (4018f0 <nmi_get_chipid+0x98>)
  40185e:	681c      	ldr	r4, [r3, #0]
  401860:	2c00      	cmp	r4, #0
  401862:	d140      	bne.n	4018e6 <nmi_get_chipid+0x8e>
		uint32 rfrevid;

		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
  401864:	4619      	mov	r1, r3
  401866:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  40186a:	4b22      	ldr	r3, [pc, #136]	; (4018f4 <nmi_get_chipid+0x9c>)
  40186c:	4798      	blx	r3
  40186e:	b118      	cbz	r0, 401878 <nmi_get_chipid+0x20>
			chipid = 0;
  401870:	2200      	movs	r2, #0
  401872:	4b1f      	ldr	r3, [pc, #124]	; (4018f0 <nmi_get_chipid+0x98>)
  401874:	601a      	str	r2, [r3, #0]
			return 0;
  401876:	e038      	b.n	4018ea <nmi_get_chipid+0x92>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
  401878:	a901      	add	r1, sp, #4
  40187a:	f241 30f4 	movw	r0, #5108	; 0x13f4
  40187e:	4b1d      	ldr	r3, [pc, #116]	; (4018f4 <nmi_get_chipid+0x9c>)
  401880:	4798      	blx	r3
  401882:	b118      	cbz	r0, 40188c <nmi_get_chipid+0x34>
			chipid = 0;
  401884:	2200      	movs	r2, #0
  401886:	4b1a      	ldr	r3, [pc, #104]	; (4018f0 <nmi_get_chipid+0x98>)
  401888:	601a      	str	r2, [r3, #0]
			return 0;
  40188a:	e02e      	b.n	4018ea <nmi_get_chipid+0x92>
		}

		if (chipid == 0x1002a0)  {
  40188c:	4b18      	ldr	r3, [pc, #96]	; (4018f0 <nmi_get_chipid+0x98>)
  40188e:	681b      	ldr	r3, [r3, #0]
  401890:	4a19      	ldr	r2, [pc, #100]	; (4018f8 <nmi_get_chipid+0xa0>)
  401892:	4293      	cmp	r3, r2
  401894:	d106      	bne.n	4018a4 <nmi_get_chipid+0x4c>
			if (rfrevid == 0x1) { /* 1002A0 */
  401896:	9b01      	ldr	r3, [sp, #4]
  401898:	2b01      	cmp	r3, #1
  40189a:	d01d      	beq.n	4018d8 <nmi_get_chipid+0x80>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
  40189c:	3201      	adds	r2, #1
  40189e:	4b14      	ldr	r3, [pc, #80]	; (4018f0 <nmi_get_chipid+0x98>)
  4018a0:	601a      	str	r2, [r3, #0]
  4018a2:	e019      	b.n	4018d8 <nmi_get_chipid+0x80>
			}
		} else if(chipid == 0x1002b0) {
  4018a4:	4a15      	ldr	r2, [pc, #84]	; (4018fc <nmi_get_chipid+0xa4>)
  4018a6:	4293      	cmp	r3, r2
  4018a8:	d109      	bne.n	4018be <nmi_get_chipid+0x66>
			if(rfrevid == 3) { /* 1002B0 */
  4018aa:	9b01      	ldr	r3, [sp, #4]
  4018ac:	2b03      	cmp	r3, #3
  4018ae:	d013      	beq.n	4018d8 <nmi_get_chipid+0x80>
			} else if(rfrevid == 4) { /* 1002B1 */
  4018b0:	2b04      	cmp	r3, #4
				chipid = 0x1002b1;
  4018b2:	bf0c      	ite	eq
  4018b4:	3201      	addeq	r2, #1
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
  4018b6:	4a12      	ldrne	r2, [pc, #72]	; (401900 <nmi_get_chipid+0xa8>)
  4018b8:	4b0d      	ldr	r3, [pc, #52]	; (4018f0 <nmi_get_chipid+0x98>)
  4018ba:	601a      	str	r2, [r3, #0]
  4018bc:	e00c      	b.n	4018d8 <nmi_get_chipid+0x80>
			}
		} else if(chipid == 0x1000F0) { 
  4018be:	4a11      	ldr	r2, [pc, #68]	; (401904 <nmi_get_chipid+0xac>)
  4018c0:	4293      	cmp	r3, r2
  4018c2:	d109      	bne.n	4018d8 <nmi_get_chipid+0x80>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
  4018c4:	490a      	ldr	r1, [pc, #40]	; (4018f0 <nmi_get_chipid+0x98>)
  4018c6:	f44f 106c 	mov.w	r0, #3866624	; 0x3b0000
  4018ca:	4b0a      	ldr	r3, [pc, #40]	; (4018f4 <nmi_get_chipid+0x9c>)
  4018cc:	4798      	blx	r3
  4018ce:	b118      	cbz	r0, 4018d8 <nmi_get_chipid+0x80>
			chipid = 0;
  4018d0:	2200      	movs	r2, #0
  4018d2:	4b07      	ldr	r3, [pc, #28]	; (4018f0 <nmi_get_chipid+0x98>)
  4018d4:	601a      	str	r2, [r3, #0]
			return 0;
  4018d6:	e008      	b.n	4018ea <nmi_get_chipid+0x92>
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
  4018d8:	4a05      	ldr	r2, [pc, #20]	; (4018f0 <nmi_get_chipid+0x98>)
  4018da:	6813      	ldr	r3, [r2, #0]
  4018dc:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  4018e0:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
  4018e4:	6013      	str	r3, [r2, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
  4018e6:	4b02      	ldr	r3, [pc, #8]	; (4018f0 <nmi_get_chipid+0x98>)
  4018e8:	681c      	ldr	r4, [r3, #0]
}
  4018ea:	4620      	mov	r0, r4
  4018ec:	b002      	add	sp, #8
  4018ee:	bd10      	pop	{r4, pc}
  4018f0:	20400944 	.word	0x20400944
  4018f4:	00401c45 	.word	0x00401c45
  4018f8:	001002a0 	.word	0x001002a0
  4018fc:	001002b0 	.word	0x001002b0
  401900:	001002b2 	.word	0x001002b2
  401904:	001000f0 	.word	0x001000f0

00401908 <wait_for_bootrom>:
#endif
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
  401908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40190c:	4607      	mov	r7, r0
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  40190e:	f241 0514 	movw	r5, #4116	; 0x1014
  401912:	4c28      	ldr	r4, [pc, #160]	; (4019b4 <wait_for_bootrom+0xac>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
  401914:	4e28      	ldr	r6, [pc, #160]	; (4019b8 <wait_for_bootrom+0xb0>)
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  401916:	4628      	mov	r0, r5
  401918:	47a0      	blx	r4
		if (reg & 0x80000000) {
  40191a:	2800      	cmp	r0, #0
  40191c:	db02      	blt.n	401924 <wait_for_bootrom+0x1c>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
  40191e:	2001      	movs	r0, #1
  401920:	47b0      	blx	r6
	}
  401922:	e7f8      	b.n	401916 <wait_for_bootrom+0xe>
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
  401924:	4825      	ldr	r0, [pc, #148]	; (4019bc <wait_for_bootrom+0xb4>)
  401926:	4b23      	ldr	r3, [pc, #140]	; (4019b4 <wait_for_bootrom+0xac>)
  401928:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
  40192a:	f010 0f01 	tst.w	r0, #1
  40192e:	d110      	bne.n	401952 <wait_for_bootrom+0x4a>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
  401930:	f8df 8084 	ldr.w	r8, [pc, #132]	; 4019b8 <wait_for_bootrom+0xb0>
			reg = nm_read_reg(BOOTROM_REG);
  401934:	4e1f      	ldr	r6, [pc, #124]	; (4019b4 <wait_for_bootrom+0xac>)

			printf("reg:%x / %x \n",reg, M2M_FINISH_BOOT_ROM );
  401936:	4d22      	ldr	r5, [pc, #136]	; (4019c0 <wait_for_bootrom+0xb8>)
	if(reg == 0)
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
  401938:	2001      	movs	r0, #1
  40193a:	47c0      	blx	r8
			reg = nm_read_reg(BOOTROM_REG);
  40193c:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
  401940:	47b0      	blx	r6
  401942:	4604      	mov	r4, r0

			printf("reg:%x / %x \n",reg, M2M_FINISH_BOOT_ROM );
  401944:	462a      	mov	r2, r5
  401946:	4601      	mov	r1, r0
  401948:	481e      	ldr	r0, [pc, #120]	; (4019c4 <wait_for_bootrom+0xbc>)
  40194a:	4b1f      	ldr	r3, [pc, #124]	; (4019c8 <wait_for_bootrom+0xc0>)
  40194c:	4798      	blx	r3

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
  40194e:	42ac      	cmp	r4, r5
  401950:	d1f2      	bne.n	401938 <wait_for_bootrom+0x30>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
  401952:	2f02      	cmp	r7, #2
  401954:	d10a      	bne.n	40196c <wait_for_bootrom+0x64>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
  401956:	491d      	ldr	r1, [pc, #116]	; (4019cc <wait_for_bootrom+0xc4>)
  401958:	481d      	ldr	r0, [pc, #116]	; (4019d0 <wait_for_bootrom+0xc8>)
  40195a:	4c1e      	ldr	r4, [pc, #120]	; (4019d4 <wait_for_bootrom+0xcc>)
  40195c:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
  40195e:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  401962:	f241 008c 	movw	r0, #4236	; 0x108c
  401966:	47a0      	blx	r4

sint8 wait_for_bootrom(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;
  401968:	2400      	movs	r4, #0
  40196a:	e00f      	b.n	40198c <wait_for_bootrom+0x84>
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
  40196c:	2f03      	cmp	r7, #3
  40196e:	d109      	bne.n	401984 <wait_for_bootrom+0x7c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
  401970:	4916      	ldr	r1, [pc, #88]	; (4019cc <wait_for_bootrom+0xc4>)
  401972:	4817      	ldr	r0, [pc, #92]	; (4019d0 <wait_for_bootrom+0xc8>)
  401974:	4c17      	ldr	r4, [pc, #92]	; (4019d4 <wait_for_bootrom+0xcc>)
  401976:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
  401978:	2100      	movs	r1, #0
  40197a:	f241 008c 	movw	r0, #4236	; 0x108c
  40197e:	47a0      	blx	r4

sint8 wait_for_bootrom(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;
  401980:	2400      	movs	r4, #0
  401982:	e003      	b.n	40198c <wait_for_bootrom+0x84>
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
  401984:	2f04      	cmp	r7, #4
  401986:	bf14      	ite	ne
  401988:	2400      	movne	r4, #0
  40198a:	2480      	moveq	r4, #128	; 0x80
	} else {
		/*bypass this step*/
	}

	if(REV(nmi_get_chipid()) == REV_3A0)
  40198c:	4b12      	ldr	r3, [pc, #72]	; (4019d8 <wait_for_bootrom+0xd0>)
  40198e:	4798      	blx	r3
  401990:	f3c0 000b 	ubfx	r0, r0, #0, #12
  401994:	f5b0 7f68 	cmp.w	r0, #928	; 0x3a0
	{
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
  401998:	bf0c      	ite	eq
  40199a:	f044 0002 	orreq.w	r0, r4, #2
	}
	else
	{
		chip_apply_conf(u32GpReg1);
  40199e:	4620      	movne	r0, r4
  4019a0:	4b0e      	ldr	r3, [pc, #56]	; (4019dc <wait_for_bootrom+0xd4>)
  4019a2:	4798      	blx	r3
	}
	
	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
  4019a4:	490e      	ldr	r1, [pc, #56]	; (4019e0 <wait_for_bootrom+0xd8>)
  4019a6:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
  4019aa:	4b0a      	ldr	r3, [pc, #40]	; (4019d4 <wait_for_bootrom+0xcc>)
  4019ac:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
  4019ae:	2000      	movs	r0, #0
  4019b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4019b4:	00401c39 	.word	0x00401c39
  4019b8:	004001b9 	.word	0x004001b9
  4019bc:	000207bc 	.word	0x000207bc
  4019c0:	10add09e 	.word	0x10add09e
  4019c4:	00407b80 	.word	0x00407b80
  4019c8:	00404475 	.word	0x00404475
  4019cc:	3c1cd57d 	.word	0x3c1cd57d
  4019d0:	000207ac 	.word	0x000207ac
  4019d4:	00401c51 	.word	0x00401c51
  4019d8:	00401859 	.word	0x00401859
  4019dc:	00401685 	.word	0x00401685
  4019e0:	ef522f61 	.word	0xef522f61

004019e4 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
  4019e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4019e6:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
  4019e8:	f241 038c 	movw	r3, #4236	; 0x108c
  4019ec:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
  4019ee:	4b18      	ldr	r3, [pc, #96]	; (401a50 <wait_for_firmware_start+0x6c>)
  4019f0:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
  4019f2:	3802      	subs	r0, #2
  4019f4:	b2c0      	uxtb	r0, r0
  4019f6:	2801      	cmp	r0, #1
  4019f8:	d810      	bhi.n	401a1c <wait_for_firmware_start+0x38>
		regAddress = NMI_REV_REG;
  4019fa:	4b16      	ldr	r3, [pc, #88]	; (401a54 <wait_for_firmware_start+0x70>)
  4019fc:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
  4019fe:	f1a3 5322 	sub.w	r3, r3, #679477248	; 0x28800000
  401a02:	f5a3 1311 	sub.w	r3, r3, #2375680	; 0x244000
  401a06:	f2a3 53e9 	subw	r3, r3, #1513	; 0x5e9
  401a0a:	9300      	str	r3, [sp, #0]
  401a0c:	e006      	b.n	401a1c <wait_for_firmware_start+0x38>
	
	
	while (checkValue != reg)
	{
	
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
  401a0e:	4638      	mov	r0, r7
  401a10:	47b0      	blx	r6
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
  401a12:	9801      	ldr	r0, [sp, #4]
  401a14:	47a8      	blx	r5
		if(++cnt >= u32Timeout)
  401a16:	3c01      	subs	r4, #1
  401a18:	d106      	bne.n	401a28 <wait_for_firmware_start+0x44>
  401a1a:	e013      	b.n	401a44 <wait_for_firmware_start+0x60>
ERR2:
	return ret;
}

sint8 wait_for_firmware_start(uint8 arg)
{
  401a1c:	f04f 34ff 	mov.w	r4, #4294967295
  401a20:	2000      	movs	r0, #0
	
	
	while (checkValue != reg)
	{
	
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
  401a22:	2702      	movs	r7, #2
  401a24:	4e0c      	ldr	r6, [pc, #48]	; (401a58 <wait_for_firmware_start+0x74>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
  401a26:	4d0d      	ldr	r5, [pc, #52]	; (401a5c <wait_for_firmware_start+0x78>)
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
  401a28:	9b00      	ldr	r3, [sp, #0]
  401a2a:	4298      	cmp	r0, r3
  401a2c:	d1ef      	bne.n	401a0e <wait_for_firmware_start+0x2a>
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
  401a2e:	9a00      	ldr	r2, [sp, #0]
  401a30:	4b07      	ldr	r3, [pc, #28]	; (401a50 <wait_for_firmware_start+0x6c>)
  401a32:	429a      	cmp	r2, r3
  401a34:	d109      	bne.n	401a4a <wait_for_firmware_start+0x66>
	{
		nm_write_reg(NMI_STATE_REG, 0);
  401a36:	2100      	movs	r1, #0
  401a38:	f241 008c 	movw	r0, #4236	; 0x108c
  401a3c:	4b08      	ldr	r3, [pc, #32]	; (401a60 <wait_for_firmware_start+0x7c>)
  401a3e:	4798      	blx	r3
	return ret;
}

sint8 wait_for_firmware_start(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
  401a40:	2000      	movs	r0, #0
  401a42:	e003      	b.n	401a4c <wait_for_firmware_start+0x68>
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
		if(++cnt >= u32Timeout)
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
  401a44:	f06f 0004 	mvn.w	r0, #4
  401a48:	e000      	b.n	401a4c <wait_for_firmware_start+0x68>
	return ret;
}

sint8 wait_for_firmware_start(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
  401a4a:	2000      	movs	r0, #0
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
  401a4c:	b003      	add	sp, #12
  401a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401a50:	02532636 	.word	0x02532636
  401a54:	000207ac 	.word	0x000207ac
  401a58:	004001b9 	.word	0x004001b9
  401a5c:	00401c39 	.word	0x00401c39
  401a60:	00401c51 	.word	0x00401c51

00401a64 <chip_deinit>:

sint8 chip_deinit(void)
{
  401a64:	b5f0      	push	{r4, r5, r6, r7, lr}
  401a66:	b083      	sub	sp, #12
	uint32 reg = 0;
  401a68:	a902      	add	r1, sp, #8
  401a6a:	2300      	movs	r3, #0
  401a6c:	f841 3d04 	str.w	r3, [r1, #-4]!
	uint8 timeout = 10;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  401a70:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  401a74:	4b24      	ldr	r3, [pc, #144]	; (401b08 <chip_deinit+0xa4>)
  401a76:	4798      	blx	r3
	if (ret != M2M_SUCCESS) {
  401a78:	b148      	cbz	r0, 401a8e <chip_deinit+0x2a>
		M2M_ERR("failed to de-initialize\n");
  401a7a:	f240 2231 	movw	r2, #561	; 0x231
  401a7e:	4923      	ldr	r1, [pc, #140]	; (401b0c <chip_deinit+0xa8>)
  401a80:	4823      	ldr	r0, [pc, #140]	; (401b10 <chip_deinit+0xac>)
  401a82:	4c24      	ldr	r4, [pc, #144]	; (401b14 <chip_deinit+0xb0>)
  401a84:	47a0      	blx	r4
  401a86:	4824      	ldr	r0, [pc, #144]	; (401b18 <chip_deinit+0xb4>)
  401a88:	47a0      	blx	r4
  401a8a:	4824      	ldr	r0, [pc, #144]	; (401b1c <chip_deinit+0xb8>)
  401a8c:	47a0      	blx	r4
	}
	reg &= ~(1 << 10);
  401a8e:	9901      	ldr	r1, [sp, #4]
  401a90:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  401a94:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  401a96:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  401a9a:	4b21      	ldr	r3, [pc, #132]	; (401b20 <chip_deinit+0xbc>)
  401a9c:	4798      	blx	r3

	if (ret != M2M_SUCCESS) {
  401a9e:	4605      	mov	r5, r0
  401aa0:	b158      	cbz	r0, 401aba <chip_deinit+0x56>
		M2M_ERR("Error while writing reg\n");
  401aa2:	f240 2237 	movw	r2, #567	; 0x237
  401aa6:	4919      	ldr	r1, [pc, #100]	; (401b0c <chip_deinit+0xa8>)
  401aa8:	4819      	ldr	r0, [pc, #100]	; (401b10 <chip_deinit+0xac>)
  401aaa:	4c1a      	ldr	r4, [pc, #104]	; (401b14 <chip_deinit+0xb0>)
  401aac:	47a0      	blx	r4
  401aae:	481d      	ldr	r0, [pc, #116]	; (401b24 <chip_deinit+0xc0>)
  401ab0:	47a0      	blx	r4
  401ab2:	481a      	ldr	r0, [pc, #104]	; (401b1c <chip_deinit+0xb8>)
  401ab4:	47a0      	blx	r4
		return ret;
  401ab6:	4628      	mov	r0, r5
  401ab8:	e024      	b.n	401b04 <chip_deinit+0xa0>
  401aba:	240a      	movs	r4, #10
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  401abc:	4e12      	ldr	r6, [pc, #72]	; (401b08 <chip_deinit+0xa4>)
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  401abe:	4f18      	ldr	r7, [pc, #96]	; (401b20 <chip_deinit+0xbc>)
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  401ac0:	a901      	add	r1, sp, #4
  401ac2:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  401ac6:	47b0      	blx	r6
		if (ret != M2M_SUCCESS) {
  401ac8:	4605      	mov	r5, r0
  401aca:	b158      	cbz	r0, 401ae4 <chip_deinit+0x80>
			M2M_ERR("Error while reading reg\n");
  401acc:	f240 223e 	movw	r2, #574	; 0x23e
  401ad0:	490e      	ldr	r1, [pc, #56]	; (401b0c <chip_deinit+0xa8>)
  401ad2:	480f      	ldr	r0, [pc, #60]	; (401b10 <chip_deinit+0xac>)
  401ad4:	4c0f      	ldr	r4, [pc, #60]	; (401b14 <chip_deinit+0xb0>)
  401ad6:	47a0      	blx	r4
  401ad8:	4813      	ldr	r0, [pc, #76]	; (401b28 <chip_deinit+0xc4>)
  401ada:	47a0      	blx	r4
  401adc:	480f      	ldr	r0, [pc, #60]	; (401b1c <chip_deinit+0xb8>)
  401ade:	47a0      	blx	r4
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  401ae0:	4628      	mov	r0, r5
		if (ret != M2M_SUCCESS) {
			M2M_ERR("Error while reading reg\n");
			return ret;
  401ae2:	e00f      	b.n	401b04 <chip_deinit+0xa0>
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
  401ae4:	9901      	ldr	r1, [sp, #4]
  401ae6:	f411 6f80 	tst.w	r1, #1024	; 0x400
  401aea:	d00a      	beq.n	401b02 <chip_deinit+0x9e>
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
  401aec:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  401af0:	9101      	str	r1, [sp, #4]
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  401af2:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  401af6:	47b8      	blx	r7
  401af8:	1e63      	subs	r3, r4, #1
			timeout--;
		} else {
			break;
		}

	} while (timeout);
  401afa:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  401afe:	d1df      	bne.n	401ac0 <chip_deinit+0x5c>
  401b00:	e000      	b.n	401b04 <chip_deinit+0xa0>
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  401b02:	2000      	movs	r0, #0
		}

	} while (timeout);

	return ret;
}
  401b04:	b003      	add	sp, #12
  401b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401b08:	00401c45 	.word	0x00401c45
  401b0c:	00407ad8 	.word	0x00407ad8
  401b10:	00407490 	.word	0x00407490
  401b14:	00404475 	.word	0x00404475
  401b18:	00407b90 	.word	0x00407b90
  401b1c:	004074bc 	.word	0x004074bc
  401b20:	00401c51 	.word	0x00401c51
  401b24:	00407bac 	.word	0x00407bac
  401b28:	00407bc8 	.word	0x00407bc8

00401b2c <nmi_get_otp_mac_address>:
_EXIT:
	return s8Ret;
}

sint8 nmi_get_otp_mac_address(uint8 *pu8MacAddr,  uint8 * pu8IsValid)
{
  401b2c:	b570      	push	{r4, r5, r6, lr}
  401b2e:	b086      	sub	sp, #24
  401b30:	4606      	mov	r6, r0
  401b32:	460d      	mov	r5, r1
	sint8 ret;
	uint32	u32RegValue;
	uint8	mac[6];
	tstrGpRegs strgp = {0};
  401b34:	2300      	movs	r3, #0
  401b36:	9301      	str	r3, [sp, #4]
  401b38:	9302      	str	r3, [sp, #8]

	ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &u32RegValue);
  401b3a:	a905      	add	r1, sp, #20
  401b3c:	481a      	ldr	r0, [pc, #104]	; (401ba8 <nmi_get_otp_mac_address+0x7c>)
  401b3e:	4b1b      	ldr	r3, [pc, #108]	; (401bac <nmi_get_otp_mac_address+0x80>)
  401b40:	4798      	blx	r3
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
  401b42:	4604      	mov	r4, r0
  401b44:	bb30      	cbnz	r0, 401b94 <nmi_get_otp_mac_address+0x68>

	ret = nm_read_block(u32RegValue|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
  401b46:	2208      	movs	r2, #8
  401b48:	a901      	add	r1, sp, #4
  401b4a:	9805      	ldr	r0, [sp, #20]
  401b4c:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
  401b50:	4b17      	ldr	r3, [pc, #92]	; (401bb0 <nmi_get_otp_mac_address+0x84>)
  401b52:	4798      	blx	r3
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
  401b54:	4604      	mov	r4, r0
  401b56:	b9e8      	cbnz	r0, 401b94 <nmi_get_otp_mac_address+0x68>
	u32RegValue = strgp.u32Mac_efuse_mib;
  401b58:	9801      	ldr	r0, [sp, #4]
  401b5a:	9005      	str	r0, [sp, #20]

	if(!EFUSED_MAC(u32RegValue)) {
  401b5c:	4b15      	ldr	r3, [pc, #84]	; (401bb4 <nmi_get_otp_mac_address+0x88>)
  401b5e:	4003      	ands	r3, r0
  401b60:	b92b      	cbnz	r3, 401b6e <nmi_get_otp_mac_address+0x42>
		M2M_DBG("Default MAC\n");
		m2m_memset(pu8MacAddr, 0, 6);
  401b62:	2206      	movs	r2, #6
  401b64:	2100      	movs	r1, #0
  401b66:	4630      	mov	r0, r6
  401b68:	4b13      	ldr	r3, [pc, #76]	; (401bb8 <nmi_get_otp_mac_address+0x8c>)
  401b6a:	4798      	blx	r3
		goto _EXIT_ERR;
  401b6c:	e012      	b.n	401b94 <nmi_get_otp_mac_address+0x68>
	}

	M2M_DBG("OTP MAC\n");
	u32RegValue >>=16;
  401b6e:	0c00      	lsrs	r0, r0, #16
  401b70:	9005      	str	r0, [sp, #20]
	ret = nm_read_block(u32RegValue|0x30000, mac, 6);
  401b72:	2206      	movs	r2, #6
  401b74:	a903      	add	r1, sp, #12
  401b76:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
  401b7a:	4b0d      	ldr	r3, [pc, #52]	; (401bb0 <nmi_get_otp_mac_address+0x84>)
  401b7c:	4798      	blx	r3
  401b7e:	4604      	mov	r4, r0
	m2m_memcpy(pu8MacAddr,mac,6);
  401b80:	2206      	movs	r2, #6
  401b82:	a903      	add	r1, sp, #12
  401b84:	4630      	mov	r0, r6
  401b86:	4b0d      	ldr	r3, [pc, #52]	; (401bbc <nmi_get_otp_mac_address+0x90>)
  401b88:	4798      	blx	r3
	if(pu8IsValid) *pu8IsValid = 1;
  401b8a:	b145      	cbz	r5, 401b9e <nmi_get_otp_mac_address+0x72>
  401b8c:	2301      	movs	r3, #1
  401b8e:	702b      	strb	r3, [r5, #0]
	return ret;
  401b90:	4620      	mov	r0, r4
  401b92:	e007      	b.n	401ba4 <nmi_get_otp_mac_address+0x78>

_EXIT_ERR:
	if(pu8IsValid) *pu8IsValid = 0;
  401b94:	b12d      	cbz	r5, 401ba2 <nmi_get_otp_mac_address+0x76>
  401b96:	2300      	movs	r3, #0
  401b98:	702b      	strb	r3, [r5, #0]
	return ret;
  401b9a:	4620      	mov	r0, r4
  401b9c:	e002      	b.n	401ba4 <nmi_get_otp_mac_address+0x78>
	M2M_DBG("OTP MAC\n");
	u32RegValue >>=16;
	ret = nm_read_block(u32RegValue|0x30000, mac, 6);
	m2m_memcpy(pu8MacAddr,mac,6);
	if(pu8IsValid) *pu8IsValid = 1;
	return ret;
  401b9e:	4620      	mov	r0, r4
  401ba0:	e000      	b.n	401ba4 <nmi_get_otp_mac_address+0x78>

_EXIT_ERR:
	if(pu8IsValid) *pu8IsValid = 0;
	return ret;
  401ba2:	4620      	mov	r0, r4
}
  401ba4:	b006      	add	sp, #24
  401ba6:	bd70      	pop	{r4, r5, r6, pc}
  401ba8:	000c0008 	.word	0x000c0008
  401bac:	00401c45 	.word	0x00401c45
  401bb0:	00401c5d 	.word	0x00401c5d
  401bb4:	ffff0000 	.word	0xffff0000
  401bb8:	00400569 	.word	0x00400569
  401bbc:	00400555 	.word	0x00400555

00401bc0 <nmi_get_mac_address>:

sint8 nmi_get_mac_address(uint8 *pu8MacAddr)
{
  401bc0:	b530      	push	{r4, r5, lr}
  401bc2:	b087      	sub	sp, #28
  401bc4:	4605      	mov	r5, r0
	sint8 ret;
	uint32	u32RegValue;
	uint8	mac[6];
	tstrGpRegs strgp = {0};
  401bc6:	2300      	movs	r3, #0
  401bc8:	9301      	str	r3, [sp, #4]
  401bca:	9302      	str	r3, [sp, #8]

	ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &u32RegValue);
  401bcc:	a905      	add	r1, sp, #20
  401bce:	4810      	ldr	r0, [pc, #64]	; (401c10 <nmi_get_mac_address+0x50>)
  401bd0:	4b10      	ldr	r3, [pc, #64]	; (401c14 <nmi_get_mac_address+0x54>)
  401bd2:	4798      	blx	r3
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
  401bd4:	b9c0      	cbnz	r0, 401c08 <nmi_get_mac_address+0x48>

	ret = nm_read_block(u32RegValue|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
  401bd6:	2208      	movs	r2, #8
  401bd8:	a901      	add	r1, sp, #4
  401bda:	9805      	ldr	r0, [sp, #20]
  401bdc:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
  401be0:	4b0d      	ldr	r3, [pc, #52]	; (401c18 <nmi_get_mac_address+0x58>)
  401be2:	4798      	blx	r3
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
  401be4:	b988      	cbnz	r0, 401c0a <nmi_get_mac_address+0x4a>
	u32RegValue = strgp.u32Mac_efuse_mib;

	u32RegValue &=0x0000ffff;
  401be6:	f8bd 0004 	ldrh.w	r0, [sp, #4]
  401bea:	9005      	str	r0, [sp, #20]
	ret = nm_read_block(u32RegValue|0x30000, mac, 6);
  401bec:	2206      	movs	r2, #6
  401bee:	a903      	add	r1, sp, #12
  401bf0:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
  401bf4:	4b08      	ldr	r3, [pc, #32]	; (401c18 <nmi_get_mac_address+0x58>)
  401bf6:	4798      	blx	r3
  401bf8:	4604      	mov	r4, r0
	m2m_memcpy(pu8MacAddr, mac, 6);
  401bfa:	2206      	movs	r2, #6
  401bfc:	a903      	add	r1, sp, #12
  401bfe:	4628      	mov	r0, r5
  401c00:	4b06      	ldr	r3, [pc, #24]	; (401c1c <nmi_get_mac_address+0x5c>)
  401c02:	4798      	blx	r3

	return ret;
  401c04:	4620      	mov	r0, r4
  401c06:	e000      	b.n	401c0a <nmi_get_mac_address+0x4a>
  401c08:	e7ff      	b.n	401c0a <nmi_get_mac_address+0x4a>

_EXIT_ERR:
	return ret;
  401c0a:	b007      	add	sp, #28
  401c0c:	bd30      	pop	{r4, r5, pc}
  401c0e:	bf00      	nop
  401c10:	000c0008 	.word	0x000c0008
  401c14:	00401c45 	.word	0x00401c45
  401c18:	00401c5d 	.word	0x00401c5d
  401c1c:	00400555 	.word	0x00400555

00401c20 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
  401c20:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
  401c22:	4b01      	ldr	r3, [pc, #4]	; (401c28 <nm_bus_iface_init+0x8>)
  401c24:	4798      	blx	r3

	return ret;
}
  401c26:	bd08      	pop	{r3, pc}
  401c28:	00400329 	.word	0x00400329

00401c2c <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
  401c2c:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
  401c2e:	4b01      	ldr	r3, [pc, #4]	; (401c34 <nm_bus_iface_deinit+0x8>)
  401c30:	4798      	blx	r3

	return ret;
}
  401c32:	bd08      	pop	{r3, pc}
  401c34:	00400515 	.word	0x00400515

00401c38 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
  401c38:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
  401c3a:	4b01      	ldr	r3, [pc, #4]	; (401c40 <nm_read_reg+0x8>)
  401c3c:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
  401c3e:	bd08      	pop	{r3, pc}
  401c40:	00402489 	.word	0x00402489

00401c44 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
  401c44:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
  401c46:	4b01      	ldr	r3, [pc, #4]	; (401c4c <nm_read_reg_with_ret+0x8>)
  401c48:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
  401c4a:	bd08      	pop	{r3, pc}
  401c4c:	004024a1 	.word	0x004024a1

00401c50 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
  401c50:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
  401c52:	4b01      	ldr	r3, [pc, #4]	; (401c58 <nm_write_reg+0x8>)
  401c54:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
  401c56:	bd08      	pop	{r3, pc}
  401c58:	004024b9 	.word	0x004024b9

00401c5c <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
  401c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401c60:	4607      	mov	r7, r0
  401c62:	4689      	mov	r9, r1
  401c64:	4615      	mov	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
  401c66:	4b13      	ldr	r3, [pc, #76]	; (401cb4 <nm_read_block+0x58>)
  401c68:	f8b3 8000 	ldrh.w	r8, [r3]
  401c6c:	f1a8 0808 	sub.w	r8, r8, #8
  401c70:	fa1f f888 	uxth.w	r8, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  401c74:	4542      	cmp	r2, r8
  401c76:	d808      	bhi.n	401c8a <nm_read_block+0x2e>
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
	uint32 off = 0;
  401c78:	2600      	movs	r6, #0
static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
  401c7a:	b2aa      	uxth	r2, r5
  401c7c:	eb09 0106 	add.w	r1, r9, r6
  401c80:	4638      	mov	r0, r7
  401c82:	4b0d      	ldr	r3, [pc, #52]	; (401cb8 <nm_read_block+0x5c>)
  401c84:	4798      	blx	r3
  401c86:	4603      	mov	r3, r0
	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);
			break;
  401c88:	e010      	b.n	401cac <nm_read_block+0x50>
  401c8a:	4644      	mov	r4, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  401c8c:	2600      	movs	r6, #0
static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
  401c8e:	f8df a028 	ldr.w	sl, [pc, #40]	; 401cb8 <nm_read_block+0x5c>
  401c92:	4642      	mov	r2, r8
  401c94:	eb09 0106 	add.w	r1, r9, r6
  401c98:	4638      	mov	r0, r7
  401c9a:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
  401c9c:	4603      	mov	r3, r0
  401c9e:	b928      	cbnz	r0, 401cac <nm_read_block+0x50>
			u32Sz -= u16MaxTrxSz;
  401ca0:	1b2d      	subs	r5, r5, r4
			off += u16MaxTrxSz;
  401ca2:	4426      	add	r6, r4
			u32Addr += u16MaxTrxSz;
  401ca4:	4427      	add	r7, r4
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  401ca6:	42a5      	cmp	r5, r4
  401ca8:	d8f3      	bhi.n	401c92 <nm_read_block+0x36>
  401caa:	e7e6      	b.n	401c7a <nm_read_block+0x1e>
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
}
  401cac:	4618      	mov	r0, r3
  401cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401cb2:	bf00      	nop
  401cb4:	2040000c 	.word	0x2040000c
  401cb8:	004025dd 	.word	0x004025dd

00401cbc <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
  401cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401cc0:	4607      	mov	r7, r0
  401cc2:	4689      	mov	r9, r1
  401cc4:	4615      	mov	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
  401cc6:	4b13      	ldr	r3, [pc, #76]	; (401d14 <nm_write_block+0x58>)
  401cc8:	f8b3 8000 	ldrh.w	r8, [r3]
  401ccc:	f1a8 0808 	sub.w	r8, r8, #8
  401cd0:	fa1f f888 	uxth.w	r8, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  401cd4:	4542      	cmp	r2, r8
  401cd6:	d808      	bhi.n	401cea <nm_write_block+0x2e>
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
	uint32 off = 0;
  401cd8:	2600      	movs	r6, #0
static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
  401cda:	b2aa      	uxth	r2, r5
  401cdc:	eb09 0106 	add.w	r1, r9, r6
  401ce0:	4638      	mov	r0, r7
  401ce2:	4b0d      	ldr	r3, [pc, #52]	; (401d18 <nm_write_block+0x5c>)
  401ce4:	4798      	blx	r3
  401ce6:	4603      	mov	r3, r0
	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);
			break;
  401ce8:	e010      	b.n	401d0c <nm_write_block+0x50>
  401cea:	4644      	mov	r4, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  401cec:	2600      	movs	r6, #0
static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
  401cee:	f8df a028 	ldr.w	sl, [pc, #40]	; 401d18 <nm_write_block+0x5c>
  401cf2:	4642      	mov	r2, r8
  401cf4:	eb09 0106 	add.w	r1, r9, r6
  401cf8:	4638      	mov	r0, r7
  401cfa:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
  401cfc:	4603      	mov	r3, r0
  401cfe:	b928      	cbnz	r0, 401d0c <nm_write_block+0x50>
			u32Sz -= u16MaxTrxSz;
  401d00:	1b2d      	subs	r5, r5, r4
			off += u16MaxTrxSz;
  401d02:	4426      	add	r6, r4
			u32Addr += u16MaxTrxSz;
  401d04:	4427      	add	r7, r4
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  401d06:	42a5      	cmp	r5, r4
  401d08:	d8f3      	bhi.n	401cf2 <nm_write_block+0x36>
  401d0a:	e7e6      	b.n	401cda <nm_write_block+0x1e>
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
}
  401d0c:	4618      	mov	r0, r3
  401d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401d12:	bf00      	nop
  401d14:	2040000c 	.word	0x2040000c
  401d18:	004026a9 	.word	0x004026a9

00401d1c <nm_get_firmware_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_info(tstrM2mRev* M2mRev)
{
  401d1c:	b530      	push	{r4, r5, lr}
  401d1e:	b083      	sub	sp, #12
  401d20:	4604      	mov	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
  401d22:	a902      	add	r1, sp, #8
  401d24:	2300      	movs	r3, #0
  401d26:	f841 3d04 	str.w	r3, [r1, #-4]!
	sint8	ret = M2M_SUCCESS;

	ret = nm_read_reg_with_ret(NMI_REV_REG, &reg);
  401d2a:	4823      	ldr	r0, [pc, #140]	; (401db8 <nm_get_firmware_info+0x9c>)
  401d2c:	4b23      	ldr	r3, [pc, #140]	; (401dbc <nm_get_firmware_info+0xa0>)
  401d2e:	4798      	blx	r3
  401d30:	4605      	mov	r5, r0
	//In case the Firmware running is ATE fw
	if(M2M_ATE_FW_IS_UP_VALUE == reg)
  401d32:	9a01      	ldr	r2, [sp, #4]
  401d34:	4b22      	ldr	r3, [pc, #136]	; (401dc0 <nm_get_firmware_info+0xa4>)
  401d36:	429a      	cmp	r2, r3
  401d38:	d105      	bne.n	401d46 <nm_get_firmware_info+0x2a>
	{
		//Read FW info again from the register specified for ATE
		ret = nm_read_reg_with_ret(NMI_REV_REG_ATE, &reg);
  401d3a:	a901      	add	r1, sp, #4
  401d3c:	f241 0048 	movw	r0, #4168	; 0x1048
  401d40:	4b1e      	ldr	r3, [pc, #120]	; (401dbc <nm_get_firmware_info+0xa0>)
  401d42:	4798      	blx	r3
  401d44:	4605      	mov	r5, r0
	}
	M2mRev->u8DriverMajor	= M2M_GET_DRV_MAJOR(reg);
  401d46:	9b01      	ldr	r3, [sp, #4]
  401d48:	0c1a      	lsrs	r2, r3, #16
  401d4a:	1211      	asrs	r1, r2, #8
  401d4c:	71e1      	strb	r1, [r4, #7]
	M2mRev->u8DriverMinor   = M2M_GET_DRV_MINOR(reg);
  401d4e:	f3c2 1103 	ubfx	r1, r2, #4, #4
  401d52:	7221      	strb	r1, [r4, #8]
	M2mRev->u8DriverPatch	= M2M_GET_DRV_PATCH(reg);
  401d54:	f002 020f 	and.w	r2, r2, #15
  401d58:	7262      	strb	r2, [r4, #9]
	M2mRev->u8FirmwareMajor	= M2M_GET_FW_MAJOR(reg);
  401d5a:	121a      	asrs	r2, r3, #8
  401d5c:	7122      	strb	r2, [r4, #4]
	M2mRev->u8FirmwareMinor = M2M_GET_FW_MINOR(reg);
  401d5e:	f3c3 1203 	ubfx	r2, r3, #4, #4
  401d62:	7162      	strb	r2, [r4, #5]
	M2mRev->u8FirmwarePatch = M2M_GET_FW_PATCH(reg);
  401d64:	f003 030f 	and.w	r3, r3, #15
  401d68:	71a3      	strb	r3, [r4, #6]
	M2mRev->u32Chipid	= nmi_get_chipid();
  401d6a:	4b16      	ldr	r3, [pc, #88]	; (401dc4 <nm_get_firmware_info+0xa8>)
  401d6c:	4798      	blx	r3
  401d6e:	6020      	str	r0, [r4, #0]
	
	curr_firm_ver   = M2M_MAKE_VERSION(M2mRev->u8FirmwareMajor, M2mRev->u8FirmwareMinor,M2mRev->u8FirmwarePatch);
  401d70:	7922      	ldrb	r2, [r4, #4]
  401d72:	79a3      	ldrb	r3, [r4, #6]
  401d74:	f003 030f 	and.w	r3, r3, #15
  401d78:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
  401d7c:	7963      	ldrb	r3, [r4, #5]
  401d7e:	011b      	lsls	r3, r3, #4
  401d80:	b2db      	uxtb	r3, r3
  401d82:	4313      	orrs	r3, r2
	curr_drv_ver    = M2M_MAKE_VERSION(M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
	min_req_drv_ver = M2M_MAKE_VERSION(M2mRev->u8DriverMajor, M2mRev->u8DriverMinor,M2mRev->u8DriverPatch);
	if(curr_drv_ver <  min_req_drv_ver) {
  401d84:	79e1      	ldrb	r1, [r4, #7]
  401d86:	7a62      	ldrb	r2, [r4, #9]
  401d88:	f002 020f 	and.w	r2, r2, #15
  401d8c:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
  401d90:	7a22      	ldrb	r2, [r4, #8]
  401d92:	0112      	lsls	r2, r2, #4
  401d94:	b2d2      	uxtb	r2, r2
  401d96:	430a      	orrs	r2, r1
  401d98:	f241 3130 	movw	r1, #4912	; 0x1330
		/*The current driver version should be larger or equal 
		than the min driver that the current firmware support  */
		ret = M2M_ERR_FW_VER_MISMATCH;
  401d9c:	428a      	cmp	r2, r1
  401d9e:	bf88      	it	hi
  401da0:	f06f 050c 	mvnhi.w	r5, #12
	}
	if(curr_drv_ver >  curr_firm_ver) {
  401da4:	f241 322f 	movw	r2, #4911	; 0x132f
		/*The current driver should be equal or less than the firmware version*/
		ret = M2M_ERR_FW_VER_MISMATCH;
  401da8:	4293      	cmp	r3, r2
	}
	return ret;
}
  401daa:	bf8c      	ite	hi
  401dac:	4628      	movhi	r0, r5
  401dae:	f06f 000c 	mvnls.w	r0, #12
  401db2:	b003      	add	sp, #12
  401db4:	bd30      	pop	{r4, r5, pc}
  401db6:	bf00      	nop
  401db8:	000207ac 	.word	0x000207ac
  401dbc:	00401c45 	.word	0x00401c45
  401dc0:	d75dc1c3 	.word	0xd75dc1c3
  401dc4:	00401859 	.word	0x00401859

00401dc8 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
  401dc8:	b538      	push	{r3, r4, r5, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
  401dca:	b130      	cbz	r0, 401dda <nm_drv_init+0x12>
		u8Mode = *((uint8 *)arg);
  401dcc:	7804      	ldrb	r4, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
  401dce:	1e63      	subs	r3, r4, #1
  401dd0:	b2db      	uxtb	r3, r3
			u8Mode = M2M_WIFI_MODE_NORMAL;
  401dd2:	2b04      	cmp	r3, #4
  401dd4:	bf28      	it	cs
  401dd6:	2401      	movcs	r4, #1
  401dd8:	e000      	b.n	401ddc <nm_drv_init+0x14>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
  401dda:	2401      	movs	r4, #1
	}
	
	ret = nm_bus_iface_init(NULL);
  401ddc:	2000      	movs	r0, #0
  401dde:	4b1d      	ldr	r3, [pc, #116]	; (401e54 <nm_drv_init+0x8c>)
  401de0:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401de2:	4605      	mov	r5, r0
  401de4:	b150      	cbz	r0, 401dfc <nm_drv_init+0x34>
		M2M_ERR("[nmi start]: fail init bus\n");
  401de6:	f44f 7292 	mov.w	r2, #292	; 0x124
  401dea:	491b      	ldr	r1, [pc, #108]	; (401e58 <nm_drv_init+0x90>)
  401dec:	481b      	ldr	r0, [pc, #108]	; (401e5c <nm_drv_init+0x94>)
  401dee:	4c1c      	ldr	r4, [pc, #112]	; (401e60 <nm_drv_init+0x98>)
  401df0:	47a0      	blx	r4
  401df2:	481c      	ldr	r0, [pc, #112]	; (401e64 <nm_drv_init+0x9c>)
  401df4:	47a0      	blx	r4
  401df6:	481c      	ldr	r0, [pc, #112]	; (401e68 <nm_drv_init+0xa0>)
  401df8:	47a0      	blx	r4
		goto ERR1;
  401dfa:	e029      	b.n	401e50 <nm_drv_init+0x88>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
  401dfc:	481b      	ldr	r0, [pc, #108]	; (401e6c <nm_drv_init+0xa4>)
  401dfe:	4d18      	ldr	r5, [pc, #96]	; (401e60 <nm_drv_init+0x98>)
  401e00:	47a8      	blx	r5
  401e02:	4b1b      	ldr	r3, [pc, #108]	; (401e70 <nm_drv_init+0xa8>)
  401e04:	4798      	blx	r3
  401e06:	4601      	mov	r1, r0
  401e08:	481a      	ldr	r0, [pc, #104]	; (401e74 <nm_drv_init+0xac>)
  401e0a:	47a8      	blx	r5
  401e0c:	4816      	ldr	r0, [pc, #88]	; (401e68 <nm_drv_init+0xa0>)
  401e0e:	47a8      	blx	r5
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
  401e10:	4b19      	ldr	r3, [pc, #100]	; (401e78 <nm_drv_init+0xb0>)
  401e12:	4798      	blx	r3
	ret = cpu_start();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	ret = wait_for_bootrom(u8Mode);
  401e14:	4620      	mov	r0, r4
  401e16:	4b19      	ldr	r3, [pc, #100]	; (401e7c <nm_drv_init+0xb4>)
  401e18:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401e1a:	4605      	mov	r5, r0
  401e1c:	b9b0      	cbnz	r0, 401e4c <nm_drv_init+0x84>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
  401e1e:	4620      	mov	r0, r4
  401e20:	4b17      	ldr	r3, [pc, #92]	; (401e80 <nm_drv_init+0xb8>)
  401e22:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401e24:	4605      	mov	r5, r0
  401e26:	b988      	cbnz	r0, 401e4c <nm_drv_init+0x84>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
  401e28:	3c02      	subs	r4, #2
  401e2a:	b2e4      	uxtb	r4, r4
  401e2c:	2c01      	cmp	r4, #1
  401e2e:	d90f      	bls.n	401e50 <nm_drv_init+0x88>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
  401e30:	4b14      	ldr	r3, [pc, #80]	; (401e84 <nm_drv_init+0xbc>)
  401e32:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401e34:	4605      	mov	r5, r0
  401e36:	b158      	cbz	r0, 401e50 <nm_drv_init+0x88>
		M2M_ERR("failed to enable interrupts..\n");
  401e38:	f44f 72ae 	mov.w	r2, #348	; 0x15c
  401e3c:	4906      	ldr	r1, [pc, #24]	; (401e58 <nm_drv_init+0x90>)
  401e3e:	4807      	ldr	r0, [pc, #28]	; (401e5c <nm_drv_init+0x94>)
  401e40:	4c07      	ldr	r4, [pc, #28]	; (401e60 <nm_drv_init+0x98>)
  401e42:	47a0      	blx	r4
  401e44:	4810      	ldr	r0, [pc, #64]	; (401e88 <nm_drv_init+0xc0>)
  401e46:	47a0      	blx	r4
  401e48:	4807      	ldr	r0, [pc, #28]	; (401e68 <nm_drv_init+0xa0>)
  401e4a:	47a0      	blx	r4
		goto ERR2;
	}
	
	return ret;
ERR2:
	nm_bus_iface_deinit();
  401e4c:	4b0f      	ldr	r3, [pc, #60]	; (401e8c <nm_drv_init+0xc4>)
  401e4e:	4798      	blx	r3
ERR1:
	return ret;
}
  401e50:	4628      	mov	r0, r5
  401e52:	bd38      	pop	{r3, r4, r5, pc}
  401e54:	00401c21 	.word	0x00401c21
  401e58:	00407cd0 	.word	0x00407cd0
  401e5c:	00407490 	.word	0x00407490
  401e60:	00404475 	.word	0x00404475
  401e64:	00407c24 	.word	0x00407c24
  401e68:	004074bc 	.word	0x004074bc
  401e6c:	00407780 	.word	0x00407780
  401e70:	00401859 	.word	0x00401859
  401e74:	00407c40 	.word	0x00407c40
  401e78:	004024d1 	.word	0x004024d1
  401e7c:	00401909 	.word	0x00401909
  401e80:	004019e5 	.word	0x004019e5
  401e84:	004017f1 	.word	0x004017f1
  401e88:	00407c50 	.word	0x00407c50
  401e8c:	00401c2d 	.word	0x00401c2d

00401e90 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
  401e90:	b538      	push	{r3, r4, r5, lr}
	sint8 ret;

	ret = chip_deinit();
  401e92:	4b19      	ldr	r3, [pc, #100]	; (401ef8 <nm_drv_deinit+0x68>)
  401e94:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401e96:	b158      	cbz	r0, 401eb0 <nm_drv_deinit+0x20>
  401e98:	4604      	mov	r4, r0
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
  401e9a:	f44f 72ba 	mov.w	r2, #372	; 0x174
  401e9e:	4917      	ldr	r1, [pc, #92]	; (401efc <nm_drv_deinit+0x6c>)
  401ea0:	4817      	ldr	r0, [pc, #92]	; (401f00 <nm_drv_deinit+0x70>)
  401ea2:	4d18      	ldr	r5, [pc, #96]	; (401f04 <nm_drv_deinit+0x74>)
  401ea4:	47a8      	blx	r5
  401ea6:	4818      	ldr	r0, [pc, #96]	; (401f08 <nm_drv_deinit+0x78>)
  401ea8:	47a8      	blx	r5
  401eaa:	4818      	ldr	r0, [pc, #96]	; (401f0c <nm_drv_deinit+0x7c>)
  401eac:	47a8      	blx	r5
		goto ERR1;
  401eae:	e020      	b.n	401ef2 <nm_drv_deinit+0x62>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
  401eb0:	2000      	movs	r0, #0
  401eb2:	4b17      	ldr	r3, [pc, #92]	; (401f10 <nm_drv_deinit+0x80>)
  401eb4:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401eb6:	4604      	mov	r4, r0
  401eb8:	b150      	cbz	r0, 401ed0 <nm_drv_deinit+0x40>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
  401eba:	f240 127b 	movw	r2, #379	; 0x17b
  401ebe:	490f      	ldr	r1, [pc, #60]	; (401efc <nm_drv_deinit+0x6c>)
  401ec0:	480f      	ldr	r0, [pc, #60]	; (401f00 <nm_drv_deinit+0x70>)
  401ec2:	4d10      	ldr	r5, [pc, #64]	; (401f04 <nm_drv_deinit+0x74>)
  401ec4:	47a8      	blx	r5
  401ec6:	4813      	ldr	r0, [pc, #76]	; (401f14 <nm_drv_deinit+0x84>)
  401ec8:	47a8      	blx	r5
  401eca:	4810      	ldr	r0, [pc, #64]	; (401f0c <nm_drv_deinit+0x7c>)
  401ecc:	47a8      	blx	r5
		goto ERR1;
  401ece:	e010      	b.n	401ef2 <nm_drv_deinit+0x62>
	}

	ret = nm_bus_iface_deinit();
  401ed0:	4b11      	ldr	r3, [pc, #68]	; (401f18 <nm_drv_deinit+0x88>)
  401ed2:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401ed4:	4604      	mov	r4, r0
  401ed6:	b150      	cbz	r0, 401eee <nm_drv_deinit+0x5e>
		M2M_ERR("[nmi stop]: fail init bus\n");
  401ed8:	f240 1281 	movw	r2, #385	; 0x181
  401edc:	4907      	ldr	r1, [pc, #28]	; (401efc <nm_drv_deinit+0x6c>)
  401ede:	4808      	ldr	r0, [pc, #32]	; (401f00 <nm_drv_deinit+0x70>)
  401ee0:	4d08      	ldr	r5, [pc, #32]	; (401f04 <nm_drv_deinit+0x74>)
  401ee2:	47a8      	blx	r5
  401ee4:	480d      	ldr	r0, [pc, #52]	; (401f1c <nm_drv_deinit+0x8c>)
  401ee6:	47a8      	blx	r5
  401ee8:	4808      	ldr	r0, [pc, #32]	; (401f0c <nm_drv_deinit+0x7c>)
  401eea:	47a8      	blx	r5
		goto ERR1;
  401eec:	e001      	b.n	401ef2 <nm_drv_deinit+0x62>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
  401eee:	4b0c      	ldr	r3, [pc, #48]	; (401f20 <nm_drv_deinit+0x90>)
  401ef0:	4798      	blx	r3
#endif

ERR1:
	return ret;
}
  401ef2:	4620      	mov	r0, r4
  401ef4:	bd38      	pop	{r3, r4, r5, pc}
  401ef6:	bf00      	nop
  401ef8:	00401a65 	.word	0x00401a65
  401efc:	00407cdc 	.word	0x00407cdc
  401f00:	00407490 	.word	0x00407490
  401f04:	00404475 	.word	0x00404475
  401f08:	00407c70 	.word	0x00407c70
  401f0c:	004074bc 	.word	0x004074bc
  401f10:	00402f79 	.word	0x00402f79
  401f14:	00407c90 	.word	0x00407c90
  401f18:	00401c2d 	.word	0x00401c2d
  401f1c:	00407cb4 	.word	0x00407cb4
  401f20:	0040247d 	.word	0x0040247d

00401f24 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
  401f24:	b500      	push	{lr}
  401f26:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
  401f28:	2300      	movs	r3, #0
  401f2a:	9301      	str	r3, [sp, #4]
	spi.pu8OutBuf = b;
  401f2c:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
  401f2e:	f8ad 100c 	strh.w	r1, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
  401f32:	a901      	add	r1, sp, #4
  401f34:	2003      	movs	r0, #3
  401f36:	4b02      	ldr	r3, [pc, #8]	; (401f40 <nmi_spi_read+0x1c>)
  401f38:	4798      	blx	r3
}
  401f3a:	b005      	add	sp, #20
  401f3c:	f85d fb04 	ldr.w	pc, [sp], #4
  401f40:	00400445 	.word	0x00400445

00401f44 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
  401f44:	b5f0      	push	{r4, r5, r6, r7, lr}
  401f46:	b083      	sub	sp, #12
  401f48:	4605      	mov	r5, r0

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
		 (cmd == CMD_TERMINATE) ||
  401f4a:	f100 033b 	add.w	r3, r0, #59	; 0x3b
  401f4e:	b2db      	uxtb	r3, r3
  401f50:	2b01      	cmp	r3, #1
  401f52:	d901      	bls.n	401f58 <spi_cmd_rsp+0x14>
  401f54:	28cf      	cmp	r0, #207	; 0xcf
  401f56:	d106      	bne.n	401f66 <spi_cmd_rsp+0x22>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  401f58:	2101      	movs	r1, #1
  401f5a:	f10d 0007 	add.w	r0, sp, #7
  401f5e:	4b22      	ldr	r3, [pc, #136]	; (401fe8 <spi_cmd_rsp+0xa4>)
  401f60:	4798      	blx	r3
  401f62:	2800      	cmp	r0, #0
  401f64:	d13a      	bne.n	401fdc <spi_cmd_rsp+0x98>

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
  401f66:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  401f68:	2701      	movs	r7, #1
  401f6a:	4e1f      	ldr	r6, [pc, #124]	; (401fe8 <spi_cmd_rsp+0xa4>)
  401f6c:	4639      	mov	r1, r7
  401f6e:	f10d 0007 	add.w	r0, sp, #7
  401f72:	47b0      	blx	r6
  401f74:	b158      	cbz	r0, 401f8e <spi_cmd_rsp+0x4a>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
  401f76:	f240 1227 	movw	r2, #295	; 0x127
  401f7a:	491c      	ldr	r1, [pc, #112]	; (401fec <spi_cmd_rsp+0xa8>)
  401f7c:	481c      	ldr	r0, [pc, #112]	; (401ff0 <spi_cmd_rsp+0xac>)
  401f7e:	4c1d      	ldr	r4, [pc, #116]	; (401ff4 <spi_cmd_rsp+0xb0>)
  401f80:	47a0      	blx	r4
  401f82:	481d      	ldr	r0, [pc, #116]	; (401ff8 <spi_cmd_rsp+0xb4>)
  401f84:	47a0      	blx	r4
  401f86:	481d      	ldr	r0, [pc, #116]	; (401ffc <spi_cmd_rsp+0xb8>)
  401f88:	47a0      	blx	r4
			result = N_FAIL;
  401f8a:	2000      	movs	r0, #0
			goto _fail_;
  401f8c:	e029      	b.n	401fe2 <spi_cmd_rsp+0x9e>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
  401f8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
  401f92:	42ab      	cmp	r3, r5
  401f94:	d005      	beq.n	401fa2 <spi_cmd_rsp+0x5e>
  401f96:	1e63      	subs	r3, r4, #1
  401f98:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  401f9c:	d1e6      	bne.n	401f6c <spi_cmd_rsp+0x28>
  401f9e:	240b      	movs	r4, #11
  401fa0:	e000      	b.n	401fa4 <spi_cmd_rsp+0x60>
  401fa2:	240b      	movs	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  401fa4:	2601      	movs	r6, #1
  401fa6:	4d10      	ldr	r5, [pc, #64]	; (401fe8 <spi_cmd_rsp+0xa4>)
  401fa8:	4631      	mov	r1, r6
  401faa:	f10d 0007 	add.w	r0, sp, #7
  401fae:	47a8      	blx	r5
  401fb0:	b158      	cbz	r0, 401fca <spi_cmd_rsp+0x86>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
  401fb2:	f240 1235 	movw	r2, #309	; 0x135
  401fb6:	490d      	ldr	r1, [pc, #52]	; (401fec <spi_cmd_rsp+0xa8>)
  401fb8:	480d      	ldr	r0, [pc, #52]	; (401ff0 <spi_cmd_rsp+0xac>)
  401fba:	4c0e      	ldr	r4, [pc, #56]	; (401ff4 <spi_cmd_rsp+0xb0>)
  401fbc:	47a0      	blx	r4
  401fbe:	480e      	ldr	r0, [pc, #56]	; (401ff8 <spi_cmd_rsp+0xb4>)
  401fc0:	47a0      	blx	r4
  401fc2:	480e      	ldr	r0, [pc, #56]	; (401ffc <spi_cmd_rsp+0xb8>)
  401fc4:	47a0      	blx	r4
			result = N_FAIL;
  401fc6:	2000      	movs	r0, #0
			goto _fail_;
  401fc8:	e00b      	b.n	401fe2 <spi_cmd_rsp+0x9e>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
  401fca:	f89d 3007 	ldrb.w	r3, [sp, #7]
  401fce:	b13b      	cbz	r3, 401fe0 <spi_cmd_rsp+0x9c>
  401fd0:	1e63      	subs	r3, r4, #1
  401fd2:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  401fd6:	d1e7      	bne.n	401fa8 <spi_cmd_rsp+0x64>
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
	uint8 rsp;
	sint8 result = N_OK;
  401fd8:	2001      	movs	r0, #1
  401fda:	e002      	b.n	401fe2 <spi_cmd_rsp+0x9e>
	**/
	if ((cmd == CMD_RESET) ||
		 (cmd == CMD_TERMINATE) ||
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
			result = N_FAIL;
  401fdc:	2000      	movs	r0, #0
  401fde:	e000      	b.n	401fe2 <spi_cmd_rsp+0x9e>
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
	uint8 rsp;
	sint8 result = N_OK;
  401fe0:	2001      	movs	r0, #1
	} while((rsp != 0x00) && (s8RetryCnt-- >0));

_fail_:

	return result;
}
  401fe2:	b003      	add	sp, #12
  401fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401fe6:	bf00      	nop
  401fe8:	00401f25 	.word	0x00401f25
  401fec:	00408300 	.word	0x00408300
  401ff0:	00407490 	.word	0x00407490
  401ff4:	00404475 	.word	0x00404475
  401ff8:	00407e24 	.word	0x00407e24
  401ffc:	004074bc 	.word	0x004074bc

00402000 <spi_data_read>:

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
  402000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402004:	b083      	sub	sp, #12
  402006:	4682      	mov	sl, r0
  402008:	4689      	mov	r9, r1
  40200a:	4693      	mov	fp, r2
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
  40200c:	f04f 0800 	mov.w	r8, #0
		/**
			Data Respnose header
		**/
		retry = 10;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  402010:	4d35      	ldr	r5, [pc, #212]	; (4020e8 <spi_data_read+0xe8>)
	/**
		Data
	**/
	ix = 0;
	do {
		if (sz <= DATA_PKT_SZ)
  402012:	f5b9 5f00 	cmp.w	r9, #8192	; 0x2000
			nbytes = sz;
  402016:	bf94      	ite	ls
  402018:	fa0f f789 	sxthls.w	r7, r9
		else
			nbytes = DATA_PKT_SZ;
  40201c:	f44f 5700 	movhi.w	r7, #8192	; 0x2000

		/**
			Data Respnose header
		**/
		retry = 10;
  402020:	240a      	movs	r4, #10
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  402022:	2601      	movs	r6, #1
  402024:	4631      	mov	r1, r6
  402026:	f10d 0003 	add.w	r0, sp, #3
  40202a:	47a8      	blx	r5
  40202c:	b158      	cbz	r0, 402046 <spi_data_read+0x46>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
  40202e:	f240 1257 	movw	r2, #343	; 0x157
  402032:	492e      	ldr	r1, [pc, #184]	; (4020ec <spi_data_read+0xec>)
  402034:	482e      	ldr	r0, [pc, #184]	; (4020f0 <spi_data_read+0xf0>)
  402036:	4c2f      	ldr	r4, [pc, #188]	; (4020f4 <spi_data_read+0xf4>)
  402038:	47a0      	blx	r4
  40203a:	482f      	ldr	r0, [pc, #188]	; (4020f8 <spi_data_read+0xf8>)
  40203c:	47a0      	blx	r4
  40203e:	482f      	ldr	r0, [pc, #188]	; (4020fc <spi_data_read+0xfc>)
  402040:	47a0      	blx	r4
  402042:	2000      	movs	r0, #0
  402044:	e04d      	b.n	4020e2 <spi_data_read+0xe2>
				result = N_FAIL;
				break;
			}
			if (((rsp >> 4) & 0xf) == 0xf)
  402046:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40204a:	091b      	lsrs	r3, r3, #4
  40204c:	2b0f      	cmp	r3, #15
  40204e:	d005      	beq.n	40205c <spi_data_read+0x5c>
  402050:	3c01      	subs	r4, #1
  402052:	b224      	sxth	r4, r4
				break;
		} while (retry--);
  402054:	f1b4 3fff 	cmp.w	r4, #4294967295
  402058:	d1e4      	bne.n	402024 <spi_data_read+0x24>
  40205a:	e001      	b.n	402060 <spi_data_read+0x60>

		if (result == N_FAIL)
			break;

		if (retry <= 0) {
  40205c:	2c00      	cmp	r4, #0
  40205e:	dc0d      	bgt.n	40207c <spi_data_read+0x7c>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
  402060:	f240 1263 	movw	r2, #355	; 0x163
  402064:	4921      	ldr	r1, [pc, #132]	; (4020ec <spi_data_read+0xec>)
  402066:	4822      	ldr	r0, [pc, #136]	; (4020f0 <spi_data_read+0xf0>)
  402068:	4c22      	ldr	r4, [pc, #136]	; (4020f4 <spi_data_read+0xf4>)
  40206a:	47a0      	blx	r4
  40206c:	f89d 1003 	ldrb.w	r1, [sp, #3]
  402070:	4823      	ldr	r0, [pc, #140]	; (402100 <spi_data_read+0x100>)
  402072:	47a0      	blx	r4
  402074:	4821      	ldr	r0, [pc, #132]	; (4020fc <spi_data_read+0xfc>)
  402076:	47a0      	blx	r4
			result = N_FAIL;
  402078:	2000      	movs	r0, #0
			break;
  40207a:	e032      	b.n	4020e2 <spi_data_read+0xe2>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
  40207c:	b2bf      	uxth	r7, r7
  40207e:	4639      	mov	r1, r7
  402080:	eb0a 0008 	add.w	r0, sl, r8
  402084:	47a8      	blx	r5
  402086:	b158      	cbz	r0, 4020a0 <spi_data_read+0xa0>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
  402088:	f44f 72b6 	mov.w	r2, #364	; 0x16c
  40208c:	4917      	ldr	r1, [pc, #92]	; (4020ec <spi_data_read+0xec>)
  40208e:	4818      	ldr	r0, [pc, #96]	; (4020f0 <spi_data_read+0xf0>)
  402090:	4c18      	ldr	r4, [pc, #96]	; (4020f4 <spi_data_read+0xf4>)
  402092:	47a0      	blx	r4
  402094:	481b      	ldr	r0, [pc, #108]	; (402104 <spi_data_read+0x104>)
  402096:	47a0      	blx	r4
  402098:	4818      	ldr	r0, [pc, #96]	; (4020fc <spi_data_read+0xfc>)
  40209a:	47a0      	blx	r4
			result = N_FAIL;
  40209c:	2000      	movs	r0, #0
			break;
  40209e:	e020      	b.n	4020e2 <spi_data_read+0xe2>
		}
		if(!clockless)
  4020a0:	f1bb 0f00 	cmp.w	fp, #0
  4020a4:	d112      	bne.n	4020cc <spi_data_read+0xcc>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
  4020a6:	4b18      	ldr	r3, [pc, #96]	; (402108 <spi_data_read+0x108>)
  4020a8:	781b      	ldrb	r3, [r3, #0]
  4020aa:	b97b      	cbnz	r3, 4020cc <spi_data_read+0xcc>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
  4020ac:	2102      	movs	r1, #2
  4020ae:	a801      	add	r0, sp, #4
  4020b0:	47a8      	blx	r5
  4020b2:	b158      	cbz	r0, 4020cc <spi_data_read+0xcc>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
  4020b4:	f240 1277 	movw	r2, #375	; 0x177
  4020b8:	490c      	ldr	r1, [pc, #48]	; (4020ec <spi_data_read+0xec>)
  4020ba:	480d      	ldr	r0, [pc, #52]	; (4020f0 <spi_data_read+0xf0>)
  4020bc:	4c0d      	ldr	r4, [pc, #52]	; (4020f4 <spi_data_read+0xf4>)
  4020be:	47a0      	blx	r4
  4020c0:	4812      	ldr	r0, [pc, #72]	; (40210c <spi_data_read+0x10c>)
  4020c2:	47a0      	blx	r4
  4020c4:	480d      	ldr	r0, [pc, #52]	; (4020fc <spi_data_read+0xfc>)
  4020c6:	47a0      	blx	r4
					result = N_FAIL;
  4020c8:	2000      	movs	r0, #0
					break;
  4020ca:	e00a      	b.n	4020e2 <spi_data_read+0xe2>
				}
			}
		}
		ix += nbytes;
  4020cc:	44b8      	add	r8, r7
  4020ce:	fa0f f888 	sxth.w	r8, r8
		sz -= nbytes;
  4020d2:	ebc7 0709 	rsb	r7, r7, r9
  4020d6:	fa1f f987 	uxth.w	r9, r7

	} while (sz);
  4020da:	f1b9 0f00 	cmp.w	r9, #0
  4020de:	d198      	bne.n	402012 <spi_data_read+0x12>
  4020e0:	2001      	movs	r0, #1

	return result;
}
  4020e2:	b003      	add	sp, #12
  4020e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4020e8:	00401f25 	.word	0x00401f25
  4020ec:	00407cec 	.word	0x00407cec
  4020f0:	00407490 	.word	0x00407490
  4020f4:	00404475 	.word	0x00404475
  4020f8:	00407e58 	.word	0x00407e58
  4020fc:	004074bc 	.word	0x004074bc
  402100:	00407e8c 	.word	0x00407e8c
  402104:	00407ebc 	.word	0x00407ebc
  402108:	20400948 	.word	0x20400948
  40210c:	00407ef0 	.word	0x00407ef0

00402110 <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
  402110:	b500      	push	{lr}
  402112:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
  402114:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
  402116:	2300      	movs	r3, #0
  402118:	9302      	str	r3, [sp, #8]
	spi.u16Sz = sz;
  40211a:	f8ad 100c 	strh.w	r1, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
  40211e:	a901      	add	r1, sp, #4
  402120:	2003      	movs	r0, #3
  402122:	4b02      	ldr	r3, [pc, #8]	; (40212c <nmi_spi_write+0x1c>)
  402124:	4798      	blx	r3
}
  402126:	b005      	add	sp, #20
  402128:	f85d fb04 	ldr.w	pc, [sp], #4
  40212c:	00400445 	.word	0x00400445

00402130 <spi_cmd>:
	Spi protocol Function

********************************************/

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
  402130:	b570      	push	{r4, r5, r6, lr}
  402132:	b084      	sub	sp, #16
  402134:	f89d 4020 	ldrb.w	r4, [sp, #32]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
  402138:	f88d 0004 	strb.w	r0, [sp, #4]
	switch (cmd) {
  40213c:	38c1      	subs	r0, #193	; 0xc1
  40213e:	280e      	cmp	r0, #14
  402140:	f200 80ae 	bhi.w	4022a0 <spi_cmd+0x170>
  402144:	e8df f000 	tbb	[pc, r0]
  402148:	125f3e3e 	.word	0x125f3e3e
  40214c:	4d4d2c23 	.word	0x4d4d2c23
  402150:	acac0878 	.word	0xacac0878
  402154:	acac      	.short	0xacac
  402156:	35          	.byte	0x35
  402157:	00          	.byte	0x00
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
  402158:	0c0b      	lsrs	r3, r1, #16
  40215a:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  40215e:	0a0b      	lsrs	r3, r1, #8
  402160:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = (uint8)adr;
  402164:	f88d 1007 	strb.w	r1, [sp, #7]
		len = 5;
  402168:	2105      	movs	r1, #5
		break;
  40216a:	e0a4      	b.n	4022b6 <spi_cmd+0x186>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
  40216c:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
  402170:	b914      	cbnz	r4, 402178 <spi_cmd+0x48>
		bc[2] = (uint8)(adr >> 8);
		bc[3] = (uint8)adr;
		len = 5;
		break;
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
  402172:	f88d 3005 	strb.w	r3, [sp, #5]
  402176:	e003      	b.n	402180 <spi_cmd+0x50>
		if(clockless)  bc[1] |= (1 << 7);
  402178:	f063 037f 	orn	r3, r3, #127	; 0x7f
  40217c:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)adr;
  402180:	f88d 1006 	strb.w	r1, [sp, #6]
		bc[3] = 0x00;
  402184:	2300      	movs	r3, #0
  402186:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  40218a:	2105      	movs	r1, #5
		break;
  40218c:	e093      	b.n	4022b6 <spi_cmd+0x186>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
  40218e:	2300      	movs	r3, #0
  402190:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0x00;
  402194:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0x00;
  402198:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  40219c:	2105      	movs	r1, #5
		break;
  40219e:	e08a      	b.n	4022b6 <spi_cmd+0x186>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
  4021a0:	2300      	movs	r3, #0
  4021a2:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0x00;
  4021a6:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0x00;
  4021aa:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  4021ae:	2105      	movs	r1, #5
		break;
  4021b0:	e081      	b.n	4022b6 <spi_cmd+0x186>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
  4021b2:	23ff      	movs	r3, #255	; 0xff
  4021b4:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0xff;
  4021b8:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0xff;
  4021bc:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  4021c0:	2105      	movs	r1, #5
		break;
  4021c2:	e078      	b.n	4022b6 <spi_cmd+0x186>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
  4021c4:	0c0a      	lsrs	r2, r1, #16
  4021c6:	f88d 2005 	strb.w	r2, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  4021ca:	0a0a      	lsrs	r2, r1, #8
  4021cc:	f88d 2006 	strb.w	r2, [sp, #6]
		bc[3] = (uint8)adr;
  4021d0:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(sz >> 8);
  4021d4:	0a1a      	lsrs	r2, r3, #8
  4021d6:	f88d 2008 	strb.w	r2, [sp, #8]
		bc[5] = (uint8)(sz);
  4021da:	f88d 3009 	strb.w	r3, [sp, #9]
		len = 7;
  4021de:	2107      	movs	r1, #7
		break;
  4021e0:	e069      	b.n	4022b6 <spi_cmd+0x186>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
  4021e2:	0c0a      	lsrs	r2, r1, #16
  4021e4:	f88d 2005 	strb.w	r2, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  4021e8:	0a0a      	lsrs	r2, r1, #8
  4021ea:	f88d 2006 	strb.w	r2, [sp, #6]
		bc[3] = (uint8)adr;
  4021ee:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(sz >> 16);
  4021f2:	0c1a      	lsrs	r2, r3, #16
  4021f4:	f88d 2008 	strb.w	r2, [sp, #8]
		bc[5] = (uint8)(sz >> 8);
  4021f8:	0a1a      	lsrs	r2, r3, #8
  4021fa:	f88d 2009 	strb.w	r2, [sp, #9]
		bc[6] = (uint8)(sz);
  4021fe:	f88d 300a 	strb.w	r3, [sp, #10]
		len = 8;
  402202:	2108      	movs	r1, #8
		break;
  402204:	e057      	b.n	4022b6 <spi_cmd+0x186>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
  402206:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
  40220a:	b914      	cbnz	r4, 402212 <spi_cmd+0xe2>
		bc[5] = (uint8)(sz >> 8);
		bc[6] = (uint8)(sz);
		len = 8;
		break;
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
  40220c:	f88d 3005 	strb.w	r3, [sp, #5]
  402210:	e003      	b.n	40221a <spi_cmd+0xea>
		if(clockless)  bc[1] |= (1 << 7);
  402212:	f063 037f 	orn	r3, r3, #127	; 0x7f
  402216:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr);
  40221a:	f88d 1006 	strb.w	r1, [sp, #6]
		bc[3] = (uint8)(u32data >> 24);
  40221e:	0e13      	lsrs	r3, r2, #24
  402220:	f88d 3007 	strb.w	r3, [sp, #7]
		bc[4] = (uint8)(u32data >> 16);
  402224:	0c13      	lsrs	r3, r2, #16
  402226:	f88d 3008 	strb.w	r3, [sp, #8]
		bc[5] = (uint8)(u32data >> 8);
  40222a:	0a13      	lsrs	r3, r2, #8
  40222c:	f88d 3009 	strb.w	r3, [sp, #9]
		bc[6] = (uint8)(u32data);
  402230:	f88d 200a 	strb.w	r2, [sp, #10]
		len = 8;
  402234:	2108      	movs	r1, #8
		break;
  402236:	e03e      	b.n	4022b6 <spi_cmd+0x186>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
  402238:	0c0b      	lsrs	r3, r1, #16
  40223a:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  40223e:	0a0b      	lsrs	r3, r1, #8
  402240:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = (uint8)(adr);
  402244:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(u32data >> 24);
  402248:	0e13      	lsrs	r3, r2, #24
  40224a:	f88d 3008 	strb.w	r3, [sp, #8]
		bc[5] = (uint8)(u32data >> 16);
  40224e:	0c13      	lsrs	r3, r2, #16
  402250:	f88d 3009 	strb.w	r3, [sp, #9]
		bc[6] = (uint8)(u32data >> 8);
  402254:	0a13      	lsrs	r3, r2, #8
  402256:	f88d 300a 	strb.w	r3, [sp, #10]
		bc[7] = (uint8)(u32data);
  40225a:	f88d 200b 	strb.w	r2, [sp, #11]
		len = 9;
  40225e:	2109      	movs	r1, #9
		break;
  402260:	e029      	b.n	4022b6 <spi_cmd+0x186>
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
	return crc7_syndrome_table[(crc << 1) ^ data];
  402262:	f812 3b01 	ldrb.w	r3, [r2], #1
  402266:	ea83 0340 	eor.w	r3, r3, r0, lsl #1
  40226a:	5ce0      	ldrb	r0, [r4, r3]
}

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
	while (len--)
  40226c:	4295      	cmp	r5, r2
  40226e:	d1f8      	bne.n	402262 <spi_cmd+0x132>
		break;
	}

	if (result) {
		if (!gu8Crc_off)
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
  402270:	ab04      	add	r3, sp, #16
  402272:	441e      	add	r6, r3
  402274:	0043      	lsls	r3, r0, #1
  402276:	f806 3c0c 	strb.w	r3, [r6, #-12]
  40227a:	e001      	b.n	402280 <spi_cmd+0x150>
		else
			len-=1;
  40227c:	3901      	subs	r1, #1
  40227e:	b2c9      	uxtb	r1, r1

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
  402280:	a801      	add	r0, sp, #4
  402282:	4b10      	ldr	r3, [pc, #64]	; (4022c4 <spi_cmd+0x194>)
  402284:	4798      	blx	r3
  402286:	b168      	cbz	r0, 4022a4 <spi_cmd+0x174>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
  402288:	f44f 7284 	mov.w	r2, #264	; 0x108
  40228c:	490e      	ldr	r1, [pc, #56]	; (4022c8 <spi_cmd+0x198>)
  40228e:	480f      	ldr	r0, [pc, #60]	; (4022cc <spi_cmd+0x19c>)
  402290:	4c0f      	ldr	r4, [pc, #60]	; (4022d0 <spi_cmd+0x1a0>)
  402292:	47a0      	blx	r4
  402294:	480f      	ldr	r0, [pc, #60]	; (4022d4 <spi_cmd+0x1a4>)
  402296:	47a0      	blx	r4
  402298:	480f      	ldr	r0, [pc, #60]	; (4022d8 <spi_cmd+0x1a8>)
  40229a:	47a0      	blx	r4
			result = N_FAIL;
  40229c:	2000      	movs	r0, #0
  40229e:	e00f      	b.n	4022c0 <spi_cmd+0x190>
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
	switch (cmd) {
  4022a0:	2000      	movs	r0, #0
  4022a2:	e00d      	b.n	4022c0 <spi_cmd+0x190>
  4022a4:	2001      	movs	r0, #1
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
			result = N_FAIL;
		}
	}

	return result;
  4022a6:	e00b      	b.n	4022c0 <spi_cmd+0x190>
		break;
	}

	if (result) {
		if (!gu8Crc_off)
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
  4022a8:	1e4e      	subs	r6, r1, #1
  4022aa:	ab01      	add	r3, sp, #4
  4022ac:	199d      	adds	r5, r3, r6
  4022ae:	207f      	movs	r0, #127	; 0x7f
  4022b0:	461a      	mov	r2, r3
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
	return crc7_syndrome_table[(crc << 1) ^ data];
  4022b2:	4c0a      	ldr	r4, [pc, #40]	; (4022dc <spi_cmd+0x1ac>)
  4022b4:	e7d5      	b.n	402262 <spi_cmd+0x132>
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
  4022b6:	4b0a      	ldr	r3, [pc, #40]	; (4022e0 <spi_cmd+0x1b0>)
  4022b8:	781b      	ldrb	r3, [r3, #0]
  4022ba:	2b00      	cmp	r3, #0
  4022bc:	d1de      	bne.n	40227c <spi_cmd+0x14c>
  4022be:	e7f3      	b.n	4022a8 <spi_cmd+0x178>
			result = N_FAIL;
		}
	}

	return result;
}
  4022c0:	b004      	add	sp, #16
  4022c2:	bd70      	pop	{r4, r5, r6, pc}
  4022c4:	00402111 	.word	0x00402111
  4022c8:	004082e8 	.word	0x004082e8
  4022cc:	00407490 	.word	0x00407490
  4022d0:	00404475 	.word	0x00404475
  4022d4:	00407f28 	.word	0x00407f28
  4022d8:	004074bc 	.word	0x004074bc
  4022dc:	00407cfc 	.word	0x00407cfc
  4022e0:	20400948 	.word	0x20400948

004022e4 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
  4022e4:	b570      	push	{r4, r5, r6, lr}
  4022e6:	b082      	sub	sp, #8
  4022e8:	4604      	mov	r4, r0
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
  4022ea:	2831      	cmp	r0, #49	; 0x31
  4022ec:	bf35      	itete	cc
  4022ee:	2301      	movcc	r3, #1
  4022f0:	2300      	movcs	r3, #0
  4022f2:	25c3      	movcc	r5, #195	; 0xc3
  4022f4:	25c9      	movcs	r5, #201	; 0xc9
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
  4022f6:	9300      	str	r3, [sp, #0]
  4022f8:	2304      	movs	r3, #4
  4022fa:	460a      	mov	r2, r1
  4022fc:	4601      	mov	r1, r0
  4022fe:	4628      	mov	r0, r5
  402300:	4e16      	ldr	r6, [pc, #88]	; (40235c <spi_write_reg+0x78>)
  402302:	47b0      	blx	r6
	if (result != N_OK) {
  402304:	2801      	cmp	r0, #1
  402306:	d00c      	beq.n	402322 <spi_write_reg+0x3e>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
  402308:	f240 12eb 	movw	r2, #491	; 0x1eb
  40230c:	4914      	ldr	r1, [pc, #80]	; (402360 <spi_write_reg+0x7c>)
  40230e:	4815      	ldr	r0, [pc, #84]	; (402364 <spi_write_reg+0x80>)
  402310:	4d15      	ldr	r5, [pc, #84]	; (402368 <spi_write_reg+0x84>)
  402312:	47a8      	blx	r5
  402314:	4621      	mov	r1, r4
  402316:	4815      	ldr	r0, [pc, #84]	; (40236c <spi_write_reg+0x88>)
  402318:	47a8      	blx	r5
  40231a:	4815      	ldr	r0, [pc, #84]	; (402370 <spi_write_reg+0x8c>)
  40231c:	47a8      	blx	r5
		return N_FAIL;
  40231e:	2000      	movs	r0, #0
  402320:	e01a      	b.n	402358 <spi_write_reg+0x74>
	}

	result = spi_cmd_rsp(cmd);
  402322:	4628      	mov	r0, r5
  402324:	4b13      	ldr	r3, [pc, #76]	; (402374 <spi_write_reg+0x90>)
  402326:	4798      	blx	r3
	if (result != N_OK) {
  402328:	2801      	cmp	r0, #1
  40232a:	d014      	beq.n	402356 <spi_write_reg+0x72>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
  40232c:	f240 12f1 	movw	r2, #497	; 0x1f1
  402330:	490b      	ldr	r1, [pc, #44]	; (402360 <spi_write_reg+0x7c>)
  402332:	480c      	ldr	r0, [pc, #48]	; (402364 <spi_write_reg+0x80>)
  402334:	4d0c      	ldr	r5, [pc, #48]	; (402368 <spi_write_reg+0x84>)
  402336:	47a8      	blx	r5
  402338:	4621      	mov	r1, r4
  40233a:	480f      	ldr	r0, [pc, #60]	; (402378 <spi_write_reg+0x94>)
  40233c:	47a8      	blx	r5
  40233e:	480c      	ldr	r0, [pc, #48]	; (402370 <spi_write_reg+0x8c>)
  402340:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  402342:	2400      	movs	r4, #0
  402344:	9400      	str	r4, [sp, #0]
  402346:	4623      	mov	r3, r4
  402348:	4622      	mov	r2, r4
  40234a:	4621      	mov	r1, r4
  40234c:	20cf      	movs	r0, #207	; 0xcf
  40234e:	4d03      	ldr	r5, [pc, #12]	; (40235c <spi_write_reg+0x78>)
  402350:	47a8      	blx	r5
		return N_FAIL;
  402352:	4620      	mov	r0, r4
  402354:	e000      	b.n	402358 <spi_write_reg+0x74>
	}

	return N_OK;
  402356:	2001      	movs	r0, #1
	}

	return result;

#endif
}
  402358:	b002      	add	sp, #8
  40235a:	bd70      	pop	{r4, r5, r6, pc}
  40235c:	00402131 	.word	0x00402131
  402360:	004082d8 	.word	0x004082d8
  402364:	00407490 	.word	0x00407490
  402368:	00404475 	.word	0x00404475
  40236c:	00407f54 	.word	0x00407f54
  402370:	004074bc 	.word	0x004074bc
  402374:	00401f45 	.word	0x00401f45
  402378:	00407f80 	.word	0x00407f80

0040237c <spi_read_reg>:

	return N_OK;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
  40237c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402380:	b084      	sub	sp, #16
  402382:	4604      	mov	r4, r0
  402384:	4688      	mov	r8, r1
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_READ;
		clockless = 0;
  402386:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  40238a:	bf35      	itete	cc
  40238c:	2601      	movcc	r6, #1
  40238e:	2600      	movcs	r6, #0
  402390:	25c4      	movcc	r5, #196	; 0xc4
  402392:	25ca      	movcs	r5, #202	; 0xca
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
  402394:	9600      	str	r6, [sp, #0]
  402396:	2304      	movs	r3, #4
  402398:	2200      	movs	r2, #0
  40239a:	4601      	mov	r1, r0
  40239c:	4628      	mov	r0, r5
  40239e:	4f2d      	ldr	r7, [pc, #180]	; (402454 <spi_read_reg+0xd8>)
  4023a0:	47b8      	blx	r7
	if (result != N_OK) {
  4023a2:	2801      	cmp	r0, #1
  4023a4:	d00c      	beq.n	4023c0 <spi_read_reg+0x44>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
  4023a6:	f240 2245 	movw	r2, #581	; 0x245
  4023aa:	492b      	ldr	r1, [pc, #172]	; (402458 <spi_read_reg+0xdc>)
  4023ac:	482b      	ldr	r0, [pc, #172]	; (40245c <spi_read_reg+0xe0>)
  4023ae:	4d2c      	ldr	r5, [pc, #176]	; (402460 <spi_read_reg+0xe4>)
  4023b0:	47a8      	blx	r5
  4023b2:	4621      	mov	r1, r4
  4023b4:	482b      	ldr	r0, [pc, #172]	; (402464 <spi_read_reg+0xe8>)
  4023b6:	47a8      	blx	r5
  4023b8:	482b      	ldr	r0, [pc, #172]	; (402468 <spi_read_reg+0xec>)
  4023ba:	47a8      	blx	r5
		return N_FAIL;
  4023bc:	2000      	movs	r0, #0
  4023be:	e045      	b.n	40244c <spi_read_reg+0xd0>
	}

	result = spi_cmd_rsp(cmd);
  4023c0:	4628      	mov	r0, r5
  4023c2:	4b2a      	ldr	r3, [pc, #168]	; (40246c <spi_read_reg+0xf0>)
  4023c4:	4798      	blx	r3
	if (result != N_OK) {
  4023c6:	2801      	cmp	r0, #1
  4023c8:	d014      	beq.n	4023f4 <spi_read_reg+0x78>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
  4023ca:	f240 224b 	movw	r2, #587	; 0x24b
  4023ce:	4922      	ldr	r1, [pc, #136]	; (402458 <spi_read_reg+0xdc>)
  4023d0:	4822      	ldr	r0, [pc, #136]	; (40245c <spi_read_reg+0xe0>)
  4023d2:	4d23      	ldr	r5, [pc, #140]	; (402460 <spi_read_reg+0xe4>)
  4023d4:	47a8      	blx	r5
  4023d6:	4621      	mov	r1, r4
  4023d8:	4825      	ldr	r0, [pc, #148]	; (402470 <spi_read_reg+0xf4>)
  4023da:	47a8      	blx	r5
  4023dc:	4822      	ldr	r0, [pc, #136]	; (402468 <spi_read_reg+0xec>)
  4023de:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  4023e0:	2400      	movs	r4, #0
  4023e2:	9400      	str	r4, [sp, #0]
  4023e4:	4623      	mov	r3, r4
  4023e6:	4622      	mov	r2, r4
  4023e8:	4621      	mov	r1, r4
  4023ea:	20cf      	movs	r0, #207	; 0xcf
  4023ec:	4d19      	ldr	r5, [pc, #100]	; (402454 <spi_read_reg+0xd8>)
  4023ee:	47a8      	blx	r5
		return N_FAIL;
  4023f0:	4620      	mov	r0, r4
  4023f2:	e02b      	b.n	40244c <spi_read_reg+0xd0>
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
  4023f4:	4632      	mov	r2, r6
  4023f6:	2104      	movs	r1, #4
  4023f8:	a803      	add	r0, sp, #12
  4023fa:	4b1e      	ldr	r3, [pc, #120]	; (402474 <spi_read_reg+0xf8>)
  4023fc:	4798      	blx	r3
	if (result != N_OK) {
  4023fe:	2801      	cmp	r0, #1
  402400:	d013      	beq.n	40242a <spi_read_reg+0xae>
		M2M_ERR("[nmi spi]: Failed data read...\n");
  402402:	f240 2253 	movw	r2, #595	; 0x253
  402406:	4914      	ldr	r1, [pc, #80]	; (402458 <spi_read_reg+0xdc>)
  402408:	4814      	ldr	r0, [pc, #80]	; (40245c <spi_read_reg+0xe0>)
  40240a:	4c15      	ldr	r4, [pc, #84]	; (402460 <spi_read_reg+0xe4>)
  40240c:	47a0      	blx	r4
  40240e:	481a      	ldr	r0, [pc, #104]	; (402478 <spi_read_reg+0xfc>)
  402410:	47a0      	blx	r4
  402412:	4815      	ldr	r0, [pc, #84]	; (402468 <spi_read_reg+0xec>)
  402414:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  402416:	2400      	movs	r4, #0
  402418:	9400      	str	r4, [sp, #0]
  40241a:	4623      	mov	r3, r4
  40241c:	4622      	mov	r2, r4
  40241e:	4621      	mov	r1, r4
  402420:	20cf      	movs	r0, #207	; 0xcf
  402422:	4d0c      	ldr	r5, [pc, #48]	; (402454 <spi_read_reg+0xd8>)
  402424:	47a8      	blx	r5
		return N_FAIL;
  402426:	4620      	mov	r0, r4
  402428:	e010      	b.n	40244c <spi_read_reg+0xd0>
		return N_FAIL;
	}

#endif

	*u32data = tmp[0] |
  40242a:	f89d 100d 	ldrb.w	r1, [sp, #13]
  40242e:	f89d 200e 	ldrb.w	r2, [sp, #14]
  402432:	0413      	lsls	r3, r2, #16
  402434:	ea43 2201 	orr.w	r2, r3, r1, lsl #8
  402438:	f89d 300c 	ldrb.w	r3, [sp, #12]
  40243c:	4313      	orrs	r3, r2
  40243e:	f89d 200f 	ldrb.w	r2, [sp, #15]
  402442:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  402446:	f8c8 3000 	str.w	r3, [r8]
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);

	return N_OK;
  40244a:	2001      	movs	r0, #1
}
  40244c:	b004      	add	sp, #16
  40244e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402452:	bf00      	nop
  402454:	00402131 	.word	0x00402131
  402458:	0040830c 	.word	0x0040830c
  40245c:	00407490 	.word	0x00407490
  402460:	00404475 	.word	0x00404475
  402464:	00407fb8 	.word	0x00407fb8
  402468:	004074bc 	.word	0x004074bc
  40246c:	00401f45 	.word	0x00401f45
  402470:	00407fe4 	.word	0x00407fe4
  402474:	00402001 	.word	0x00402001
  402478:	00408018 	.word	0x00408018

0040247c <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
  40247c:	2000      	movs	r0, #0
  40247e:	4b01      	ldr	r3, [pc, #4]	; (402484 <nm_spi_deinit+0x8>)
  402480:	7018      	strb	r0, [r3, #0]
	return M2M_SUCCESS;
}
  402482:	4770      	bx	lr
  402484:	20400948 	.word	0x20400948

00402488 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
  402488:	b500      	push	{lr}
  40248a:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
  40248c:	a901      	add	r1, sp, #4
  40248e:	4b03      	ldr	r3, [pc, #12]	; (40249c <nm_spi_read_reg+0x14>)
  402490:	4798      	blx	r3

	return u32Val;
}
  402492:	9801      	ldr	r0, [sp, #4]
  402494:	b003      	add	sp, #12
  402496:	f85d fb04 	ldr.w	pc, [sp], #4
  40249a:	bf00      	nop
  40249c:	0040237d 	.word	0x0040237d

004024a0 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
  4024a0:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
  4024a2:	4b04      	ldr	r3, [pc, #16]	; (4024b4 <nm_spi_read_reg_with_ret+0x14>)
  4024a4:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  4024a6:	2801      	cmp	r0, #1

	return s8Ret;
}
  4024a8:	bf0c      	ite	eq
  4024aa:	2000      	moveq	r0, #0
  4024ac:	f06f 0005 	mvnne.w	r0, #5
  4024b0:	bd08      	pop	{r3, pc}
  4024b2:	bf00      	nop
  4024b4:	0040237d 	.word	0x0040237d

004024b8 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
  4024b8:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
  4024ba:	4b04      	ldr	r3, [pc, #16]	; (4024cc <nm_spi_write_reg+0x14>)
  4024bc:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  4024be:	2801      	cmp	r0, #1

	return s8Ret;
}
  4024c0:	bf0c      	ite	eq
  4024c2:	2000      	moveq	r0, #0
  4024c4:	f06f 0005 	mvnne.w	r0, #5
  4024c8:	bd08      	pop	{r3, pc}
  4024ca:	bf00      	nop
  4024cc:	004022e5 	.word	0x004022e5

004024d0 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
  4024d0:	b530      	push	{r4, r5, lr}
  4024d2:	b083      	sub	sp, #12
	uint32 chipid;
	uint32 reg =0;
  4024d4:	2300      	movs	r3, #0
  4024d6:	a902      	add	r1, sp, #8
  4024d8:	f841 3d08 	str.w	r3, [r1, #-8]!

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
  4024dc:	4a32      	ldr	r2, [pc, #200]	; (4025a8 <nm_spi_init+0xd8>)
  4024de:	7013      	strb	r3, [r2, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
  4024e0:	f64e 0024 	movw	r0, #59428	; 0xe824
  4024e4:	4b31      	ldr	r3, [pc, #196]	; (4025ac <nm_spi_init+0xdc>)
  4024e6:	4798      	blx	r3
  4024e8:	b9f0      	cbnz	r0, 402528 <nm_spi_init+0x58>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
  4024ea:	2201      	movs	r2, #1
  4024ec:	4b2e      	ldr	r3, [pc, #184]	; (4025a8 <nm_spi_init+0xd8>)
  4024ee:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
  4024f0:	f240 22c5 	movw	r2, #709	; 0x2c5
  4024f4:	492e      	ldr	r1, [pc, #184]	; (4025b0 <nm_spi_init+0xe0>)
  4024f6:	482f      	ldr	r0, [pc, #188]	; (4025b4 <nm_spi_init+0xe4>)
  4024f8:	4c2f      	ldr	r4, [pc, #188]	; (4025b8 <nm_spi_init+0xe8>)
  4024fa:	47a0      	blx	r4
  4024fc:	482f      	ldr	r0, [pc, #188]	; (4025bc <nm_spi_init+0xec>)
  4024fe:	47a0      	blx	r4
  402500:	482f      	ldr	r0, [pc, #188]	; (4025c0 <nm_spi_init+0xf0>)
  402502:	47a0      	blx	r4
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
  402504:	4669      	mov	r1, sp
  402506:	f64e 0024 	movw	r0, #59428	; 0xe824
  40250a:	4b28      	ldr	r3, [pc, #160]	; (4025ac <nm_spi_init+0xdc>)
  40250c:	4798      	blx	r3
  40250e:	4604      	mov	r4, r0
  402510:	b950      	cbnz	r0, 402528 <nm_spi_init+0x58>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
  402512:	f44f 7232 	mov.w	r2, #712	; 0x2c8
  402516:	4926      	ldr	r1, [pc, #152]	; (4025b0 <nm_spi_init+0xe0>)
  402518:	4826      	ldr	r0, [pc, #152]	; (4025b4 <nm_spi_init+0xe4>)
  40251a:	4d27      	ldr	r5, [pc, #156]	; (4025b8 <nm_spi_init+0xe8>)
  40251c:	47a8      	blx	r5
  40251e:	4829      	ldr	r0, [pc, #164]	; (4025c4 <nm_spi_init+0xf4>)
  402520:	47a8      	blx	r5
  402522:	4827      	ldr	r0, [pc, #156]	; (4025c0 <nm_spi_init+0xf0>)
  402524:	47a8      	blx	r5
			return 0;
  402526:	e03c      	b.n	4025a2 <nm_spi_init+0xd2>
		}
	}
	if(gu8Crc_off == 0)
  402528:	4b1f      	ldr	r3, [pc, #124]	; (4025a8 <nm_spi_init+0xd8>)
  40252a:	781b      	ldrb	r3, [r3, #0]
  40252c:	b9cb      	cbnz	r3, 402562 <nm_spi_init+0x92>
	{
		reg &= ~0xc;	/* disable crc checking */
		reg &= ~0x70;
		reg |= (0x5 << 4);
  40252e:	9900      	ldr	r1, [sp, #0]
  402530:	f021 017c 	bic.w	r1, r1, #124	; 0x7c
  402534:	f041 0150 	orr.w	r1, r1, #80	; 0x50
  402538:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
  40253a:	f64e 0024 	movw	r0, #59428	; 0xe824
  40253e:	4b22      	ldr	r3, [pc, #136]	; (4025c8 <nm_spi_init+0xf8>)
  402540:	4798      	blx	r3
  402542:	4604      	mov	r4, r0
  402544:	b950      	cbnz	r0, 40255c <nm_spi_init+0x8c>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
  402546:	f240 22d2 	movw	r2, #722	; 0x2d2
  40254a:	4919      	ldr	r1, [pc, #100]	; (4025b0 <nm_spi_init+0xe0>)
  40254c:	4819      	ldr	r0, [pc, #100]	; (4025b4 <nm_spi_init+0xe4>)
  40254e:	4d1a      	ldr	r5, [pc, #104]	; (4025b8 <nm_spi_init+0xe8>)
  402550:	47a8      	blx	r5
  402552:	481e      	ldr	r0, [pc, #120]	; (4025cc <nm_spi_init+0xfc>)
  402554:	47a8      	blx	r5
  402556:	481a      	ldr	r0, [pc, #104]	; (4025c0 <nm_spi_init+0xf0>)
  402558:	47a8      	blx	r5
			return 0;
  40255a:	e022      	b.n	4025a2 <nm_spi_init+0xd2>
		}
		gu8Crc_off = 1;
  40255c:	2201      	movs	r2, #1
  40255e:	4b12      	ldr	r3, [pc, #72]	; (4025a8 <nm_spi_init+0xd8>)
  402560:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
  402562:	a901      	add	r1, sp, #4
  402564:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  402568:	4b10      	ldr	r3, [pc, #64]	; (4025ac <nm_spi_init+0xdc>)
  40256a:	4798      	blx	r3
  40256c:	b960      	cbnz	r0, 402588 <nm_spi_init+0xb8>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
  40256e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
  402572:	490f      	ldr	r1, [pc, #60]	; (4025b0 <nm_spi_init+0xe0>)
  402574:	480f      	ldr	r0, [pc, #60]	; (4025b4 <nm_spi_init+0xe4>)
  402576:	4c10      	ldr	r4, [pc, #64]	; (4025b8 <nm_spi_init+0xe8>)
  402578:	47a0      	blx	r4
  40257a:	4815      	ldr	r0, [pc, #84]	; (4025d0 <nm_spi_init+0x100>)
  40257c:	47a0      	blx	r4
  40257e:	4810      	ldr	r0, [pc, #64]	; (4025c0 <nm_spi_init+0xf0>)
  402580:	47a0      	blx	r4
		return M2M_ERR_BUS_FAIL;
  402582:	f06f 0405 	mvn.w	r4, #5
  402586:	e00c      	b.n	4025a2 <nm_spi_init+0xd2>
static void spi_init_pkt_sz(void)
{
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
  402588:	f64e 0024 	movw	r0, #59428	; 0xe824
  40258c:	4b11      	ldr	r3, [pc, #68]	; (4025d4 <nm_spi_init+0x104>)
  40258e:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
  402590:	f020 0170 	bic.w	r1, r0, #112	; 0x70
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
  402594:	f041 0150 	orr.w	r1, r1, #80	; 0x50
  402598:	f64e 0024 	movw	r0, #59428	; 0xe824
  40259c:	4b0e      	ldr	r3, [pc, #56]	; (4025d8 <nm_spi_init+0x108>)
  40259e:	4798      	blx	r3

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();


	return M2M_SUCCESS;
  4025a0:	2400      	movs	r4, #0
}
  4025a2:	4620      	mov	r0, r4
  4025a4:	b003      	add	sp, #12
  4025a6:	bd30      	pop	{r4, r5, pc}
  4025a8:	20400948 	.word	0x20400948
  4025ac:	0040237d 	.word	0x0040237d
  4025b0:	00407dfc 	.word	0x00407dfc
  4025b4:	00407490 	.word	0x00407490
  4025b8:	00404475 	.word	0x00404475
  4025bc:	00408038 	.word	0x00408038
  4025c0:	004074bc 	.word	0x004074bc
  4025c4:	00408088 	.word	0x00408088
  4025c8:	004022e5 	.word	0x004022e5
  4025cc:	004080b8 	.word	0x004080b8
  4025d0:	004080ec 	.word	0x004080ec
  4025d4:	00402489 	.word	0x00402489
  4025d8:	004024b9 	.word	0x004024b9

004025dc <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  4025dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4025de:	b083      	sub	sp, #12
  4025e0:	4604      	mov	r4, r0
  4025e2:	460f      	mov	r7, r1
  4025e4:	4615      	mov	r5, r2

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
  4025e6:	2200      	movs	r2, #0
  4025e8:	9200      	str	r2, [sp, #0]
  4025ea:	462b      	mov	r3, r5
  4025ec:	4601      	mov	r1, r0
  4025ee:	20c8      	movs	r0, #200	; 0xc8
  4025f0:	4e23      	ldr	r6, [pc, #140]	; (402680 <nm_spi_read_block+0xa4>)
  4025f2:	47b0      	blx	r6
	if (result != N_OK) {
  4025f4:	2801      	cmp	r0, #1
  4025f6:	d00b      	beq.n	402610 <nm_spi_read_block+0x34>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
  4025f8:	f44f 721d 	mov.w	r2, #628	; 0x274
  4025fc:	4921      	ldr	r1, [pc, #132]	; (402684 <nm_spi_read_block+0xa8>)
  4025fe:	4822      	ldr	r0, [pc, #136]	; (402688 <nm_spi_read_block+0xac>)
  402600:	4d22      	ldr	r5, [pc, #136]	; (40268c <nm_spi_read_block+0xb0>)
  402602:	47a8      	blx	r5
  402604:	4621      	mov	r1, r4
  402606:	4822      	ldr	r0, [pc, #136]	; (402690 <nm_spi_read_block+0xb4>)
  402608:	47a8      	blx	r5
  40260a:	4822      	ldr	r0, [pc, #136]	; (402694 <nm_spi_read_block+0xb8>)
  40260c:	47a8      	blx	r5
  40260e:	e032      	b.n	402676 <nm_spi_read_block+0x9a>
		return N_FAIL;
	}

	result = spi_cmd_rsp(cmd);
  402610:	20c8      	movs	r0, #200	; 0xc8
  402612:	4b21      	ldr	r3, [pc, #132]	; (402698 <nm_spi_read_block+0xbc>)
  402614:	4798      	blx	r3
	if (result != N_OK) {
  402616:	2801      	cmp	r0, #1
  402618:	d012      	beq.n	402640 <nm_spi_read_block+0x64>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
  40261a:	f240 227a 	movw	r2, #634	; 0x27a
  40261e:	4919      	ldr	r1, [pc, #100]	; (402684 <nm_spi_read_block+0xa8>)
  402620:	4819      	ldr	r0, [pc, #100]	; (402688 <nm_spi_read_block+0xac>)
  402622:	4d1a      	ldr	r5, [pc, #104]	; (40268c <nm_spi_read_block+0xb0>)
  402624:	47a8      	blx	r5
  402626:	4621      	mov	r1, r4
  402628:	481c      	ldr	r0, [pc, #112]	; (40269c <nm_spi_read_block+0xc0>)
  40262a:	47a8      	blx	r5
  40262c:	4819      	ldr	r0, [pc, #100]	; (402694 <nm_spi_read_block+0xb8>)
  40262e:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  402630:	2100      	movs	r1, #0
  402632:	9100      	str	r1, [sp, #0]
  402634:	460b      	mov	r3, r1
  402636:	460a      	mov	r2, r1
  402638:	20cf      	movs	r0, #207	; 0xcf
  40263a:	4c11      	ldr	r4, [pc, #68]	; (402680 <nm_spi_read_block+0xa4>)
  40263c:	47a0      	blx	r4
  40263e:	e01a      	b.n	402676 <nm_spi_read_block+0x9a>
	}

	/**
		Data
	**/
	result = spi_data_read(buf, size,0);
  402640:	2200      	movs	r2, #0
  402642:	4629      	mov	r1, r5
  402644:	4638      	mov	r0, r7
  402646:	4b16      	ldr	r3, [pc, #88]	; (4026a0 <nm_spi_read_block+0xc4>)
  402648:	4798      	blx	r3
	if (result != N_OK) {
  40264a:	2801      	cmp	r0, #1
  40264c:	d011      	beq.n	402672 <nm_spi_read_block+0x96>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
  40264e:	f44f 7221 	mov.w	r2, #644	; 0x284
  402652:	490c      	ldr	r1, [pc, #48]	; (402684 <nm_spi_read_block+0xa8>)
  402654:	480c      	ldr	r0, [pc, #48]	; (402688 <nm_spi_read_block+0xac>)
  402656:	4c0d      	ldr	r4, [pc, #52]	; (40268c <nm_spi_read_block+0xb0>)
  402658:	47a0      	blx	r4
  40265a:	4812      	ldr	r0, [pc, #72]	; (4026a4 <nm_spi_read_block+0xc8>)
  40265c:	47a0      	blx	r4
  40265e:	480d      	ldr	r0, [pc, #52]	; (402694 <nm_spi_read_block+0xb8>)
  402660:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  402662:	2100      	movs	r1, #0
  402664:	9100      	str	r1, [sp, #0]
  402666:	460b      	mov	r3, r1
  402668:	460a      	mov	r2, r1
  40266a:	20cf      	movs	r0, #207	; 0xcf
  40266c:	4c04      	ldr	r4, [pc, #16]	; (402680 <nm_spi_read_block+0xa4>)
  40266e:	47a0      	blx	r4
  402670:	e001      	b.n	402676 <nm_spi_read_block+0x9a>
{
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  402672:	2000      	movs	r0, #0
  402674:	e001      	b.n	40267a <nm_spi_read_block+0x9e>
	else s8Ret = M2M_ERR_BUS_FAIL;
  402676:	f06f 0005 	mvn.w	r0, #5

	return s8Ret;
}
  40267a:	b003      	add	sp, #12
  40267c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40267e:	bf00      	nop
  402680:	00402131 	.word	0x00402131
  402684:	00407e18 	.word	0x00407e18
  402688:	00407490 	.word	0x00407490
  40268c:	00404475 	.word	0x00404475
  402690:	00408114 	.word	0x00408114
  402694:	004074bc 	.word	0x004074bc
  402698:	00401f45 	.word	0x00401f45
  40269c:	00408144 	.word	0x00408144
  4026a0:	00402001 	.word	0x00402001
  4026a4:	0040817c 	.word	0x0040817c

004026a8 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  4026a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4026ac:	b085      	sub	sp, #20
  4026ae:	4604      	mov	r4, r0
  4026b0:	4688      	mov	r8, r1
  4026b2:	4615      	mov	r5, r2

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
  4026b4:	2200      	movs	r2, #0
  4026b6:	9200      	str	r2, [sp, #0]
  4026b8:	462b      	mov	r3, r5
  4026ba:	4601      	mov	r1, r0
  4026bc:	20c7      	movs	r0, #199	; 0xc7
  4026be:	4e4c      	ldr	r6, [pc, #304]	; (4027f0 <nm_spi_write_block+0x148>)
  4026c0:	47b0      	blx	r6
	if (result != N_OK) {
  4026c2:	2801      	cmp	r0, #1
  4026c4:	d00b      	beq.n	4026de <nm_spi_write_block+0x36>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
  4026c6:	f240 220f 	movw	r2, #527	; 0x20f
  4026ca:	494a      	ldr	r1, [pc, #296]	; (4027f4 <nm_spi_write_block+0x14c>)
  4026cc:	484a      	ldr	r0, [pc, #296]	; (4027f8 <nm_spi_write_block+0x150>)
  4026ce:	4d4b      	ldr	r5, [pc, #300]	; (4027fc <nm_spi_write_block+0x154>)
  4026d0:	47a8      	blx	r5
  4026d2:	4621      	mov	r1, r4
  4026d4:	484a      	ldr	r0, [pc, #296]	; (402800 <nm_spi_write_block+0x158>)
  4026d6:	47a8      	blx	r5
  4026d8:	484a      	ldr	r0, [pc, #296]	; (402804 <nm_spi_write_block+0x15c>)
  4026da:	47a8      	blx	r5
  4026dc:	e082      	b.n	4027e4 <nm_spi_write_block+0x13c>
		return N_FAIL;
	}

	result = spi_cmd_rsp(cmd);
  4026de:	20c7      	movs	r0, #199	; 0xc7
  4026e0:	4b49      	ldr	r3, [pc, #292]	; (402808 <nm_spi_write_block+0x160>)
  4026e2:	4798      	blx	r3
	if (result != N_OK) {
  4026e4:	2801      	cmp	r0, #1
  4026e6:	d012      	beq.n	40270e <nm_spi_write_block+0x66>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
  4026e8:	f240 2215 	movw	r2, #533	; 0x215
  4026ec:	4941      	ldr	r1, [pc, #260]	; (4027f4 <nm_spi_write_block+0x14c>)
  4026ee:	4842      	ldr	r0, [pc, #264]	; (4027f8 <nm_spi_write_block+0x150>)
  4026f0:	4d42      	ldr	r5, [pc, #264]	; (4027fc <nm_spi_write_block+0x154>)
  4026f2:	47a8      	blx	r5
  4026f4:	4621      	mov	r1, r4
  4026f6:	4845      	ldr	r0, [pc, #276]	; (40280c <nm_spi_write_block+0x164>)
  4026f8:	47a8      	blx	r5
  4026fa:	4842      	ldr	r0, [pc, #264]	; (402804 <nm_spi_write_block+0x15c>)
  4026fc:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  4026fe:	2100      	movs	r1, #0
  402700:	9100      	str	r1, [sp, #0]
  402702:	460b      	mov	r3, r1
  402704:	460a      	mov	r2, r1
  402706:	20cf      	movs	r0, #207	; 0xcf
  402708:	4c39      	ldr	r4, [pc, #228]	; (4027f0 <nm_spi_write_block+0x148>)
  40270a:	47a0      	blx	r4
  40270c:	e06a      	b.n	4027e4 <nm_spi_write_block+0x13c>
static sint8 spi_data_write(uint8 *b, uint16 sz)
{
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
	uint8 cmd, order, crc[2] = {0};
  40270e:	2400      	movs	r4, #0
  402710:	f8ad 400c 	strh.w	r4, [sp, #12]
				order = 0x3;
			else
				order = 0x2;
		}
		cmd |= order;
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
  402714:	4f3e      	ldr	r7, [pc, #248]	; (402810 <nm_spi_write_block+0x168>)
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
  402716:	f8df 9110 	ldr.w	r9, [pc, #272]	; 402828 <nm_spi_write_block+0x180>
  40271a:	462e      	mov	r6, r5
  40271c:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  402720:	bf28      	it	cs
  402722:	f44f 5600 	movcs.w	r6, #8192	; 0x2000

		/**
			Write command
		**/
		cmd = 0xf0;
		if (ix == 0)  {
  402726:	b92c      	cbnz	r4, 402734 <nm_spi_write_block+0x8c>
			if (sz <= DATA_PKT_SZ)
				order = 0x3;
			else
				order = 0x1;
  402728:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  40272c:	bf94      	ite	ls
  40272e:	2303      	movls	r3, #3
  402730:	2301      	movhi	r3, #1
  402732:	e004      	b.n	40273e <nm_spi_write_block+0x96>
		} else {
			if (sz <= DATA_PKT_SZ)
				order = 0x3;
			else
				order = 0x2;
  402734:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  402738:	bf94      	ite	ls
  40273a:	2303      	movls	r3, #3
  40273c:	2302      	movhi	r3, #2
		}
		cmd |= order;
  40273e:	f063 030f 	orn	r3, r3, #15
  402742:	f88d 300b 	strb.w	r3, [sp, #11]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
  402746:	2101      	movs	r1, #1
  402748:	f10d 000b 	add.w	r0, sp, #11
  40274c:	47b8      	blx	r7
  40274e:	b150      	cbz	r0, 402766 <nm_spi_write_block+0xbe>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
  402750:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
  402754:	492f      	ldr	r1, [pc, #188]	; (402814 <nm_spi_write_block+0x16c>)
  402756:	4828      	ldr	r0, [pc, #160]	; (4027f8 <nm_spi_write_block+0x150>)
  402758:	4c28      	ldr	r4, [pc, #160]	; (4027fc <nm_spi_write_block+0x154>)
  40275a:	47a0      	blx	r4
  40275c:	482e      	ldr	r0, [pc, #184]	; (402818 <nm_spi_write_block+0x170>)
  40275e:	47a0      	blx	r4
  402760:	4828      	ldr	r0, [pc, #160]	; (402804 <nm_spi_write_block+0x15c>)
  402762:	47a0      	blx	r4
  402764:	e028      	b.n	4027b8 <nm_spi_write_block+0x110>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
  402766:	4631      	mov	r1, r6
  402768:	eb08 0004 	add.w	r0, r8, r4
  40276c:	47b8      	blx	r7
  40276e:	b150      	cbz	r0, 402786 <nm_spi_write_block+0xde>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
  402770:	f240 12b1 	movw	r2, #433	; 0x1b1
  402774:	4927      	ldr	r1, [pc, #156]	; (402814 <nm_spi_write_block+0x16c>)
  402776:	4820      	ldr	r0, [pc, #128]	; (4027f8 <nm_spi_write_block+0x150>)
  402778:	4c20      	ldr	r4, [pc, #128]	; (4027fc <nm_spi_write_block+0x154>)
  40277a:	47a0      	blx	r4
  40277c:	4827      	ldr	r0, [pc, #156]	; (40281c <nm_spi_write_block+0x174>)
  40277e:	47a0      	blx	r4
  402780:	4820      	ldr	r0, [pc, #128]	; (402804 <nm_spi_write_block+0x15c>)
  402782:	47a0      	blx	r4
  402784:	e018      	b.n	4027b8 <nm_spi_write_block+0x110>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
  402786:	f899 3000 	ldrb.w	r3, [r9]
  40278a:	b973      	cbnz	r3, 4027aa <nm_spi_write_block+0x102>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
  40278c:	2102      	movs	r1, #2
  40278e:	a803      	add	r0, sp, #12
  402790:	47b8      	blx	r7
  402792:	b150      	cbz	r0, 4027aa <nm_spi_write_block+0x102>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
  402794:	f240 12bb 	movw	r2, #443	; 0x1bb
  402798:	491e      	ldr	r1, [pc, #120]	; (402814 <nm_spi_write_block+0x16c>)
  40279a:	4817      	ldr	r0, [pc, #92]	; (4027f8 <nm_spi_write_block+0x150>)
  40279c:	4c17      	ldr	r4, [pc, #92]	; (4027fc <nm_spi_write_block+0x154>)
  40279e:	47a0      	blx	r4
  4027a0:	481f      	ldr	r0, [pc, #124]	; (402820 <nm_spi_write_block+0x178>)
  4027a2:	47a0      	blx	r4
  4027a4:	4817      	ldr	r0, [pc, #92]	; (402804 <nm_spi_write_block+0x15c>)
  4027a6:	47a0      	blx	r4
  4027a8:	e006      	b.n	4027b8 <nm_spi_write_block+0x110>
				result = N_FAIL;
				break;
			}
		}

		ix += nbytes;
  4027aa:	4434      	add	r4, r6
  4027ac:	b224      	sxth	r4, r4
		sz -= nbytes;
  4027ae:	1bad      	subs	r5, r5, r6
  4027b0:	b2ad      	uxth	r5, r5
	} while (sz);
  4027b2:	2d00      	cmp	r5, #0
  4027b4:	d1b1      	bne.n	40271a <nm_spi_write_block+0x72>
  4027b6:	e013      	b.n	4027e0 <nm_spi_write_block+0x138>
	/**
		Data
	**/
	result = spi_data_write(buf, size);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data write...\n");
  4027b8:	f240 2226 	movw	r2, #550	; 0x226
  4027bc:	490d      	ldr	r1, [pc, #52]	; (4027f4 <nm_spi_write_block+0x14c>)
  4027be:	480e      	ldr	r0, [pc, #56]	; (4027f8 <nm_spi_write_block+0x150>)
  4027c0:	4c0e      	ldr	r4, [pc, #56]	; (4027fc <nm_spi_write_block+0x154>)
  4027c2:	47a0      	blx	r4
  4027c4:	4817      	ldr	r0, [pc, #92]	; (402824 <nm_spi_write_block+0x17c>)
  4027c6:	47a0      	blx	r4
  4027c8:	480e      	ldr	r0, [pc, #56]	; (402804 <nm_spi_write_block+0x15c>)
  4027ca:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  4027cc:	2400      	movs	r4, #0
  4027ce:	9400      	str	r4, [sp, #0]
  4027d0:	4623      	mov	r3, r4
  4027d2:	4622      	mov	r2, r4
  4027d4:	4621      	mov	r1, r4
  4027d6:	20cf      	movs	r0, #207	; 0xcf
  4027d8:	4d05      	ldr	r5, [pc, #20]	; (4027f0 <nm_spi_write_block+0x148>)
  4027da:	47a8      	blx	r5
{
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  4027dc:	4620      	mov	r0, r4
  4027de:	e003      	b.n	4027e8 <nm_spi_write_block+0x140>
  4027e0:	2000      	movs	r0, #0
  4027e2:	e001      	b.n	4027e8 <nm_spi_write_block+0x140>
	else s8Ret = M2M_ERR_BUS_FAIL;
  4027e4:	f06f 0005 	mvn.w	r0, #5

	return s8Ret;
}
  4027e8:	b005      	add	sp, #20
  4027ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4027ee:	bf00      	nop
  4027f0:	00402131 	.word	0x00402131
  4027f4:	004082f0 	.word	0x004082f0
  4027f8:	00407490 	.word	0x00407490
  4027fc:	00404475 	.word	0x00404475
  402800:	004081a4 	.word	0x004081a4
  402804:	004074bc 	.word	0x004074bc
  402808:	00401f45 	.word	0x00401f45
  40280c:	004081d4 	.word	0x004081d4
  402810:	00402111 	.word	0x00402111
  402814:	00407e08 	.word	0x00407e08
  402818:	0040820c 	.word	0x0040820c
  40281c:	00408244 	.word	0x00408244
  402820:	00408278 	.word	0x00408278
  402824:	004082b0 	.word	0x004082b0
  402828:	20400948 	.word	0x20400948

0040282c <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
  40282c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402830:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
  402834:	2c00      	cmp	r4, #0
  402836:	d047      	beq.n	4028c8 <Socket_ReadSocketData+0x9c>
  402838:	4681      	mov	r9, r0
  40283a:	460e      	mov	r6, r1
  40283c:	4692      	mov	sl, r2
  40283e:	4698      	mov	r8, r3
  402840:	0103      	lsls	r3, r0, #4
  402842:	4922      	ldr	r1, [pc, #136]	; (4028cc <Socket_ReadSocketData+0xa0>)
  402844:	58cb      	ldr	r3, [r1, r3]
  402846:	2b00      	cmp	r3, #0
  402848:	d03e      	beq.n	4028c8 <Socket_ReadSocketData+0x9c>
  40284a:	eb01 1300 	add.w	r3, r1, r0, lsl #4
  40284e:	889b      	ldrh	r3, [r3, #4]
  402850:	b29b      	uxth	r3, r3
  402852:	2b00      	cmp	r3, #0
  402854:	d038      	beq.n	4028c8 <Socket_ReadSocketData+0x9c>
  402856:	eb01 1300 	add.w	r3, r1, r0, lsl #4
  40285a:	7a9b      	ldrb	r3, [r3, #10]
  40285c:	b2db      	uxtb	r3, r3
  40285e:	2b01      	cmp	r3, #1
  402860:	d132      	bne.n	4028c8 <Socket_ReadSocketData+0x9c>
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
  402862:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
  402864:	eb01 1700 	add.w	r7, r1, r0, lsl #4
			if(s16Diff > 0)
			{
				u8SetRxDone = 0;
				u16Read		= gastrSockets[sock].u16UserBufferSize;
			}
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
  402868:	f8df b078 	ldr.w	fp, [pc, #120]	; 4028e4 <Socket_ReadSocketData+0xb8>
		pstrRecv->u16RemainingSize = u16ReadCount;
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
  40286c:	88bb      	ldrh	r3, [r7, #4]
			if(s16Diff > 0)
  40286e:	1ae3      	subs	r3, r4, r3
  402870:	b21b      	sxth	r3, r3
  402872:	2b00      	cmp	r3, #0
  402874:	dd03      	ble.n	40287e <Socket_ReadSocketData+0x52>
			{
				u8SetRxDone = 0;
				u16Read		= gastrSockets[sock].u16UserBufferSize;
  402876:	88bd      	ldrh	r5, [r7, #4]
  402878:	b2ad      	uxth	r5, r5
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
			if(s16Diff > 0)
			{
				u8SetRxDone = 0;
  40287a:	2300      	movs	r3, #0
  40287c:	e001      	b.n	402882 <Socket_ReadSocketData+0x56>
  40287e:	4625      	mov	r5, r4
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
		do
		{
			u8SetRxDone = 1;
  402880:	2301      	movs	r3, #1
			if(s16Diff > 0)
			{
				u8SetRxDone = 0;
				u16Read		= gastrSockets[sock].u16UserBufferSize;
			}
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
  402882:	6839      	ldr	r1, [r7, #0]
  402884:	462a      	mov	r2, r5
  402886:	4640      	mov	r0, r8
  402888:	47d8      	blx	fp
  40288a:	b9a8      	cbnz	r0, 4028b8 <Socket_ReadSocketData+0x8c>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
  40288c:	683b      	ldr	r3, [r7, #0]
  40288e:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
  402890:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
  402892:	88f3      	ldrh	r3, [r6, #6]
  402894:	1b5b      	subs	r3, r3, r5
  402896:	80f3      	strh	r3, [r6, #6]

				if (gpfAppSocketCb)
  402898:	4b0d      	ldr	r3, [pc, #52]	; (4028d0 <Socket_ReadSocketData+0xa4>)
  40289a:	681b      	ldr	r3, [r3, #0]
  40289c:	b12b      	cbz	r3, 4028aa <Socket_ReadSocketData+0x7e>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
  40289e:	4b0c      	ldr	r3, [pc, #48]	; (4028d0 <Socket_ReadSocketData+0xa4>)
  4028a0:	681b      	ldr	r3, [r3, #0]
  4028a2:	4632      	mov	r2, r6
  4028a4:	4651      	mov	r1, sl
  4028a6:	4648      	mov	r0, r9
  4028a8:	4798      	blx	r3

				u16ReadCount -= u16Read;
  4028aa:	1b64      	subs	r4, r4, r5
  4028ac:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
  4028ae:	44a8      	add	r8, r5
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
				break;
			}
		}while(u16ReadCount != 0);
  4028b0:	2c00      	cmp	r4, #0
  4028b2:	d1db      	bne.n	40286c <Socket_ReadSocketData+0x40>
  4028b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				u16ReadCount -= u16Read;
				u32Address += u16Read;
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
  4028b8:	4806      	ldr	r0, [pc, #24]	; (4028d4 <Socket_ReadSocketData+0xa8>)
  4028ba:	4d07      	ldr	r5, [pc, #28]	; (4028d8 <Socket_ReadSocketData+0xac>)
  4028bc:	47a8      	blx	r5
  4028be:	4621      	mov	r1, r4
  4028c0:	4806      	ldr	r0, [pc, #24]	; (4028dc <Socket_ReadSocketData+0xb0>)
  4028c2:	47a8      	blx	r5
  4028c4:	4806      	ldr	r0, [pc, #24]	; (4028e0 <Socket_ReadSocketData+0xb4>)
  4028c6:	47a8      	blx	r5
  4028c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4028cc:	20400f84 	.word	0x20400f84
  4028d0:	20401034 	.word	0x20401034
  4028d4:	00407780 	.word	0x00407780
  4028d8:	00404475 	.word	0x00404475
  4028dc:	0040831c 	.word	0x0040831c
  4028e0:	004074bc 	.word	0x004074bc
  4028e4:	00400bc5 	.word	0x00400bc5

004028e8 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{
  4028e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4028ea:	b099      	sub	sp, #100	; 0x64
  4028ec:	4614      	mov	r4, r2
	if(u8OpCode == SOCKET_CMD_BIND)
  4028ee:	2841      	cmp	r0, #65	; 0x41
  4028f0:	d119      	bne.n	402926 <m2m_ip_cb+0x3e>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
  4028f2:	2300      	movs	r3, #0
  4028f4:	2204      	movs	r2, #4
  4028f6:	a907      	add	r1, sp, #28
  4028f8:	4620      	mov	r0, r4
  4028fa:	4ca4      	ldr	r4, [pc, #656]	; (402b8c <m2m_ip_cb+0x2a4>)
  4028fc:	47a0      	blx	r4
  4028fe:	2800      	cmp	r0, #0
  402900:	f040 8141 	bne.w	402b86 <m2m_ip_cb+0x29e>
		{
			strBind.status = strBindReply.s8Status;
  402904:	f89d 301d 	ldrb.w	r3, [sp, #29]
  402908:	f88d 300c 	strb.w	r3, [sp, #12]
			if(gpfAppSocketCb)
  40290c:	4ba0      	ldr	r3, [pc, #640]	; (402b90 <m2m_ip_cb+0x2a8>)
  40290e:	681b      	ldr	r3, [r3, #0]
  402910:	2b00      	cmp	r3, #0
  402912:	f000 8138 	beq.w	402b86 <m2m_ip_cb+0x29e>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
  402916:	4b9e      	ldr	r3, [pc, #632]	; (402b90 <m2m_ip_cb+0x2a8>)
  402918:	681b      	ldr	r3, [r3, #0]
  40291a:	aa03      	add	r2, sp, #12
  40291c:	2101      	movs	r1, #1
  40291e:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  402922:	4798      	blx	r3
  402924:	e12f      	b.n	402b86 <m2m_ip_cb+0x29e>
  402926:	460d      	mov	r5, r1
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
  402928:	2842      	cmp	r0, #66	; 0x42
  40292a:	d119      	bne.n	402960 <m2m_ip_cb+0x78>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
  40292c:	2300      	movs	r3, #0
  40292e:	2204      	movs	r2, #4
  402930:	a907      	add	r1, sp, #28
  402932:	4620      	mov	r0, r4
  402934:	4c95      	ldr	r4, [pc, #596]	; (402b8c <m2m_ip_cb+0x2a4>)
  402936:	47a0      	blx	r4
  402938:	2800      	cmp	r0, #0
  40293a:	f040 8124 	bne.w	402b86 <m2m_ip_cb+0x29e>
		{
			strListen.status = strListenReply.s8Status;
  40293e:	f89d 301d 	ldrb.w	r3, [sp, #29]
  402942:	f88d 300c 	strb.w	r3, [sp, #12]
			if(gpfAppSocketCb)
  402946:	4b92      	ldr	r3, [pc, #584]	; (402b90 <m2m_ip_cb+0x2a8>)
  402948:	681b      	ldr	r3, [r3, #0]
  40294a:	2b00      	cmp	r3, #0
  40294c:	f000 811b 	beq.w	402b86 <m2m_ip_cb+0x29e>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
  402950:	4b8f      	ldr	r3, [pc, #572]	; (402b90 <m2m_ip_cb+0x2a8>)
  402952:	681b      	ldr	r3, [r3, #0]
  402954:	aa03      	add	r2, sp, #12
  402956:	2102      	movs	r1, #2
  402958:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  40295c:	4798      	blx	r3
  40295e:	e112      	b.n	402b86 <m2m_ip_cb+0x29e>
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
  402960:	2843      	cmp	r0, #67	; 0x43
  402962:	d13f      	bne.n	4029e4 <m2m_ip_cb+0xfc>
	{
		tstrAcceptReply			strAcceptReply;
		tstrSocketAcceptMsg		strAccept;
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
  402964:	2300      	movs	r3, #0
  402966:	220c      	movs	r2, #12
  402968:	eb0d 0102 	add.w	r1, sp, r2
  40296c:	4620      	mov	r0, r4
  40296e:	4c87      	ldr	r4, [pc, #540]	; (402b8c <m2m_ip_cb+0x2a4>)
  402970:	47a0      	blx	r4
  402972:	2800      	cmp	r0, #0
  402974:	f040 8107 	bne.w	402b86 <m2m_ip_cb+0x29e>
		{
			if(strAcceptReply.sConnectedSock >= 0)
  402978:	f99d 3015 	ldrsb.w	r3, [sp, #21]
  40297c:	2b00      	cmp	r3, #0
  40297e:	db19      	blt.n	4029b4 <m2m_ip_cb+0xcc>
			{
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 	= 0;
  402980:	4a84      	ldr	r2, [pc, #528]	; (402b94 <m2m_ip_cb+0x2ac>)
  402982:	eb02 1203 	add.w	r2, r2, r3, lsl #4
  402986:	2100      	movs	r1, #0
  402988:	72d1      	strb	r1, [r2, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 	= 1;
  40298a:	2101      	movs	r1, #1
  40298c:	7291      	strb	r1, [r2, #10]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
  40298e:	4982      	ldr	r1, [pc, #520]	; (402b98 <m2m_ip_cb+0x2b0>)
  402990:	880a      	ldrh	r2, [r1, #0]
  402992:	3201      	adds	r2, #1
  402994:	b292      	uxth	r2, r2
  402996:	800a      	strh	r2, [r1, #0]
				if(gu16SessionID == 0)
  402998:	880a      	ldrh	r2, [r1, #0]
  40299a:	b292      	uxth	r2, r2
  40299c:	b91a      	cbnz	r2, 4029a6 <m2m_ip_cb+0xbe>
					++gu16SessionID;
  40299e:	880a      	ldrh	r2, [r1, #0]
  4029a0:	3201      	adds	r2, #1
  4029a2:	b292      	uxth	r2, r2
  4029a4:	800a      	strh	r2, [r1, #0]

				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
  4029a6:	4a7c      	ldr	r2, [pc, #496]	; (402b98 <m2m_ip_cb+0x2b0>)
  4029a8:	8811      	ldrh	r1, [r2, #0]
  4029aa:	b289      	uxth	r1, r1
  4029ac:	4a79      	ldr	r2, [pc, #484]	; (402b94 <m2m_ip_cb+0x2ac>)
  4029ae:	eb02 1203 	add.w	r2, r2, r3, lsl #4
  4029b2:	80d1      	strh	r1, [r2, #6]
				M2M_DBG("Socket %d session ID = %d\r\n",strAcceptReply.sConnectedSock , gu16SessionID );		
			}
			strAccept.sock = strAcceptReply.sConnectedSock;
  4029b4:	f88d 301c 	strb.w	r3, [sp, #28]
			strAccept.strAddr.sin_family		= AF_INET;
  4029b8:	2302      	movs	r3, #2
  4029ba:	f8ad 3020 	strh.w	r3, [sp, #32]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
  4029be:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  4029c2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
  4029c6:	9b04      	ldr	r3, [sp, #16]
  4029c8:	9309      	str	r3, [sp, #36]	; 0x24
			if(gpfAppSocketCb)
  4029ca:	4b71      	ldr	r3, [pc, #452]	; (402b90 <m2m_ip_cb+0x2a8>)
  4029cc:	681b      	ldr	r3, [r3, #0]
  4029ce:	2b00      	cmp	r3, #0
  4029d0:	f000 80d9 	beq.w	402b86 <m2m_ip_cb+0x29e>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
  4029d4:	4b6e      	ldr	r3, [pc, #440]	; (402b90 <m2m_ip_cb+0x2a8>)
  4029d6:	681b      	ldr	r3, [r3, #0]
  4029d8:	aa07      	add	r2, sp, #28
  4029da:	2104      	movs	r1, #4
  4029dc:	f99d 0014 	ldrsb.w	r0, [sp, #20]
  4029e0:	4798      	blx	r3
  4029e2:	e0d0      	b.n	402b86 <m2m_ip_cb+0x29e>
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
  4029e4:	2844      	cmp	r0, #68	; 0x44
  4029e6:	d001      	beq.n	4029ec <m2m_ip_cb+0x104>
  4029e8:	284b      	cmp	r0, #75	; 0x4b
  4029ea:	d124      	bne.n	402a36 <m2m_ip_cb+0x14e>
	{
		tstrConnectReply		strConnectReply;
		tstrSocketConnectMsg	strConnMsg;
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
  4029ec:	2300      	movs	r3, #0
  4029ee:	2204      	movs	r2, #4
  4029f0:	a907      	add	r1, sp, #28
  4029f2:	4620      	mov	r0, r4
  4029f4:	4c65      	ldr	r4, [pc, #404]	; (402b8c <m2m_ip_cb+0x2a4>)
  4029f6:	47a0      	blx	r4
  4029f8:	2800      	cmp	r0, #0
  4029fa:	f040 80c4 	bne.w	402b86 <m2m_ip_cb+0x29e>
		{
			strConnMsg.sock		= strConnectReply.sock;
  4029fe:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  402a02:	f88d 000c 	strb.w	r0, [sp, #12]
			strConnMsg.s8Error	= strConnectReply.s8Error;
  402a06:	f99d 301d 	ldrsb.w	r3, [sp, #29]
  402a0a:	f88d 300d 	strb.w	r3, [sp, #13]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
  402a0e:	b93b      	cbnz	r3, 402a20 <m2m_ip_cb+0x138>
			{
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
  402a10:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  402a14:	3b08      	subs	r3, #8
  402a16:	b29b      	uxth	r3, r3
  402a18:	4a5e      	ldr	r2, [pc, #376]	; (402b94 <m2m_ip_cb+0x2ac>)
  402a1a:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  402a1e:	8113      	strh	r3, [r2, #8]
			}
			if(gpfAppSocketCb)
  402a20:	4b5b      	ldr	r3, [pc, #364]	; (402b90 <m2m_ip_cb+0x2a8>)
  402a22:	681b      	ldr	r3, [r3, #0]
  402a24:	2b00      	cmp	r3, #0
  402a26:	f000 80ae 	beq.w	402b86 <m2m_ip_cb+0x29e>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
  402a2a:	4b59      	ldr	r3, [pc, #356]	; (402b90 <m2m_ip_cb+0x2a8>)
  402a2c:	681b      	ldr	r3, [r3, #0]
  402a2e:	aa03      	add	r2, sp, #12
  402a30:	2105      	movs	r1, #5
  402a32:	4798      	blx	r3
  402a34:	e0a7      	b.n	402b86 <m2m_ip_cb+0x29e>
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
  402a36:	284a      	cmp	r0, #74	; 0x4a
  402a38:	d113      	bne.n	402a62 <m2m_ip_cb+0x17a>
	{
		tstrDnsReply	strDnsReply;
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
  402a3a:	2300      	movs	r3, #0
  402a3c:	2244      	movs	r2, #68	; 0x44
  402a3e:	a907      	add	r1, sp, #28
  402a40:	4620      	mov	r0, r4
  402a42:	4c52      	ldr	r4, [pc, #328]	; (402b8c <m2m_ip_cb+0x2a4>)
  402a44:	47a0      	blx	r4
  402a46:	2800      	cmp	r0, #0
  402a48:	f040 809d 	bne.w	402b86 <m2m_ip_cb+0x29e>
		{
			strDnsReply.u32HostIP = strDnsReply.u32HostIP;
			if(gpfAppResolveCb)
  402a4c:	4b53      	ldr	r3, [pc, #332]	; (402b9c <m2m_ip_cb+0x2b4>)
  402a4e:	681b      	ldr	r3, [r3, #0]
  402a50:	2b00      	cmp	r3, #0
  402a52:	f000 8098 	beq.w	402b86 <m2m_ip_cb+0x29e>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
  402a56:	4b51      	ldr	r3, [pc, #324]	; (402b9c <m2m_ip_cb+0x2b4>)
  402a58:	681b      	ldr	r3, [r3, #0]
  402a5a:	9917      	ldr	r1, [sp, #92]	; 0x5c
  402a5c:	a807      	add	r0, sp, #28
  402a5e:	4798      	blx	r3
  402a60:	e091      	b.n	402b86 <m2m_ip_cb+0x29e>
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
  402a62:	f1a0 0346 	sub.w	r3, r0, #70	; 0x46
  402a66:	b2db      	uxtb	r3, r3
  402a68:	2b07      	cmp	r3, #7
  402a6a:	d84d      	bhi.n	402b08 <m2m_ip_cb+0x220>
  402a6c:	2285      	movs	r2, #133	; 0x85
  402a6e:	fa22 f303 	lsr.w	r3, r2, r3
  402a72:	f013 0f01 	tst.w	r3, #1
  402a76:	d047      	beq.n	402b08 <m2m_ip_cb+0x220>
		tstrSocketRecvMsg	strRecvMsg;
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
		uint16				u16DataOffset;

		if(u8OpCode == SOCKET_CMD_RECVFROM)
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
  402a78:	2848      	cmp	r0, #72	; 0x48
  402a7a:	bf14      	ite	ne
  402a7c:	2706      	movne	r7, #6
  402a7e:	2709      	moveq	r7, #9

		/* Read RECV REPLY data structure.
		*/
		u16ReadSize = sizeof(tstrRecvReply);
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
  402a80:	2300      	movs	r3, #0
  402a82:	2210      	movs	r2, #16
  402a84:	a903      	add	r1, sp, #12
  402a86:	4620      	mov	r0, r4
  402a88:	4e40      	ldr	r6, [pc, #256]	; (402b8c <m2m_ip_cb+0x2a4>)
  402a8a:	47b0      	blx	r6
  402a8c:	2800      	cmp	r0, #0
  402a8e:	d17a      	bne.n	402b86 <m2m_ip_cb+0x29e>
		{
			uint16 u16SessionID = 0;

			sock			= strRecvReply.sock;
  402a90:	f99d 0018 	ldrsb.w	r0, [sp, #24]
			u16SessionID = strRecvReply.u16SessionID;
  402a94:	f8bd 101a 	ldrh.w	r1, [sp, #26]
			M2M_DBG("recv callback session ID = %d\r\n",u16SessionID);
			
			/* Reset the Socket RX Pending Flag.
			*/
			gastrSockets[sock].bIsRecvPending = 0;
  402a98:	4a3e      	ldr	r2, [pc, #248]	; (402b94 <m2m_ip_cb+0x2ac>)
  402a9a:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  402a9e:	2300      	movs	r3, #0
  402aa0:	7313      	strb	r3, [r2, #12]

			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
  402aa2:	f9bd e014 	ldrsh.w	lr, [sp, #20]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
  402aa6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
  402aaa:	f8bd 600e 	ldrh.w	r6, [sp, #14]
  402aae:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
  402ab2:	9e04      	ldr	r6, [sp, #16]
  402ab4:	960a      	str	r6, [sp, #40]	; 0x28

			if(u16SessionID == gastrSockets[sock].u16SessionID)
  402ab6:	88d2      	ldrh	r2, [r2, #6]
  402ab8:	b292      	uxth	r2, r2
  402aba:	4291      	cmp	r1, r2
  402abc:	d11b      	bne.n	402af6 <m2m_ip_cb+0x20e>
			{
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
  402abe:	f1be 0f00 	cmp.w	lr, #0
  402ac2:	dd0a      	ble.n	402ada <m2m_ip_cb+0x1f2>
  402ac4:	45ae      	cmp	lr, r5
  402ac6:	da08      	bge.n	402ada <m2m_ip_cb+0x1f2>
					/* Read the Application data and deliver it to the application callback in
					the given application buffer. If the buffer is smaller than the received data,
					the data is passed to the application in chunks according to its buffer size.
					*/
					u16ReadSize = (uint16)s16RecvStatus;
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
  402ac8:	fa1f f28e 	uxth.w	r2, lr
  402acc:	9200      	str	r2, [sp, #0]
  402ace:	4423      	add	r3, r4
  402ad0:	463a      	mov	r2, r7
  402ad2:	a907      	add	r1, sp, #28
  402ad4:	4c32      	ldr	r4, [pc, #200]	; (402ba0 <m2m_ip_cb+0x2b8>)
  402ad6:	47a0      	blx	r4
  402ad8:	e055      	b.n	402b86 <m2m_ip_cb+0x29e>
				}
				else
				{
					strRecvMsg.s16BufferSize	= s16RecvStatus;
  402ada:	f8ad e020 	strh.w	lr, [sp, #32]
					strRecvMsg.pu8Buffer		= NULL;
  402ade:	2300      	movs	r3, #0
  402ae0:	9307      	str	r3, [sp, #28]
					if(gpfAppSocketCb)
  402ae2:	4b2b      	ldr	r3, [pc, #172]	; (402b90 <m2m_ip_cb+0x2a8>)
  402ae4:	681b      	ldr	r3, [r3, #0]
  402ae6:	2b00      	cmp	r3, #0
  402ae8:	d04d      	beq.n	402b86 <m2m_ip_cb+0x29e>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
  402aea:	4b29      	ldr	r3, [pc, #164]	; (402b90 <m2m_ip_cb+0x2a8>)
  402aec:	681b      	ldr	r3, [r3, #0]
  402aee:	aa07      	add	r2, sp, #28
  402af0:	4639      	mov	r1, r7
  402af2:	4798      	blx	r3
  402af4:	e047      	b.n	402b86 <m2m_ip_cb+0x29e>
				}
			}
			else
			{
				M2M_DBG("Discard recv callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
				if(u16ReadSize < u16BufferSize)
  402af6:	2d10      	cmp	r5, #16
  402af8:	d945      	bls.n	402b86 <m2m_ip_cb+0x29e>
					hif_receive(0, NULL, 0, 1);
  402afa:	2301      	movs	r3, #1
  402afc:	2200      	movs	r2, #0
  402afe:	4611      	mov	r1, r2
  402b00:	4610      	mov	r0, r2
  402b02:	4c22      	ldr	r4, [pc, #136]	; (402b8c <m2m_ip_cb+0x2a4>)
  402b04:	47a0      	blx	r4
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
  402b06:	e03e      	b.n	402b86 <m2m_ip_cb+0x29e>
				if(u16ReadSize < u16BufferSize)
					hif_receive(0, NULL, 0, 1);
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
  402b08:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
  402b0c:	2b45      	cmp	r3, #69	; 0x45
  402b0e:	d001      	beq.n	402b14 <m2m_ip_cb+0x22c>
  402b10:	284c      	cmp	r0, #76	; 0x4c
  402b12:	d123      	bne.n	402b5c <m2m_ip_cb+0x274>
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;

		if(u8OpCode == SOCKET_CMD_SENDTO)
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
  402b14:	2847      	cmp	r0, #71	; 0x47
  402b16:	bf14      	ite	ne
  402b18:	2507      	movne	r5, #7
  402b1a:	2508      	moveq	r5, #8

		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
  402b1c:	2300      	movs	r3, #0
  402b1e:	2208      	movs	r2, #8
  402b20:	a907      	add	r1, sp, #28
  402b22:	4620      	mov	r0, r4
  402b24:	4c19      	ldr	r4, [pc, #100]	; (402b8c <m2m_ip_cb+0x2a4>)
  402b26:	47a0      	blx	r4
  402b28:	2800      	cmp	r0, #0
  402b2a:	d12c      	bne.n	402b86 <m2m_ip_cb+0x29e>
		{
			uint16 u16SessionID = 0;
			
			sock = strReply.sock;
  402b2c:	f99d 001c 	ldrsb.w	r0, [sp, #28]
			u16SessionID = strReply.u16SessionID;
  402b30:	f8bd 2020 	ldrh.w	r2, [sp, #32]
			M2M_DBG("send callback session ID = %d\r\n",u16SessionID);
			
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
  402b34:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  402b38:	f8ad 300c 	strh.w	r3, [sp, #12]

			if(u16SessionID == gastrSockets[sock].u16SessionID)
  402b3c:	4b15      	ldr	r3, [pc, #84]	; (402b94 <m2m_ip_cb+0x2ac>)
  402b3e:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  402b42:	88db      	ldrh	r3, [r3, #6]
  402b44:	b29b      	uxth	r3, r3
  402b46:	429a      	cmp	r2, r3
  402b48:	d11d      	bne.n	402b86 <m2m_ip_cb+0x29e>
			{
				if(gpfAppSocketCb)
  402b4a:	4b11      	ldr	r3, [pc, #68]	; (402b90 <m2m_ip_cb+0x2a8>)
  402b4c:	681b      	ldr	r3, [r3, #0]
  402b4e:	b1d3      	cbz	r3, 402b86 <m2m_ip_cb+0x29e>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
  402b50:	4b0f      	ldr	r3, [pc, #60]	; (402b90 <m2m_ip_cb+0x2a8>)
  402b52:	681b      	ldr	r3, [r3, #0]
  402b54:	aa03      	add	r2, sp, #12
  402b56:	4629      	mov	r1, r5
  402b58:	4798      	blx	r3
					hif_receive(0, NULL, 0, 1);
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
	{
  402b5a:	e014      	b.n	402b86 <m2m_ip_cb+0x29e>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
  402b5c:	2852      	cmp	r0, #82	; 0x52
  402b5e:	d112      	bne.n	402b86 <m2m_ip_cb+0x29e>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
  402b60:	2301      	movs	r3, #1
  402b62:	2214      	movs	r2, #20
  402b64:	a907      	add	r1, sp, #28
  402b66:	4620      	mov	r0, r4
  402b68:	4c08      	ldr	r4, [pc, #32]	; (402b8c <m2m_ip_cb+0x2a4>)
  402b6a:	47a0      	blx	r4
  402b6c:	b958      	cbnz	r0, 402b86 <m2m_ip_cb+0x29e>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
  402b6e:	4b0d      	ldr	r3, [pc, #52]	; (402ba4 <m2m_ip_cb+0x2bc>)
  402b70:	9a08      	ldr	r2, [sp, #32]
  402b72:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
  402b74:	681b      	ldr	r3, [r3, #0]
  402b76:	b133      	cbz	r3, 402b86 <m2m_ip_cb+0x29e>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
  402b78:	4b0a      	ldr	r3, [pc, #40]	; (402ba4 <m2m_ip_cb+0x2bc>)
  402b7a:	681b      	ldr	r3, [r3, #0]
  402b7c:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
  402b80:	9909      	ldr	r1, [sp, #36]	; 0x24
  402b82:	9807      	ldr	r0, [sp, #28]
  402b84:	4798      	blx	r3
			}
		}
	}
}
  402b86:	b019      	add	sp, #100	; 0x64
  402b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402b8a:	bf00      	nop
  402b8c:	00400bc5 	.word	0x00400bc5
  402b90:	20401034 	.word	0x20401034
  402b94:	20400f84 	.word	0x20400f84
  402b98:	2040094a 	.word	0x2040094a
  402b9c:	2040103c 	.word	0x2040103c
  402ba0:	0040282d 	.word	0x0040282d
  402ba4:	20401038 	.word	0x20401038

00402ba8 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
  402ba8:	b508      	push	{r3, lr}
	if(gbSocketInit==0)
  402baa:	4b0a      	ldr	r3, [pc, #40]	; (402bd4 <socketInit+0x2c>)
  402bac:	781b      	ldrb	r3, [r3, #0]
  402bae:	f013 0fff 	tst.w	r3, #255	; 0xff
  402bb2:	d10e      	bne.n	402bd2 <socketInit+0x2a>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
  402bb4:	22b0      	movs	r2, #176	; 0xb0
  402bb6:	2100      	movs	r1, #0
  402bb8:	4807      	ldr	r0, [pc, #28]	; (402bd8 <socketInit+0x30>)
  402bba:	4b08      	ldr	r3, [pc, #32]	; (402bdc <socketInit+0x34>)
  402bbc:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
  402bbe:	4908      	ldr	r1, [pc, #32]	; (402be0 <socketInit+0x38>)
  402bc0:	2002      	movs	r0, #2
  402bc2:	4b08      	ldr	r3, [pc, #32]	; (402be4 <socketInit+0x3c>)
  402bc4:	4798      	blx	r3
		gbSocketInit=1;
  402bc6:	2201      	movs	r2, #1
  402bc8:	4b02      	ldr	r3, [pc, #8]	; (402bd4 <socketInit+0x2c>)
  402bca:	701a      	strb	r2, [r3, #0]
		gu16SessionID = 0;
  402bcc:	2200      	movs	r2, #0
  402bce:	4b06      	ldr	r3, [pc, #24]	; (402be8 <socketInit+0x40>)
  402bd0:	801a      	strh	r2, [r3, #0]
  402bd2:	bd08      	pop	{r3, pc}
  402bd4:	20400949 	.word	0x20400949
  402bd8:	20400f84 	.word	0x20400f84
  402bdc:	00400569 	.word	0x00400569
  402be0:	004028e9 	.word	0x004028e9
  402be4:	00400cd5 	.word	0x00400cd5
  402be8:	2040094a 	.word	0x2040094a

00402bec <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
  402bec:	4b02      	ldr	r3, [pc, #8]	; (402bf8 <registerSocketCallback+0xc>)
  402bee:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
  402bf0:	4b02      	ldr	r3, [pc, #8]	; (402bfc <registerSocketCallback+0x10>)
  402bf2:	6019      	str	r1, [r3, #0]
  402bf4:	4770      	bx	lr
  402bf6:	bf00      	nop
  402bf8:	20401034 	.word	0x20401034
  402bfc:	2040103c 	.word	0x2040103c

00402c00 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
  402c00:	b570      	push	{r4, r5, r6, lr}
  402c02:	b086      	sub	sp, #24
	SOCKET		sock = -1;
	uint8		u8Count,u8SocketCount = MAX_SOCKET;
	volatile tstrSocket	*pstrSock;
	
	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
  402c04:	2802      	cmp	r0, #2
  402c06:	d14b      	bne.n	402ca0 <socket+0xa0>
	{
		if(u8Type == SOCK_STREAM)
  402c08:	2901      	cmp	r1, #1
  402c0a:	d04c      	beq.n	402ca6 <socket+0xa6>
		{
			u8SocketCount = TCP_SOCK_MAX;
			u8Count = 0;
		}
		else if(u8Type == SOCK_DGRAM)
  402c0c:	2902      	cmp	r1, #2
  402c0e:	d04d      	beq.n	402cac <socket+0xac>
			/*--- UDP SOCKET ---*/
			u8SocketCount = MAX_SOCKET;
			u8Count = TCP_SOCK_MAX;
		}
		else
			return sock;
  402c10:	f04f 34ff 	mov.w	r4, #4294967295
  402c14:	e058      	b.n	402cc8 <socket+0xc8>

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
  402c16:	4625      	mov	r5, r4
			if(pstrSock->bIsUsed == 0)
  402c18:	eb00 1304 	add.w	r3, r0, r4, lsl #4
  402c1c:	7a9b      	ldrb	r3, [r3, #10]
  402c1e:	f013 0fff 	tst.w	r3, #255	; 0xff
  402c22:	d136      	bne.n	402c92 <socket+0x92>
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
  402c24:	482a      	ldr	r0, [pc, #168]	; (402cd0 <socket+0xd0>)
  402c26:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  402c2a:	4616      	mov	r6, r2
			if(pstrSock->bIsUsed == 0)
			{
				m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
  402c2c:	2210      	movs	r2, #16
  402c2e:	2100      	movs	r1, #0
  402c30:	4b28      	ldr	r3, [pc, #160]	; (402cd4 <socket+0xd4>)
  402c32:	4798      	blx	r3

				pstrSock->bIsUsed = 1;
  402c34:	4b26      	ldr	r3, [pc, #152]	; (402cd0 <socket+0xd0>)
  402c36:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  402c3a:	2201      	movs	r2, #1
  402c3c:	729a      	strb	r2, [r3, #10]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
  402c3e:	4a26      	ldr	r2, [pc, #152]	; (402cd8 <socket+0xd8>)
  402c40:	8813      	ldrh	r3, [r2, #0]
  402c42:	3301      	adds	r3, #1
  402c44:	b29b      	uxth	r3, r3
  402c46:	8013      	strh	r3, [r2, #0]
				if(gu16SessionID == 0)
  402c48:	8813      	ldrh	r3, [r2, #0]
  402c4a:	b29b      	uxth	r3, r3
  402c4c:	b91b      	cbnz	r3, 402c56 <socket+0x56>
					++gu16SessionID;
  402c4e:	8813      	ldrh	r3, [r2, #0]
  402c50:	3301      	adds	r3, #1
  402c52:	b29b      	uxth	r3, r3
  402c54:	8013      	strh	r3, [r2, #0]
				
				pstrSock->u16SessionID = gu16SessionID;
  402c56:	4b20      	ldr	r3, [pc, #128]	; (402cd8 <socket+0xd8>)
  402c58:	881a      	ldrh	r2, [r3, #0]
  402c5a:	b292      	uxth	r2, r2
  402c5c:	4b1c      	ldr	r3, [pc, #112]	; (402cd0 <socket+0xd0>)
  402c5e:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  402c62:	80da      	strh	r2, [r3, #6]
				M2M_DBG("1 Socket %d session ID = %d\r\n",u8Count, gu16SessionID );
				sock = (SOCKET)u8Count;
  402c64:	b264      	sxtb	r4, r4

				if(u8Flags & SOCKET_FLAGS_SSL)
  402c66:	f016 0f01 	tst.w	r6, #1
  402c6a:	d02d      	beq.n	402cc8 <socket+0xc8>
				{
					tstrSSLSocketCreateCmd	strSSLCreate;
					strSSLCreate.sslSock = sock;
  402c6c:	aa06      	add	r2, sp, #24
  402c6e:	f802 4d04 	strb.w	r4, [r2, #-4]!
					pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
  402c72:	4b17      	ldr	r3, [pc, #92]	; (402cd0 <socket+0xd0>)
  402c74:	eb03 1505 	add.w	r5, r3, r5, lsl #4
  402c78:	2321      	movs	r3, #33	; 0x21
  402c7a:	72eb      	strb	r3, [r5, #11]
					SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
  402c7c:	2300      	movs	r3, #0
  402c7e:	9302      	str	r3, [sp, #8]
  402c80:	9301      	str	r3, [sp, #4]
  402c82:	9300      	str	r3, [sp, #0]
  402c84:	2304      	movs	r3, #4
  402c86:	2150      	movs	r1, #80	; 0x50
  402c88:	2002      	movs	r0, #2
  402c8a:	4d14      	ldr	r5, [pc, #80]	; (402cdc <socket+0xdc>)
  402c8c:	47a8      	blx	r5
  402c8e:	e01b      	b.n	402cc8 <socket+0xc8>
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
			if(pstrSock->bIsUsed == 0)
  402c90:	480f      	ldr	r0, [pc, #60]	; (402cd0 <socket+0xd0>)
			u8Count = TCP_SOCK_MAX;
		}
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
  402c92:	3401      	adds	r4, #1
  402c94:	b2e4      	uxtb	r4, r4
  402c96:	428c      	cmp	r4, r1
  402c98:	d3bd      	bcc.n	402c16 <socket+0x16>
Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
	SOCKET		sock = -1;
  402c9a:	f04f 34ff 	mov.w	r4, #4294967295
  402c9e:	e013      	b.n	402cc8 <socket+0xc8>
  402ca0:	f04f 34ff 	mov.w	r4, #4294967295
  402ca4:	e010      	b.n	402cc8 <socket+0xc8>
	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
	{
		if(u8Type == SOCK_STREAM)
		{
			u8SocketCount = TCP_SOCK_MAX;
  402ca6:	2107      	movs	r1, #7
			u8Count = 0;
  402ca8:	2400      	movs	r4, #0
  402caa:	e001      	b.n	402cb0 <socket+0xb0>
		}
		else if(u8Type == SOCK_DGRAM)
		{
			/*--- UDP SOCKET ---*/
			u8SocketCount = MAX_SOCKET;
  402cac:	210b      	movs	r1, #11
			u8Count = TCP_SOCK_MAX;
  402cae:	2407      	movs	r4, #7
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
  402cb0:	4625      	mov	r5, r4
			if(pstrSock->bIsUsed == 0)
  402cb2:	4b07      	ldr	r3, [pc, #28]	; (402cd0 <socket+0xd0>)
  402cb4:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  402cb8:	7a9b      	ldrb	r3, [r3, #10]
  402cba:	f013 0fff 	tst.w	r3, #255	; 0xff
  402cbe:	d1e7      	bne.n	402c90 <socket+0x90>
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
  402cc0:	4803      	ldr	r0, [pc, #12]	; (402cd0 <socket+0xd0>)
  402cc2:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  402cc6:	e7b0      	b.n	402c2a <socket+0x2a>
				break;
			}
		}
	}
	return sock;
}
  402cc8:	4620      	mov	r0, r4
  402cca:	b006      	add	sp, #24
  402ccc:	bd70      	pop	{r4, r5, r6, pc}
  402cce:	bf00      	nop
  402cd0:	20400f84 	.word	0x20400f84
  402cd4:	00400569 	.word	0x00400569
  402cd8:	2040094a 	.word	0x2040094a
  402cdc:	004006cd 	.word	0x004006cd

00402ce0 <connect>:
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
  402ce0:	2800      	cmp	r0, #0
  402ce2:	db38      	blt.n	402d56 <connect+0x76>
  402ce4:	2900      	cmp	r1, #0
  402ce6:	d036      	beq.n	402d56 <connect+0x76>
  402ce8:	4b1f      	ldr	r3, [pc, #124]	; (402d68 <connect+0x88>)
  402cea:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  402cee:	7a9b      	ldrb	r3, [r3, #10]
  402cf0:	b2db      	uxtb	r3, r3
  402cf2:	2a00      	cmp	r2, #0
  402cf4:	d032      	beq.n	402d5c <connect+0x7c>
  402cf6:	2b01      	cmp	r3, #1
  402cf8:	d130      	bne.n	402d5c <connect+0x7c>

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
  402cfa:	b530      	push	{r4, r5, lr}
  402cfc:	b089      	sub	sp, #36	; 0x24
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
  402cfe:	4b1a      	ldr	r3, [pc, #104]	; (402d68 <connect+0x88>)
  402d00:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  402d04:	7adb      	ldrb	r3, [r3, #11]
  402d06:	f013 0f01 	tst.w	r3, #1
  402d0a:	d007      	beq.n	402d1c <connect+0x3c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
  402d0c:	4b16      	ldr	r3, [pc, #88]	; (402d68 <connect+0x88>)
  402d0e:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  402d12:	7adb      	ldrb	r3, [r3, #11]
  402d14:	f88d 301d 	strb.w	r3, [sp, #29]
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
  402d18:	254b      	movs	r5, #75	; 0x4b
  402d1a:	e000      	b.n	402d1e <connect+0x3e>
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
  402d1c:	2544      	movs	r5, #68	; 0x44
  402d1e:	4604      	mov	r4, r0
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
		}
		strConnect.sock = sock;
  402d20:	f88d 001c 	strb.w	r0, [sp, #28]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
  402d24:	2208      	movs	r2, #8
  402d26:	a805      	add	r0, sp, #20
  402d28:	4b10      	ldr	r3, [pc, #64]	; (402d6c <connect+0x8c>)
  402d2a:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
  402d2c:	480e      	ldr	r0, [pc, #56]	; (402d68 <connect+0x88>)
  402d2e:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  402d32:	88c3      	ldrh	r3, [r0, #6]
  402d34:	f8ad 301e 	strh.w	r3, [sp, #30]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
  402d38:	2300      	movs	r3, #0
  402d3a:	9302      	str	r3, [sp, #8]
  402d3c:	9301      	str	r3, [sp, #4]
  402d3e:	9300      	str	r3, [sp, #0]
  402d40:	230c      	movs	r3, #12
  402d42:	aa05      	add	r2, sp, #20
  402d44:	4629      	mov	r1, r5
  402d46:	2002      	movs	r0, #2
  402d48:	4c09      	ldr	r4, [pc, #36]	; (402d70 <connect+0x90>)
  402d4a:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
  402d4c:	2800      	cmp	r0, #0
		{
			s8Ret = SOCK_ERR_INVALID;
  402d4e:	bf18      	it	ne
  402d50:	f06f 0008 	mvnne.w	r0, #8
  402d54:	e005      	b.n	402d62 <connect+0x82>
Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  402d56:	f06f 0005 	mvn.w	r0, #5
  402d5a:	4770      	bx	lr
  402d5c:	f06f 0005 	mvn.w	r0, #5
  402d60:	4770      	bx	lr
		{
			s8Ret = SOCK_ERR_INVALID;
		}
	}
	return s8Ret;
}
  402d62:	b009      	add	sp, #36	; 0x24
  402d64:	bd30      	pop	{r4, r5, pc}
  402d66:	bf00      	nop
  402d68:	20400f84 	.word	0x20400f84
  402d6c:	00400555 	.word	0x00400555
  402d70:	004006cd 	.word	0x004006cd

00402d74 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
  402d74:	b530      	push	{r4, r5, lr}
  402d76:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
  402d78:	460c      	mov	r4, r1
  402d7a:	3100      	adds	r1, #0
  402d7c:	bf18      	it	ne
  402d7e:	2101      	movne	r1, #1
  402d80:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
  402d84:	bf88      	it	hi
  402d86:	2100      	movhi	r1, #0
  402d88:	2900      	cmp	r1, #0
  402d8a:	d036      	beq.n	402dfa <send+0x86>
  402d8c:	2800      	cmp	r0, #0
  402d8e:	db34      	blt.n	402dfa <send+0x86>
  402d90:	4b1d      	ldr	r3, [pc, #116]	; (402e08 <send+0x94>)
  402d92:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  402d96:	7a9b      	ldrb	r3, [r3, #10]
  402d98:	b2db      	uxtb	r3, r3
  402d9a:	2b01      	cmp	r3, #1
  402d9c:	d130      	bne.n	402e00 <send+0x8c>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
  402d9e:	f88d 0010 	strb.w	r0, [sp, #16]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
  402da2:	f8ad 2012 	strh.w	r2, [sp, #18]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
  402da6:	4b18      	ldr	r3, [pc, #96]	; (402e08 <send+0x94>)
  402da8:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  402dac:	88db      	ldrh	r3, [r3, #6]
  402dae:	f8ad 301c 	strh.w	r3, [sp, #28]

		if(sock >= TCP_SOCK_MAX)
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
  402db2:	2807      	cmp	r0, #7
  402db4:	bfb4      	ite	lt
  402db6:	2550      	movlt	r5, #80	; 0x50
  402db8:	2544      	movge	r5, #68	; 0x44
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  402dba:	4b13      	ldr	r3, [pc, #76]	; (402e08 <send+0x94>)
  402dbc:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  402dc0:	7adb      	ldrb	r3, [r3, #11]
  402dc2:	f013 0f01 	tst.w	r3, #1
  402dc6:	d006      	beq.n	402dd6 <send+0x62>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
  402dc8:	4b0f      	ldr	r3, [pc, #60]	; (402e08 <send+0x94>)
  402dca:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  402dce:	8905      	ldrh	r5, [r0, #8]
  402dd0:	b2ad      	uxth	r5, r5
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
  402dd2:	214c      	movs	r1, #76	; 0x4c
  402dd4:	e000      	b.n	402dd8 <send+0x64>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
  402dd6:	2145      	movs	r1, #69	; 0x45
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
  402dd8:	9502      	str	r5, [sp, #8]
  402dda:	9201      	str	r2, [sp, #4]
  402ddc:	9400      	str	r4, [sp, #0]
  402dde:	2310      	movs	r3, #16
  402de0:	eb0d 0203 	add.w	r2, sp, r3
  402de4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  402de8:	2002      	movs	r0, #2
  402dea:	4c08      	ldr	r4, [pc, #32]	; (402e0c <send+0x98>)
  402dec:	47a0      	blx	r4
		if(s16Ret != SOCK_ERR_NO_ERROR)
  402dee:	2800      	cmp	r0, #0
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
  402df0:	bf0c      	ite	eq
  402df2:	2000      	moveq	r0, #0
  402df4:	f06f 000d 	mvnne.w	r0, #13
  402df8:	e004      	b.n	402e04 <send+0x90>
Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  402dfa:	f06f 0005 	mvn.w	r0, #5
  402dfe:	e001      	b.n	402e04 <send+0x90>
  402e00:	f06f 0005 	mvn.w	r0, #5
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
		}
	}
	return s16Ret;
}
  402e04:	b009      	add	sp, #36	; 0x24
  402e06:	bd30      	pop	{r4, r5, pc}
  402e08:	20400f84 	.word	0x20400f84
  402e0c:	004006cd 	.word	0x004006cd

00402e10 <recv>:
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
  402e10:	2900      	cmp	r1, #0
  402e12:	bf18      	it	ne
  402e14:	2a00      	cmpne	r2, #0
  402e16:	d045      	beq.n	402ea4 <recv+0x94>

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
  402e18:	b570      	push	{r4, r5, r6, lr}
  402e1a:	b086      	sub	sp, #24
  402e1c:	460e      	mov	r6, r1
  402e1e:	4615      	mov	r5, r2
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
  402e20:	2800      	cmp	r0, #0
  402e22:	db36      	blt.n	402e92 <recv+0x82>
  402e24:	4a21      	ldr	r2, [pc, #132]	; (402eac <recv+0x9c>)
  402e26:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  402e2a:	7a92      	ldrb	r2, [r2, #10]
  402e2c:	b2d2      	uxtb	r2, r2
  402e2e:	2a01      	cmp	r2, #1
  402e30:	d132      	bne.n	402e98 <recv+0x88>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
  402e32:	4c1e      	ldr	r4, [pc, #120]	; (402eac <recv+0x9c>)
  402e34:	0101      	lsls	r1, r0, #4
  402e36:	1862      	adds	r2, r4, r1
  402e38:	5066      	str	r6, [r4, r1]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
  402e3a:	8095      	strh	r5, [r2, #4]

		if(!gastrSockets[sock].bIsRecvPending)
  402e3c:	7b12      	ldrb	r2, [r2, #12]
  402e3e:	f012 0fff 	tst.w	r2, #255	; 0xff
  402e42:	d12c      	bne.n	402e9e <recv+0x8e>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
  402e44:	eb04 1200 	add.w	r2, r4, r0, lsl #4
  402e48:	2101      	movs	r1, #1
  402e4a:	7311      	strb	r1, [r2, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  402e4c:	7ad2      	ldrb	r2, [r2, #11]
  402e4e:	400a      	ands	r2, r1
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
  402e50:	2a00      	cmp	r2, #0
  402e52:	bf0c      	ite	eq
  402e54:	2146      	moveq	r1, #70	; 0x46
  402e56:	214d      	movne	r1, #77	; 0x4d
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
  402e58:	b91b      	cbnz	r3, 402e62 <recv+0x52>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
  402e5a:	f04f 33ff 	mov.w	r3, #4294967295
  402e5e:	9304      	str	r3, [sp, #16]
  402e60:	e000      	b.n	402e64 <recv+0x54>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
  402e62:	9304      	str	r3, [sp, #16]
			strRecv.sock = sock;
  402e64:	f88d 0014 	strb.w	r0, [sp, #20]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
  402e68:	4b10      	ldr	r3, [pc, #64]	; (402eac <recv+0x9c>)
  402e6a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  402e6e:	88c3      	ldrh	r3, [r0, #6]
  402e70:	f8ad 3016 	strh.w	r3, [sp, #22]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
  402e74:	2300      	movs	r3, #0
  402e76:	9302      	str	r3, [sp, #8]
  402e78:	9301      	str	r3, [sp, #4]
  402e7a:	9300      	str	r3, [sp, #0]
  402e7c:	2308      	movs	r3, #8
  402e7e:	aa04      	add	r2, sp, #16
  402e80:	2002      	movs	r0, #2
  402e82:	4c0b      	ldr	r4, [pc, #44]	; (402eb0 <recv+0xa0>)
  402e84:	47a0      	blx	r4
			if(s16Ret != SOCK_ERR_NO_ERROR)
  402e86:	2800      	cmp	r0, #0
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
  402e88:	bf0c      	ite	eq
  402e8a:	2000      	moveq	r0, #0
  402e8c:	f06f 000d 	mvnne.w	r0, #13
  402e90:	e006      	b.n	402ea0 <recv+0x90>
Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  402e92:	f06f 0005 	mvn.w	r0, #5
  402e96:	e003      	b.n	402ea0 <recv+0x90>
  402e98:	f06f 0005 	mvn.w	r0, #5
  402e9c:	e000      	b.n	402ea0 <recv+0x90>
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
	{
		s16Ret = SOCK_ERR_NO_ERROR;
  402e9e:	2000      	movs	r0, #0
				s16Ret = SOCK_ERR_BUFFER_FULL;
			}
		}
	}
	return s16Ret;
}
  402ea0:	b006      	add	sp, #24
  402ea2:	bd70      	pop	{r4, r5, r6, pc}
Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  402ea4:	f06f 0005 	mvn.w	r0, #5
				s16Ret = SOCK_ERR_BUFFER_FULL;
			}
		}
	}
	return s16Ret;
}
  402ea8:	4770      	bx	lr
  402eaa:	bf00      	nop
  402eac:	20400f84 	.word	0x20400f84
  402eb0:	004006cd 	.word	0x004006cd

00402eb4 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
  402eb4:	b530      	push	{r4, r5, lr}
  402eb6:	b087      	sub	sp, #28
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
  402eb8:	2800      	cmp	r0, #0
  402eba:	db2e      	blt.n	402f1a <close+0x66>
  402ebc:	4b1b      	ldr	r3, [pc, #108]	; (402f2c <close+0x78>)
  402ebe:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  402ec2:	7a9b      	ldrb	r3, [r3, #10]
  402ec4:	b2db      	uxtb	r3, r3
  402ec6:	2b01      	cmp	r3, #1
  402ec8:	d12a      	bne.n	402f20 <close+0x6c>
  402eca:	4604      	mov	r4, r0
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
  402ecc:	f88d 0014 	strb.w	r0, [sp, #20]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
  402ed0:	4b16      	ldr	r3, [pc, #88]	; (402f2c <close+0x78>)
  402ed2:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  402ed6:	88da      	ldrh	r2, [r3, #6]
  402ed8:	f8ad 2016 	strh.w	r2, [sp, #22]
		
		gastrSockets[sock].bIsUsed = 0;
  402edc:	2200      	movs	r2, #0
  402ede:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
  402ee0:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  402ee2:	7adb      	ldrb	r3, [r3, #11]
  402ee4:	f003 0301 	and.w	r3, r3, #1
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
  402ee8:	4293      	cmp	r3, r2
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
  402eea:	9202      	str	r2, [sp, #8]
  402eec:	9201      	str	r2, [sp, #4]
  402eee:	9200      	str	r2, [sp, #0]
  402ef0:	f04f 0304 	mov.w	r3, #4
  402ef4:	aa05      	add	r2, sp, #20
  402ef6:	bf0c      	ite	eq
  402ef8:	2149      	moveq	r1, #73	; 0x49
  402efa:	214e      	movne	r1, #78	; 0x4e
  402efc:	2002      	movs	r0, #2
  402efe:	4d0c      	ldr	r5, [pc, #48]	; (402f30 <close+0x7c>)
  402f00:	47a8      	blx	r5
		if(s8Ret != SOCK_ERR_NO_ERROR)
  402f02:	1e05      	subs	r5, r0, #0
		{
			s8Ret = SOCK_ERR_INVALID;
  402f04:	bf18      	it	ne
  402f06:	f06f 0508 	mvnne.w	r5, #8
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
  402f0a:	2210      	movs	r2, #16
  402f0c:	2100      	movs	r1, #0
  402f0e:	4807      	ldr	r0, [pc, #28]	; (402f2c <close+0x78>)
  402f10:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  402f14:	4b07      	ldr	r3, [pc, #28]	; (402f34 <close+0x80>)
  402f16:	4798      	blx	r3
  402f18:	e004      	b.n	402f24 <close+0x70>
Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  402f1a:	f06f 0505 	mvn.w	r5, #5
  402f1e:	e001      	b.n	402f24 <close+0x70>
  402f20:	f06f 0505 	mvn.w	r5, #5
			s8Ret = SOCK_ERR_INVALID;
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
	}
	return s8Ret;
}
  402f24:	4628      	mov	r0, r5
  402f26:	b007      	add	sp, #28
  402f28:	bd30      	pop	{r4, r5, pc}
  402f2a:	bf00      	nop
  402f2c:	20400f84 	.word	0x20400f84
  402f30:	004006cd 	.word	0x004006cd
  402f34:	00400569 	.word	0x00400569

00402f38 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
  402f38:	b510      	push	{r4, lr}
  402f3a:	b084      	sub	sp, #16
  402f3c:	4604      	mov	r4, r0
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
  402f3e:	4b0c      	ldr	r3, [pc, #48]	; (402f70 <gethostbyname+0x38>)
  402f40:	4798      	blx	r3
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
  402f42:	b2c3      	uxtb	r3, r0
  402f44:	2b40      	cmp	r3, #64	; 0x40
  402f46:	d80e      	bhi.n	402f66 <gethostbyname+0x2e>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE|M2M_REQ_DATA_PKT, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
  402f48:	2200      	movs	r2, #0
  402f4a:	9202      	str	r2, [sp, #8]
  402f4c:	9201      	str	r2, [sp, #4]
  402f4e:	9200      	str	r2, [sp, #0]
  402f50:	3301      	adds	r3, #1
  402f52:	4622      	mov	r2, r4
  402f54:	21ca      	movs	r1, #202	; 0xca
  402f56:	2002      	movs	r0, #2
  402f58:	4c06      	ldr	r4, [pc, #24]	; (402f74 <gethostbyname+0x3c>)
  402f5a:	47a0      	blx	r4
		if(s8Err != SOCK_ERR_NO_ERROR)
  402f5c:	2800      	cmp	r0, #0
		{
			s8Err = SOCK_ERR_INVALID;
  402f5e:	bf18      	it	ne
  402f60:	f06f 0008 	mvnne.w	r0, #8
  402f64:	e001      	b.n	402f6a <gethostbyname+0x32>
Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
  402f66:	f06f 0005 	mvn.w	r0, #5
		{
			s8Err = SOCK_ERR_INVALID;
		}
	}
	return s8Err;
}
  402f6a:	b004      	add	sp, #16
  402f6c:	bd10      	pop	{r4, pc}
  402f6e:	bf00      	nop
  402f70:	00400579 	.word	0x00400579
  402f74:	004006cd 	.word	0x004006cd

00402f78 <spi_flash_enable>:
/**
 *	@fn		spi_flash_enable
 *	@brief	Enable spi flash operations
 */
sint8 spi_flash_enable(uint8 enable)
{
  402f78:	b570      	push	{r4, r5, r6, lr}
  402f7a:	b082      	sub	sp, #8
  402f7c:	4605      	mov	r5, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
  402f7e:	4b2b      	ldr	r3, [pc, #172]	; (40302c <spi_flash_enable+0xb4>)
  402f80:	4798      	blx	r3
  402f82:	f3c0 000b 	ubfx	r0, r0, #0, #12
  402f86:	f5b0 7f68 	cmp.w	r0, #928	; 0x3a0
  402f8a:	d34a      	bcc.n	403022 <spi_flash_enable+0xaa>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
  402f8c:	a901      	add	r1, sp, #4
  402f8e:	f241 4010 	movw	r0, #5136	; 0x1410
  402f92:	4b27      	ldr	r3, [pc, #156]	; (403030 <spi_flash_enable+0xb8>)
  402f94:	4798      	blx	r3
		if(s8Ret != M2M_SUCCESS) {
  402f96:	4604      	mov	r4, r0
  402f98:	2800      	cmp	r0, #0
  402f9a:	d143      	bne.n	403024 <spi_flash_enable+0xac>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
		u32Val |= ((0x1111ul) << 12);
  402f9c:	4b25      	ldr	r3, [pc, #148]	; (403034 <spi_flash_enable+0xbc>)
  402f9e:	9a01      	ldr	r2, [sp, #4]
  402fa0:	4013      	ands	r3, r2
  402fa2:	4925      	ldr	r1, [pc, #148]	; (403038 <spi_flash_enable+0xc0>)
  402fa4:	4319      	orrs	r1, r3
  402fa6:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
  402fa8:	f241 4010 	movw	r0, #5136	; 0x1410
  402fac:	4b23      	ldr	r3, [pc, #140]	; (40303c <spi_flash_enable+0xc4>)
  402fae:	4798      	blx	r3
		if(enable) {
  402fb0:	b1b5      	cbz	r5, 402fe0 <spi_flash_enable+0x68>
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;

	cmd[0] = 0xab;

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
  402fb2:	2100      	movs	r1, #0
  402fb4:	4822      	ldr	r0, [pc, #136]	; (403040 <spi_flash_enable+0xc8>)
  402fb6:	4d21      	ldr	r5, [pc, #132]	; (40303c <spi_flash_enable+0xc4>)
  402fb8:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
  402fba:	21ab      	movs	r1, #171	; 0xab
  402fbc:	4821      	ldr	r0, [pc, #132]	; (403044 <spi_flash_enable+0xcc>)
  402fbe:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
  402fc0:	2101      	movs	r1, #1
  402fc2:	4821      	ldr	r0, [pc, #132]	; (403048 <spi_flash_enable+0xd0>)
  402fc4:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
  402fc6:	2100      	movs	r1, #0
  402fc8:	4820      	ldr	r0, [pc, #128]	; (40304c <spi_flash_enable+0xd4>)
  402fca:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
  402fcc:	2181      	movs	r1, #129	; 0x81
  402fce:	4820      	ldr	r0, [pc, #128]	; (403050 <spi_flash_enable+0xd8>)
  402fd0:	47a8      	blx	r5
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
  402fd2:	4e20      	ldr	r6, [pc, #128]	; (403054 <spi_flash_enable+0xdc>)
  402fd4:	4d20      	ldr	r5, [pc, #128]	; (403058 <spi_flash_enable+0xe0>)
  402fd6:	4630      	mov	r0, r6
  402fd8:	47a8      	blx	r5
  402fda:	2801      	cmp	r0, #1
  402fdc:	d1fb      	bne.n	402fd6 <spi_flash_enable+0x5e>
  402fde:	e015      	b.n	40300c <spi_flash_enable+0x94>
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;

	cmd[0] = 0xb9;

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
  402fe0:	2100      	movs	r1, #0
  402fe2:	4817      	ldr	r0, [pc, #92]	; (403040 <spi_flash_enable+0xc8>)
  402fe4:	4d15      	ldr	r5, [pc, #84]	; (40303c <spi_flash_enable+0xc4>)
  402fe6:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
  402fe8:	21b9      	movs	r1, #185	; 0xb9
  402fea:	4816      	ldr	r0, [pc, #88]	; (403044 <spi_flash_enable+0xcc>)
  402fec:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
  402fee:	2101      	movs	r1, #1
  402ff0:	4815      	ldr	r0, [pc, #84]	; (403048 <spi_flash_enable+0xd0>)
  402ff2:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
  402ff4:	2100      	movs	r1, #0
  402ff6:	4815      	ldr	r0, [pc, #84]	; (40304c <spi_flash_enable+0xd4>)
  402ff8:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
  402ffa:	2181      	movs	r1, #129	; 0x81
  402ffc:	4814      	ldr	r0, [pc, #80]	; (403050 <spi_flash_enable+0xd8>)
  402ffe:	47a8      	blx	r5
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
  403000:	4e14      	ldr	r6, [pc, #80]	; (403054 <spi_flash_enable+0xdc>)
  403002:	4d15      	ldr	r5, [pc, #84]	; (403058 <spi_flash_enable+0xe0>)
  403004:	4630      	mov	r0, r6
  403006:	47a8      	blx	r5
  403008:	2801      	cmp	r0, #1
  40300a:	d1fb      	bne.n	403004 <spi_flash_enable+0x8c>
		} else {
			spi_flash_enter_low_power_mode();
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
		u32Val |= ((0x0010ul) << 12);
  40300c:	4909      	ldr	r1, [pc, #36]	; (403034 <spi_flash_enable+0xbc>)
  40300e:	9b01      	ldr	r3, [sp, #4]
  403010:	4019      	ands	r1, r3
  403012:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  403016:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
  403018:	f241 4010 	movw	r0, #5136	; 0x1410
  40301c:	4b07      	ldr	r3, [pc, #28]	; (40303c <spi_flash_enable+0xc4>)
  40301e:	4798      	blx	r3
  403020:	e000      	b.n	403024 <spi_flash_enable+0xac>
 *	@fn		spi_flash_enable
 *	@brief	Enable spi flash operations
 */
sint8 spi_flash_enable(uint8 enable)
{
	sint8 s8Ret = M2M_SUCCESS;
  403022:	2400      	movs	r4, #0
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
  403024:	4620      	mov	r0, r4
  403026:	b002      	add	sp, #8
  403028:	bd70      	pop	{r4, r5, r6, pc}
  40302a:	bf00      	nop
  40302c:	00401859 	.word	0x00401859
  403030:	00401c45 	.word	0x00401c45
  403034:	f8888fff 	.word	0xf8888fff
  403038:	01111000 	.word	0x01111000
  40303c:	00401c51 	.word	0x00401c51
  403040:	00010208 	.word	0x00010208
  403044:	0001020c 	.word	0x0001020c
  403048:	00010214 	.word	0x00010214
  40304c:	0001021c 	.word	0x0001021c
  403050:	00010204 	.word	0x00010204
  403054:	00010218 	.word	0x00010218
  403058:	00401c39 	.word	0x00401c39

0040305c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  40305c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40305e:	4810      	ldr	r0, [pc, #64]	; (4030a0 <sysclk_init+0x44>)
  403060:	4b10      	ldr	r3, [pc, #64]	; (4030a4 <sysclk_init+0x48>)
  403062:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  403064:	213e      	movs	r1, #62	; 0x3e
  403066:	2000      	movs	r0, #0
  403068:	4b0f      	ldr	r3, [pc, #60]	; (4030a8 <sysclk_init+0x4c>)
  40306a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40306c:	4c0f      	ldr	r4, [pc, #60]	; (4030ac <sysclk_init+0x50>)
  40306e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  403070:	2800      	cmp	r0, #0
  403072:	d0fc      	beq.n	40306e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  403074:	4b0e      	ldr	r3, [pc, #56]	; (4030b0 <sysclk_init+0x54>)
  403076:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  403078:	4a0e      	ldr	r2, [pc, #56]	; (4030b4 <sysclk_init+0x58>)
  40307a:	4b0f      	ldr	r3, [pc, #60]	; (4030b8 <sysclk_init+0x5c>)
  40307c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  40307e:	4c0f      	ldr	r4, [pc, #60]	; (4030bc <sysclk_init+0x60>)
  403080:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  403082:	2800      	cmp	r0, #0
  403084:	d0fc      	beq.n	403080 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  403086:	2002      	movs	r0, #2
  403088:	4b0d      	ldr	r3, [pc, #52]	; (4030c0 <sysclk_init+0x64>)
  40308a:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40308c:	2000      	movs	r0, #0
  40308e:	4b0d      	ldr	r3, [pc, #52]	; (4030c4 <sysclk_init+0x68>)
  403090:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  403092:	4b0d      	ldr	r3, [pc, #52]	; (4030c8 <sysclk_init+0x6c>)
  403094:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  403096:	4802      	ldr	r0, [pc, #8]	; (4030a0 <sysclk_init+0x44>)
  403098:	4b02      	ldr	r3, [pc, #8]	; (4030a4 <sysclk_init+0x48>)
  40309a:	4798      	blx	r3
  40309c:	bd10      	pop	{r4, pc}
  40309e:	bf00      	nop
  4030a0:	11e1a300 	.word	0x11e1a300
  4030a4:	00403d11 	.word	0x00403d11
  4030a8:	0040379d 	.word	0x0040379d
  4030ac:	004037f1 	.word	0x004037f1
  4030b0:	00403801 	.word	0x00403801
  4030b4:	20183f01 	.word	0x20183f01
  4030b8:	400e0600 	.word	0x400e0600
  4030bc:	00403811 	.word	0x00403811
  4030c0:	004036f9 	.word	0x004036f9
  4030c4:	00403735 	.word	0x00403735
  4030c8:	00403c01 	.word	0x00403c01

004030cc <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
  4030cc:	b990      	cbnz	r0, 4030f4 <_read+0x28>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4030ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4030d2:	460c      	mov	r4, r1
  4030d4:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  4030d6:	2a00      	cmp	r2, #0
  4030d8:	dd0f      	ble.n	4030fa <_read+0x2e>
  4030da:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  4030dc:	4e08      	ldr	r6, [pc, #32]	; (403100 <_read+0x34>)
  4030de:	4d09      	ldr	r5, [pc, #36]	; (403104 <_read+0x38>)
  4030e0:	6830      	ldr	r0, [r6, #0]
  4030e2:	4621      	mov	r1, r4
  4030e4:	682b      	ldr	r3, [r5, #0]
  4030e6:	4798      	blx	r3
		ptr++;
  4030e8:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  4030ea:	42a7      	cmp	r7, r4
  4030ec:	d1f8      	bne.n	4030e0 <_read+0x14>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
  4030ee:	4640      	mov	r0, r8
  4030f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  4030f4:	f04f 30ff 	mov.w	r0, #4294967295
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  4030f8:	4770      	bx	lr

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  4030fa:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  4030fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403100:	20401048 	.word	0x20401048
  403104:	20401040 	.word	0x20401040

00403108 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  403108:	3801      	subs	r0, #1
  40310a:	2802      	cmp	r0, #2
  40310c:	d815      	bhi.n	40313a <_write+0x32>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  40310e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403112:	460e      	mov	r6, r1
  403114:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  403116:	b19a      	cbz	r2, 403140 <_write+0x38>
  403118:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40311a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 403154 <_write+0x4c>
  40311e:	4f0c      	ldr	r7, [pc, #48]	; (403150 <_write+0x48>)
  403120:	f8d8 0000 	ldr.w	r0, [r8]
  403124:	f815 1b01 	ldrb.w	r1, [r5], #1
  403128:	683b      	ldr	r3, [r7, #0]
  40312a:	4798      	blx	r3
  40312c:	2800      	cmp	r0, #0
  40312e:	db0a      	blt.n	403146 <_write+0x3e>
  403130:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  403132:	3c01      	subs	r4, #1
  403134:	d1f4      	bne.n	403120 <_write+0x18>
  403136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  40313a:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  40313e:	4770      	bx	lr

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  403140:	2000      	movs	r0, #0
  403142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  403146:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  40314a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40314e:	bf00      	nop
  403150:	20401044 	.word	0x20401044
  403154:	20401048 	.word	0x20401048

00403158 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  403158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40315a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40315e:	4b57      	ldr	r3, [pc, #348]	; (4032bc <board_init+0x164>)
  403160:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  403162:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  403166:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  40316a:	4b55      	ldr	r3, [pc, #340]	; (4032c0 <board_init+0x168>)
  40316c:	2200      	movs	r2, #0
  40316e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  403172:	695a      	ldr	r2, [r3, #20]
  403174:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  403178:	615a      	str	r2, [r3, #20]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  40317a:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  40317e:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  403182:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  403186:	f3c6 354e 	ubfx	r5, r6, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  40318a:	f006 0707 	and.w	r7, r6, #7
  40318e:	3704      	adds	r7, #4
    ways    = CCSIDR_WAYS(ccsidr);
  403190:	f3c6 06c9 	ubfx	r6, r6, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  403194:	fab6 f086 	clz	r0, r6
    wshift  = __CLZ(ways) & 0x1f;
  403198:	f000 001f 	and.w	r0, r0, #31
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  40319c:	f3bf 8f4f 	dsb	sy

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  4031a0:	461c      	mov	r4, r3
    wshift  = __CLZ(ways) & 0x1f;

    __DSB();

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
  4031a2:	4633      	mov	r3, r6
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
  4031a4:	fa05 f107 	lsl.w	r1, r5, r7
  4031a8:	fa03 f200 	lsl.w	r2, r3, r0
  4031ac:	430a      	orrs	r2, r1
              SCB->DCISW = sw;
  4031ae:	f8c4 2260 	str.w	r2, [r4, #608]	; 0x260
            } while(tmpways--);
  4031b2:	3b01      	subs	r3, #1
  4031b4:	f1b3 3fff 	cmp.w	r3, #4294967295
  4031b8:	d1f6      	bne.n	4031a8 <board_init+0x50>
        } while(sets--);
  4031ba:	3d01      	subs	r5, #1
  4031bc:	f1b5 3fff 	cmp.w	r5, #4294967295
  4031c0:	d1ef      	bne.n	4031a2 <board_init+0x4a>
  4031c2:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  4031c6:	4b3e      	ldr	r3, [pc, #248]	; (4032c0 <board_init+0x168>)
  4031c8:	695a      	ldr	r2, [r3, #20]
  4031ca:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  4031ce:	615a      	str	r2, [r3, #20]
  4031d0:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  4031d4:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4031d8:	4a3a      	ldr	r2, [pc, #232]	; (4032c4 <board_init+0x16c>)
  4031da:	493b      	ldr	r1, [pc, #236]	; (4032c8 <board_init+0x170>)
  4031dc:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4031de:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  4031e2:	6051      	str	r1, [r2, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4031e4:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  4031e8:	f3bf 8f6f 	isb	sy
static inline void tcm_disable(void) 
{

	__DSB();
	__ISB();
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  4031ec:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  4031f0:	f022 0201 	bic.w	r2, r2, #1
  4031f4:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  4031f8:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  4031fc:	f022 0201 	bic.w	r2, r2, #1
  403200:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  403204:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  403208:	f3bf 8f6f 	isb	sy
  40320c:	200a      	movs	r0, #10
  40320e:	4c2f      	ldr	r4, [pc, #188]	; (4032cc <board_init+0x174>)
  403210:	47a0      	blx	r4
  403212:	200b      	movs	r0, #11
  403214:	47a0      	blx	r4
  403216:	200c      	movs	r0, #12
  403218:	47a0      	blx	r4
  40321a:	2010      	movs	r0, #16
  40321c:	47a0      	blx	r4
  40321e:	2011      	movs	r0, #17
  403220:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  403222:	4b2b      	ldr	r3, [pc, #172]	; (4032d0 <board_init+0x178>)
  403224:	f44f 7280 	mov.w	r2, #256	; 0x100
  403228:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40322a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40322e:	631a      	str	r2, [r3, #48]	; 0x30
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  403230:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  403234:	f44f 6200 	mov.w	r2, #2048	; 0x800
  403238:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40323a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  40323e:	665a      	str	r2, [r3, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  403240:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  403244:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
  403246:	621a      	str	r2, [r3, #32]

	if (mode & IOPORT_MODE_DEBOUNCE) {
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  403248:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  40324c:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40324e:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  403252:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  403254:	6f59      	ldr	r1, [r3, #116]	; 0x74
  403256:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  40325a:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  40325c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  403260:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  403264:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  403268:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  40326c:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  40326e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  403272:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  403274:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  403276:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  40327a:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40327c:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  403280:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  403282:	6f59      	ldr	r1, [r3, #116]	; 0x74
  403284:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  403288:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40328a:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  40328c:	4a11      	ldr	r2, [pc, #68]	; (4032d4 <board_init+0x17c>)
  40328e:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  403292:	f043 0310 	orr.w	r3, r3, #16
  403296:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  40329a:	4b0f      	ldr	r3, [pc, #60]	; (4032d8 <board_init+0x180>)
  40329c:	2210      	movs	r2, #16
  40329e:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4032a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4032a4:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4032a6:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4032a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  4032ac:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4032ae:	4311      	orrs	r1, r2
  4032b0:	6719      	str	r1, [r3, #112]	; 0x70
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
  4032b2:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4032b4:	4311      	orrs	r1, r2
  4032b6:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4032b8:	605a      	str	r2, [r3, #4]
  4032ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4032bc:	400e1850 	.word	0x400e1850
  4032c0:	e000ed00 	.word	0xe000ed00
  4032c4:	400e0c00 	.word	0x400e0c00
  4032c8:	5a00080c 	.word	0x5a00080c
  4032cc:	00403821 	.word	0x00403821
  4032d0:	400e1200 	.word	0x400e1200
  4032d4:	40088000 	.word	0x40088000
  4032d8:	400e1000 	.word	0x400e1000

004032dc <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4032dc:	b10a      	cbz	r2, 4032e2 <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
  4032de:	6641      	str	r1, [r0, #100]	; 0x64
  4032e0:	4770      	bx	lr
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4032e2:	6601      	str	r1, [r0, #96]	; 0x60
  4032e4:	4770      	bx	lr
  4032e6:	bf00      	nop

004032e8 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4032e8:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4032ea:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4032ee:	d02f      	beq.n	403350 <pio_set_peripheral+0x68>
  4032f0:	d807      	bhi.n	403302 <pio_set_peripheral+0x1a>
  4032f2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4032f6:	d014      	beq.n	403322 <pio_set_peripheral+0x3a>
  4032f8:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4032fc:	d01e      	beq.n	40333c <pio_set_peripheral+0x54>
  4032fe:	b939      	cbnz	r1, 403310 <pio_set_peripheral+0x28>
  403300:	4770      	bx	lr
  403302:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  403306:	d037      	beq.n	403378 <pio_set_peripheral+0x90>
  403308:	d804      	bhi.n	403314 <pio_set_peripheral+0x2c>
  40330a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40330e:	d029      	beq.n	403364 <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  403310:	6042      	str	r2, [r0, #4]
  403312:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  403314:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  403318:	d02e      	beq.n	403378 <pio_set_peripheral+0x90>
  40331a:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  40331e:	d02b      	beq.n	403378 <pio_set_peripheral+0x90>
  403320:	e7f6      	b.n	403310 <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  403322:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  403324:	6f04      	ldr	r4, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  403326:	6f01      	ldr	r1, [r0, #112]	; 0x70
  403328:	43d3      	mvns	r3, r2
  40332a:	4021      	ands	r1, r4
  40332c:	4019      	ands	r1, r3
  40332e:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  403330:	6f44      	ldr	r4, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  403332:	6f41      	ldr	r1, [r0, #116]	; 0x74
  403334:	4021      	ands	r1, r4
  403336:	400b      	ands	r3, r1
  403338:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40333a:	e01a      	b.n	403372 <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40333c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40333e:	4313      	orrs	r3, r2
  403340:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  403342:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  403344:	6f43      	ldr	r3, [r0, #116]	; 0x74
  403346:	400b      	ands	r3, r1
  403348:	ea23 0302 	bic.w	r3, r3, r2
  40334c:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40334e:	e7df      	b.n	403310 <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  403350:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  403352:	6f03      	ldr	r3, [r0, #112]	; 0x70
  403354:	400b      	ands	r3, r1
  403356:	ea23 0302 	bic.w	r3, r3, r2
  40335a:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40335c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40335e:	4313      	orrs	r3, r2
  403360:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  403362:	e7d5      	b.n	403310 <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  403364:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  403366:	4313      	orrs	r3, r2
  403368:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40336a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40336c:	4313      	orrs	r3, r2
  40336e:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  403370:	e7ce      	b.n	403310 <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  403372:	6042      	str	r2, [r0, #4]
}
  403374:	f85d 4b04 	ldr.w	r4, [sp], #4
  403378:	4770      	bx	lr
  40337a:	bf00      	nop

0040337c <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  40337c:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40337e:	f012 0f01 	tst.w	r2, #1
  403382:	d001      	beq.n	403388 <pio_set_input+0xc>
		p_pio->PIO_PUER = ul_mask;
  403384:	6641      	str	r1, [r0, #100]	; 0x64
  403386:	e000      	b.n	40338a <pio_set_input+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  403388:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  40338a:	f012 0f0a 	tst.w	r2, #10
  40338e:	d001      	beq.n	403394 <pio_set_input+0x18>
		p_pio->PIO_IFER = ul_mask;
  403390:	6201      	str	r1, [r0, #32]
  403392:	e000      	b.n	403396 <pio_set_input+0x1a>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  403394:	6241      	str	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  403396:	f012 0f02 	tst.w	r2, #2
  40339a:	d002      	beq.n	4033a2 <pio_set_input+0x26>
		p_pio->PIO_IFSCDR = ul_mask;
  40339c:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  4033a0:	e004      	b.n	4033ac <pio_set_input+0x30>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  4033a2:	f012 0f08 	tst.w	r2, #8
  4033a6:	d001      	beq.n	4033ac <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  4033a8:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  4033ac:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4033ae:	6001      	str	r1, [r0, #0]
  4033b0:	4770      	bx	lr
  4033b2:	bf00      	nop

004033b4 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  4033b4:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4033b6:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4033b8:	9c01      	ldr	r4, [sp, #4]
  4033ba:	b10c      	cbz	r4, 4033c0 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  4033bc:	6641      	str	r1, [r0, #100]	; 0x64
  4033be:	e000      	b.n	4033c2 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4033c0:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  4033c2:	b10b      	cbz	r3, 4033c8 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  4033c4:	6501      	str	r1, [r0, #80]	; 0x50
  4033c6:	e000      	b.n	4033ca <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  4033c8:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  4033ca:	b10a      	cbz	r2, 4033d0 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  4033cc:	6301      	str	r1, [r0, #48]	; 0x30
  4033ce:	e000      	b.n	4033d2 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  4033d0:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  4033d2:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4033d4:	6001      	str	r1, [r0, #0]
}
  4033d6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4033da:	4770      	bx	lr

004033dc <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  4033dc:	f012 0f10 	tst.w	r2, #16
  4033e0:	d012      	beq.n	403408 <pio_configure_interrupt+0x2c>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  4033e2:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  4033e6:	f012 0f20 	tst.w	r2, #32
  4033ea:	d002      	beq.n	4033f2 <pio_configure_interrupt+0x16>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  4033ec:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
  4033f0:	e001      	b.n	4033f6 <pio_configure_interrupt+0x1a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  4033f2:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  4033f6:	f012 0f40 	tst.w	r2, #64	; 0x40
  4033fa:	d002      	beq.n	403402 <pio_configure_interrupt+0x26>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  4033fc:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  403400:	4770      	bx	lr
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  403402:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  403406:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  403408:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  40340c:	4770      	bx	lr
  40340e:	bf00      	nop

00403410 <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IER = ul_mask;
  403410:	6401      	str	r1, [r0, #64]	; 0x40
  403412:	4770      	bx	lr

00403414 <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  403414:	6441      	str	r1, [r0, #68]	; 0x44
  403416:	4770      	bx	lr

00403418 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  403418:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  40341a:	4770      	bx	lr

0040341c <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  40341c:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40341e:	4770      	bx	lr

00403420 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  403420:	b570      	push	{r4, r5, r6, lr}
  403422:	b082      	sub	sp, #8
  403424:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  403426:	4c47      	ldr	r4, [pc, #284]	; (403544 <pio_configure_pin+0x124>)
  403428:	eb04 1450 	add.w	r4, r4, r0, lsr #5
  40342c:	0264      	lsls	r4, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  40342e:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  403432:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  403436:	d04d      	beq.n	4034d4 <pio_configure_pin+0xb4>
  403438:	d809      	bhi.n	40344e <pio_configure_pin+0x2e>
  40343a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40343e:	d023      	beq.n	403488 <pio_configure_pin+0x68>
  403440:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  403444:	d033      	beq.n	4034ae <pio_configure_pin+0x8e>
  403446:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40344a:	d177      	bne.n	40353c <pio_configure_pin+0x11c>
  40344c:	e009      	b.n	403462 <pio_configure_pin+0x42>
  40344e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  403452:	d05d      	beq.n	403510 <pio_configure_pin+0xf0>
  403454:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  403458:	d05a      	beq.n	403510 <pio_configure_pin+0xf0>
  40345a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40345e:	d04c      	beq.n	4034fa <pio_configure_pin+0xda>
  403460:	e06c      	b.n	40353c <pio_configure_pin+0x11c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  403462:	f000 001f 	and.w	r0, r0, #31
  403466:	2601      	movs	r6, #1
  403468:	4086      	lsls	r6, r0
  40346a:	4632      	mov	r2, r6
  40346c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  403470:	4620      	mov	r0, r4
  403472:	4b35      	ldr	r3, [pc, #212]	; (403548 <pio_configure_pin+0x128>)
  403474:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  403476:	f015 0f01 	tst.w	r5, #1
  40347a:	d002      	beq.n	403482 <pio_configure_pin+0x62>
		p_pio->PIO_PUER = ul_mask;
  40347c:	6666      	str	r6, [r4, #100]	; 0x64

	default:
		return 0;
	}

	return 1;
  40347e:	2001      	movs	r0, #1
  403480:	e05d      	b.n	40353e <pio_configure_pin+0x11e>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  403482:	6626      	str	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  403484:	2001      	movs	r0, #1
  403486:	e05a      	b.n	40353e <pio_configure_pin+0x11e>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  403488:	f000 001f 	and.w	r0, r0, #31
  40348c:	2601      	movs	r6, #1
  40348e:	4086      	lsls	r6, r0
  403490:	4632      	mov	r2, r6
  403492:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  403496:	4620      	mov	r0, r4
  403498:	4b2b      	ldr	r3, [pc, #172]	; (403548 <pio_configure_pin+0x128>)
  40349a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40349c:	f015 0f01 	tst.w	r5, #1
  4034a0:	d002      	beq.n	4034a8 <pio_configure_pin+0x88>
		p_pio->PIO_PUER = ul_mask;
  4034a2:	6666      	str	r6, [r4, #100]	; 0x64

	default:
		return 0;
	}

	return 1;
  4034a4:	2001      	movs	r0, #1
  4034a6:	e04a      	b.n	40353e <pio_configure_pin+0x11e>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4034a8:	6626      	str	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4034aa:	2001      	movs	r0, #1
  4034ac:	e047      	b.n	40353e <pio_configure_pin+0x11e>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  4034ae:	f000 001f 	and.w	r0, r0, #31
  4034b2:	2601      	movs	r6, #1
  4034b4:	4086      	lsls	r6, r0
  4034b6:	4632      	mov	r2, r6
  4034b8:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4034bc:	4620      	mov	r0, r4
  4034be:	4b22      	ldr	r3, [pc, #136]	; (403548 <pio_configure_pin+0x128>)
  4034c0:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4034c2:	f015 0f01 	tst.w	r5, #1
  4034c6:	d002      	beq.n	4034ce <pio_configure_pin+0xae>
		p_pio->PIO_PUER = ul_mask;
  4034c8:	6666      	str	r6, [r4, #100]	; 0x64

	default:
		return 0;
	}

	return 1;
  4034ca:	2001      	movs	r0, #1
  4034cc:	e037      	b.n	40353e <pio_configure_pin+0x11e>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4034ce:	6626      	str	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4034d0:	2001      	movs	r0, #1
  4034d2:	e034      	b.n	40353e <pio_configure_pin+0x11e>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  4034d4:	f000 001f 	and.w	r0, r0, #31
  4034d8:	2601      	movs	r6, #1
  4034da:	4086      	lsls	r6, r0
  4034dc:	4632      	mov	r2, r6
  4034de:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4034e2:	4620      	mov	r0, r4
  4034e4:	4b18      	ldr	r3, [pc, #96]	; (403548 <pio_configure_pin+0x128>)
  4034e6:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4034e8:	f015 0f01 	tst.w	r5, #1
  4034ec:	d002      	beq.n	4034f4 <pio_configure_pin+0xd4>
		p_pio->PIO_PUER = ul_mask;
  4034ee:	6666      	str	r6, [r4, #100]	; 0x64

	default:
		return 0;
	}

	return 1;
  4034f0:	2001      	movs	r0, #1
  4034f2:	e024      	b.n	40353e <pio_configure_pin+0x11e>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4034f4:	6626      	str	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4034f6:	2001      	movs	r0, #1
  4034f8:	e021      	b.n	40353e <pio_configure_pin+0x11e>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  4034fa:	f000 011f 	and.w	r1, r0, #31
  4034fe:	2601      	movs	r6, #1
  403500:	462a      	mov	r2, r5
  403502:	fa06 f101 	lsl.w	r1, r6, r1
  403506:	4620      	mov	r0, r4
  403508:	4b10      	ldr	r3, [pc, #64]	; (40354c <pio_configure_pin+0x12c>)
  40350a:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  40350c:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  40350e:	e016      	b.n	40353e <pio_configure_pin+0x11e>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  403510:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
  403514:	f000 011f 	and.w	r1, r0, #31
  403518:	2601      	movs	r6, #1
  40351a:	ea05 0306 	and.w	r3, r5, r6
  40351e:	9300      	str	r3, [sp, #0]
  403520:	f3c5 0380 	ubfx	r3, r5, #2, #1
  403524:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  403528:	bf14      	ite	ne
  40352a:	2200      	movne	r2, #0
  40352c:	2201      	moveq	r2, #1
  40352e:	fa06 f101 	lsl.w	r1, r6, r1
  403532:	4620      	mov	r0, r4
  403534:	4c06      	ldr	r4, [pc, #24]	; (403550 <pio_configure_pin+0x130>)
  403536:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  403538:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  40353a:	e000      	b.n	40353e <pio_configure_pin+0x11e>

	default:
		return 0;
  40353c:	2000      	movs	r0, #0
	}

	return 1;
}
  40353e:	b002      	add	sp, #8
  403540:	bd70      	pop	{r4, r5, r6, pc}
  403542:	bf00      	nop
  403544:	00200707 	.word	0x00200707
  403548:	004032e9 	.word	0x004032e9
  40354c:	0040337d 	.word	0x0040337d
  403550:	004033b5 	.word	0x004033b5

00403554 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  403554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403558:	4604      	mov	r4, r0
  40355a:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40355c:	4b0e      	ldr	r3, [pc, #56]	; (403598 <pio_handler_process+0x44>)
  40355e:	4798      	blx	r3
  403560:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  403562:	4620      	mov	r0, r4
  403564:	4b0d      	ldr	r3, [pc, #52]	; (40359c <pio_handler_process+0x48>)
  403566:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  403568:	4005      	ands	r5, r0
  40356a:	d013      	beq.n	403594 <pio_handler_process+0x40>
  40356c:	4c0c      	ldr	r4, [pc, #48]	; (4035a0 <pio_handler_process+0x4c>)
  40356e:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  403572:	6823      	ldr	r3, [r4, #0]
  403574:	4543      	cmp	r3, r8
  403576:	d108      	bne.n	40358a <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  403578:	6861      	ldr	r1, [r4, #4]
  40357a:	4229      	tst	r1, r5
  40357c:	d005      	beq.n	40358a <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40357e:	68e3      	ldr	r3, [r4, #12]
  403580:	4640      	mov	r0, r8
  403582:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  403584:	6863      	ldr	r3, [r4, #4]
  403586:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  40358a:	42b4      	cmp	r4, r6
  40358c:	d002      	beq.n	403594 <pio_handler_process+0x40>
  40358e:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  403590:	2d00      	cmp	r5, #0
  403592:	d1ee      	bne.n	403572 <pio_handler_process+0x1e>
  403594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403598:	00403419 	.word	0x00403419
  40359c:	0040341d 	.word	0x0040341d
  4035a0:	20400950 	.word	0x20400950

004035a4 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  4035a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  4035a6:	4c17      	ldr	r4, [pc, #92]	; (403604 <pio_handler_set+0x60>)
  4035a8:	6826      	ldr	r6, [r4, #0]
  4035aa:	2e06      	cmp	r6, #6
  4035ac:	d828      	bhi.n	403600 <pio_handler_set+0x5c>
  4035ae:	f04f 0c00 	mov.w	ip, #0
  4035b2:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  4035b4:	4f14      	ldr	r7, [pc, #80]	; (403608 <pio_handler_set+0x64>)
	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
  4035b6:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  4035b8:	0125      	lsls	r5, r4, #4
  4035ba:	597d      	ldr	r5, [r7, r5]
  4035bc:	428d      	cmp	r5, r1
  4035be:	d104      	bne.n	4035ca <pio_handler_set+0x26>
  4035c0:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  4035c4:	686d      	ldr	r5, [r5, #4]
  4035c6:	4295      	cmp	r5, r2
  4035c8:	d004      	beq.n	4035d4 <pio_handler_set+0x30>

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  4035ca:	3401      	adds	r4, #1
  4035cc:	b2e4      	uxtb	r4, r4
  4035ce:	46a4      	mov	ip, r4
  4035d0:	42a6      	cmp	r6, r4
  4035d2:	d2f0      	bcs.n	4035b6 <pio_handler_set+0x12>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  4035d4:	4d0c      	ldr	r5, [pc, #48]	; (403608 <pio_handler_set+0x64>)
  4035d6:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  4035da:	eb05 040e 	add.w	r4, r5, lr
  4035de:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  4035e2:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  4035e4:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  4035e6:	9906      	ldr	r1, [sp, #24]
  4035e8:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  4035ea:	3601      	adds	r6, #1
  4035ec:	4566      	cmp	r6, ip
  4035ee:	d101      	bne.n	4035f4 <pio_handler_set+0x50>
		gs_ul_nb_sources++;
  4035f0:	4904      	ldr	r1, [pc, #16]	; (403604 <pio_handler_set+0x60>)
  4035f2:	600e      	str	r6, [r1, #0]
  4035f4:	4611      	mov	r1, r2
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4035f6:	461a      	mov	r2, r3
  4035f8:	4b04      	ldr	r3, [pc, #16]	; (40360c <pio_handler_set+0x68>)
  4035fa:	4798      	blx	r3

	return 0;
  4035fc:	2000      	movs	r0, #0
  4035fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
  403600:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
  403602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403604:	2040094c 	.word	0x2040094c
  403608:	20400950 	.word	0x20400950
  40360c:	004033dd 	.word	0x004033dd

00403610 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  403610:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  403612:	210a      	movs	r1, #10
  403614:	4801      	ldr	r0, [pc, #4]	; (40361c <PIOA_Handler+0xc>)
  403616:	4b02      	ldr	r3, [pc, #8]	; (403620 <PIOA_Handler+0x10>)
  403618:	4798      	blx	r3
  40361a:	bd08      	pop	{r3, pc}
  40361c:	400e0e00 	.word	0x400e0e00
  403620:	00403555 	.word	0x00403555

00403624 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  403624:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  403626:	210b      	movs	r1, #11
  403628:	4801      	ldr	r0, [pc, #4]	; (403630 <PIOB_Handler+0xc>)
  40362a:	4b02      	ldr	r3, [pc, #8]	; (403634 <PIOB_Handler+0x10>)
  40362c:	4798      	blx	r3
  40362e:	bd08      	pop	{r3, pc}
  403630:	400e1000 	.word	0x400e1000
  403634:	00403555 	.word	0x00403555

00403638 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  403638:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  40363a:	210c      	movs	r1, #12
  40363c:	4801      	ldr	r0, [pc, #4]	; (403644 <PIOC_Handler+0xc>)
  40363e:	4b02      	ldr	r3, [pc, #8]	; (403648 <PIOC_Handler+0x10>)
  403640:	4798      	blx	r3
  403642:	bd08      	pop	{r3, pc}
  403644:	400e1200 	.word	0x400e1200
  403648:	00403555 	.word	0x00403555

0040364c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  40364c:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  40364e:	2110      	movs	r1, #16
  403650:	4801      	ldr	r0, [pc, #4]	; (403658 <PIOD_Handler+0xc>)
  403652:	4b02      	ldr	r3, [pc, #8]	; (40365c <PIOD_Handler+0x10>)
  403654:	4798      	blx	r3
  403656:	bd08      	pop	{r3, pc}
  403658:	400e1400 	.word	0x400e1400
  40365c:	00403555 	.word	0x00403555

00403660 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  403660:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  403662:	2111      	movs	r1, #17
  403664:	4801      	ldr	r0, [pc, #4]	; (40366c <PIOE_Handler+0xc>)
  403666:	4b02      	ldr	r3, [pc, #8]	; (403670 <PIOE_Handler+0x10>)
  403668:	4798      	blx	r3
  40366a:	bd08      	pop	{r3, pc}
  40366c:	400e1600 	.word	0x400e1600
  403670:	00403555 	.word	0x00403555

00403674 <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  403674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403676:	4606      	mov	r6, r0
  403678:	460d      	mov	r5, r1
  40367a:	4614      	mov	r4, r2
	uint32_t bitmask = 0;

	bitmask = pio_get_interrupt_mask(p_pio);
  40367c:	4b17      	ldr	r3, [pc, #92]	; (4036dc <pio_handler_set_priority+0x68>)
  40367e:	4798      	blx	r3
  403680:	4607      	mov	r7, r0
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  403682:	f04f 31ff 	mov.w	r1, #4294967295
  403686:	4630      	mov	r0, r6
  403688:	4b15      	ldr	r3, [pc, #84]	; (4036e0 <pio_handler_set_priority+0x6c>)
  40368a:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  40368c:	4630      	mov	r0, r6
  40368e:	4b15      	ldr	r3, [pc, #84]	; (4036e4 <pio_handler_set_priority+0x70>)
  403690:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  403692:	fa5f fe85 	uxtb.w	lr, r5
  403696:	f00e 031f 	and.w	r3, lr, #31
  40369a:	2201      	movs	r2, #1
  40369c:	fa02 f303 	lsl.w	r3, r2, r3
  4036a0:	0968      	lsrs	r0, r5, #5
  4036a2:	4911      	ldr	r1, [pc, #68]	; (4036e8 <pio_handler_set_priority+0x74>)
  4036a4:	eb01 0280 	add.w	r2, r1, r0, lsl #2
  4036a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4036ac:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
  4036b0:	2d00      	cmp	r5, #0
  4036b2:	da07      	bge.n	4036c4 <pio_handler_set_priority+0x50>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  4036b4:	f00e 0e0f 	and.w	lr, lr, #15
  4036b8:	0164      	lsls	r4, r4, #5
  4036ba:	b2e4      	uxtb	r4, r4
  4036bc:	4a0b      	ldr	r2, [pc, #44]	; (4036ec <pio_handler_set_priority+0x78>)
  4036be:	f802 400e 	strb.w	r4, [r2, lr]
  4036c2:	e003      	b.n	4036cc <pio_handler_set_priority+0x58>
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4036c4:	0164      	lsls	r4, r4, #5
  4036c6:	b2e4      	uxtb	r4, r4
  4036c8:	4a09      	ldr	r2, [pc, #36]	; (4036f0 <pio_handler_set_priority+0x7c>)
  4036ca:	5554      	strb	r4, [r2, r5]
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4036cc:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
	NVIC_DisableIRQ(ul_irqn);
	NVIC_ClearPendingIRQ(ul_irqn);
	NVIC_SetPriority(ul_irqn, ul_priority);
	NVIC_EnableIRQ(ul_irqn);
	pio_enable_interrupt(p_pio, bitmask);
  4036d0:	4639      	mov	r1, r7
  4036d2:	4630      	mov	r0, r6
  4036d4:	4b07      	ldr	r3, [pc, #28]	; (4036f4 <pio_handler_set_priority+0x80>)
  4036d6:	4798      	blx	r3
  4036d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4036da:	bf00      	nop
  4036dc:	0040341d 	.word	0x0040341d
  4036e0:	00403415 	.word	0x00403415
  4036e4:	00403419 	.word	0x00403419
  4036e8:	e000e100 	.word	0xe000e100
  4036ec:	e000ed14 	.word	0xe000ed14
  4036f0:	e000e400 	.word	0xe000e400
  4036f4:	00403411 	.word	0x00403411

004036f8 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  4036f8:	2803      	cmp	r0, #3
  4036fa:	d007      	beq.n	40370c <pmc_mck_set_division+0x14>
  4036fc:	2804      	cmp	r0, #4
  4036fe:	d008      	beq.n	403712 <pmc_mck_set_division+0x1a>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  403700:	2802      	cmp	r0, #2
  403702:	bf0c      	ite	eq
  403704:	f44f 7280 	moveq.w	r2, #256	; 0x100
  403708:	2200      	movne	r2, #0
  40370a:	e004      	b.n	403716 <pmc_mck_set_division+0x1e>
			break;
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
			break;
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  40370c:	f44f 7240 	mov.w	r2, #768	; 0x300
			break;
  403710:	e001      	b.n	403716 <pmc_mck_set_division+0x1e>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  403712:	f44f 7200 	mov.w	r2, #512	; 0x200
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  403716:	4906      	ldr	r1, [pc, #24]	; (403730 <pmc_mck_set_division+0x38>)
  403718:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40371a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  40371e:	4313      	orrs	r3, r2
			break;
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
  403720:	630b      	str	r3, [r1, #48]	; 0x30
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  403722:	460a      	mov	r2, r1
  403724:	6e93      	ldr	r3, [r2, #104]	; 0x68
  403726:	f013 0f08 	tst.w	r3, #8
  40372a:	d0fb      	beq.n	403724 <pmc_mck_set_division+0x2c>
}
  40372c:	4770      	bx	lr
  40372e:	bf00      	nop
  403730:	400e0600 	.word	0x400e0600

00403734 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  403734:	4a18      	ldr	r2, [pc, #96]	; (403798 <pmc_switch_mck_to_pllack+0x64>)
  403736:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403738:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  40373c:	4318      	orrs	r0, r3
  40373e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  403740:	6e93      	ldr	r3, [r2, #104]	; 0x68
  403742:	f013 0f08 	tst.w	r3, #8
  403746:	d003      	beq.n	403750 <pmc_switch_mck_to_pllack+0x1c>
  403748:	e009      	b.n	40375e <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40374a:	3b01      	subs	r3, #1
  40374c:	d103      	bne.n	403756 <pmc_switch_mck_to_pllack+0x22>
  40374e:	e01e      	b.n	40378e <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  403750:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  403754:	4910      	ldr	r1, [pc, #64]	; (403798 <pmc_switch_mck_to_pllack+0x64>)
  403756:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  403758:	f012 0f08 	tst.w	r2, #8
  40375c:	d0f5      	beq.n	40374a <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40375e:	4a0e      	ldr	r2, [pc, #56]	; (403798 <pmc_switch_mck_to_pllack+0x64>)
  403760:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403762:	f023 0303 	bic.w	r3, r3, #3
  403766:	f043 0302 	orr.w	r3, r3, #2
  40376a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40376c:	6e90      	ldr	r0, [r2, #104]	; 0x68
  40376e:	f010 0008 	ands.w	r0, r0, #8
  403772:	d004      	beq.n	40377e <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  403774:	2000      	movs	r0, #0
  403776:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  403778:	3b01      	subs	r3, #1
  40377a:	d103      	bne.n	403784 <pmc_switch_mck_to_pllack+0x50>
  40377c:	e009      	b.n	403792 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40377e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  403782:	4905      	ldr	r1, [pc, #20]	; (403798 <pmc_switch_mck_to_pllack+0x64>)
  403784:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  403786:	f012 0f08 	tst.w	r2, #8
  40378a:	d0f5      	beq.n	403778 <pmc_switch_mck_to_pllack+0x44>
  40378c:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  40378e:	2001      	movs	r0, #1
  403790:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  403792:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  403794:	4770      	bx	lr
  403796:	bf00      	nop
  403798:	400e0600 	.word	0x400e0600

0040379c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40379c:	b138      	cbz	r0, 4037ae <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40379e:	490e      	ldr	r1, [pc, #56]	; (4037d8 <pmc_switch_mainck_to_xtal+0x3c>)
  4037a0:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4037a2:	4a0e      	ldr	r2, [pc, #56]	; (4037dc <pmc_switch_mainck_to_xtal+0x40>)
  4037a4:	401a      	ands	r2, r3
  4037a6:	4b0e      	ldr	r3, [pc, #56]	; (4037e0 <pmc_switch_mainck_to_xtal+0x44>)
  4037a8:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4037aa:	620b      	str	r3, [r1, #32]
  4037ac:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4037ae:	480a      	ldr	r0, [pc, #40]	; (4037d8 <pmc_switch_mainck_to_xtal+0x3c>)
  4037b0:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4037b2:	0209      	lsls	r1, r1, #8
  4037b4:	b289      	uxth	r1, r1
  4037b6:	4a0b      	ldr	r2, [pc, #44]	; (4037e4 <pmc_switch_mainck_to_xtal+0x48>)
  4037b8:	401a      	ands	r2, r3
  4037ba:	4b0b      	ldr	r3, [pc, #44]	; (4037e8 <pmc_switch_mainck_to_xtal+0x4c>)
  4037bc:	4313      	orrs	r3, r2
  4037be:	4319      	orrs	r1, r3
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4037c0:	6201      	str	r1, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4037c2:	4602      	mov	r2, r0
  4037c4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4037c6:	f013 0f01 	tst.w	r3, #1
  4037ca:	d0fb      	beq.n	4037c4 <pmc_switch_mainck_to_xtal+0x28>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4037cc:	4a02      	ldr	r2, [pc, #8]	; (4037d8 <pmc_switch_mainck_to_xtal+0x3c>)
  4037ce:	6a11      	ldr	r1, [r2, #32]
  4037d0:	4b06      	ldr	r3, [pc, #24]	; (4037ec <pmc_switch_mainck_to_xtal+0x50>)
  4037d2:	430b      	orrs	r3, r1
  4037d4:	6213      	str	r3, [r2, #32]
  4037d6:	4770      	bx	lr
  4037d8:	400e0600 	.word	0x400e0600
  4037dc:	fec8fffc 	.word	0xfec8fffc
  4037e0:	01370002 	.word	0x01370002
  4037e4:	ffc8fffc 	.word	0xffc8fffc
  4037e8:	00370001 	.word	0x00370001
  4037ec:	01370000 	.word	0x01370000

004037f0 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4037f0:	4b02      	ldr	r3, [pc, #8]	; (4037fc <pmc_osc_is_ready_mainck+0xc>)
  4037f2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4037f4:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4037f8:	4770      	bx	lr
  4037fa:	bf00      	nop
  4037fc:	400e0600 	.word	0x400e0600

00403800 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  403800:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  403804:	4b01      	ldr	r3, [pc, #4]	; (40380c <pmc_disable_pllack+0xc>)
  403806:	629a      	str	r2, [r3, #40]	; 0x28
  403808:	4770      	bx	lr
  40380a:	bf00      	nop
  40380c:	400e0600 	.word	0x400e0600

00403810 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  403810:	4b02      	ldr	r3, [pc, #8]	; (40381c <pmc_is_locked_pllack+0xc>)
  403812:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  403814:	f000 0002 	and.w	r0, r0, #2
  403818:	4770      	bx	lr
  40381a:	bf00      	nop
  40381c:	400e0600 	.word	0x400e0600

00403820 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  403820:	283f      	cmp	r0, #63	; 0x3f
  403822:	d81e      	bhi.n	403862 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  403824:	281f      	cmp	r0, #31
  403826:	d80c      	bhi.n	403842 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  403828:	4b11      	ldr	r3, [pc, #68]	; (403870 <pmc_enable_periph_clk+0x50>)
  40382a:	699a      	ldr	r2, [r3, #24]
  40382c:	2301      	movs	r3, #1
  40382e:	4083      	lsls	r3, r0
  403830:	4393      	bics	r3, r2
  403832:	d018      	beq.n	403866 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  403834:	2301      	movs	r3, #1
  403836:	fa03 f000 	lsl.w	r0, r3, r0
  40383a:	4b0d      	ldr	r3, [pc, #52]	; (403870 <pmc_enable_periph_clk+0x50>)
  40383c:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40383e:	2000      	movs	r0, #0
  403840:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  403842:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  403844:	4b0a      	ldr	r3, [pc, #40]	; (403870 <pmc_enable_periph_clk+0x50>)
  403846:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40384a:	2301      	movs	r3, #1
  40384c:	4083      	lsls	r3, r0
  40384e:	4393      	bics	r3, r2
  403850:	d00b      	beq.n	40386a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  403852:	2301      	movs	r3, #1
  403854:	fa03 f000 	lsl.w	r0, r3, r0
  403858:	4b05      	ldr	r3, [pc, #20]	; (403870 <pmc_enable_periph_clk+0x50>)
  40385a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  40385e:	2000      	movs	r0, #0
  403860:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  403862:	2001      	movs	r0, #1
  403864:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  403866:	2000      	movs	r0, #0
  403868:	4770      	bx	lr
  40386a:	2000      	movs	r0, #0
}
  40386c:	4770      	bx	lr
  40386e:	bf00      	nop
  403870:	400e0600 	.word	0x400e0600

00403874 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  403874:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  403876:	4b07      	ldr	r3, [pc, #28]	; (403894 <spi_enable_clock+0x20>)
  403878:	4298      	cmp	r0, r3
  40387a:	d103      	bne.n	403884 <spi_enable_clock+0x10>
  40387c:	2015      	movs	r0, #21
  40387e:	4b06      	ldr	r3, [pc, #24]	; (403898 <spi_enable_clock+0x24>)
  403880:	4798      	blx	r3
  403882:	bd08      	pop	{r3, pc}
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  403884:	4b05      	ldr	r3, [pc, #20]	; (40389c <spi_enable_clock+0x28>)
  403886:	4298      	cmp	r0, r3
  403888:	d102      	bne.n	403890 <spi_enable_clock+0x1c>
  40388a:	202a      	movs	r0, #42	; 0x2a
  40388c:	4b02      	ldr	r3, [pc, #8]	; (403898 <spi_enable_clock+0x24>)
  40388e:	4798      	blx	r3
  403890:	bd08      	pop	{r3, pc}
  403892:	bf00      	nop
  403894:	40008000 	.word	0x40008000
  403898:	00403821 	.word	0x00403821
  40389c:	40058000 	.word	0x40058000

004038a0 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  4038a0:	6843      	ldr	r3, [r0, #4]
  4038a2:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  4038a6:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  4038a8:	6843      	ldr	r3, [r0, #4]
  4038aa:	0409      	lsls	r1, r1, #16
  4038ac:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  4038b0:	430b      	orrs	r3, r1
  4038b2:	6043      	str	r3, [r0, #4]
  4038b4:	4770      	bx	lr
  4038b6:	bf00      	nop

004038b8 <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
  4038b8:	b410      	push	{r4}
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
  4038ba:	f643 2399 	movw	r3, #15001	; 0x3a99
  4038be:	e001      	b.n	4038c4 <spi_read+0xc>
		if (!timeout--) {
  4038c0:	3b01      	subs	r3, #1
  4038c2:	d00e      	beq.n	4038e2 <spi_read+0x2a>
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
  4038c4:	6904      	ldr	r4, [r0, #16]
  4038c6:	f014 0f01 	tst.w	r4, #1
  4038ca:	d0f9      	beq.n	4038c0 <spi_read+0x8>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	reg_value = p_spi->SPI_RDR;
  4038cc:	6883      	ldr	r3, [r0, #8]
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  4038ce:	6840      	ldr	r0, [r0, #4]
	if (spi_get_peripheral_select_mode(p_spi)) {
  4038d0:	f010 0f02 	tst.w	r0, #2
  4038d4:	d002      	beq.n	4038dc <spi_read+0x24>
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
  4038d6:	f3c3 4003 	ubfx	r0, r3, #16, #4
  4038da:	7010      	strb	r0, [r2, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
  4038dc:	800b      	strh	r3, [r1, #0]

	return SPI_OK;
  4038de:	2000      	movs	r0, #0
  4038e0:	e000      	b.n	4038e4 <spi_read+0x2c>
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
  4038e2:	2001      	movs	r0, #1
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);

	return SPI_OK;
}
  4038e4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4038e8:	4770      	bx	lr
  4038ea:	bf00      	nop

004038ec <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  4038ec:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  4038ee:	f643 2499 	movw	r4, #15001	; 0x3a99
  4038f2:	e001      	b.n	4038f8 <spi_write+0xc>
		if (!timeout--) {
  4038f4:	3c01      	subs	r4, #1
  4038f6:	d011      	beq.n	40391c <spi_write+0x30>
		uint8_t uc_pcs, uint8_t uc_last)
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  4038f8:	6905      	ldr	r5, [r0, #16]
  4038fa:	f015 0f02 	tst.w	r5, #2
  4038fe:	d0f9      	beq.n	4038f4 <spi_write+0x8>
  403900:	6844      	ldr	r4, [r0, #4]
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  403902:	f014 0f02 	tst.w	r4, #2
  403906:	d006      	beq.n	403916 <spi_write+0x2a>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  403908:	0412      	lsls	r2, r2, #16
  40390a:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  40390e:	4311      	orrs	r1, r2
		if (uc_last) {
  403910:	b10b      	cbz	r3, 403916 <spi_write+0x2a>
			value |= SPI_TDR_LASTXFER;
  403912:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  403916:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  403918:	2000      	movs	r0, #0
  40391a:	e000      	b.n	40391e <spi_write+0x32>
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
  40391c:	2001      	movs	r0, #1
	}

	p_spi->SPI_TDR = value;

	return SPI_OK;
}
  40391e:	bc30      	pop	{r4, r5}
  403920:	4770      	bx	lr
  403922:	bf00      	nop

00403924 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  403924:	b132      	cbz	r2, 403934 <spi_set_clock_polarity+0x10>
  403926:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  40392a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40392c:	f043 0301 	orr.w	r3, r3, #1
  403930:	6303      	str	r3, [r0, #48]	; 0x30
  403932:	4770      	bx	lr
  403934:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  403938:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40393a:	f023 0301 	bic.w	r3, r3, #1
  40393e:	6303      	str	r3, [r0, #48]	; 0x30
  403940:	4770      	bx	lr
  403942:	bf00      	nop

00403944 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  403944:	b132      	cbz	r2, 403954 <spi_set_clock_phase+0x10>
  403946:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  40394a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40394c:	f043 0302 	orr.w	r3, r3, #2
  403950:	6303      	str	r3, [r0, #48]	; 0x30
  403952:	4770      	bx	lr
  403954:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  403958:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40395a:	f023 0302 	bic.w	r3, r3, #2
  40395e:	6303      	str	r3, [r0, #48]	; 0x30
  403960:	4770      	bx	lr
  403962:	bf00      	nop

00403964 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  403964:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  403968:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40396a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  40396e:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  403970:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  403972:	431a      	orrs	r2, r3
  403974:	630a      	str	r2, [r1, #48]	; 0x30
  403976:	4770      	bx	lr

00403978 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  403978:	1e43      	subs	r3, r0, #1
  40397a:	4419      	add	r1, r3
  40397c:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  403980:	1e43      	subs	r3, r0, #1
  403982:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  403984:	bf94      	ite	ls
  403986:	b200      	sxthls	r0, r0
{
	int baud_div = div_ceil(mck, baudrate);

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
		return -1;
  403988:	f04f 30ff 	movhi.w	r0, #4294967295
	}

	return baud_div;
}
  40398c:	4770      	bx	lr
  40398e:	bf00      	nop

00403990 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  403990:	b16a      	cbz	r2, 4039ae <spi_set_baudrate_div+0x1e>
 * \retval is 0 Success.
 * \retval is -1 Error.
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
  403992:	b410      	push	{r4}
  403994:	4614      	mov	r4, r2
  403996:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  40399a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40399c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  4039a0:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  4039a2:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  4039a4:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  4039a8:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  4039aa:	2000      	movs	r0, #0
  4039ac:	e002      	b.n	4039b4 <spi_set_baudrate_div+0x24>
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
        return -1;
  4039ae:	f04f 30ff 	mov.w	r0, #4294967295
  4039b2:	4770      	bx	lr

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
    return 0;
}
  4039b4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4039b8:	4770      	bx	lr
  4039ba:	bf00      	nop

004039bc <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  4039bc:	b410      	push	{r4}
  4039be:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  4039c2:	6b08      	ldr	r0, [r1, #48]	; 0x30
  4039c4:	b280      	uxth	r0, r0
  4039c6:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  4039c8:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  4039ca:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  4039ce:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  4039d2:	630a      	str	r2, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  4039d4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4039d8:	4770      	bx	lr
  4039da:	bf00      	nop

004039dc <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4039dc:	6943      	ldr	r3, [r0, #20]
  4039de:	f013 0f02 	tst.w	r3, #2
  4039e2:	d002      	beq.n	4039ea <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  4039e4:	61c1      	str	r1, [r0, #28]
	return 0;
  4039e6:	2000      	movs	r0, #0
  4039e8:	4770      	bx	lr
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  4039ea:	2001      	movs	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  4039ec:	4770      	bx	lr
  4039ee:	bf00      	nop

004039f0 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4039f0:	6943      	ldr	r3, [r0, #20]
  4039f2:	f013 0f01 	tst.w	r3, #1
  4039f6:	d003      	beq.n	403a00 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4039f8:	6983      	ldr	r3, [r0, #24]
  4039fa:	700b      	strb	r3, [r1, #0]
	return 0;
  4039fc:	2000      	movs	r0, #0
  4039fe:	4770      	bx	lr
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  403a00:	2001      	movs	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  403a02:	4770      	bx	lr

00403a04 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  403a04:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  403a06:	010c      	lsls	r4, r1, #4
  403a08:	4294      	cmp	r4, r2
  403a0a:	d90f      	bls.n	403a2c <usart_set_async_baudrate+0x28>
  403a0c:	e01a      	b.n	403a44 <usart_set_async_baudrate+0x40>
		return 1;
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  403a0e:	6841      	ldr	r1, [r0, #4]
  403a10:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  403a14:	6041      	str	r1, [r0, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  403a16:	0412      	lsls	r2, r2, #16
  403a18:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  403a1c:	431a      	orrs	r2, r3
  403a1e:	6202      	str	r2, [r0, #32]

	return 0;
  403a20:	2000      	movs	r0, #0
  403a22:	e01c      	b.n	403a5e <usart_set_async_baudrate+0x5a>
	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
		return 1;
  403a24:	2001      	movs	r0, #1
  403a26:	e01a      	b.n	403a5e <usart_set_async_baudrate+0x5a>
  403a28:	2001      	movs	r0, #1
  403a2a:	e018      	b.n	403a5e <usart_set_async_baudrate+0x5a>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  403a2c:	0863      	lsrs	r3, r4, #1
  403a2e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  403a32:	fbb2 f2f4 	udiv	r2, r2, r4
	cd = cd_fp >> 3;
  403a36:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  403a38:	1e5c      	subs	r4, r3, #1
  403a3a:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  403a3e:	428c      	cmp	r4, r1
  403a40:	d9e9      	bls.n	403a16 <usart_set_async_baudrate+0x12>
  403a42:	e7ef      	b.n	403a24 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  403a44:	00c9      	lsls	r1, r1, #3
  403a46:	084b      	lsrs	r3, r1, #1
  403a48:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  403a4c:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  403a50:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  403a52:	1e5c      	subs	r4, r3, #1
  403a54:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  403a58:	428c      	cmp	r4, r1
  403a5a:	d8e5      	bhi.n	403a28 <usart_set_async_baudrate+0x24>
  403a5c:	e7d7      	b.n	403a0e <usart_set_async_baudrate+0xa>

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);

	return 0;
}
  403a5e:	f85d 4b04 	ldr.w	r4, [sp], #4
  403a62:	4770      	bx	lr

00403a64 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  403a64:	4b08      	ldr	r3, [pc, #32]	; (403a88 <usart_reset+0x24>)
  403a66:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
{
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  403a6a:	2300      	movs	r3, #0
  403a6c:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  403a6e:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  403a70:	6283      	str	r3, [r0, #40]	; 0x28
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  403a72:	2388      	movs	r3, #136	; 0x88
  403a74:	6003      	str	r3, [r0, #0]
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  403a76:	2324      	movs	r3, #36	; 0x24
  403a78:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
  403a7a:	f44f 7380 	mov.w	r3, #256	; 0x100
  403a7e:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
  403a80:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  403a84:	6003      	str	r3, [r0, #0]
  403a86:	4770      	bx	lr
  403a88:	55534100 	.word	0x55534100

00403a8c <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  403a8c:	b570      	push	{r4, r5, r6, lr}
  403a8e:	4605      	mov	r5, r0
  403a90:	460c      	mov	r4, r1
  403a92:	4616      	mov	r6, r2
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  403a94:	4b0f      	ldr	r3, [pc, #60]	; (403ad4 <usart_init_rs232+0x48>)
  403a96:	4798      	blx	r3

	ul_reg_val = 0;
  403a98:	2200      	movs	r2, #0
  403a9a:	4b0f      	ldr	r3, [pc, #60]	; (403ad8 <usart_init_rs232+0x4c>)
  403a9c:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  403a9e:	b19c      	cbz	r4, 403ac8 <usart_init_rs232+0x3c>
  403aa0:	4632      	mov	r2, r6
  403aa2:	6821      	ldr	r1, [r4, #0]
  403aa4:	4628      	mov	r0, r5
  403aa6:	4b0d      	ldr	r3, [pc, #52]	; (403adc <usart_init_rs232+0x50>)
  403aa8:	4798      	blx	r3
  403aaa:	4602      	mov	r2, r0
  403aac:	b970      	cbnz	r0, 403acc <usart_init_rs232+0x40>
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  403aae:	6861      	ldr	r1, [r4, #4]
  403ab0:	68a3      	ldr	r3, [r4, #8]
  403ab2:	4319      	orrs	r1, r3
  403ab4:	6923      	ldr	r3, [r4, #16]
  403ab6:	4319      	orrs	r1, r3
  403ab8:	68e3      	ldr	r3, [r4, #12]
  403aba:	430b      	orrs	r3, r1
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  403abc:	4906      	ldr	r1, [pc, #24]	; (403ad8 <usart_init_rs232+0x4c>)
  403abe:	600b      	str	r3, [r1, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;
  403ac0:	6869      	ldr	r1, [r5, #4]
  403ac2:	430b      	orrs	r3, r1
  403ac4:	606b      	str	r3, [r5, #4]

	return 0;
  403ac6:	e002      	b.n	403ace <usart_init_rs232+0x42>

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  403ac8:	2201      	movs	r2, #1
  403aca:	e000      	b.n	403ace <usart_init_rs232+0x42>
  403acc:	2201      	movs	r2, #1
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;

	return 0;
}
  403ace:	4610      	mov	r0, r2
  403ad0:	bd70      	pop	{r4, r5, r6, pc}
  403ad2:	bf00      	nop
  403ad4:	00403a65 	.word	0x00403a65
  403ad8:	204009c0 	.word	0x204009c0
  403adc:	00403a05 	.word	0x00403a05

00403ae0 <usart_enable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXEN;
  403ae0:	2340      	movs	r3, #64	; 0x40
  403ae2:	6003      	str	r3, [r0, #0]
  403ae4:	4770      	bx	lr
  403ae6:	bf00      	nop

00403ae8 <usart_enable_rx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RXEN;
  403ae8:	2310      	movs	r3, #16
  403aea:	6003      	str	r3, [r0, #0]
  403aec:	4770      	bx	lr
  403aee:	bf00      	nop

00403af0 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  403af0:	6943      	ldr	r3, [r0, #20]
  403af2:	f013 0f02 	tst.w	r3, #2
  403af6:	d004      	beq.n	403b02 <usart_write+0x12>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  403af8:	f3c1 0108 	ubfx	r1, r1, #0, #9
  403afc:	61c1      	str	r1, [r0, #28]
	return 0;
  403afe:	2000      	movs	r0, #0
  403b00:	4770      	bx	lr
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  403b02:	2001      	movs	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  403b04:	4770      	bx	lr
  403b06:	bf00      	nop

00403b08 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  403b08:	6943      	ldr	r3, [r0, #20]
  403b0a:	f013 0f01 	tst.w	r3, #1
  403b0e:	d005      	beq.n	403b1c <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  403b10:	6983      	ldr	r3, [r0, #24]
  403b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
  403b16:	600b      	str	r3, [r1, #0]

	return 0;
  403b18:	2000      	movs	r0, #0
  403b1a:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  403b1c:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  403b1e:	4770      	bx	lr

00403b20 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  403b20:	e7fe      	b.n	403b20 <Dummy_Handler>
  403b22:	bf00      	nop

00403b24 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  403b24:	b500      	push	{lr}
  403b26:	b083      	sub	sp, #12

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
  403b28:	4b27      	ldr	r3, [pc, #156]	; (403bc8 <Reset_Handler+0xa4>)
  403b2a:	4a28      	ldr	r2, [pc, #160]	; (403bcc <Reset_Handler+0xa8>)
  403b2c:	429a      	cmp	r2, r3
  403b2e:	d003      	beq.n	403b38 <Reset_Handler+0x14>
                for (; pDest < &_erelocate;) {
  403b30:	4b27      	ldr	r3, [pc, #156]	; (403bd0 <Reset_Handler+0xac>)
  403b32:	4a25      	ldr	r2, [pc, #148]	; (403bc8 <Reset_Handler+0xa4>)
  403b34:	429a      	cmp	r2, r3
  403b36:	d304      	bcc.n	403b42 <Reset_Handler+0x1e>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  403b38:	4b26      	ldr	r3, [pc, #152]	; (403bd4 <Reset_Handler+0xb0>)
  403b3a:	4a27      	ldr	r2, [pc, #156]	; (403bd8 <Reset_Handler+0xb4>)
  403b3c:	429a      	cmp	r2, r3
  403b3e:	d30f      	bcc.n	403b60 <Reset_Handler+0x3c>
  403b40:	e01a      	b.n	403b78 <Reset_Handler+0x54>
  403b42:	4921      	ldr	r1, [pc, #132]	; (403bc8 <Reset_Handler+0xa4>)
  403b44:	4b25      	ldr	r3, [pc, #148]	; (403bdc <Reset_Handler+0xb8>)
  403b46:	1a5b      	subs	r3, r3, r1
  403b48:	f023 0303 	bic.w	r3, r3, #3
  403b4c:	3304      	adds	r3, #4
  403b4e:	4a1f      	ldr	r2, [pc, #124]	; (403bcc <Reset_Handler+0xa8>)
  403b50:	4413      	add	r3, r2
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
                        *pDest++ = *pSrc++;
  403b52:	f852 0b04 	ldr.w	r0, [r2], #4
  403b56:	f841 0b04 	str.w	r0, [r1], #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  403b5a:	429a      	cmp	r2, r3
  403b5c:	d1f9      	bne.n	403b52 <Reset_Handler+0x2e>
  403b5e:	e7eb      	b.n	403b38 <Reset_Handler+0x14>
  403b60:	4b1f      	ldr	r3, [pc, #124]	; (403be0 <Reset_Handler+0xbc>)
  403b62:	4a20      	ldr	r2, [pc, #128]	; (403be4 <Reset_Handler+0xc0>)
  403b64:	1ad2      	subs	r2, r2, r3
  403b66:	f022 0203 	bic.w	r2, r2, #3
  403b6a:	441a      	add	r2, r3
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  403b6c:	3b04      	subs	r3, #4
                *pDest++ = 0;
  403b6e:	2100      	movs	r1, #0
  403b70:	f843 1b04 	str.w	r1, [r3], #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  403b74:	4293      	cmp	r3, r2
  403b76:	d1fb      	bne.n	403b70 <Reset_Handler+0x4c>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  403b78:	4a1b      	ldr	r2, [pc, #108]	; (403be8 <Reset_Handler+0xc4>)
  403b7a:	4b1c      	ldr	r3, [pc, #112]	; (403bec <Reset_Handler+0xc8>)
  403b7c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  403b80:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  403b82:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  403b86:	fab3 f383 	clz	r3, r3
  403b8a:	095b      	lsrs	r3, r3, #5
  403b8c:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  403b8e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  403b90:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  403b94:	2200      	movs	r2, #0
  403b96:	4b16      	ldr	r3, [pc, #88]	; (403bf0 <Reset_Handler+0xcc>)
  403b98:	701a      	strb	r2, [r3, #0]
	return flags;
  403b9a:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  403b9c:	4a15      	ldr	r2, [pc, #84]	; (403bf4 <Reset_Handler+0xd0>)
  403b9e:	6813      	ldr	r3, [r2, #0]
  403ba0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  403ba4:	6013      	str	r3, [r2, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  403ba6:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  403baa:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  403bae:	b129      	cbz	r1, 403bbc <Reset_Handler+0x98>
		cpu_irq_enable();
  403bb0:	2201      	movs	r2, #1
  403bb2:	4b0f      	ldr	r3, [pc, #60]	; (403bf0 <Reset_Handler+0xcc>)
  403bb4:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  403bb6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  403bba:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  403bbc:	4b0e      	ldr	r3, [pc, #56]	; (403bf8 <Reset_Handler+0xd4>)
  403bbe:	4798      	blx	r3

        /* Branch to main function */
        main();
  403bc0:	4b0e      	ldr	r3, [pc, #56]	; (403bfc <Reset_Handler+0xd8>)
  403bc2:	4798      	blx	r3
  403bc4:	e7fe      	b.n	403bc4 <Reset_Handler+0xa0>
  403bc6:	bf00      	nop
  403bc8:	20400000 	.word	0x20400000
  403bcc:	0040869c 	.word	0x0040869c
  403bd0:	204008f4 	.word	0x204008f4
  403bd4:	20401050 	.word	0x20401050
  403bd8:	204008f4 	.word	0x204008f4
  403bdc:	204008f3 	.word	0x204008f3
  403be0:	204008f8 	.word	0x204008f8
  403be4:	20401053 	.word	0x20401053
  403be8:	e000ed00 	.word	0xe000ed00
  403bec:	00400000 	.word	0x00400000
  403bf0:	20400014 	.word	0x20400014
  403bf4:	e000ed88 	.word	0xe000ed88
  403bf8:	00404425 	.word	0x00404425
  403bfc:	004041ed 	.word	0x004041ed

00403c00 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  403c00:	4b3c      	ldr	r3, [pc, #240]	; (403cf4 <SystemCoreClockUpdate+0xf4>)
  403c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403c04:	f003 0303 	and.w	r3, r3, #3
  403c08:	2b01      	cmp	r3, #1
  403c0a:	d00f      	beq.n	403c2c <SystemCoreClockUpdate+0x2c>
  403c0c:	b113      	cbz	r3, 403c14 <SystemCoreClockUpdate+0x14>
  403c0e:	2b02      	cmp	r3, #2
  403c10:	d029      	beq.n	403c66 <SystemCoreClockUpdate+0x66>
  403c12:	e057      	b.n	403cc4 <SystemCoreClockUpdate+0xc4>
  {
    case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  403c14:	4b38      	ldr	r3, [pc, #224]	; (403cf8 <SystemCoreClockUpdate+0xf8>)
  403c16:	695b      	ldr	r3, [r3, #20]
  403c18:	f013 0f80 	tst.w	r3, #128	; 0x80
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  403c1c:	bf14      	ite	ne
  403c1e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  403c22:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  403c26:	4b35      	ldr	r3, [pc, #212]	; (403cfc <SystemCoreClockUpdate+0xfc>)
  403c28:	601a      	str	r2, [r3, #0]
  403c2a:	e04b      	b.n	403cc4 <SystemCoreClockUpdate+0xc4>
      }
    break;

    case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  403c2c:	4b31      	ldr	r3, [pc, #196]	; (403cf4 <SystemCoreClockUpdate+0xf4>)
  403c2e:	6a1b      	ldr	r3, [r3, #32]
  403c30:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  403c34:	d003      	beq.n	403c3e <SystemCoreClockUpdate+0x3e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  403c36:	4a32      	ldr	r2, [pc, #200]	; (403d00 <SystemCoreClockUpdate+0x100>)
  403c38:	4b30      	ldr	r3, [pc, #192]	; (403cfc <SystemCoreClockUpdate+0xfc>)
  403c3a:	601a      	str	r2, [r3, #0]
  403c3c:	e042      	b.n	403cc4 <SystemCoreClockUpdate+0xc4>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  403c3e:	4a31      	ldr	r2, [pc, #196]	; (403d04 <SystemCoreClockUpdate+0x104>)
  403c40:	4b2e      	ldr	r3, [pc, #184]	; (403cfc <SystemCoreClockUpdate+0xfc>)
  403c42:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  403c44:	4b2b      	ldr	r3, [pc, #172]	; (403cf4 <SystemCoreClockUpdate+0xf4>)
  403c46:	6a1b      	ldr	r3, [r3, #32]
  403c48:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403c4c:	2b10      	cmp	r3, #16
  403c4e:	d002      	beq.n	403c56 <SystemCoreClockUpdate+0x56>
  403c50:	2b20      	cmp	r3, #32
  403c52:	d004      	beq.n	403c5e <SystemCoreClockUpdate+0x5e>
  403c54:	e036      	b.n	403cc4 <SystemCoreClockUpdate+0xc4>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  403c56:	4a2c      	ldr	r2, [pc, #176]	; (403d08 <SystemCoreClockUpdate+0x108>)
  403c58:	4b28      	ldr	r3, [pc, #160]	; (403cfc <SystemCoreClockUpdate+0xfc>)
  403c5a:	601a      	str	r2, [r3, #0]
          break;
  403c5c:	e032      	b.n	403cc4 <SystemCoreClockUpdate+0xc4>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  403c5e:	4a28      	ldr	r2, [pc, #160]	; (403d00 <SystemCoreClockUpdate+0x100>)
  403c60:	4b26      	ldr	r3, [pc, #152]	; (403cfc <SystemCoreClockUpdate+0xfc>)
  403c62:	601a      	str	r2, [r3, #0]
          break;
  403c64:	e02e      	b.n	403cc4 <SystemCoreClockUpdate+0xc4>
        }
      }
    break;

    case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  403c66:	4b23      	ldr	r3, [pc, #140]	; (403cf4 <SystemCoreClockUpdate+0xf4>)
  403c68:	6a1b      	ldr	r3, [r3, #32]
  403c6a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  403c6e:	d003      	beq.n	403c78 <SystemCoreClockUpdate+0x78>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  403c70:	4a23      	ldr	r2, [pc, #140]	; (403d00 <SystemCoreClockUpdate+0x100>)
  403c72:	4b22      	ldr	r3, [pc, #136]	; (403cfc <SystemCoreClockUpdate+0xfc>)
  403c74:	601a      	str	r2, [r3, #0]
  403c76:	e012      	b.n	403c9e <SystemCoreClockUpdate+0x9e>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  403c78:	4a22      	ldr	r2, [pc, #136]	; (403d04 <SystemCoreClockUpdate+0x104>)
  403c7a:	4b20      	ldr	r3, [pc, #128]	; (403cfc <SystemCoreClockUpdate+0xfc>)
  403c7c:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  403c7e:	4b1d      	ldr	r3, [pc, #116]	; (403cf4 <SystemCoreClockUpdate+0xf4>)
  403c80:	6a1b      	ldr	r3, [r3, #32]
  403c82:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403c86:	2b10      	cmp	r3, #16
  403c88:	d002      	beq.n	403c90 <SystemCoreClockUpdate+0x90>
  403c8a:	2b20      	cmp	r3, #32
  403c8c:	d004      	beq.n	403c98 <SystemCoreClockUpdate+0x98>
  403c8e:	e006      	b.n	403c9e <SystemCoreClockUpdate+0x9e>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  403c90:	4a1d      	ldr	r2, [pc, #116]	; (403d08 <SystemCoreClockUpdate+0x108>)
  403c92:	4b1a      	ldr	r3, [pc, #104]	; (403cfc <SystemCoreClockUpdate+0xfc>)
  403c94:	601a      	str	r2, [r3, #0]
          break;
  403c96:	e002      	b.n	403c9e <SystemCoreClockUpdate+0x9e>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  403c98:	4a19      	ldr	r2, [pc, #100]	; (403d00 <SystemCoreClockUpdate+0x100>)
  403c9a:	4b18      	ldr	r3, [pc, #96]	; (403cfc <SystemCoreClockUpdate+0xfc>)
  403c9c:	601a      	str	r2, [r3, #0]
          default:
          break;
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  403c9e:	4b15      	ldr	r3, [pc, #84]	; (403cf4 <SystemCoreClockUpdate+0xf4>)
  403ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403ca2:	f003 0303 	and.w	r3, r3, #3
  403ca6:	2b02      	cmp	r3, #2
  403ca8:	d10c      	bne.n	403cc4 <SystemCoreClockUpdate+0xc4>
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  403caa:	4a12      	ldr	r2, [pc, #72]	; (403cf4 <SystemCoreClockUpdate+0xf4>)
  403cac:	6a93      	ldr	r3, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  403cae:	6a92      	ldr	r2, [r2, #40]	; 0x28
  403cb0:	4812      	ldr	r0, [pc, #72]	; (403cfc <SystemCoreClockUpdate+0xfc>)
  403cb2:	f3c3 410a 	ubfx	r1, r3, #16, #11
  403cb6:	6803      	ldr	r3, [r0, #0]
  403cb8:	fb01 3303 	mla	r3, r1, r3, r3
  403cbc:	b2d2      	uxtb	r2, r2
  403cbe:	fbb3 f3f2 	udiv	r3, r3, r2
  403cc2:	6003      	str	r3, [r0, #0]

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  403cc4:	4b0b      	ldr	r3, [pc, #44]	; (403cf4 <SystemCoreClockUpdate+0xf4>)
  403cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403cc8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403ccc:	2b70      	cmp	r3, #112	; 0x70
  403cce:	d107      	bne.n	403ce0 <SystemCoreClockUpdate+0xe0>
  {
    SystemCoreClock /= 3U;
  403cd0:	4a0a      	ldr	r2, [pc, #40]	; (403cfc <SystemCoreClockUpdate+0xfc>)
  403cd2:	6813      	ldr	r3, [r2, #0]
  403cd4:	490d      	ldr	r1, [pc, #52]	; (403d0c <SystemCoreClockUpdate+0x10c>)
  403cd6:	fba1 1303 	umull	r1, r3, r1, r3
  403cda:	085b      	lsrs	r3, r3, #1
  403cdc:	6013      	str	r3, [r2, #0]
  403cde:	4770      	bx	lr
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  403ce0:	4b04      	ldr	r3, [pc, #16]	; (403cf4 <SystemCoreClockUpdate+0xf4>)
  403ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403ce4:	4905      	ldr	r1, [pc, #20]	; (403cfc <SystemCoreClockUpdate+0xfc>)
  403ce6:	f3c3 1202 	ubfx	r2, r3, #4, #3
  403cea:	680b      	ldr	r3, [r1, #0]
  403cec:	40d3      	lsrs	r3, r2
  403cee:	600b      	str	r3, [r1, #0]
  403cf0:	4770      	bx	lr
  403cf2:	bf00      	nop
  403cf4:	400e0600 	.word	0x400e0600
  403cf8:	400e1810 	.word	0x400e1810
  403cfc:	20400018 	.word	0x20400018
  403d00:	00b71b00 	.word	0x00b71b00
  403d04:	003d0900 	.word	0x003d0900
  403d08:	007a1200 	.word	0x007a1200
  403d0c:	aaaaaaab 	.word	0xaaaaaaab

00403d10 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  403d10:	4b12      	ldr	r3, [pc, #72]	; (403d5c <system_init_flash+0x4c>)
  403d12:	4298      	cmp	r0, r3
  403d14:	d804      	bhi.n	403d20 <system_init_flash+0x10>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  403d16:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  403d1a:	4b11      	ldr	r3, [pc, #68]	; (403d60 <system_init_flash+0x50>)
  403d1c:	601a      	str	r2, [r3, #0]
  403d1e:	4770      	bx	lr
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  403d20:	4b10      	ldr	r3, [pc, #64]	; (403d64 <system_init_flash+0x54>)
  403d22:	4298      	cmp	r0, r3
  403d24:	d803      	bhi.n	403d2e <system_init_flash+0x1e>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  403d26:	4a10      	ldr	r2, [pc, #64]	; (403d68 <system_init_flash+0x58>)
  403d28:	4b0d      	ldr	r3, [pc, #52]	; (403d60 <system_init_flash+0x50>)
  403d2a:	601a      	str	r2, [r3, #0]
  403d2c:	4770      	bx	lr
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  403d2e:	4b0f      	ldr	r3, [pc, #60]	; (403d6c <system_init_flash+0x5c>)
  403d30:	4298      	cmp	r0, r3
  403d32:	d803      	bhi.n	403d3c <system_init_flash+0x2c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  403d34:	4a0e      	ldr	r2, [pc, #56]	; (403d70 <system_init_flash+0x60>)
  403d36:	4b0a      	ldr	r3, [pc, #40]	; (403d60 <system_init_flash+0x50>)
  403d38:	601a      	str	r2, [r3, #0]
  403d3a:	4770      	bx	lr
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  403d3c:	4b0d      	ldr	r3, [pc, #52]	; (403d74 <system_init_flash+0x64>)
  403d3e:	4298      	cmp	r0, r3
  403d40:	d803      	bhi.n	403d4a <system_init_flash+0x3a>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  403d42:	4a0d      	ldr	r2, [pc, #52]	; (403d78 <system_init_flash+0x68>)
  403d44:	4b06      	ldr	r3, [pc, #24]	; (403d60 <system_init_flash+0x50>)
  403d46:	601a      	str	r2, [r3, #0]
  403d48:	4770      	bx	lr
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  403d4a:	4b0c      	ldr	r3, [pc, #48]	; (403d7c <system_init_flash+0x6c>)
  403d4c:	4298      	cmp	r0, r3
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  403d4e:	bf94      	ite	ls
  403d50:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  403d54:	4a0a      	ldrhi	r2, [pc, #40]	; (403d80 <system_init_flash+0x70>)
  403d56:	4b02      	ldr	r3, [pc, #8]	; (403d60 <system_init_flash+0x50>)
  403d58:	601a      	str	r2, [r3, #0]
  403d5a:	4770      	bx	lr
  403d5c:	01312cff 	.word	0x01312cff
  403d60:	400e0c00 	.word	0x400e0c00
  403d64:	026259ff 	.word	0x026259ff
  403d68:	04000100 	.word	0x04000100
  403d6c:	039386ff 	.word	0x039386ff
  403d70:	04000200 	.word	0x04000200
  403d74:	04c4b3ff 	.word	0x04c4b3ff
  403d78:	04000300 	.word	0x04000300
  403d7c:	05f5e0ff 	.word	0x05f5e0ff
  403d80:	04000500 	.word	0x04000500

00403d84 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  403d84:	4b09      	ldr	r3, [pc, #36]	; (403dac <_sbrk+0x28>)
  403d86:	681b      	ldr	r3, [r3, #0]
  403d88:	b913      	cbnz	r3, 403d90 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  403d8a:	4a09      	ldr	r2, [pc, #36]	; (403db0 <_sbrk+0x2c>)
  403d8c:	4b07      	ldr	r3, [pc, #28]	; (403dac <_sbrk+0x28>)
  403d8e:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  403d90:	4b06      	ldr	r3, [pc, #24]	; (403dac <_sbrk+0x28>)
  403d92:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  403d94:	181a      	adds	r2, r3, r0
  403d96:	4907      	ldr	r1, [pc, #28]	; (403db4 <_sbrk+0x30>)
  403d98:	4291      	cmp	r1, r2
  403d9a:	db04      	blt.n	403da6 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  403d9c:	4610      	mov	r0, r2
  403d9e:	4a03      	ldr	r2, [pc, #12]	; (403dac <_sbrk+0x28>)
  403da0:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  403da2:	4618      	mov	r0, r3
  403da4:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  403da6:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  403daa:	4770      	bx	lr
  403dac:	204009c4 	.word	0x204009c4
  403db0:	20403250 	.word	0x20403250
  403db4:	2045fffc 	.word	0x2045fffc

00403db8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  403db8:	f04f 30ff 	mov.w	r0, #4294967295
  403dbc:	4770      	bx	lr
  403dbe:	bf00      	nop

00403dc0 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  403dc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  403dc4:	604b      	str	r3, [r1, #4]

	return 0;
}
  403dc6:	2000      	movs	r0, #0
  403dc8:	4770      	bx	lr
  403dca:	bf00      	nop

00403dcc <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  403dcc:	2001      	movs	r0, #1
  403dce:	4770      	bx	lr

00403dd0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  403dd0:	2000      	movs	r0, #0
  403dd2:	4770      	bx	lr

00403dd4 <resolve_cb>:
 * \param[in] hostIp Server IP.
 *
 * \return None.
 */
static void resolve_cb(uint8_t *hostName, uint32_t hostIp)
{
  403dd4:	b570      	push	{r4, r5, r6, lr}
  403dd6:	b082      	sub	sp, #8
  403dd8:	4606      	mov	r6, r0
  403dda:	460c      	mov	r4, r1
	gu32HostIp = hostIp;
  403ddc:	4b0a      	ldr	r3, [pc, #40]	; (403e08 <resolve_cb+0x34>)
  403dde:	6019      	str	r1, [r3, #0]
	printf("HOST IP : 0x%X", hostIp);
  403de0:	480a      	ldr	r0, [pc, #40]	; (403e0c <resolve_cb+0x38>)
  403de2:	4d0b      	ldr	r5, [pc, #44]	; (403e10 <resolve_cb+0x3c>)
  403de4:	47a8      	blx	r5
	gbHostIpByName = true;
  403de6:	2201      	movs	r2, #1
  403de8:	4b0a      	ldr	r3, [pc, #40]	; (403e14 <resolve_cb+0x40>)
  403dea:	701a      	strb	r2, [r3, #0]
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", hostName,
  403dec:	0e23      	lsrs	r3, r4, #24
  403dee:	9301      	str	r3, [sp, #4]
  403df0:	f3c4 4307 	ubfx	r3, r4, #16, #8
  403df4:	9300      	str	r3, [sp, #0]
  403df6:	f3c4 2307 	ubfx	r3, r4, #8, #8
  403dfa:	b2e2      	uxtb	r2, r4
  403dfc:	4631      	mov	r1, r6
  403dfe:	4806      	ldr	r0, [pc, #24]	; (403e18 <resolve_cb+0x44>)
  403e00:	47a8      	blx	r5
			(int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
			(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
}
  403e02:	b002      	add	sp, #8
  403e04:	bd70      	pop	{r4, r5, r6, pc}
  403e06:	bf00      	nop
  403e08:	20400f44 	.word	0x20400f44
  403e0c:	00408388 	.word	0x00408388
  403e10:	00404475 	.word	0x00404475
  403e14:	20400f48 	.word	0x20400f48
  403e18:	00408398 	.word	0x00408398

00403e1c <set_dev_name_to_mac>:
		}
	}
}

static void set_dev_name_to_mac(uint8_t *name, uint8_t *mac_addr)
{
  403e1c:	b538      	push	{r3, r4, r5, lr}
  403e1e:	4604      	mov	r4, r0
  403e20:	460d      	mov	r5, r1
	/* Name must be in the format WINC1500_00:00 */
	uint16 len;

	len = m2m_strlen(name);
  403e22:	4b13      	ldr	r3, [pc, #76]	; (403e70 <set_dev_name_to_mac+0x54>)
  403e24:	4798      	blx	r3
	if (len >= 5) {
  403e26:	2804      	cmp	r0, #4
  403e28:	d921      	bls.n	403e6e <set_dev_name_to_mac+0x52>
		name[len - 1] = MAIN_HEX2ASCII((mac_addr[5] >> 0) & 0x0f);
  403e2a:	1e42      	subs	r2, r0, #1
  403e2c:	796b      	ldrb	r3, [r5, #5]
  403e2e:	f003 030f 	and.w	r3, r3, #15
  403e32:	2b09      	cmp	r3, #9
  403e34:	bfcc      	ite	gt
  403e36:	3337      	addgt	r3, #55	; 0x37
  403e38:	3330      	addle	r3, #48	; 0x30
  403e3a:	54a3      	strb	r3, [r4, r2]
		name[len - 2] = MAIN_HEX2ASCII((mac_addr[5] >> 4) & 0x0f);
  403e3c:	1e82      	subs	r2, r0, #2
  403e3e:	796b      	ldrb	r3, [r5, #5]
  403e40:	091b      	lsrs	r3, r3, #4
  403e42:	2b09      	cmp	r3, #9
  403e44:	bfcc      	ite	gt
  403e46:	3337      	addgt	r3, #55	; 0x37
  403e48:	3330      	addle	r3, #48	; 0x30
  403e4a:	54a3      	strb	r3, [r4, r2]
		name[len - 4] = MAIN_HEX2ASCII((mac_addr[4] >> 0) & 0x0f);
  403e4c:	1f02      	subs	r2, r0, #4
  403e4e:	792b      	ldrb	r3, [r5, #4]
  403e50:	f003 030f 	and.w	r3, r3, #15
  403e54:	2b09      	cmp	r3, #9
  403e56:	bfcc      	ite	gt
  403e58:	3337      	addgt	r3, #55	; 0x37
  403e5a:	3330      	addle	r3, #48	; 0x30
  403e5c:	54a3      	strb	r3, [r4, r2]
		name[len - 5] = MAIN_HEX2ASCII((mac_addr[4] >> 4) & 0x0f);
  403e5e:	3805      	subs	r0, #5
  403e60:	792b      	ldrb	r3, [r5, #4]
  403e62:	091b      	lsrs	r3, r3, #4
  403e64:	2b09      	cmp	r3, #9
  403e66:	bfcc      	ite	gt
  403e68:	3337      	addgt	r3, #55	; 0x37
  403e6a:	3330      	addle	r3, #48	; 0x30
  403e6c:	5423      	strb	r3, [r4, r0]
  403e6e:	bd38      	pop	{r3, r4, r5, pc}
  403e70:	00400579 	.word	0x00400579

00403e74 <socket_cb>:
 * \param[in] pvMsg A structure contains notification informations.
 *
 * \return None.
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
  403e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Check for socket event on TCP socket. */
	if (sock == tcp_client_socket) {
  403e76:	4b38      	ldr	r3, [pc, #224]	; (403f58 <socket_cb+0xe4>)
  403e78:	f993 5000 	ldrsb.w	r5, [r3]
  403e7c:	4285      	cmp	r5, r0
  403e7e:	d16a      	bne.n	403f56 <socket_cb+0xe2>
  403e80:	4614      	mov	r4, r2
		switch (u8Msg) {
  403e82:	2905      	cmp	r1, #5
  403e84:	d002      	beq.n	403e8c <socket_cb+0x18>
  403e86:	2906      	cmp	r1, #6
  403e88:	d042      	beq.n	403f10 <socket_cb+0x9c>
  403e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		case SOCKET_MSG_CONNECT:
		{
			if (gbTcpConnection) {
  403e8c:	4b33      	ldr	r3, [pc, #204]	; (403f5c <socket_cb+0xe8>)
  403e8e:	781b      	ldrb	r3, [r3, #0]
  403e90:	2b00      	cmp	r3, #0
  403e92:	d060      	beq.n	403f56 <socket_cb+0xe2>
				memset(gau8ReceivedBuffer, 0, sizeof(gau8ReceivedBuffer));
  403e94:	4e32      	ldr	r6, [pc, #200]	; (403f60 <socket_cb+0xec>)
  403e96:	f44f 62af 	mov.w	r2, #1400	; 0x578
  403e9a:	2100      	movs	r1, #0
  403e9c:	4630      	mov	r0, r6
  403e9e:	4b31      	ldr	r3, [pc, #196]	; (403f64 <socket_cb+0xf0>)
  403ea0:	4798      	blx	r3
				sprintf((char *)gau8ReceivedBuffer, "%s", MAIN_PREFIX_BUFFER);
  403ea2:	4f31      	ldr	r7, [pc, #196]	; (403f68 <socket_cb+0xf4>)
  403ea4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
  403ea6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  403ea8:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
  403eac:	c603      	stmia	r6!, {r0, r1}
  403eae:	f826 2b02 	strh.w	r2, [r6], #2
  403eb2:	0c12      	lsrs	r2, r2, #16
  403eb4:	7032      	strb	r2, [r6, #0]

				tstrSocketConnectMsg *pstrConnect = (tstrSocketConnectMsg *)pvMsg;
				if (pstrConnect && pstrConnect->s8Error >= SOCK_ERR_NO_ERROR) {
  403eb6:	b1ec      	cbz	r4, 403ef4 <socket_cb+0x80>
  403eb8:	f994 3001 	ldrsb.w	r3, [r4, #1]
  403ebc:	2b00      	cmp	r3, #0
  403ebe:	db19      	blt.n	403ef4 <socket_cb+0x80>
					send(tcp_client_socket, gau8ReceivedBuffer, strlen((char *)gau8ReceivedBuffer), 0);
  403ec0:	4c27      	ldr	r4, [pc, #156]	; (403f60 <socket_cb+0xec>)
  403ec2:	4620      	mov	r0, r4
  403ec4:	4b29      	ldr	r3, [pc, #164]	; (403f6c <socket_cb+0xf8>)
  403ec6:	4798      	blx	r3
  403ec8:	2300      	movs	r3, #0
  403eca:	b282      	uxth	r2, r0
  403ecc:	4621      	mov	r1, r4
  403ece:	4628      	mov	r0, r5
  403ed0:	4d27      	ldr	r5, [pc, #156]	; (403f70 <socket_cb+0xfc>)
  403ed2:	47a8      	blx	r5

					memset(gau8ReceivedBuffer, 0, MAIN_WIFI_M2M_BUFFER_SIZE);
  403ed4:	f44f 65af 	mov.w	r5, #1400	; 0x578
  403ed8:	462a      	mov	r2, r5
  403eda:	2100      	movs	r1, #0
  403edc:	4620      	mov	r0, r4
  403ede:	4b21      	ldr	r3, [pc, #132]	; (403f64 <socket_cb+0xf0>)
  403ee0:	4798      	blx	r3
					recv(tcp_client_socket, &gau8ReceivedBuffer[0], MAIN_WIFI_M2M_BUFFER_SIZE, 0);
  403ee2:	2300      	movs	r3, #0
  403ee4:	462a      	mov	r2, r5
  403ee6:	4621      	mov	r1, r4
  403ee8:	481b      	ldr	r0, [pc, #108]	; (403f58 <socket_cb+0xe4>)
  403eea:	f990 0000 	ldrsb.w	r0, [r0]
  403eee:	4c21      	ldr	r4, [pc, #132]	; (403f74 <socket_cb+0x100>)
  403ef0:	47a0      	blx	r4
  403ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				} else {
					printf("socket_cb: connect error!\r\n");
  403ef4:	4820      	ldr	r0, [pc, #128]	; (403f78 <socket_cb+0x104>)
  403ef6:	4b21      	ldr	r3, [pc, #132]	; (403f7c <socket_cb+0x108>)
  403ef8:	4798      	blx	r3
					gbTcpConnection = false;
  403efa:	2200      	movs	r2, #0
  403efc:	4b17      	ldr	r3, [pc, #92]	; (403f5c <socket_cb+0xe8>)
  403efe:	701a      	strb	r2, [r3, #0]
					close(tcp_client_socket);
  403f00:	4c15      	ldr	r4, [pc, #84]	; (403f58 <socket_cb+0xe4>)
  403f02:	f994 0000 	ldrsb.w	r0, [r4]
  403f06:	4b1e      	ldr	r3, [pc, #120]	; (403f80 <socket_cb+0x10c>)
  403f08:	4798      	blx	r3
					tcp_client_socket = -1;
  403f0a:	23ff      	movs	r3, #255	; 0xff
  403f0c:	7023      	strb	r3, [r4, #0]
  403f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		{
			char *pcIndxPtr;
			char *pcEndPtr;

			tstrSocketRecvMsg *pstrRecv = (tstrSocketRecvMsg *)pvMsg;
			if (pstrRecv && pstrRecv->s16BufferSize > 0) {
  403f10:	b1ba      	cbz	r2, 403f42 <socket_cb+0xce>
  403f12:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
  403f16:	2b00      	cmp	r3, #0
  403f18:	dd13      	ble.n	403f42 <socket_cb+0xce>
				printf(pstrRecv->pu8Buffer);
  403f1a:	6810      	ldr	r0, [r2, #0]
  403f1c:	4b17      	ldr	r3, [pc, #92]	; (403f7c <socket_cb+0x108>)
  403f1e:	4798      	blx	r3
				memset(gau8ReceivedBuffer, 0, sizeof(gau8ReceivedBuffer));
  403f20:	4c0f      	ldr	r4, [pc, #60]	; (403f60 <socket_cb+0xec>)
  403f22:	f44f 65af 	mov.w	r5, #1400	; 0x578
  403f26:	462a      	mov	r2, r5
  403f28:	2100      	movs	r1, #0
  403f2a:	4620      	mov	r0, r4
  403f2c:	4b0d      	ldr	r3, [pc, #52]	; (403f64 <socket_cb+0xf0>)
  403f2e:	4798      	blx	r3
				recv(tcp_client_socket, &gau8ReceivedBuffer[0], MAIN_WIFI_M2M_BUFFER_SIZE, 0);
  403f30:	2300      	movs	r3, #0
  403f32:	462a      	mov	r2, r5
  403f34:	4621      	mov	r1, r4
  403f36:	4808      	ldr	r0, [pc, #32]	; (403f58 <socket_cb+0xe4>)
  403f38:	f990 0000 	ldrsb.w	r0, [r0]
  403f3c:	4c0d      	ldr	r4, [pc, #52]	; (403f74 <socket_cb+0x100>)
  403f3e:	47a0      	blx	r4
  403f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			} else {
				printf("socket_cb: recv error!\r\n");
  403f42:	4810      	ldr	r0, [pc, #64]	; (403f84 <socket_cb+0x110>)
  403f44:	4b0d      	ldr	r3, [pc, #52]	; (403f7c <socket_cb+0x108>)
  403f46:	4798      	blx	r3
				close(tcp_client_socket);
  403f48:	4c03      	ldr	r4, [pc, #12]	; (403f58 <socket_cb+0xe4>)
  403f4a:	f994 0000 	ldrsb.w	r0, [r4]
  403f4e:	4b0c      	ldr	r3, [pc, #48]	; (403f80 <socket_cb+0x10c>)
  403f50:	4798      	blx	r3
				tcp_client_socket = -1;
  403f52:	23ff      	movs	r3, #255	; 0xff
  403f54:	7023      	strb	r3, [r4, #0]
  403f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403f58:	2040001c 	.word	0x2040001c
  403f5c:	20400f40 	.word	0x20400f40
  403f60:	204009c8 	.word	0x204009c8
  403f64:	0040449d 	.word	0x0040449d
  403f68:	004083c8 	.word	0x004083c8
  403f6c:	004046c1 	.word	0x004046c1
  403f70:	00402d75 	.word	0x00402d75
  403f74:	00402e11 	.word	0x00402e11
  403f78:	004083e4 	.word	0x004083e4
  403f7c:	00404475 	.word	0x00404475
  403f80:	00402eb5 	.word	0x00402eb5
  403f84:	00408400 	.word	0x00408400

00403f88 <wifi_cb>:
 * \param[in] pvMsg A pointer to a buffer containing the notification parameters.
 *
 * \return None.
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
  403f88:	b510      	push	{r4, lr}
  403f8a:	b082      	sub	sp, #8
  403f8c:	460c      	mov	r4, r1
	switch (u8MsgType) {
  403f8e:	282c      	cmp	r0, #44	; 0x2c
  403f90:	d004      	beq.n	403f9c <wifi_cb+0x14>
  403f92:	2832      	cmp	r0, #50	; 0x32
  403f94:	d014      	beq.n	403fc0 <wifi_cb+0x38>
  403f96:	2809      	cmp	r0, #9
  403f98:	d138      	bne.n	40400c <wifi_cb+0x84>
  403f9a:	e020      	b.n	403fde <wifi_cb+0x56>
	case M2M_WIFI_RESP_CON_STATE_CHANGED:
	{
		tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
  403f9c:	780b      	ldrb	r3, [r1, #0]
  403f9e:	2b01      	cmp	r3, #1
  403fa0:	d105      	bne.n	403fae <wifi_cb+0x26>
			printf("wifi_cb: M2M_WIFI_CONNECTED\r\n");
  403fa2:	481b      	ldr	r0, [pc, #108]	; (404010 <wifi_cb+0x88>)
  403fa4:	4b1b      	ldr	r3, [pc, #108]	; (404014 <wifi_cb+0x8c>)
  403fa6:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
  403fa8:	4b1b      	ldr	r3, [pc, #108]	; (404018 <wifi_cb+0x90>)
  403faa:	4798      	blx	r3
  403fac:	e02e      	b.n	40400c <wifi_cb+0x84>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
  403fae:	2b00      	cmp	r3, #0
  403fb0:	d12c      	bne.n	40400c <wifi_cb+0x84>
			printf("wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
  403fb2:	481a      	ldr	r0, [pc, #104]	; (40401c <wifi_cb+0x94>)
  403fb4:	4b17      	ldr	r3, [pc, #92]	; (404014 <wifi_cb+0x8c>)
  403fb6:	4798      	blx	r3
			gbConnectedWifi = false;
  403fb8:	2200      	movs	r2, #0
  403fba:	4b19      	ldr	r3, [pc, #100]	; (404020 <wifi_cb+0x98>)
  403fbc:	701a      	strb	r2, [r3, #0]
  403fbe:	e025      	b.n	40400c <wifi_cb+0x84>
	}

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
		printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
  403fc0:	788b      	ldrb	r3, [r1, #2]
  403fc2:	784a      	ldrb	r2, [r1, #1]
  403fc4:	7809      	ldrb	r1, [r1, #0]
  403fc6:	78e0      	ldrb	r0, [r4, #3]
  403fc8:	9000      	str	r0, [sp, #0]
  403fca:	4816      	ldr	r0, [pc, #88]	; (404024 <wifi_cb+0x9c>)
  403fcc:	4c11      	ldr	r4, [pc, #68]	; (404014 <wifi_cb+0x8c>)
  403fce:	47a0      	blx	r4
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
		gbConnectedWifi = true;
  403fd0:	2201      	movs	r2, #1
  403fd2:	4b13      	ldr	r3, [pc, #76]	; (404020 <wifi_cb+0x98>)
  403fd4:	701a      	strb	r2, [r3, #0]
		/* Obtain the IP Address by network name */
		gethostbyname((uint8_t *)server_host_name);
  403fd6:	4814      	ldr	r0, [pc, #80]	; (404028 <wifi_cb+0xa0>)
  403fd8:	4b14      	ldr	r3, [pc, #80]	; (40402c <wifi_cb+0xa4>)
  403fda:	4798      	blx	r3
		break;
  403fdc:	e016      	b.n	40400c <wifi_cb+0x84>
	}

	case M2M_WIFI_RESP_PROVISION_INFO:
	{
		tstrM2MProvisionInfo *pstrProvInfo = (tstrM2MProvisionInfo *)pvMsg;
		printf("wifi_cb: M2M_WIFI_RESP_PROVISION_INFO\r\n");
  403fde:	4814      	ldr	r0, [pc, #80]	; (404030 <wifi_cb+0xa8>)
  403fe0:	4b0c      	ldr	r3, [pc, #48]	; (404014 <wifi_cb+0x8c>)
  403fe2:	4798      	blx	r3

		if (pstrProvInfo->u8Status == M2M_SUCCESS) {
  403fe4:	f894 3063 	ldrb.w	r3, [r4, #99]	; 0x63
  403fe8:	b96b      	cbnz	r3, 404006 <wifi_cb+0x7e>
			m2m_wifi_connect((char *)pstrProvInfo->au8SSID, strlen((char *)pstrProvInfo->au8SSID), pstrProvInfo->u8SecType,
  403fea:	4620      	mov	r0, r4
  403fec:	4b11      	ldr	r3, [pc, #68]	; (404034 <wifi_cb+0xac>)
  403fee:	4798      	blx	r3
  403ff0:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
  403ff4:	23ff      	movs	r3, #255	; 0xff
  403ff6:	9300      	str	r3, [sp, #0]
  403ff8:	f104 0321 	add.w	r3, r4, #33	; 0x21
  403ffc:	b2c1      	uxtb	r1, r0
  403ffe:	4620      	mov	r0, r4
  404000:	4c0d      	ldr	r4, [pc, #52]	; (404038 <wifi_cb+0xb0>)
  404002:	47a0      	blx	r4
  404004:	e002      	b.n	40400c <wifi_cb+0x84>
					pstrProvInfo->au8Password, M2M_WIFI_CH_ALL);
		} else {
			printf("wifi_cb: provision failed!\r\n");
  404006:	480d      	ldr	r0, [pc, #52]	; (40403c <wifi_cb+0xb4>)
  404008:	4b02      	ldr	r3, [pc, #8]	; (404014 <wifi_cb+0x8c>)
  40400a:	4798      	blx	r3
	default:
	{
		break;
	}
	}
}
  40400c:	b002      	add	sp, #8
  40400e:	bd10      	pop	{r4, pc}
  404010:	0040841c 	.word	0x0040841c
  404014:	00404475 	.word	0x00404475
  404018:	00401549 	.word	0x00401549
  40401c:	0040843c 	.word	0x0040843c
  404020:	20400f41 	.word	0x20400f41
  404024:	00408460 	.word	0x00408460
  404028:	2040007c 	.word	0x2040007c
  40402c:	00402f39 	.word	0x00402f39
  404030:	00408488 	.word	0x00408488
  404034:	004046c1 	.word	0x004046c1
  404038:	004014fd 	.word	0x004014fd
  40403c:	004084b0 	.word	0x004084b0

00404040 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  404040:	b5f0      	push	{r4, r5, r6, r7, lr}
  404042:	b083      	sub	sp, #12
  404044:	4605      	mov	r5, r0
  404046:	460c      	mov	r4, r1
	uint32_t val = 0;
  404048:	2300      	movs	r3, #0
  40404a:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40404c:	4b29      	ldr	r3, [pc, #164]	; (4040f4 <usart_serial_getchar+0xb4>)
  40404e:	4298      	cmp	r0, r3
  404050:	d107      	bne.n	404062 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
  404052:	461f      	mov	r7, r3
  404054:	4e28      	ldr	r6, [pc, #160]	; (4040f8 <usart_serial_getchar+0xb8>)
  404056:	4621      	mov	r1, r4
  404058:	4638      	mov	r0, r7
  40405a:	47b0      	blx	r6
  40405c:	2800      	cmp	r0, #0
  40405e:	d1fa      	bne.n	404056 <usart_serial_getchar+0x16>
  404060:	e015      	b.n	40408e <usart_serial_getchar+0x4e>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  404062:	4b26      	ldr	r3, [pc, #152]	; (4040fc <usart_serial_getchar+0xbc>)
  404064:	4298      	cmp	r0, r3
  404066:	d107      	bne.n	404078 <usart_serial_getchar+0x38>
		while (uart_read((Uart*)p_usart, data));
  404068:	461f      	mov	r7, r3
  40406a:	4e23      	ldr	r6, [pc, #140]	; (4040f8 <usart_serial_getchar+0xb8>)
  40406c:	4621      	mov	r1, r4
  40406e:	4638      	mov	r0, r7
  404070:	47b0      	blx	r6
  404072:	2800      	cmp	r0, #0
  404074:	d1fa      	bne.n	40406c <usart_serial_getchar+0x2c>
  404076:	e015      	b.n	4040a4 <usart_serial_getchar+0x64>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  404078:	4b21      	ldr	r3, [pc, #132]	; (404100 <usart_serial_getchar+0xc0>)
  40407a:	4298      	cmp	r0, r3
  40407c:	d107      	bne.n	40408e <usart_serial_getchar+0x4e>
		while (uart_read((Uart*)p_usart, data));
  40407e:	461f      	mov	r7, r3
  404080:	4e1d      	ldr	r6, [pc, #116]	; (4040f8 <usart_serial_getchar+0xb8>)
  404082:	4621      	mov	r1, r4
  404084:	4638      	mov	r0, r7
  404086:	47b0      	blx	r6
  404088:	2800      	cmp	r0, #0
  40408a:	d1fa      	bne.n	404082 <usart_serial_getchar+0x42>
  40408c:	e017      	b.n	4040be <usart_serial_getchar+0x7e>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  40408e:	4b1d      	ldr	r3, [pc, #116]	; (404104 <usart_serial_getchar+0xc4>)
  404090:	429d      	cmp	r5, r3
  404092:	d107      	bne.n	4040a4 <usart_serial_getchar+0x64>
		while (uart_read((Uart*)p_usart, data));
  404094:	461f      	mov	r7, r3
  404096:	4e18      	ldr	r6, [pc, #96]	; (4040f8 <usart_serial_getchar+0xb8>)
  404098:	4621      	mov	r1, r4
  40409a:	4638      	mov	r0, r7
  40409c:	47b0      	blx	r6
  40409e:	2800      	cmp	r0, #0
  4040a0:	d1fa      	bne.n	404098 <usart_serial_getchar+0x58>
  4040a2:	e019      	b.n	4040d8 <usart_serial_getchar+0x98>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4040a4:	4b18      	ldr	r3, [pc, #96]	; (404108 <usart_serial_getchar+0xc8>)
  4040a6:	429d      	cmp	r5, r3
  4040a8:	d109      	bne.n	4040be <usart_serial_getchar+0x7e>
		while (usart_read(p_usart, &val));
  4040aa:	461e      	mov	r6, r3
  4040ac:	4d17      	ldr	r5, [pc, #92]	; (40410c <usart_serial_getchar+0xcc>)
  4040ae:	a901      	add	r1, sp, #4
  4040b0:	4630      	mov	r0, r6
  4040b2:	47a8      	blx	r5
  4040b4:	2800      	cmp	r0, #0
  4040b6:	d1fa      	bne.n	4040ae <usart_serial_getchar+0x6e>
		*data = (uint8_t)(val & 0xFF);
  4040b8:	9b01      	ldr	r3, [sp, #4]
  4040ba:	7023      	strb	r3, [r4, #0]
  4040bc:	e018      	b.n	4040f0 <usart_serial_getchar+0xb0>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4040be:	4b14      	ldr	r3, [pc, #80]	; (404110 <usart_serial_getchar+0xd0>)
  4040c0:	429d      	cmp	r5, r3
  4040c2:	d109      	bne.n	4040d8 <usart_serial_getchar+0x98>
		while (usart_read(p_usart, &val));
  4040c4:	461e      	mov	r6, r3
  4040c6:	4d11      	ldr	r5, [pc, #68]	; (40410c <usart_serial_getchar+0xcc>)
  4040c8:	a901      	add	r1, sp, #4
  4040ca:	4630      	mov	r0, r6
  4040cc:	47a8      	blx	r5
  4040ce:	2800      	cmp	r0, #0
  4040d0:	d1fa      	bne.n	4040c8 <usart_serial_getchar+0x88>
		*data = (uint8_t)(val & 0xFF);
  4040d2:	9b01      	ldr	r3, [sp, #4]
  4040d4:	7023      	strb	r3, [r4, #0]
  4040d6:	e00b      	b.n	4040f0 <usart_serial_getchar+0xb0>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4040d8:	4b0e      	ldr	r3, [pc, #56]	; (404114 <usart_serial_getchar+0xd4>)
  4040da:	429d      	cmp	r5, r3
  4040dc:	d108      	bne.n	4040f0 <usart_serial_getchar+0xb0>
		while (usart_read(p_usart, &val));
  4040de:	461e      	mov	r6, r3
  4040e0:	4d0a      	ldr	r5, [pc, #40]	; (40410c <usart_serial_getchar+0xcc>)
  4040e2:	a901      	add	r1, sp, #4
  4040e4:	4630      	mov	r0, r6
  4040e6:	47a8      	blx	r5
  4040e8:	2800      	cmp	r0, #0
  4040ea:	d1fa      	bne.n	4040e2 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
  4040ec:	9b01      	ldr	r3, [sp, #4]
  4040ee:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  4040f0:	b003      	add	sp, #12
  4040f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4040f4:	400e0800 	.word	0x400e0800
  4040f8:	004039f1 	.word	0x004039f1
  4040fc:	400e0a00 	.word	0x400e0a00
  404100:	400e1a00 	.word	0x400e1a00
  404104:	400e1c00 	.word	0x400e1c00
  404108:	40024000 	.word	0x40024000
  40410c:	00403b09 	.word	0x00403b09
  404110:	40028000 	.word	0x40028000
  404114:	4002c000 	.word	0x4002c000

00404118 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  404118:	b570      	push	{r4, r5, r6, lr}
  40411a:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40411c:	4b2a      	ldr	r3, [pc, #168]	; (4041c8 <usart_serial_putchar+0xb0>)
  40411e:	4298      	cmp	r0, r3
  404120:	d108      	bne.n	404134 <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
  404122:	461e      	mov	r6, r3
  404124:	4d29      	ldr	r5, [pc, #164]	; (4041cc <usart_serial_putchar+0xb4>)
  404126:	4621      	mov	r1, r4
  404128:	4630      	mov	r0, r6
  40412a:	47a8      	blx	r5
  40412c:	2800      	cmp	r0, #0
  40412e:	d1fa      	bne.n	404126 <usart_serial_putchar+0xe>
		return 1;
  404130:	2001      	movs	r0, #1
  404132:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  404134:	4b26      	ldr	r3, [pc, #152]	; (4041d0 <usart_serial_putchar+0xb8>)
  404136:	4298      	cmp	r0, r3
  404138:	d108      	bne.n	40414c <usart_serial_putchar+0x34>
		while (uart_write((Uart*)p_usart, c)!=0);
  40413a:	461e      	mov	r6, r3
  40413c:	4d23      	ldr	r5, [pc, #140]	; (4041cc <usart_serial_putchar+0xb4>)
  40413e:	4621      	mov	r1, r4
  404140:	4630      	mov	r0, r6
  404142:	47a8      	blx	r5
  404144:	2800      	cmp	r0, #0
  404146:	d1fa      	bne.n	40413e <usart_serial_putchar+0x26>
		return 1;
  404148:	2001      	movs	r0, #1
  40414a:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  40414c:	4b21      	ldr	r3, [pc, #132]	; (4041d4 <usart_serial_putchar+0xbc>)
  40414e:	4298      	cmp	r0, r3
  404150:	d108      	bne.n	404164 <usart_serial_putchar+0x4c>
		while (uart_write((Uart*)p_usart, c)!=0);
  404152:	461e      	mov	r6, r3
  404154:	4d1d      	ldr	r5, [pc, #116]	; (4041cc <usart_serial_putchar+0xb4>)
  404156:	4621      	mov	r1, r4
  404158:	4630      	mov	r0, r6
  40415a:	47a8      	blx	r5
  40415c:	2800      	cmp	r0, #0
  40415e:	d1fa      	bne.n	404156 <usart_serial_putchar+0x3e>
		return 1;
  404160:	2001      	movs	r0, #1
  404162:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  404164:	4b1c      	ldr	r3, [pc, #112]	; (4041d8 <usart_serial_putchar+0xc0>)
  404166:	4298      	cmp	r0, r3
  404168:	d108      	bne.n	40417c <usart_serial_putchar+0x64>
		while (uart_write((Uart*)p_usart, c)!=0);
  40416a:	461e      	mov	r6, r3
  40416c:	4d17      	ldr	r5, [pc, #92]	; (4041cc <usart_serial_putchar+0xb4>)
  40416e:	4621      	mov	r1, r4
  404170:	4630      	mov	r0, r6
  404172:	47a8      	blx	r5
  404174:	2800      	cmp	r0, #0
  404176:	d1fa      	bne.n	40416e <usart_serial_putchar+0x56>
		return 1;
  404178:	2001      	movs	r0, #1
  40417a:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40417c:	4b17      	ldr	r3, [pc, #92]	; (4041dc <usart_serial_putchar+0xc4>)
  40417e:	4298      	cmp	r0, r3
  404180:	d108      	bne.n	404194 <usart_serial_putchar+0x7c>
		while (usart_write(p_usart, c)!=0);
  404182:	461e      	mov	r6, r3
  404184:	4d16      	ldr	r5, [pc, #88]	; (4041e0 <usart_serial_putchar+0xc8>)
  404186:	4621      	mov	r1, r4
  404188:	4630      	mov	r0, r6
  40418a:	47a8      	blx	r5
  40418c:	2800      	cmp	r0, #0
  40418e:	d1fa      	bne.n	404186 <usart_serial_putchar+0x6e>
		return 1;
  404190:	2001      	movs	r0, #1
  404192:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  404194:	4b13      	ldr	r3, [pc, #76]	; (4041e4 <usart_serial_putchar+0xcc>)
  404196:	4298      	cmp	r0, r3
  404198:	d108      	bne.n	4041ac <usart_serial_putchar+0x94>
		while (usart_write(p_usart, c)!=0);
  40419a:	461e      	mov	r6, r3
  40419c:	4d10      	ldr	r5, [pc, #64]	; (4041e0 <usart_serial_putchar+0xc8>)
  40419e:	4621      	mov	r1, r4
  4041a0:	4630      	mov	r0, r6
  4041a2:	47a8      	blx	r5
  4041a4:	2800      	cmp	r0, #0
  4041a6:	d1fa      	bne.n	40419e <usart_serial_putchar+0x86>
		return 1;
  4041a8:	2001      	movs	r0, #1
  4041aa:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4041ac:	4b0e      	ldr	r3, [pc, #56]	; (4041e8 <usart_serial_putchar+0xd0>)
  4041ae:	4298      	cmp	r0, r3
  4041b0:	d108      	bne.n	4041c4 <usart_serial_putchar+0xac>
		while (usart_write(p_usart, c)!=0);
  4041b2:	461e      	mov	r6, r3
  4041b4:	4d0a      	ldr	r5, [pc, #40]	; (4041e0 <usart_serial_putchar+0xc8>)
  4041b6:	4621      	mov	r1, r4
  4041b8:	4630      	mov	r0, r6
  4041ba:	47a8      	blx	r5
  4041bc:	2800      	cmp	r0, #0
  4041be:	d1fa      	bne.n	4041b6 <usart_serial_putchar+0x9e>
		return 1;
  4041c0:	2001      	movs	r0, #1
  4041c2:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  4041c4:	2000      	movs	r0, #0
}
  4041c6:	bd70      	pop	{r4, r5, r6, pc}
  4041c8:	400e0800 	.word	0x400e0800
  4041cc:	004039dd 	.word	0x004039dd
  4041d0:	400e0a00 	.word	0x400e0a00
  4041d4:	400e1a00 	.word	0x400e1a00
  4041d8:	400e1c00 	.word	0x400e1c00
  4041dc:	40024000 	.word	0x40024000
  4041e0:	00403af1 	.word	0x00403af1
  4041e4:	40028000 	.word	0x40028000
  4041e8:	4002c000 	.word	0x4002c000

004041ec <main>:
 * Initialize system, UART console, network then start weather client.
 *
 * \return Program return value.
 */
int main(void)
{
  4041ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  4041ee:	b095      	sub	sp, #84	; 0x54
	uint8_t mac_addr[6];
	uint8_t u8IsMacAddrValid;
	struct sockaddr_in addr_in;

	/* Initialize the board. */
	sysclk_init();
  4041f0:	4b5c      	ldr	r3, [pc, #368]	; (404364 <main+0x178>)
  4041f2:	4798      	blx	r3
	board_init();
  4041f4:	4b5c      	ldr	r3, [pc, #368]	; (404368 <main+0x17c>)
  4041f6:	4798      	blx	r3
  4041f8:	200e      	movs	r0, #14
  4041fa:	4e5c      	ldr	r6, [pc, #368]	; (40436c <main+0x180>)
  4041fc:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  4041fe:	4d5c      	ldr	r5, [pc, #368]	; (404370 <main+0x184>)
  404200:	4b5c      	ldr	r3, [pc, #368]	; (404374 <main+0x188>)
  404202:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  404204:	4a5c      	ldr	r2, [pc, #368]	; (404378 <main+0x18c>)
  404206:	4b5d      	ldr	r3, [pc, #372]	; (40437c <main+0x190>)
  404208:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  40420a:	4a5d      	ldr	r2, [pc, #372]	; (404380 <main+0x194>)
  40420c:	4b5d      	ldr	r3, [pc, #372]	; (404384 <main+0x198>)
  40420e:	601a      	str	r2, [r3, #0]
	uart_settings.ul_baudrate = opt->baudrate;
	uart_settings.ul_mode = opt->paritytype;
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  404210:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  404214:	9301      	str	r3, [sp, #4]
	usart_settings.char_length = opt->charlength;
  404216:	23c0      	movs	r3, #192	; 0xc0
  404218:	9302      	str	r3, [sp, #8]
	usart_settings.parity_type = opt->paritytype;
  40421a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40421e:	9303      	str	r3, [sp, #12]
	usart_settings.stop_bits= opt->stopbits;
  404220:	2400      	movs	r4, #0
  404222:	9404      	str	r4, [sp, #16]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  404224:	9405      	str	r4, [sp, #20]
  404226:	200e      	movs	r0, #14
  404228:	47b0      	blx	r6
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  40422a:	4a57      	ldr	r2, [pc, #348]	; (404388 <main+0x19c>)
  40422c:	a901      	add	r1, sp, #4
  40422e:	4628      	mov	r0, r5
  404230:	4b56      	ldr	r3, [pc, #344]	; (40438c <main+0x1a0>)
  404232:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  404234:	4628      	mov	r0, r5
  404236:	4b56      	ldr	r3, [pc, #344]	; (404390 <main+0x1a4>)
  404238:	4798      	blx	r3
		usart_enable_rx(p_usart);
  40423a:	4628      	mov	r0, r5
  40423c:	4b55      	ldr	r3, [pc, #340]	; (404394 <main+0x1a8>)
  40423e:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  404240:	4e55      	ldr	r6, [pc, #340]	; (404398 <main+0x1ac>)
  404242:	6833      	ldr	r3, [r6, #0]
  404244:	4621      	mov	r1, r4
  404246:	6898      	ldr	r0, [r3, #8]
  404248:	4d54      	ldr	r5, [pc, #336]	; (40439c <main+0x1b0>)
  40424a:	47a8      	blx	r5
	setbuf(stdin, NULL);
  40424c:	6833      	ldr	r3, [r6, #0]
  40424e:	4621      	mov	r1, r4
  404250:	6858      	ldr	r0, [r3, #4]
  404252:	47a8      	blx	r5

	/* Initialize the UART console. */
	configure_console();
	printf(STRING_HEADER);
  404254:	4852      	ldr	r0, [pc, #328]	; (4043a0 <main+0x1b4>)
  404256:	4b53      	ldr	r3, [pc, #332]	; (4043a4 <main+0x1b8>)
  404258:	4798      	blx	r3

	/* Initialize the BSP. */
	nm_bsp_init();
  40425a:	4b53      	ldr	r3, [pc, #332]	; (4043a8 <main+0x1bc>)
  40425c:	4798      	blx	r3

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
  40425e:	940f      	str	r4, [sp, #60]	; 0x3c
  404260:	9410      	str	r4, [sp, #64]	; 0x40
  404262:	9411      	str	r4, [sp, #68]	; 0x44
  404264:	9412      	str	r4, [sp, #72]	; 0x48
  404266:	9413      	str	r4, [sp, #76]	; 0x4c

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_cb;
  404268:	4b50      	ldr	r3, [pc, #320]	; (4043ac <main+0x1c0>)
  40426a:	930e      	str	r3, [sp, #56]	; 0x38
	ret = m2m_wifi_init(&param);
  40426c:	a80e      	add	r0, sp, #56	; 0x38
  40426e:	4b50      	ldr	r3, [pc, #320]	; (4043b0 <main+0x1c4>)
  404270:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  404272:	b120      	cbz	r0, 40427e <main+0x92>
  404274:	4601      	mov	r1, r0
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
  404276:	484f      	ldr	r0, [pc, #316]	; (4043b4 <main+0x1c8>)
  404278:	4b4a      	ldr	r3, [pc, #296]	; (4043a4 <main+0x1b8>)
  40427a:	4798      	blx	r3
  40427c:	e7fe      	b.n	40427c <main+0x90>
		while (1) {
		}
	}

	/* Initialize socket API. */
	socketInit();
  40427e:	4b4e      	ldr	r3, [pc, #312]	; (4043b8 <main+0x1cc>)
  404280:	4798      	blx	r3
	registerSocketCallback(socket_cb, resolve_cb);
  404282:	494e      	ldr	r1, [pc, #312]	; (4043bc <main+0x1d0>)
  404284:	484e      	ldr	r0, [pc, #312]	; (4043c0 <main+0x1d4>)
  404286:	4b4f      	ldr	r3, [pc, #316]	; (4043c4 <main+0x1d8>)
  404288:	4798      	blx	r3

	m2m_wifi_get_otp_mac_address(mac_addr, &u8IsMacAddrValid);
  40428a:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  40428e:	a80c      	add	r0, sp, #48	; 0x30
  404290:	4b4d      	ldr	r3, [pc, #308]	; (4043c8 <main+0x1dc>)
  404292:	4798      	blx	r3
	if (!u8IsMacAddrValid) {
  404294:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  404298:	b913      	cbnz	r3, 4042a0 <main+0xb4>
		m2m_wifi_set_mac_address(gau8MacAddr);
  40429a:	484c      	ldr	r0, [pc, #304]	; (4043cc <main+0x1e0>)
  40429c:	4b4c      	ldr	r3, [pc, #304]	; (4043d0 <main+0x1e4>)
  40429e:	4798      	blx	r3
	}

	/* Retrieve MAC address of the WINC and use it for AP name. */
	m2m_wifi_get_mac_address(gau8MacAddr);
  4042a0:	4e4a      	ldr	r6, [pc, #296]	; (4043cc <main+0x1e0>)
  4042a2:	4630      	mov	r0, r6
  4042a4:	4b4b      	ldr	r3, [pc, #300]	; (4043d4 <main+0x1e8>)
  4042a6:	4798      	blx	r3
	set_dev_name_to_mac((uint8_t *)gacDeviceName, gau8MacAddr);
  4042a8:	4d4b      	ldr	r5, [pc, #300]	; (4043d8 <main+0x1ec>)
  4042aa:	4631      	mov	r1, r6
  4042ac:	4628      	mov	r0, r5
  4042ae:	4f4b      	ldr	r7, [pc, #300]	; (4043dc <main+0x1f0>)
  4042b0:	47b8      	blx	r7
	set_dev_name_to_mac((uint8_t *)gstrM2MAPConfig.au8SSID, gau8MacAddr);
  4042b2:	4c4b      	ldr	r4, [pc, #300]	; (4043e0 <main+0x1f4>)
  4042b4:	4631      	mov	r1, r6
  4042b6:	4620      	mov	r0, r4
  4042b8:	47b8      	blx	r7
	m2m_wifi_set_device_name((uint8_t *)gacDeviceName, (uint8_t)m2m_strlen((uint8_t *)gacDeviceName));
  4042ba:	4628      	mov	r0, r5
  4042bc:	4b49      	ldr	r3, [pc, #292]	; (4043e4 <main+0x1f8>)
  4042be:	4798      	blx	r3
  4042c0:	b2c1      	uxtb	r1, r0
  4042c2:	4628      	mov	r0, r5
  4042c4:	4b48      	ldr	r3, [pc, #288]	; (4043e8 <main+0x1fc>)
  4042c6:	4798      	blx	r3
	gstrM2MAPConfig.au8DHCPServerIP[0] = 0xC0; /* 192 */
  4042c8:	23c0      	movs	r3, #192	; 0xc0
  4042ca:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
	gstrM2MAPConfig.au8DHCPServerIP[1] = 0xA8; /* 168 */
  4042ce:	23a8      	movs	r3, #168	; 0xa8
  4042d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
	gstrM2MAPConfig.au8DHCPServerIP[2] = 0x01; /* 1 */
  4042d4:	2201      	movs	r2, #1
  4042d6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
	gstrM2MAPConfig.au8DHCPServerIP[3] = 0x01; /* 1 */
  4042da:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44

	/* Start web provisioning mode. */
	m2m_wifi_start_provision_mode((tstrM2MAPConfig *)&gstrM2MAPConfig, (char *)gacHttpProvDomainName, 1);
  4042de:	4943      	ldr	r1, [pc, #268]	; (4043ec <main+0x200>)
  4042e0:	4620      	mov	r0, r4
  4042e2:	4b43      	ldr	r3, [pc, #268]	; (4043f0 <main+0x204>)
  4042e4:	4798      	blx	r3
	printf("\r\nProvision Mode started.\r\nConnect to [%s] via AP[%s] and fill up the page.\r\n\r\n",
  4042e6:	4622      	mov	r2, r4
  4042e8:	4942      	ldr	r1, [pc, #264]	; (4043f4 <main+0x208>)
  4042ea:	4843      	ldr	r0, [pc, #268]	; (4043f8 <main+0x20c>)
  4042ec:	4b2d      	ldr	r3, [pc, #180]	; (4043a4 <main+0x1b8>)
  4042ee:	4798      	blx	r3
			MAIN_HTTP_PROV_SERVER_DOMAIN_NAME, gstrM2MAPConfig.au8SSID);

	while (1) {
		m2m_wifi_handle_events(NULL);
  4042f0:	4d42      	ldr	r5, [pc, #264]	; (4043fc <main+0x210>)

		if (gbConnectedWifi && !gbTcpConnection) {
  4042f2:	4c43      	ldr	r4, [pc, #268]	; (404400 <main+0x214>)
				}

				/* Connect TCP client socket. */
				addr_in.sin_family = AF_INET;
				addr_in.sin_port = _htons(MAIN_SERVER_PORT);
				addr_in.sin_addr.s_addr = 0X0BC20601;
  4042f4:	4e43      	ldr	r6, [pc, #268]	; (404404 <main+0x218>)
	m2m_wifi_start_provision_mode((tstrM2MAPConfig *)&gstrM2MAPConfig, (char *)gacHttpProvDomainName, 1);
	printf("\r\nProvision Mode started.\r\nConnect to [%s] via AP[%s] and fill up the page.\r\n\r\n",
			MAIN_HTTP_PROV_SERVER_DOMAIN_NAME, gstrM2MAPConfig.au8SSID);

	while (1) {
		m2m_wifi_handle_events(NULL);
  4042f6:	2000      	movs	r0, #0
  4042f8:	47a8      	blx	r5

		if (gbConnectedWifi && !gbTcpConnection) {
  4042fa:	7823      	ldrb	r3, [r4, #0]
  4042fc:	2b00      	cmp	r3, #0
  4042fe:	d0fa      	beq.n	4042f6 <main+0x10a>
  404300:	4b41      	ldr	r3, [pc, #260]	; (404408 <main+0x21c>)
  404302:	781b      	ldrb	r3, [r3, #0]
  404304:	2b00      	cmp	r3, #0
  404306:	d1f6      	bne.n	4042f6 <main+0x10a>
			if (gbHostIpByName) {
  404308:	4b40      	ldr	r3, [pc, #256]	; (40440c <main+0x220>)
  40430a:	781b      	ldrb	r3, [r3, #0]
  40430c:	2b00      	cmp	r3, #0
  40430e:	d0f2      	beq.n	4042f6 <main+0x10a>
				/* Open TCP client socket. */
				if (tcp_client_socket < 0) {
  404310:	4b3f      	ldr	r3, [pc, #252]	; (404410 <main+0x224>)
  404312:	f993 3000 	ldrsb.w	r3, [r3]
  404316:	2b00      	cmp	r3, #0
  404318:	da0c      	bge.n	404334 <main+0x148>
					if ((tcp_client_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
  40431a:	2200      	movs	r2, #0
  40431c:	2101      	movs	r1, #1
  40431e:	2002      	movs	r0, #2
  404320:	4b3c      	ldr	r3, [pc, #240]	; (404414 <main+0x228>)
  404322:	4798      	blx	r3
  404324:	4b3a      	ldr	r3, [pc, #232]	; (404410 <main+0x224>)
  404326:	7018      	strb	r0, [r3, #0]
  404328:	2800      	cmp	r0, #0
  40432a:	da03      	bge.n	404334 <main+0x148>
						printf("main: failed to create TCP client socket error!\r\n");
  40432c:	483a      	ldr	r0, [pc, #232]	; (404418 <main+0x22c>)
  40432e:	4b1d      	ldr	r3, [pc, #116]	; (4043a4 <main+0x1b8>)
  404330:	4798      	blx	r3
						continue;
  404332:	e7e0      	b.n	4042f6 <main+0x10a>
					}
				}

				/* Connect TCP client socket. */
				addr_in.sin_family = AF_INET;
  404334:	2302      	movs	r3, #2
  404336:	f8ad 301c 	strh.w	r3, [sp, #28]
				addr_in.sin_port = _htons(MAIN_SERVER_PORT);
  40433a:	f249 131f 	movw	r3, #37151	; 0x911f
  40433e:	f8ad 301e 	strh.w	r3, [sp, #30]
				addr_in.sin_addr.s_addr = 0X0BC20601;
  404342:	9608      	str	r6, [sp, #32]
				if (connect(tcp_client_socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
  404344:	2210      	movs	r2, #16
  404346:	a907      	add	r1, sp, #28
  404348:	4b31      	ldr	r3, [pc, #196]	; (404410 <main+0x224>)
  40434a:	f993 0000 	ldrsb.w	r0, [r3]
  40434e:	4b33      	ldr	r3, [pc, #204]	; (40441c <main+0x230>)
  404350:	4798      	blx	r3
  404352:	b118      	cbz	r0, 40435c <main+0x170>
					printf("main: failed to connect socket error!\r\n");
  404354:	4832      	ldr	r0, [pc, #200]	; (404420 <main+0x234>)
  404356:	4b13      	ldr	r3, [pc, #76]	; (4043a4 <main+0x1b8>)
  404358:	4798      	blx	r3
					continue;
  40435a:	e7cc      	b.n	4042f6 <main+0x10a>
				}

				gbTcpConnection = true;
  40435c:	2201      	movs	r2, #1
  40435e:	4b2a      	ldr	r3, [pc, #168]	; (404408 <main+0x21c>)
  404360:	701a      	strb	r2, [r3, #0]
  404362:	e7c8      	b.n	4042f6 <main+0x10a>
  404364:	0040305d 	.word	0x0040305d
  404368:	00403159 	.word	0x00403159
  40436c:	00403821 	.word	0x00403821
  404370:	40028000 	.word	0x40028000
  404374:	20401048 	.word	0x20401048
  404378:	00404119 	.word	0x00404119
  40437c:	20401044 	.word	0x20401044
  404380:	00404041 	.word	0x00404041
  404384:	20401040 	.word	0x20401040
  404388:	08f0d180 	.word	0x08f0d180
  40438c:	00403a8d 	.word	0x00403a8d
  404390:	00403ae1 	.word	0x00403ae1
  404394:	00403ae9 	.word	0x00403ae9
  404398:	204004b8 	.word	0x204004b8
  40439c:	00404539 	.word	0x00404539
  4043a0:	004084d0 	.word	0x004084d0
  4043a4:	00404475 	.word	0x00404475
  4043a8:	00400211 	.word	0x00400211
  4043ac:	00403f89 	.word	0x00403f89
  4043b0:	004011b1 	.word	0x004011b1
  4043b4:	00408534 	.word	0x00408534
  4043b8:	00402ba9 	.word	0x00402ba9
  4043bc:	00403dd5 	.word	0x00403dd5
  4043c0:	00403e75 	.word	0x00403e75
  4043c4:	00402bed 	.word	0x00402bed
  4043c8:	0040154d 	.word	0x0040154d
  4043cc:	20400088 	.word	0x20400088
  4043d0:	00401519 	.word	0x00401519
  4043d4:	0040157d 	.word	0x0040157d
  4043d8:	20400020 	.word	0x20400020
  4043dc:	00403e1d 	.word	0x00403e1d
  4043e0:	20400034 	.word	0x20400034
  4043e4:	00400579 	.word	0x00400579
  4043e8:	004015a9 	.word	0x004015a9
  4043ec:	00408378 	.word	0x00408378
  4043f0:	004015e1 	.word	0x004015e1
  4043f4:	0040855c 	.word	0x0040855c
  4043f8:	0040856c 	.word	0x0040856c
  4043fc:	004012ad 	.word	0x004012ad
  404400:	20400f41 	.word	0x20400f41
  404404:	0bc20601 	.word	0x0bc20601
  404408:	20400f40 	.word	0x20400f40
  40440c:	20400f48 	.word	0x20400f48
  404410:	2040001c 	.word	0x2040001c
  404414:	00402c01 	.word	0x00402c01
  404418:	004085bc 	.word	0x004085bc
  40441c:	00402ce1 	.word	0x00402ce1
  404420:	004085f0 	.word	0x004085f0

00404424 <__libc_init_array>:
  404424:	b570      	push	{r4, r5, r6, lr}
  404426:	4e0f      	ldr	r6, [pc, #60]	; (404464 <__libc_init_array+0x40>)
  404428:	4d0f      	ldr	r5, [pc, #60]	; (404468 <__libc_init_array+0x44>)
  40442a:	1b76      	subs	r6, r6, r5
  40442c:	10b6      	asrs	r6, r6, #2
  40442e:	bf18      	it	ne
  404430:	2400      	movne	r4, #0
  404432:	d005      	beq.n	404440 <__libc_init_array+0x1c>
  404434:	3401      	adds	r4, #1
  404436:	f855 3b04 	ldr.w	r3, [r5], #4
  40443a:	4798      	blx	r3
  40443c:	42a6      	cmp	r6, r4
  40443e:	d1f9      	bne.n	404434 <__libc_init_array+0x10>
  404440:	4e0a      	ldr	r6, [pc, #40]	; (40446c <__libc_init_array+0x48>)
  404442:	4d0b      	ldr	r5, [pc, #44]	; (404470 <__libc_init_array+0x4c>)
  404444:	1b76      	subs	r6, r6, r5
  404446:	f004 f913 	bl	408670 <_init>
  40444a:	10b6      	asrs	r6, r6, #2
  40444c:	bf18      	it	ne
  40444e:	2400      	movne	r4, #0
  404450:	d006      	beq.n	404460 <__libc_init_array+0x3c>
  404452:	3401      	adds	r4, #1
  404454:	f855 3b04 	ldr.w	r3, [r5], #4
  404458:	4798      	blx	r3
  40445a:	42a6      	cmp	r6, r4
  40445c:	d1f9      	bne.n	404452 <__libc_init_array+0x2e>
  40445e:	bd70      	pop	{r4, r5, r6, pc}
  404460:	bd70      	pop	{r4, r5, r6, pc}
  404462:	bf00      	nop
  404464:	0040867c 	.word	0x0040867c
  404468:	0040867c 	.word	0x0040867c
  40446c:	00408684 	.word	0x00408684
  404470:	0040867c 	.word	0x0040867c

00404474 <iprintf>:
  404474:	b40f      	push	{r0, r1, r2, r3}
  404476:	b500      	push	{lr}
  404478:	4907      	ldr	r1, [pc, #28]	; (404498 <iprintf+0x24>)
  40447a:	b083      	sub	sp, #12
  40447c:	ab04      	add	r3, sp, #16
  40447e:	6808      	ldr	r0, [r1, #0]
  404480:	f853 2b04 	ldr.w	r2, [r3], #4
  404484:	6881      	ldr	r1, [r0, #8]
  404486:	9301      	str	r3, [sp, #4]
  404488:	f000 f9c4 	bl	404814 <_vfiprintf_r>
  40448c:	b003      	add	sp, #12
  40448e:	f85d eb04 	ldr.w	lr, [sp], #4
  404492:	b004      	add	sp, #16
  404494:	4770      	bx	lr
  404496:	bf00      	nop
  404498:	204004b8 	.word	0x204004b8

0040449c <memset>:
  40449c:	b470      	push	{r4, r5, r6}
  40449e:	0784      	lsls	r4, r0, #30
  4044a0:	d046      	beq.n	404530 <memset+0x94>
  4044a2:	1e54      	subs	r4, r2, #1
  4044a4:	2a00      	cmp	r2, #0
  4044a6:	d041      	beq.n	40452c <memset+0x90>
  4044a8:	b2cd      	uxtb	r5, r1
  4044aa:	4603      	mov	r3, r0
  4044ac:	e002      	b.n	4044b4 <memset+0x18>
  4044ae:	1e62      	subs	r2, r4, #1
  4044b0:	b3e4      	cbz	r4, 40452c <memset+0x90>
  4044b2:	4614      	mov	r4, r2
  4044b4:	f803 5b01 	strb.w	r5, [r3], #1
  4044b8:	079a      	lsls	r2, r3, #30
  4044ba:	d1f8      	bne.n	4044ae <memset+0x12>
  4044bc:	2c03      	cmp	r4, #3
  4044be:	d92e      	bls.n	40451e <memset+0x82>
  4044c0:	b2cd      	uxtb	r5, r1
  4044c2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4044c6:	2c0f      	cmp	r4, #15
  4044c8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4044cc:	d919      	bls.n	404502 <memset+0x66>
  4044ce:	f103 0210 	add.w	r2, r3, #16
  4044d2:	4626      	mov	r6, r4
  4044d4:	3e10      	subs	r6, #16
  4044d6:	2e0f      	cmp	r6, #15
  4044d8:	f842 5c10 	str.w	r5, [r2, #-16]
  4044dc:	f842 5c0c 	str.w	r5, [r2, #-12]
  4044e0:	f842 5c08 	str.w	r5, [r2, #-8]
  4044e4:	f842 5c04 	str.w	r5, [r2, #-4]
  4044e8:	f102 0210 	add.w	r2, r2, #16
  4044ec:	d8f2      	bhi.n	4044d4 <memset+0x38>
  4044ee:	f1a4 0210 	sub.w	r2, r4, #16
  4044f2:	f022 020f 	bic.w	r2, r2, #15
  4044f6:	f004 040f 	and.w	r4, r4, #15
  4044fa:	3210      	adds	r2, #16
  4044fc:	2c03      	cmp	r4, #3
  4044fe:	4413      	add	r3, r2
  404500:	d90d      	bls.n	40451e <memset+0x82>
  404502:	461e      	mov	r6, r3
  404504:	4622      	mov	r2, r4
  404506:	3a04      	subs	r2, #4
  404508:	2a03      	cmp	r2, #3
  40450a:	f846 5b04 	str.w	r5, [r6], #4
  40450e:	d8fa      	bhi.n	404506 <memset+0x6a>
  404510:	1f22      	subs	r2, r4, #4
  404512:	f022 0203 	bic.w	r2, r2, #3
  404516:	3204      	adds	r2, #4
  404518:	4413      	add	r3, r2
  40451a:	f004 0403 	and.w	r4, r4, #3
  40451e:	b12c      	cbz	r4, 40452c <memset+0x90>
  404520:	b2c9      	uxtb	r1, r1
  404522:	441c      	add	r4, r3
  404524:	f803 1b01 	strb.w	r1, [r3], #1
  404528:	42a3      	cmp	r3, r4
  40452a:	d1fb      	bne.n	404524 <memset+0x88>
  40452c:	bc70      	pop	{r4, r5, r6}
  40452e:	4770      	bx	lr
  404530:	4614      	mov	r4, r2
  404532:	4603      	mov	r3, r0
  404534:	e7c2      	b.n	4044bc <memset+0x20>
  404536:	bf00      	nop

00404538 <setbuf>:
  404538:	2900      	cmp	r1, #0
  40453a:	bf0c      	ite	eq
  40453c:	2202      	moveq	r2, #2
  40453e:	2200      	movne	r2, #0
  404540:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404544:	f000 b800 	b.w	404548 <setvbuf>

00404548 <setvbuf>:
  404548:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40454c:	4c51      	ldr	r4, [pc, #324]	; (404694 <setvbuf+0x14c>)
  40454e:	6825      	ldr	r5, [r4, #0]
  404550:	b083      	sub	sp, #12
  404552:	4604      	mov	r4, r0
  404554:	460f      	mov	r7, r1
  404556:	4690      	mov	r8, r2
  404558:	461e      	mov	r6, r3
  40455a:	b115      	cbz	r5, 404562 <setvbuf+0x1a>
  40455c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40455e:	2b00      	cmp	r3, #0
  404560:	d079      	beq.n	404656 <setvbuf+0x10e>
  404562:	f1b8 0f02 	cmp.w	r8, #2
  404566:	d004      	beq.n	404572 <setvbuf+0x2a>
  404568:	f1b8 0f01 	cmp.w	r8, #1
  40456c:	d87f      	bhi.n	40466e <setvbuf+0x126>
  40456e:	2e00      	cmp	r6, #0
  404570:	db7d      	blt.n	40466e <setvbuf+0x126>
  404572:	4621      	mov	r1, r4
  404574:	4628      	mov	r0, r5
  404576:	f001 f999 	bl	4058ac <_fflush_r>
  40457a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40457c:	b141      	cbz	r1, 404590 <setvbuf+0x48>
  40457e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404582:	4299      	cmp	r1, r3
  404584:	d002      	beq.n	40458c <setvbuf+0x44>
  404586:	4628      	mov	r0, r5
  404588:	f001 faee 	bl	405b68 <_free_r>
  40458c:	2300      	movs	r3, #0
  40458e:	6323      	str	r3, [r4, #48]	; 0x30
  404590:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404594:	2200      	movs	r2, #0
  404596:	61a2      	str	r2, [r4, #24]
  404598:	6062      	str	r2, [r4, #4]
  40459a:	061a      	lsls	r2, r3, #24
  40459c:	d454      	bmi.n	404648 <setvbuf+0x100>
  40459e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4045a2:	f023 0303 	bic.w	r3, r3, #3
  4045a6:	f1b8 0f02 	cmp.w	r8, #2
  4045aa:	81a3      	strh	r3, [r4, #12]
  4045ac:	d039      	beq.n	404622 <setvbuf+0xda>
  4045ae:	ab01      	add	r3, sp, #4
  4045b0:	466a      	mov	r2, sp
  4045b2:	4621      	mov	r1, r4
  4045b4:	4628      	mov	r0, r5
  4045b6:	f001 fd75 	bl	4060a4 <__swhatbuf_r>
  4045ba:	89a3      	ldrh	r3, [r4, #12]
  4045bc:	4318      	orrs	r0, r3
  4045be:	81a0      	strh	r0, [r4, #12]
  4045c0:	b326      	cbz	r6, 40460c <setvbuf+0xc4>
  4045c2:	b327      	cbz	r7, 40460e <setvbuf+0xc6>
  4045c4:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4045c6:	2b00      	cmp	r3, #0
  4045c8:	d04d      	beq.n	404666 <setvbuf+0x11e>
  4045ca:	9b00      	ldr	r3, [sp, #0]
  4045cc:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
  4045d0:	6027      	str	r7, [r4, #0]
  4045d2:	429e      	cmp	r6, r3
  4045d4:	bf1c      	itt	ne
  4045d6:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
  4045da:	81a0      	strhne	r0, [r4, #12]
  4045dc:	f1b8 0f01 	cmp.w	r8, #1
  4045e0:	bf08      	it	eq
  4045e2:	f040 0001 	orreq.w	r0, r0, #1
  4045e6:	b283      	uxth	r3, r0
  4045e8:	bf08      	it	eq
  4045ea:	81a0      	strheq	r0, [r4, #12]
  4045ec:	f003 0008 	and.w	r0, r3, #8
  4045f0:	b280      	uxth	r0, r0
  4045f2:	6127      	str	r7, [r4, #16]
  4045f4:	6166      	str	r6, [r4, #20]
  4045f6:	b318      	cbz	r0, 404640 <setvbuf+0xf8>
  4045f8:	f013 0001 	ands.w	r0, r3, #1
  4045fc:	d02f      	beq.n	40465e <setvbuf+0x116>
  4045fe:	2000      	movs	r0, #0
  404600:	4276      	negs	r6, r6
  404602:	61a6      	str	r6, [r4, #24]
  404604:	60a0      	str	r0, [r4, #8]
  404606:	b003      	add	sp, #12
  404608:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40460c:	9e00      	ldr	r6, [sp, #0]
  40460e:	4630      	mov	r0, r6
  404610:	f001 fdbc 	bl	40618c <malloc>
  404614:	4607      	mov	r7, r0
  404616:	b368      	cbz	r0, 404674 <setvbuf+0x12c>
  404618:	89a3      	ldrh	r3, [r4, #12]
  40461a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40461e:	81a3      	strh	r3, [r4, #12]
  404620:	e7d0      	b.n	4045c4 <setvbuf+0x7c>
  404622:	2000      	movs	r0, #0
  404624:	f104 0243 	add.w	r2, r4, #67	; 0x43
  404628:	f043 0302 	orr.w	r3, r3, #2
  40462c:	2500      	movs	r5, #0
  40462e:	2101      	movs	r1, #1
  404630:	81a3      	strh	r3, [r4, #12]
  404632:	60a5      	str	r5, [r4, #8]
  404634:	6022      	str	r2, [r4, #0]
  404636:	6122      	str	r2, [r4, #16]
  404638:	6161      	str	r1, [r4, #20]
  40463a:	b003      	add	sp, #12
  40463c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404640:	60a0      	str	r0, [r4, #8]
  404642:	b003      	add	sp, #12
  404644:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404648:	6921      	ldr	r1, [r4, #16]
  40464a:	4628      	mov	r0, r5
  40464c:	f001 fa8c 	bl	405b68 <_free_r>
  404650:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404654:	e7a3      	b.n	40459e <setvbuf+0x56>
  404656:	4628      	mov	r0, r5
  404658:	f001 f9bc 	bl	4059d4 <__sinit>
  40465c:	e781      	b.n	404562 <setvbuf+0x1a>
  40465e:	60a6      	str	r6, [r4, #8]
  404660:	b003      	add	sp, #12
  404662:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404666:	4628      	mov	r0, r5
  404668:	f001 f9b4 	bl	4059d4 <__sinit>
  40466c:	e7ad      	b.n	4045ca <setvbuf+0x82>
  40466e:	f04f 30ff 	mov.w	r0, #4294967295
  404672:	e7e2      	b.n	40463a <setvbuf+0xf2>
  404674:	f8dd 9000 	ldr.w	r9, [sp]
  404678:	45b1      	cmp	r9, r6
  40467a:	d006      	beq.n	40468a <setvbuf+0x142>
  40467c:	4648      	mov	r0, r9
  40467e:	f001 fd85 	bl	40618c <malloc>
  404682:	4607      	mov	r7, r0
  404684:	b108      	cbz	r0, 40468a <setvbuf+0x142>
  404686:	464e      	mov	r6, r9
  404688:	e7c6      	b.n	404618 <setvbuf+0xd0>
  40468a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40468e:	f04f 30ff 	mov.w	r0, #4294967295
  404692:	e7c7      	b.n	404624 <setvbuf+0xdc>
  404694:	204004b8 	.word	0x204004b8
	...

004046c0 <strlen>:
  4046c0:	f890 f000 	pld	[r0]
  4046c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  4046c8:	f020 0107 	bic.w	r1, r0, #7
  4046cc:	f06f 0c00 	mvn.w	ip, #0
  4046d0:	f010 0407 	ands.w	r4, r0, #7
  4046d4:	f891 f020 	pld	[r1, #32]
  4046d8:	f040 8049 	bne.w	40476e <strlen+0xae>
  4046dc:	f04f 0400 	mov.w	r4, #0
  4046e0:	f06f 0007 	mvn.w	r0, #7
  4046e4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4046e8:	f891 f040 	pld	[r1, #64]	; 0x40
  4046ec:	f100 0008 	add.w	r0, r0, #8
  4046f0:	fa82 f24c 	uadd8	r2, r2, ip
  4046f4:	faa4 f28c 	sel	r2, r4, ip
  4046f8:	fa83 f34c 	uadd8	r3, r3, ip
  4046fc:	faa2 f38c 	sel	r3, r2, ip
  404700:	bb4b      	cbnz	r3, 404756 <strlen+0x96>
  404702:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  404706:	fa82 f24c 	uadd8	r2, r2, ip
  40470a:	f100 0008 	add.w	r0, r0, #8
  40470e:	faa4 f28c 	sel	r2, r4, ip
  404712:	fa83 f34c 	uadd8	r3, r3, ip
  404716:	faa2 f38c 	sel	r3, r2, ip
  40471a:	b9e3      	cbnz	r3, 404756 <strlen+0x96>
  40471c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  404720:	fa82 f24c 	uadd8	r2, r2, ip
  404724:	f100 0008 	add.w	r0, r0, #8
  404728:	faa4 f28c 	sel	r2, r4, ip
  40472c:	fa83 f34c 	uadd8	r3, r3, ip
  404730:	faa2 f38c 	sel	r3, r2, ip
  404734:	b97b      	cbnz	r3, 404756 <strlen+0x96>
  404736:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40473a:	f101 0120 	add.w	r1, r1, #32
  40473e:	fa82 f24c 	uadd8	r2, r2, ip
  404742:	f100 0008 	add.w	r0, r0, #8
  404746:	faa4 f28c 	sel	r2, r4, ip
  40474a:	fa83 f34c 	uadd8	r3, r3, ip
  40474e:	faa2 f38c 	sel	r3, r2, ip
  404752:	2b00      	cmp	r3, #0
  404754:	d0c6      	beq.n	4046e4 <strlen+0x24>
  404756:	2a00      	cmp	r2, #0
  404758:	bf04      	itt	eq
  40475a:	3004      	addeq	r0, #4
  40475c:	461a      	moveq	r2, r3
  40475e:	ba12      	rev	r2, r2
  404760:	fab2 f282 	clz	r2, r2
  404764:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  404768:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40476c:	4770      	bx	lr
  40476e:	e9d1 2300 	ldrd	r2, r3, [r1]
  404772:	f004 0503 	and.w	r5, r4, #3
  404776:	f1c4 0000 	rsb	r0, r4, #0
  40477a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40477e:	f014 0f04 	tst.w	r4, #4
  404782:	f891 f040 	pld	[r1, #64]	; 0x40
  404786:	fa0c f505 	lsl.w	r5, ip, r5
  40478a:	ea62 0205 	orn	r2, r2, r5
  40478e:	bf1c      	itt	ne
  404790:	ea63 0305 	ornne	r3, r3, r5
  404794:	4662      	movne	r2, ip
  404796:	f04f 0400 	mov.w	r4, #0
  40479a:	e7a9      	b.n	4046f0 <strlen+0x30>

0040479c <__sprint_r.part.0>:
  40479c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  40479e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4047a2:	049c      	lsls	r4, r3, #18
  4047a4:	4692      	mov	sl, r2
  4047a6:	d52c      	bpl.n	404802 <__sprint_r.part.0+0x66>
  4047a8:	6893      	ldr	r3, [r2, #8]
  4047aa:	6812      	ldr	r2, [r2, #0]
  4047ac:	b33b      	cbz	r3, 4047fe <__sprint_r.part.0+0x62>
  4047ae:	460f      	mov	r7, r1
  4047b0:	4680      	mov	r8, r0
  4047b2:	f102 0908 	add.w	r9, r2, #8
  4047b6:	e919 0060 	ldmdb	r9, {r5, r6}
  4047ba:	08b6      	lsrs	r6, r6, #2
  4047bc:	d017      	beq.n	4047ee <__sprint_r.part.0+0x52>
  4047be:	3d04      	subs	r5, #4
  4047c0:	2400      	movs	r4, #0
  4047c2:	e001      	b.n	4047c8 <__sprint_r.part.0+0x2c>
  4047c4:	42a6      	cmp	r6, r4
  4047c6:	d010      	beq.n	4047ea <__sprint_r.part.0+0x4e>
  4047c8:	463a      	mov	r2, r7
  4047ca:	f855 1f04 	ldr.w	r1, [r5, #4]!
  4047ce:	4640      	mov	r0, r8
  4047d0:	f001 f96a 	bl	405aa8 <_fputwc_r>
  4047d4:	1c43      	adds	r3, r0, #1
  4047d6:	f104 0401 	add.w	r4, r4, #1
  4047da:	d1f3      	bne.n	4047c4 <__sprint_r.part.0+0x28>
  4047dc:	2300      	movs	r3, #0
  4047de:	f8ca 3008 	str.w	r3, [sl, #8]
  4047e2:	f8ca 3004 	str.w	r3, [sl, #4]
  4047e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4047ea:	f8da 3008 	ldr.w	r3, [sl, #8]
  4047ee:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
  4047f2:	f8ca 3008 	str.w	r3, [sl, #8]
  4047f6:	f109 0908 	add.w	r9, r9, #8
  4047fa:	2b00      	cmp	r3, #0
  4047fc:	d1db      	bne.n	4047b6 <__sprint_r.part.0+0x1a>
  4047fe:	2000      	movs	r0, #0
  404800:	e7ec      	b.n	4047dc <__sprint_r.part.0+0x40>
  404802:	f001 fa99 	bl	405d38 <__sfvwrite_r>
  404806:	2300      	movs	r3, #0
  404808:	f8ca 3008 	str.w	r3, [sl, #8]
  40480c:	f8ca 3004 	str.w	r3, [sl, #4]
  404810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00404814 <_vfiprintf_r>:
  404814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404818:	b0ab      	sub	sp, #172	; 0xac
  40481a:	461c      	mov	r4, r3
  40481c:	9100      	str	r1, [sp, #0]
  40481e:	4690      	mov	r8, r2
  404820:	9304      	str	r3, [sp, #16]
  404822:	9005      	str	r0, [sp, #20]
  404824:	b118      	cbz	r0, 40482e <_vfiprintf_r+0x1a>
  404826:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404828:	2b00      	cmp	r3, #0
  40482a:	f000 80de 	beq.w	4049ea <_vfiprintf_r+0x1d6>
  40482e:	9800      	ldr	r0, [sp, #0]
  404830:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
  404834:	b28a      	uxth	r2, r1
  404836:	0495      	lsls	r5, r2, #18
  404838:	d407      	bmi.n	40484a <_vfiprintf_r+0x36>
  40483a:	6e43      	ldr	r3, [r0, #100]	; 0x64
  40483c:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
  404840:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  404844:	8182      	strh	r2, [r0, #12]
  404846:	6643      	str	r3, [r0, #100]	; 0x64
  404848:	b292      	uxth	r2, r2
  40484a:	0711      	lsls	r1, r2, #28
  40484c:	f140 80b1 	bpl.w	4049b2 <_vfiprintf_r+0x19e>
  404850:	9b00      	ldr	r3, [sp, #0]
  404852:	691b      	ldr	r3, [r3, #16]
  404854:	2b00      	cmp	r3, #0
  404856:	f000 80ac 	beq.w	4049b2 <_vfiprintf_r+0x19e>
  40485a:	f002 021a 	and.w	r2, r2, #26
  40485e:	2a0a      	cmp	r2, #10
  404860:	f000 80b5 	beq.w	4049ce <_vfiprintf_r+0x1ba>
  404864:	2300      	movs	r3, #0
  404866:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
  40486a:	9302      	str	r3, [sp, #8]
  40486c:	930f      	str	r3, [sp, #60]	; 0x3c
  40486e:	930e      	str	r3, [sp, #56]	; 0x38
  404870:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  404874:	46da      	mov	sl, fp
  404876:	f898 3000 	ldrb.w	r3, [r8]
  40487a:	4644      	mov	r4, r8
  40487c:	b1fb      	cbz	r3, 4048be <_vfiprintf_r+0xaa>
  40487e:	2b25      	cmp	r3, #37	; 0x25
  404880:	d102      	bne.n	404888 <_vfiprintf_r+0x74>
  404882:	e01c      	b.n	4048be <_vfiprintf_r+0xaa>
  404884:	2b25      	cmp	r3, #37	; 0x25
  404886:	d003      	beq.n	404890 <_vfiprintf_r+0x7c>
  404888:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40488c:	2b00      	cmp	r3, #0
  40488e:	d1f9      	bne.n	404884 <_vfiprintf_r+0x70>
  404890:	ebc8 0504 	rsb	r5, r8, r4
  404894:	b19d      	cbz	r5, 4048be <_vfiprintf_r+0xaa>
  404896:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404898:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40489a:	f8ca 8000 	str.w	r8, [sl]
  40489e:	3301      	adds	r3, #1
  4048a0:	442a      	add	r2, r5
  4048a2:	2b07      	cmp	r3, #7
  4048a4:	f8ca 5004 	str.w	r5, [sl, #4]
  4048a8:	920f      	str	r2, [sp, #60]	; 0x3c
  4048aa:	930e      	str	r3, [sp, #56]	; 0x38
  4048ac:	dd7b      	ble.n	4049a6 <_vfiprintf_r+0x192>
  4048ae:	2a00      	cmp	r2, #0
  4048b0:	f040 8528 	bne.w	405304 <_vfiprintf_r+0xaf0>
  4048b4:	9b02      	ldr	r3, [sp, #8]
  4048b6:	920e      	str	r2, [sp, #56]	; 0x38
  4048b8:	442b      	add	r3, r5
  4048ba:	46da      	mov	sl, fp
  4048bc:	9302      	str	r3, [sp, #8]
  4048be:	7823      	ldrb	r3, [r4, #0]
  4048c0:	2b00      	cmp	r3, #0
  4048c2:	f000 843e 	beq.w	405142 <_vfiprintf_r+0x92e>
  4048c6:	2100      	movs	r1, #0
  4048c8:	f04f 0300 	mov.w	r3, #0
  4048cc:	f04f 32ff 	mov.w	r2, #4294967295
  4048d0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  4048d4:	f104 0801 	add.w	r8, r4, #1
  4048d8:	7863      	ldrb	r3, [r4, #1]
  4048da:	9201      	str	r2, [sp, #4]
  4048dc:	4608      	mov	r0, r1
  4048de:	460e      	mov	r6, r1
  4048e0:	460c      	mov	r4, r1
  4048e2:	f108 0801 	add.w	r8, r8, #1
  4048e6:	f1a3 0220 	sub.w	r2, r3, #32
  4048ea:	2a58      	cmp	r2, #88	; 0x58
  4048ec:	f200 8393 	bhi.w	405016 <_vfiprintf_r+0x802>
  4048f0:	e8df f012 	tbh	[pc, r2, lsl #1]
  4048f4:	03910346 	.word	0x03910346
  4048f8:	034e0391 	.word	0x034e0391
  4048fc:	03910391 	.word	0x03910391
  404900:	03910391 	.word	0x03910391
  404904:	03910391 	.word	0x03910391
  404908:	02670289 	.word	0x02670289
  40490c:	00800391 	.word	0x00800391
  404910:	0391026c 	.word	0x0391026c
  404914:	025901c6 	.word	0x025901c6
  404918:	02590259 	.word	0x02590259
  40491c:	02590259 	.word	0x02590259
  404920:	02590259 	.word	0x02590259
  404924:	02590259 	.word	0x02590259
  404928:	03910391 	.word	0x03910391
  40492c:	03910391 	.word	0x03910391
  404930:	03910391 	.word	0x03910391
  404934:	03910391 	.word	0x03910391
  404938:	03910391 	.word	0x03910391
  40493c:	039101cb 	.word	0x039101cb
  404940:	03910391 	.word	0x03910391
  404944:	03910391 	.word	0x03910391
  404948:	03910391 	.word	0x03910391
  40494c:	03910391 	.word	0x03910391
  404950:	02140391 	.word	0x02140391
  404954:	03910391 	.word	0x03910391
  404958:	03910391 	.word	0x03910391
  40495c:	02ee0391 	.word	0x02ee0391
  404960:	03910391 	.word	0x03910391
  404964:	03910311 	.word	0x03910311
  404968:	03910391 	.word	0x03910391
  40496c:	03910391 	.word	0x03910391
  404970:	03910391 	.word	0x03910391
  404974:	03910391 	.word	0x03910391
  404978:	03340391 	.word	0x03340391
  40497c:	0391038a 	.word	0x0391038a
  404980:	03910391 	.word	0x03910391
  404984:	038a0367 	.word	0x038a0367
  404988:	03910391 	.word	0x03910391
  40498c:	0391036c 	.word	0x0391036c
  404990:	02950379 	.word	0x02950379
  404994:	02e90085 	.word	0x02e90085
  404998:	029b0391 	.word	0x029b0391
  40499c:	02ba0391 	.word	0x02ba0391
  4049a0:	03910391 	.word	0x03910391
  4049a4:	0353      	.short	0x0353
  4049a6:	f10a 0a08 	add.w	sl, sl, #8
  4049aa:	9b02      	ldr	r3, [sp, #8]
  4049ac:	442b      	add	r3, r5
  4049ae:	9302      	str	r3, [sp, #8]
  4049b0:	e785      	b.n	4048be <_vfiprintf_r+0xaa>
  4049b2:	9900      	ldr	r1, [sp, #0]
  4049b4:	9805      	ldr	r0, [sp, #20]
  4049b6:	f000 fe61 	bl	40567c <__swsetup_r>
  4049ba:	2800      	cmp	r0, #0
  4049bc:	f040 8558 	bne.w	405470 <_vfiprintf_r+0xc5c>
  4049c0:	9b00      	ldr	r3, [sp, #0]
  4049c2:	899a      	ldrh	r2, [r3, #12]
  4049c4:	f002 021a 	and.w	r2, r2, #26
  4049c8:	2a0a      	cmp	r2, #10
  4049ca:	f47f af4b 	bne.w	404864 <_vfiprintf_r+0x50>
  4049ce:	9900      	ldr	r1, [sp, #0]
  4049d0:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
  4049d4:	2b00      	cmp	r3, #0
  4049d6:	f6ff af45 	blt.w	404864 <_vfiprintf_r+0x50>
  4049da:	4623      	mov	r3, r4
  4049dc:	4642      	mov	r2, r8
  4049de:	9805      	ldr	r0, [sp, #20]
  4049e0:	f000 fe16 	bl	405610 <__sbprintf>
  4049e4:	b02b      	add	sp, #172	; 0xac
  4049e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4049ea:	f000 fff3 	bl	4059d4 <__sinit>
  4049ee:	e71e      	b.n	40482e <_vfiprintf_r+0x1a>
  4049f0:	4264      	negs	r4, r4
  4049f2:	9304      	str	r3, [sp, #16]
  4049f4:	f046 0604 	orr.w	r6, r6, #4
  4049f8:	f898 3000 	ldrb.w	r3, [r8]
  4049fc:	e771      	b.n	4048e2 <_vfiprintf_r+0xce>
  4049fe:	2130      	movs	r1, #48	; 0x30
  404a00:	9804      	ldr	r0, [sp, #16]
  404a02:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
  404a06:	9901      	ldr	r1, [sp, #4]
  404a08:	9406      	str	r4, [sp, #24]
  404a0a:	f04f 0300 	mov.w	r3, #0
  404a0e:	2278      	movs	r2, #120	; 0x78
  404a10:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  404a14:	2900      	cmp	r1, #0
  404a16:	4603      	mov	r3, r0
  404a18:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
  404a1c:	6804      	ldr	r4, [r0, #0]
  404a1e:	f103 0304 	add.w	r3, r3, #4
  404a22:	f04f 0500 	mov.w	r5, #0
  404a26:	f046 0202 	orr.w	r2, r6, #2
  404a2a:	f2c0 8525 	blt.w	405478 <_vfiprintf_r+0xc64>
  404a2e:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  404a32:	ea54 0205 	orrs.w	r2, r4, r5
  404a36:	f046 0602 	orr.w	r6, r6, #2
  404a3a:	9304      	str	r3, [sp, #16]
  404a3c:	f040 84bf 	bne.w	4053be <_vfiprintf_r+0xbaa>
  404a40:	48b3      	ldr	r0, [pc, #716]	; (404d10 <_vfiprintf_r+0x4fc>)
  404a42:	9b01      	ldr	r3, [sp, #4]
  404a44:	2b00      	cmp	r3, #0
  404a46:	f040 841c 	bne.w	405282 <_vfiprintf_r+0xa6e>
  404a4a:	4699      	mov	r9, r3
  404a4c:	2300      	movs	r3, #0
  404a4e:	9301      	str	r3, [sp, #4]
  404a50:	9303      	str	r3, [sp, #12]
  404a52:	465f      	mov	r7, fp
  404a54:	9b01      	ldr	r3, [sp, #4]
  404a56:	9a03      	ldr	r2, [sp, #12]
  404a58:	4293      	cmp	r3, r2
  404a5a:	bfb8      	it	lt
  404a5c:	4613      	movlt	r3, r2
  404a5e:	461d      	mov	r5, r3
  404a60:	f1b9 0f00 	cmp.w	r9, #0
  404a64:	d000      	beq.n	404a68 <_vfiprintf_r+0x254>
  404a66:	3501      	adds	r5, #1
  404a68:	f016 0302 	ands.w	r3, r6, #2
  404a6c:	9307      	str	r3, [sp, #28]
  404a6e:	bf18      	it	ne
  404a70:	3502      	addne	r5, #2
  404a72:	f016 0384 	ands.w	r3, r6, #132	; 0x84
  404a76:	9308      	str	r3, [sp, #32]
  404a78:	f040 82f1 	bne.w	40505e <_vfiprintf_r+0x84a>
  404a7c:	9b06      	ldr	r3, [sp, #24]
  404a7e:	1b5c      	subs	r4, r3, r5
  404a80:	2c00      	cmp	r4, #0
  404a82:	f340 82ec 	ble.w	40505e <_vfiprintf_r+0x84a>
  404a86:	2c10      	cmp	r4, #16
  404a88:	f340 8556 	ble.w	405538 <_vfiprintf_r+0xd24>
  404a8c:	f8df 9284 	ldr.w	r9, [pc, #644]	; 404d14 <_vfiprintf_r+0x500>
  404a90:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
  404a94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404a96:	46d4      	mov	ip, sl
  404a98:	2310      	movs	r3, #16
  404a9a:	46c2      	mov	sl, r8
  404a9c:	4670      	mov	r0, lr
  404a9e:	46a8      	mov	r8, r5
  404aa0:	464d      	mov	r5, r9
  404aa2:	f8dd 9014 	ldr.w	r9, [sp, #20]
  404aa6:	e007      	b.n	404ab8 <_vfiprintf_r+0x2a4>
  404aa8:	f100 0e02 	add.w	lr, r0, #2
  404aac:	f10c 0c08 	add.w	ip, ip, #8
  404ab0:	4608      	mov	r0, r1
  404ab2:	3c10      	subs	r4, #16
  404ab4:	2c10      	cmp	r4, #16
  404ab6:	dd13      	ble.n	404ae0 <_vfiprintf_r+0x2cc>
  404ab8:	1c41      	adds	r1, r0, #1
  404aba:	3210      	adds	r2, #16
  404abc:	2907      	cmp	r1, #7
  404abe:	920f      	str	r2, [sp, #60]	; 0x3c
  404ac0:	f8cc 5000 	str.w	r5, [ip]
  404ac4:	f8cc 3004 	str.w	r3, [ip, #4]
  404ac8:	910e      	str	r1, [sp, #56]	; 0x38
  404aca:	dded      	ble.n	404aa8 <_vfiprintf_r+0x294>
  404acc:	2a00      	cmp	r2, #0
  404ace:	f040 82b7 	bne.w	405040 <_vfiprintf_r+0x82c>
  404ad2:	3c10      	subs	r4, #16
  404ad4:	2c10      	cmp	r4, #16
  404ad6:	4610      	mov	r0, r2
  404ad8:	f04f 0e01 	mov.w	lr, #1
  404adc:	46dc      	mov	ip, fp
  404ade:	dceb      	bgt.n	404ab8 <_vfiprintf_r+0x2a4>
  404ae0:	46a9      	mov	r9, r5
  404ae2:	4670      	mov	r0, lr
  404ae4:	4645      	mov	r5, r8
  404ae6:	46d0      	mov	r8, sl
  404ae8:	46e2      	mov	sl, ip
  404aea:	4422      	add	r2, r4
  404aec:	2807      	cmp	r0, #7
  404aee:	920f      	str	r2, [sp, #60]	; 0x3c
  404af0:	f8ca 9000 	str.w	r9, [sl]
  404af4:	f8ca 4004 	str.w	r4, [sl, #4]
  404af8:	900e      	str	r0, [sp, #56]	; 0x38
  404afa:	f300 8375 	bgt.w	4051e8 <_vfiprintf_r+0x9d4>
  404afe:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  404b02:	f10a 0a08 	add.w	sl, sl, #8
  404b06:	f100 0e01 	add.w	lr, r0, #1
  404b0a:	2b00      	cmp	r3, #0
  404b0c:	f040 82b0 	bne.w	405070 <_vfiprintf_r+0x85c>
  404b10:	9b07      	ldr	r3, [sp, #28]
  404b12:	2b00      	cmp	r3, #0
  404b14:	f000 82c3 	beq.w	40509e <_vfiprintf_r+0x88a>
  404b18:	3202      	adds	r2, #2
  404b1a:	a90c      	add	r1, sp, #48	; 0x30
  404b1c:	2302      	movs	r3, #2
  404b1e:	f1be 0f07 	cmp.w	lr, #7
  404b22:	920f      	str	r2, [sp, #60]	; 0x3c
  404b24:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  404b28:	e88a 000a 	stmia.w	sl, {r1, r3}
  404b2c:	f340 8378 	ble.w	405220 <_vfiprintf_r+0xa0c>
  404b30:	2a00      	cmp	r2, #0
  404b32:	f040 840a 	bne.w	40534a <_vfiprintf_r+0xb36>
  404b36:	9b08      	ldr	r3, [sp, #32]
  404b38:	2b80      	cmp	r3, #128	; 0x80
  404b3a:	f04f 0e01 	mov.w	lr, #1
  404b3e:	4610      	mov	r0, r2
  404b40:	46da      	mov	sl, fp
  404b42:	f040 82b0 	bne.w	4050a6 <_vfiprintf_r+0x892>
  404b46:	9b06      	ldr	r3, [sp, #24]
  404b48:	1b5c      	subs	r4, r3, r5
  404b4a:	2c00      	cmp	r4, #0
  404b4c:	f340 82ab 	ble.w	4050a6 <_vfiprintf_r+0x892>
  404b50:	2c10      	cmp	r4, #16
  404b52:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 404d18 <_vfiprintf_r+0x504>
  404b56:	f340 850b 	ble.w	405570 <_vfiprintf_r+0xd5c>
  404b5a:	46d6      	mov	lr, sl
  404b5c:	2310      	movs	r3, #16
  404b5e:	46c2      	mov	sl, r8
  404b60:	46a8      	mov	r8, r5
  404b62:	464d      	mov	r5, r9
  404b64:	f8dd 9014 	ldr.w	r9, [sp, #20]
  404b68:	e007      	b.n	404b7a <_vfiprintf_r+0x366>
  404b6a:	f100 0c02 	add.w	ip, r0, #2
  404b6e:	f10e 0e08 	add.w	lr, lr, #8
  404b72:	4608      	mov	r0, r1
  404b74:	3c10      	subs	r4, #16
  404b76:	2c10      	cmp	r4, #16
  404b78:	dd13      	ble.n	404ba2 <_vfiprintf_r+0x38e>
  404b7a:	1c41      	adds	r1, r0, #1
  404b7c:	3210      	adds	r2, #16
  404b7e:	2907      	cmp	r1, #7
  404b80:	920f      	str	r2, [sp, #60]	; 0x3c
  404b82:	f8ce 5000 	str.w	r5, [lr]
  404b86:	f8ce 3004 	str.w	r3, [lr, #4]
  404b8a:	910e      	str	r1, [sp, #56]	; 0x38
  404b8c:	dded      	ble.n	404b6a <_vfiprintf_r+0x356>
  404b8e:	2a00      	cmp	r2, #0
  404b90:	f040 8315 	bne.w	4051be <_vfiprintf_r+0x9aa>
  404b94:	3c10      	subs	r4, #16
  404b96:	2c10      	cmp	r4, #16
  404b98:	f04f 0c01 	mov.w	ip, #1
  404b9c:	4610      	mov	r0, r2
  404b9e:	46de      	mov	lr, fp
  404ba0:	dceb      	bgt.n	404b7a <_vfiprintf_r+0x366>
  404ba2:	46a9      	mov	r9, r5
  404ba4:	4645      	mov	r5, r8
  404ba6:	46d0      	mov	r8, sl
  404ba8:	46f2      	mov	sl, lr
  404baa:	4422      	add	r2, r4
  404bac:	f1bc 0f07 	cmp.w	ip, #7
  404bb0:	920f      	str	r2, [sp, #60]	; 0x3c
  404bb2:	f8ca 9000 	str.w	r9, [sl]
  404bb6:	f8ca 4004 	str.w	r4, [sl, #4]
  404bba:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  404bbe:	f300 83d2 	bgt.w	405366 <_vfiprintf_r+0xb52>
  404bc2:	9b01      	ldr	r3, [sp, #4]
  404bc4:	9903      	ldr	r1, [sp, #12]
  404bc6:	1a5c      	subs	r4, r3, r1
  404bc8:	2c00      	cmp	r4, #0
  404bca:	f10a 0a08 	add.w	sl, sl, #8
  404bce:	f10c 0e01 	add.w	lr, ip, #1
  404bd2:	4660      	mov	r0, ip
  404bd4:	f300 826d 	bgt.w	4050b2 <_vfiprintf_r+0x89e>
  404bd8:	9903      	ldr	r1, [sp, #12]
  404bda:	f8ca 7000 	str.w	r7, [sl]
  404bde:	440a      	add	r2, r1
  404be0:	f1be 0f07 	cmp.w	lr, #7
  404be4:	920f      	str	r2, [sp, #60]	; 0x3c
  404be6:	f8ca 1004 	str.w	r1, [sl, #4]
  404bea:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  404bee:	f340 82ce 	ble.w	40518e <_vfiprintf_r+0x97a>
  404bf2:	2a00      	cmp	r2, #0
  404bf4:	f040 833a 	bne.w	40526c <_vfiprintf_r+0xa58>
  404bf8:	0770      	lsls	r0, r6, #29
  404bfa:	920e      	str	r2, [sp, #56]	; 0x38
  404bfc:	d538      	bpl.n	404c70 <_vfiprintf_r+0x45c>
  404bfe:	9b06      	ldr	r3, [sp, #24]
  404c00:	1b5c      	subs	r4, r3, r5
  404c02:	2c00      	cmp	r4, #0
  404c04:	dd34      	ble.n	404c70 <_vfiprintf_r+0x45c>
  404c06:	46da      	mov	sl, fp
  404c08:	2c10      	cmp	r4, #16
  404c0a:	f340 84ab 	ble.w	405564 <_vfiprintf_r+0xd50>
  404c0e:	f8df 9104 	ldr.w	r9, [pc, #260]	; 404d14 <_vfiprintf_r+0x500>
  404c12:	990e      	ldr	r1, [sp, #56]	; 0x38
  404c14:	464f      	mov	r7, r9
  404c16:	2610      	movs	r6, #16
  404c18:	f8dd 9014 	ldr.w	r9, [sp, #20]
  404c1c:	e006      	b.n	404c2c <_vfiprintf_r+0x418>
  404c1e:	1c88      	adds	r0, r1, #2
  404c20:	f10a 0a08 	add.w	sl, sl, #8
  404c24:	4619      	mov	r1, r3
  404c26:	3c10      	subs	r4, #16
  404c28:	2c10      	cmp	r4, #16
  404c2a:	dd13      	ble.n	404c54 <_vfiprintf_r+0x440>
  404c2c:	1c4b      	adds	r3, r1, #1
  404c2e:	3210      	adds	r2, #16
  404c30:	2b07      	cmp	r3, #7
  404c32:	920f      	str	r2, [sp, #60]	; 0x3c
  404c34:	f8ca 7000 	str.w	r7, [sl]
  404c38:	f8ca 6004 	str.w	r6, [sl, #4]
  404c3c:	930e      	str	r3, [sp, #56]	; 0x38
  404c3e:	ddee      	ble.n	404c1e <_vfiprintf_r+0x40a>
  404c40:	2a00      	cmp	r2, #0
  404c42:	f040 828e 	bne.w	405162 <_vfiprintf_r+0x94e>
  404c46:	3c10      	subs	r4, #16
  404c48:	2c10      	cmp	r4, #16
  404c4a:	f04f 0001 	mov.w	r0, #1
  404c4e:	4611      	mov	r1, r2
  404c50:	46da      	mov	sl, fp
  404c52:	dceb      	bgt.n	404c2c <_vfiprintf_r+0x418>
  404c54:	46b9      	mov	r9, r7
  404c56:	4422      	add	r2, r4
  404c58:	2807      	cmp	r0, #7
  404c5a:	920f      	str	r2, [sp, #60]	; 0x3c
  404c5c:	f8ca 9000 	str.w	r9, [sl]
  404c60:	f8ca 4004 	str.w	r4, [sl, #4]
  404c64:	900e      	str	r0, [sp, #56]	; 0x38
  404c66:	f340 829b 	ble.w	4051a0 <_vfiprintf_r+0x98c>
  404c6a:	2a00      	cmp	r2, #0
  404c6c:	f040 8425 	bne.w	4054ba <_vfiprintf_r+0xca6>
  404c70:	9b02      	ldr	r3, [sp, #8]
  404c72:	9a06      	ldr	r2, [sp, #24]
  404c74:	42aa      	cmp	r2, r5
  404c76:	bfac      	ite	ge
  404c78:	189b      	addge	r3, r3, r2
  404c7a:	195b      	addlt	r3, r3, r5
  404c7c:	9302      	str	r3, [sp, #8]
  404c7e:	e299      	b.n	4051b4 <_vfiprintf_r+0x9a0>
  404c80:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  404c84:	f898 3000 	ldrb.w	r3, [r8]
  404c88:	e62b      	b.n	4048e2 <_vfiprintf_r+0xce>
  404c8a:	9406      	str	r4, [sp, #24]
  404c8c:	2900      	cmp	r1, #0
  404c8e:	f040 84af 	bne.w	4055f0 <_vfiprintf_r+0xddc>
  404c92:	f046 0610 	orr.w	r6, r6, #16
  404c96:	06b3      	lsls	r3, r6, #26
  404c98:	f140 8312 	bpl.w	4052c0 <_vfiprintf_r+0xaac>
  404c9c:	9904      	ldr	r1, [sp, #16]
  404c9e:	3107      	adds	r1, #7
  404ca0:	f021 0107 	bic.w	r1, r1, #7
  404ca4:	e9d1 2300 	ldrd	r2, r3, [r1]
  404ca8:	3108      	adds	r1, #8
  404caa:	9104      	str	r1, [sp, #16]
  404cac:	4614      	mov	r4, r2
  404cae:	461d      	mov	r5, r3
  404cb0:	2a00      	cmp	r2, #0
  404cb2:	f173 0300 	sbcs.w	r3, r3, #0
  404cb6:	f2c0 8386 	blt.w	4053c6 <_vfiprintf_r+0xbb2>
  404cba:	9b01      	ldr	r3, [sp, #4]
  404cbc:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  404cc0:	2b00      	cmp	r3, #0
  404cc2:	f2c0 831a 	blt.w	4052fa <_vfiprintf_r+0xae6>
  404cc6:	ea54 0305 	orrs.w	r3, r4, r5
  404cca:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  404cce:	f000 80ed 	beq.w	404eac <_vfiprintf_r+0x698>
  404cd2:	2d00      	cmp	r5, #0
  404cd4:	bf08      	it	eq
  404cd6:	2c0a      	cmpeq	r4, #10
  404cd8:	f0c0 80ed 	bcc.w	404eb6 <_vfiprintf_r+0x6a2>
  404cdc:	465f      	mov	r7, fp
  404cde:	4620      	mov	r0, r4
  404ce0:	4629      	mov	r1, r5
  404ce2:	220a      	movs	r2, #10
  404ce4:	2300      	movs	r3, #0
  404ce6:	f002 fa47 	bl	407178 <__aeabi_uldivmod>
  404cea:	3230      	adds	r2, #48	; 0x30
  404cec:	f807 2d01 	strb.w	r2, [r7, #-1]!
  404cf0:	4620      	mov	r0, r4
  404cf2:	4629      	mov	r1, r5
  404cf4:	2300      	movs	r3, #0
  404cf6:	220a      	movs	r2, #10
  404cf8:	f002 fa3e 	bl	407178 <__aeabi_uldivmod>
  404cfc:	4604      	mov	r4, r0
  404cfe:	460d      	mov	r5, r1
  404d00:	ea54 0305 	orrs.w	r3, r4, r5
  404d04:	d1eb      	bne.n	404cde <_vfiprintf_r+0x4ca>
  404d06:	ebc7 030b 	rsb	r3, r7, fp
  404d0a:	9303      	str	r3, [sp, #12]
  404d0c:	e6a2      	b.n	404a54 <_vfiprintf_r+0x240>
  404d0e:	bf00      	nop
  404d10:	00408644 	.word	0x00408644
  404d14:	00408660 	.word	0x00408660
  404d18:	00408620 	.word	0x00408620
  404d1c:	9406      	str	r4, [sp, #24]
  404d1e:	2900      	cmp	r1, #0
  404d20:	f040 8462 	bne.w	4055e8 <_vfiprintf_r+0xdd4>
  404d24:	f046 0610 	orr.w	r6, r6, #16
  404d28:	f016 0320 	ands.w	r3, r6, #32
  404d2c:	f000 82ae 	beq.w	40528c <_vfiprintf_r+0xa78>
  404d30:	9b04      	ldr	r3, [sp, #16]
  404d32:	3307      	adds	r3, #7
  404d34:	f023 0307 	bic.w	r3, r3, #7
  404d38:	f04f 0200 	mov.w	r2, #0
  404d3c:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  404d40:	e9d3 4500 	ldrd	r4, r5, [r3]
  404d44:	f103 0208 	add.w	r2, r3, #8
  404d48:	9b01      	ldr	r3, [sp, #4]
  404d4a:	9204      	str	r2, [sp, #16]
  404d4c:	2b00      	cmp	r3, #0
  404d4e:	f2c0 8174 	blt.w	40503a <_vfiprintf_r+0x826>
  404d52:	ea54 0305 	orrs.w	r3, r4, r5
  404d56:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  404d5a:	f040 816e 	bne.w	40503a <_vfiprintf_r+0x826>
  404d5e:	9b01      	ldr	r3, [sp, #4]
  404d60:	2b00      	cmp	r3, #0
  404d62:	f000 8430 	beq.w	4055c6 <_vfiprintf_r+0xdb2>
  404d66:	f04f 0900 	mov.w	r9, #0
  404d6a:	2400      	movs	r4, #0
  404d6c:	2500      	movs	r5, #0
  404d6e:	465f      	mov	r7, fp
  404d70:	08e2      	lsrs	r2, r4, #3
  404d72:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  404d76:	08e9      	lsrs	r1, r5, #3
  404d78:	f004 0307 	and.w	r3, r4, #7
  404d7c:	460d      	mov	r5, r1
  404d7e:	4614      	mov	r4, r2
  404d80:	3330      	adds	r3, #48	; 0x30
  404d82:	ea54 0205 	orrs.w	r2, r4, r5
  404d86:	f807 3d01 	strb.w	r3, [r7, #-1]!
  404d8a:	d1f1      	bne.n	404d70 <_vfiprintf_r+0x55c>
  404d8c:	07f4      	lsls	r4, r6, #31
  404d8e:	d5ba      	bpl.n	404d06 <_vfiprintf_r+0x4f2>
  404d90:	2b30      	cmp	r3, #48	; 0x30
  404d92:	d0b8      	beq.n	404d06 <_vfiprintf_r+0x4f2>
  404d94:	2230      	movs	r2, #48	; 0x30
  404d96:	1e7b      	subs	r3, r7, #1
  404d98:	f807 2c01 	strb.w	r2, [r7, #-1]
  404d9c:	ebc3 020b 	rsb	r2, r3, fp
  404da0:	9203      	str	r2, [sp, #12]
  404da2:	461f      	mov	r7, r3
  404da4:	e656      	b.n	404a54 <_vfiprintf_r+0x240>
  404da6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  404daa:	2400      	movs	r4, #0
  404dac:	f818 3b01 	ldrb.w	r3, [r8], #1
  404db0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404db4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
  404db8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  404dbc:	2a09      	cmp	r2, #9
  404dbe:	d9f5      	bls.n	404dac <_vfiprintf_r+0x598>
  404dc0:	e591      	b.n	4048e6 <_vfiprintf_r+0xd2>
  404dc2:	f898 3000 	ldrb.w	r3, [r8]
  404dc6:	2101      	movs	r1, #1
  404dc8:	202b      	movs	r0, #43	; 0x2b
  404dca:	e58a      	b.n	4048e2 <_vfiprintf_r+0xce>
  404dcc:	f898 3000 	ldrb.w	r3, [r8]
  404dd0:	2b2a      	cmp	r3, #42	; 0x2a
  404dd2:	f108 0501 	add.w	r5, r8, #1
  404dd6:	f000 83dd 	beq.w	405594 <_vfiprintf_r+0xd80>
  404dda:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  404dde:	2a09      	cmp	r2, #9
  404de0:	46a8      	mov	r8, r5
  404de2:	bf98      	it	ls
  404de4:	2500      	movls	r5, #0
  404de6:	f200 83ce 	bhi.w	405586 <_vfiprintf_r+0xd72>
  404dea:	f818 3b01 	ldrb.w	r3, [r8], #1
  404dee:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  404df2:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  404df6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  404dfa:	2a09      	cmp	r2, #9
  404dfc:	d9f5      	bls.n	404dea <_vfiprintf_r+0x5d6>
  404dfe:	ea45 72e5 	orr.w	r2, r5, r5, asr #31
  404e02:	9201      	str	r2, [sp, #4]
  404e04:	e56f      	b.n	4048e6 <_vfiprintf_r+0xd2>
  404e06:	9a04      	ldr	r2, [sp, #16]
  404e08:	6814      	ldr	r4, [r2, #0]
  404e0a:	4613      	mov	r3, r2
  404e0c:	2c00      	cmp	r4, #0
  404e0e:	f103 0304 	add.w	r3, r3, #4
  404e12:	f6ff aded 	blt.w	4049f0 <_vfiprintf_r+0x1dc>
  404e16:	9304      	str	r3, [sp, #16]
  404e18:	f898 3000 	ldrb.w	r3, [r8]
  404e1c:	e561      	b.n	4048e2 <_vfiprintf_r+0xce>
  404e1e:	9406      	str	r4, [sp, #24]
  404e20:	2900      	cmp	r1, #0
  404e22:	d081      	beq.n	404d28 <_vfiprintf_r+0x514>
  404e24:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  404e28:	e77e      	b.n	404d28 <_vfiprintf_r+0x514>
  404e2a:	9a04      	ldr	r2, [sp, #16]
  404e2c:	9406      	str	r4, [sp, #24]
  404e2e:	6817      	ldr	r7, [r2, #0]
  404e30:	f04f 0300 	mov.w	r3, #0
  404e34:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  404e38:	1d14      	adds	r4, r2, #4
  404e3a:	9b01      	ldr	r3, [sp, #4]
  404e3c:	2f00      	cmp	r7, #0
  404e3e:	f000 8386 	beq.w	40554e <_vfiprintf_r+0xd3a>
  404e42:	2b00      	cmp	r3, #0
  404e44:	f2c0 835f 	blt.w	405506 <_vfiprintf_r+0xcf2>
  404e48:	461a      	mov	r2, r3
  404e4a:	2100      	movs	r1, #0
  404e4c:	4638      	mov	r0, r7
  404e4e:	f001 fc5f 	bl	406710 <memchr>
  404e52:	2800      	cmp	r0, #0
  404e54:	f000 838f 	beq.w	405576 <_vfiprintf_r+0xd62>
  404e58:	1bc3      	subs	r3, r0, r7
  404e5a:	9303      	str	r3, [sp, #12]
  404e5c:	2300      	movs	r3, #0
  404e5e:	9404      	str	r4, [sp, #16]
  404e60:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  404e64:	9301      	str	r3, [sp, #4]
  404e66:	e5f5      	b.n	404a54 <_vfiprintf_r+0x240>
  404e68:	9406      	str	r4, [sp, #24]
  404e6a:	2900      	cmp	r1, #0
  404e6c:	f040 83b9 	bne.w	4055e2 <_vfiprintf_r+0xdce>
  404e70:	f016 0920 	ands.w	r9, r6, #32
  404e74:	d135      	bne.n	404ee2 <_vfiprintf_r+0x6ce>
  404e76:	f016 0310 	ands.w	r3, r6, #16
  404e7a:	d103      	bne.n	404e84 <_vfiprintf_r+0x670>
  404e7c:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  404e80:	f040 832a 	bne.w	4054d8 <_vfiprintf_r+0xcc4>
  404e84:	9a04      	ldr	r2, [sp, #16]
  404e86:	4613      	mov	r3, r2
  404e88:	6814      	ldr	r4, [r2, #0]
  404e8a:	9a01      	ldr	r2, [sp, #4]
  404e8c:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  404e90:	2a00      	cmp	r2, #0
  404e92:	f103 0304 	add.w	r3, r3, #4
  404e96:	f04f 0500 	mov.w	r5, #0
  404e9a:	f2c0 8332 	blt.w	405502 <_vfiprintf_r+0xcee>
  404e9e:	ea54 0205 	orrs.w	r2, r4, r5
  404ea2:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  404ea6:	9304      	str	r3, [sp, #16]
  404ea8:	f47f af13 	bne.w	404cd2 <_vfiprintf_r+0x4be>
  404eac:	9b01      	ldr	r3, [sp, #4]
  404eae:	2b00      	cmp	r3, #0
  404eb0:	f43f adcc 	beq.w	404a4c <_vfiprintf_r+0x238>
  404eb4:	2400      	movs	r4, #0
  404eb6:	af2a      	add	r7, sp, #168	; 0xa8
  404eb8:	3430      	adds	r4, #48	; 0x30
  404eba:	f807 4d41 	strb.w	r4, [r7, #-65]!
  404ebe:	ebc7 030b 	rsb	r3, r7, fp
  404ec2:	9303      	str	r3, [sp, #12]
  404ec4:	e5c6      	b.n	404a54 <_vfiprintf_r+0x240>
  404ec6:	f046 0620 	orr.w	r6, r6, #32
  404eca:	f898 3000 	ldrb.w	r3, [r8]
  404ece:	e508      	b.n	4048e2 <_vfiprintf_r+0xce>
  404ed0:	9406      	str	r4, [sp, #24]
  404ed2:	2900      	cmp	r1, #0
  404ed4:	f040 836e 	bne.w	4055b4 <_vfiprintf_r+0xda0>
  404ed8:	f046 0610 	orr.w	r6, r6, #16
  404edc:	f016 0920 	ands.w	r9, r6, #32
  404ee0:	d0c9      	beq.n	404e76 <_vfiprintf_r+0x662>
  404ee2:	9b04      	ldr	r3, [sp, #16]
  404ee4:	3307      	adds	r3, #7
  404ee6:	f023 0307 	bic.w	r3, r3, #7
  404eea:	f04f 0200 	mov.w	r2, #0
  404eee:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  404ef2:	e9d3 4500 	ldrd	r4, r5, [r3]
  404ef6:	f103 0208 	add.w	r2, r3, #8
  404efa:	9b01      	ldr	r3, [sp, #4]
  404efc:	9204      	str	r2, [sp, #16]
  404efe:	2b00      	cmp	r3, #0
  404f00:	f2c0 81f9 	blt.w	4052f6 <_vfiprintf_r+0xae2>
  404f04:	ea54 0305 	orrs.w	r3, r4, r5
  404f08:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  404f0c:	f04f 0900 	mov.w	r9, #0
  404f10:	f47f aedf 	bne.w	404cd2 <_vfiprintf_r+0x4be>
  404f14:	e7ca      	b.n	404eac <_vfiprintf_r+0x698>
  404f16:	9406      	str	r4, [sp, #24]
  404f18:	2900      	cmp	r1, #0
  404f1a:	f040 8351 	bne.w	4055c0 <_vfiprintf_r+0xdac>
  404f1e:	06b2      	lsls	r2, r6, #26
  404f20:	48ae      	ldr	r0, [pc, #696]	; (4051dc <_vfiprintf_r+0x9c8>)
  404f22:	d541      	bpl.n	404fa8 <_vfiprintf_r+0x794>
  404f24:	9a04      	ldr	r2, [sp, #16]
  404f26:	3207      	adds	r2, #7
  404f28:	f022 0207 	bic.w	r2, r2, #7
  404f2c:	e9d2 4500 	ldrd	r4, r5, [r2]
  404f30:	f102 0108 	add.w	r1, r2, #8
  404f34:	9104      	str	r1, [sp, #16]
  404f36:	f016 0901 	ands.w	r9, r6, #1
  404f3a:	f000 8177 	beq.w	40522c <_vfiprintf_r+0xa18>
  404f3e:	ea54 0205 	orrs.w	r2, r4, r5
  404f42:	f040 8226 	bne.w	405392 <_vfiprintf_r+0xb7e>
  404f46:	f04f 0300 	mov.w	r3, #0
  404f4a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  404f4e:	9b01      	ldr	r3, [sp, #4]
  404f50:	2b00      	cmp	r3, #0
  404f52:	f2c0 8196 	blt.w	405282 <_vfiprintf_r+0xa6e>
  404f56:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  404f5a:	e572      	b.n	404a42 <_vfiprintf_r+0x22e>
  404f5c:	9a04      	ldr	r2, [sp, #16]
  404f5e:	9406      	str	r4, [sp, #24]
  404f60:	6813      	ldr	r3, [r2, #0]
  404f62:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  404f66:	4613      	mov	r3, r2
  404f68:	f04f 0100 	mov.w	r1, #0
  404f6c:	2501      	movs	r5, #1
  404f6e:	3304      	adds	r3, #4
  404f70:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  404f74:	9304      	str	r3, [sp, #16]
  404f76:	9503      	str	r5, [sp, #12]
  404f78:	af10      	add	r7, sp, #64	; 0x40
  404f7a:	2300      	movs	r3, #0
  404f7c:	9301      	str	r3, [sp, #4]
  404f7e:	e573      	b.n	404a68 <_vfiprintf_r+0x254>
  404f80:	f898 3000 	ldrb.w	r3, [r8]
  404f84:	2800      	cmp	r0, #0
  404f86:	f47f acac 	bne.w	4048e2 <_vfiprintf_r+0xce>
  404f8a:	2101      	movs	r1, #1
  404f8c:	2020      	movs	r0, #32
  404f8e:	e4a8      	b.n	4048e2 <_vfiprintf_r+0xce>
  404f90:	f046 0601 	orr.w	r6, r6, #1
  404f94:	f898 3000 	ldrb.w	r3, [r8]
  404f98:	e4a3      	b.n	4048e2 <_vfiprintf_r+0xce>
  404f9a:	9406      	str	r4, [sp, #24]
  404f9c:	2900      	cmp	r1, #0
  404f9e:	f040 830c 	bne.w	4055ba <_vfiprintf_r+0xda6>
  404fa2:	06b2      	lsls	r2, r6, #26
  404fa4:	488e      	ldr	r0, [pc, #568]	; (4051e0 <_vfiprintf_r+0x9cc>)
  404fa6:	d4bd      	bmi.n	404f24 <_vfiprintf_r+0x710>
  404fa8:	9904      	ldr	r1, [sp, #16]
  404faa:	06f7      	lsls	r7, r6, #27
  404fac:	460a      	mov	r2, r1
  404fae:	f100 819d 	bmi.w	4052ec <_vfiprintf_r+0xad8>
  404fb2:	0675      	lsls	r5, r6, #25
  404fb4:	f140 819a 	bpl.w	4052ec <_vfiprintf_r+0xad8>
  404fb8:	3204      	adds	r2, #4
  404fba:	880c      	ldrh	r4, [r1, #0]
  404fbc:	9204      	str	r2, [sp, #16]
  404fbe:	2500      	movs	r5, #0
  404fc0:	e7b9      	b.n	404f36 <_vfiprintf_r+0x722>
  404fc2:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  404fc6:	f898 3000 	ldrb.w	r3, [r8]
  404fca:	e48a      	b.n	4048e2 <_vfiprintf_r+0xce>
  404fcc:	f898 3000 	ldrb.w	r3, [r8]
  404fd0:	2b6c      	cmp	r3, #108	; 0x6c
  404fd2:	bf03      	ittte	eq
  404fd4:	f898 3001 	ldrbeq.w	r3, [r8, #1]
  404fd8:	f046 0620 	orreq.w	r6, r6, #32
  404fdc:	f108 0801 	addeq.w	r8, r8, #1
  404fe0:	f046 0610 	orrne.w	r6, r6, #16
  404fe4:	e47d      	b.n	4048e2 <_vfiprintf_r+0xce>
  404fe6:	2900      	cmp	r1, #0
  404fe8:	f040 8309 	bne.w	4055fe <_vfiprintf_r+0xdea>
  404fec:	06b4      	lsls	r4, r6, #26
  404fee:	f140 821c 	bpl.w	40542a <_vfiprintf_r+0xc16>
  404ff2:	9a04      	ldr	r2, [sp, #16]
  404ff4:	9902      	ldr	r1, [sp, #8]
  404ff6:	6813      	ldr	r3, [r2, #0]
  404ff8:	17cd      	asrs	r5, r1, #31
  404ffa:	4608      	mov	r0, r1
  404ffc:	3204      	adds	r2, #4
  404ffe:	4629      	mov	r1, r5
  405000:	9204      	str	r2, [sp, #16]
  405002:	e9c3 0100 	strd	r0, r1, [r3]
  405006:	e436      	b.n	404876 <_vfiprintf_r+0x62>
  405008:	9406      	str	r4, [sp, #24]
  40500a:	2900      	cmp	r1, #0
  40500c:	f43f ae43 	beq.w	404c96 <_vfiprintf_r+0x482>
  405010:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  405014:	e63f      	b.n	404c96 <_vfiprintf_r+0x482>
  405016:	9406      	str	r4, [sp, #24]
  405018:	2900      	cmp	r1, #0
  40501a:	f040 82ed 	bne.w	4055f8 <_vfiprintf_r+0xde4>
  40501e:	2b00      	cmp	r3, #0
  405020:	f000 808f 	beq.w	405142 <_vfiprintf_r+0x92e>
  405024:	2501      	movs	r5, #1
  405026:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  40502a:	f04f 0300 	mov.w	r3, #0
  40502e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  405032:	9503      	str	r5, [sp, #12]
  405034:	af10      	add	r7, sp, #64	; 0x40
  405036:	e7a0      	b.n	404f7a <_vfiprintf_r+0x766>
  405038:	9304      	str	r3, [sp, #16]
  40503a:	f04f 0900 	mov.w	r9, #0
  40503e:	e696      	b.n	404d6e <_vfiprintf_r+0x55a>
  405040:	aa0d      	add	r2, sp, #52	; 0x34
  405042:	9900      	ldr	r1, [sp, #0]
  405044:	9309      	str	r3, [sp, #36]	; 0x24
  405046:	4648      	mov	r0, r9
  405048:	f7ff fba8 	bl	40479c <__sprint_r.part.0>
  40504c:	2800      	cmp	r0, #0
  40504e:	d17f      	bne.n	405150 <_vfiprintf_r+0x93c>
  405050:	980e      	ldr	r0, [sp, #56]	; 0x38
  405052:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405054:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405056:	f100 0e01 	add.w	lr, r0, #1
  40505a:	46dc      	mov	ip, fp
  40505c:	e529      	b.n	404ab2 <_vfiprintf_r+0x29e>
  40505e:	980e      	ldr	r0, [sp, #56]	; 0x38
  405060:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405062:	f100 0e01 	add.w	lr, r0, #1
  405066:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  40506a:	2b00      	cmp	r3, #0
  40506c:	f43f ad50 	beq.w	404b10 <_vfiprintf_r+0x2fc>
  405070:	3201      	adds	r2, #1
  405072:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  405076:	2301      	movs	r3, #1
  405078:	f1be 0f07 	cmp.w	lr, #7
  40507c:	920f      	str	r2, [sp, #60]	; 0x3c
  40507e:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  405082:	e88a 000a 	stmia.w	sl, {r1, r3}
  405086:	f340 80bf 	ble.w	405208 <_vfiprintf_r+0x9f4>
  40508a:	2a00      	cmp	r2, #0
  40508c:	f040 814e 	bne.w	40532c <_vfiprintf_r+0xb18>
  405090:	9907      	ldr	r1, [sp, #28]
  405092:	2900      	cmp	r1, #0
  405094:	f040 80be 	bne.w	405214 <_vfiprintf_r+0xa00>
  405098:	469e      	mov	lr, r3
  40509a:	4610      	mov	r0, r2
  40509c:	46da      	mov	sl, fp
  40509e:	9b08      	ldr	r3, [sp, #32]
  4050a0:	2b80      	cmp	r3, #128	; 0x80
  4050a2:	f43f ad50 	beq.w	404b46 <_vfiprintf_r+0x332>
  4050a6:	9b01      	ldr	r3, [sp, #4]
  4050a8:	9903      	ldr	r1, [sp, #12]
  4050aa:	1a5c      	subs	r4, r3, r1
  4050ac:	2c00      	cmp	r4, #0
  4050ae:	f77f ad93 	ble.w	404bd8 <_vfiprintf_r+0x3c4>
  4050b2:	2c10      	cmp	r4, #16
  4050b4:	f8df 912c 	ldr.w	r9, [pc, #300]	; 4051e4 <_vfiprintf_r+0x9d0>
  4050b8:	dd25      	ble.n	405106 <_vfiprintf_r+0x8f2>
  4050ba:	46d4      	mov	ip, sl
  4050bc:	2310      	movs	r3, #16
  4050be:	46c2      	mov	sl, r8
  4050c0:	46a8      	mov	r8, r5
  4050c2:	464d      	mov	r5, r9
  4050c4:	f8dd 9014 	ldr.w	r9, [sp, #20]
  4050c8:	e007      	b.n	4050da <_vfiprintf_r+0x8c6>
  4050ca:	f100 0e02 	add.w	lr, r0, #2
  4050ce:	f10c 0c08 	add.w	ip, ip, #8
  4050d2:	4608      	mov	r0, r1
  4050d4:	3c10      	subs	r4, #16
  4050d6:	2c10      	cmp	r4, #16
  4050d8:	dd11      	ble.n	4050fe <_vfiprintf_r+0x8ea>
  4050da:	1c41      	adds	r1, r0, #1
  4050dc:	3210      	adds	r2, #16
  4050de:	2907      	cmp	r1, #7
  4050e0:	920f      	str	r2, [sp, #60]	; 0x3c
  4050e2:	f8cc 5000 	str.w	r5, [ip]
  4050e6:	f8cc 3004 	str.w	r3, [ip, #4]
  4050ea:	910e      	str	r1, [sp, #56]	; 0x38
  4050ec:	dded      	ble.n	4050ca <_vfiprintf_r+0x8b6>
  4050ee:	b9d2      	cbnz	r2, 405126 <_vfiprintf_r+0x912>
  4050f0:	3c10      	subs	r4, #16
  4050f2:	2c10      	cmp	r4, #16
  4050f4:	f04f 0e01 	mov.w	lr, #1
  4050f8:	4610      	mov	r0, r2
  4050fa:	46dc      	mov	ip, fp
  4050fc:	dced      	bgt.n	4050da <_vfiprintf_r+0x8c6>
  4050fe:	46a9      	mov	r9, r5
  405100:	4645      	mov	r5, r8
  405102:	46d0      	mov	r8, sl
  405104:	46e2      	mov	sl, ip
  405106:	4422      	add	r2, r4
  405108:	f1be 0f07 	cmp.w	lr, #7
  40510c:	920f      	str	r2, [sp, #60]	; 0x3c
  40510e:	f8ca 9000 	str.w	r9, [sl]
  405112:	f8ca 4004 	str.w	r4, [sl, #4]
  405116:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  40511a:	dc2e      	bgt.n	40517a <_vfiprintf_r+0x966>
  40511c:	f10a 0a08 	add.w	sl, sl, #8
  405120:	f10e 0e01 	add.w	lr, lr, #1
  405124:	e558      	b.n	404bd8 <_vfiprintf_r+0x3c4>
  405126:	aa0d      	add	r2, sp, #52	; 0x34
  405128:	9900      	ldr	r1, [sp, #0]
  40512a:	9301      	str	r3, [sp, #4]
  40512c:	4648      	mov	r0, r9
  40512e:	f7ff fb35 	bl	40479c <__sprint_r.part.0>
  405132:	b968      	cbnz	r0, 405150 <_vfiprintf_r+0x93c>
  405134:	980e      	ldr	r0, [sp, #56]	; 0x38
  405136:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405138:	9b01      	ldr	r3, [sp, #4]
  40513a:	f100 0e01 	add.w	lr, r0, #1
  40513e:	46dc      	mov	ip, fp
  405140:	e7c8      	b.n	4050d4 <_vfiprintf_r+0x8c0>
  405142:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405144:	b123      	cbz	r3, 405150 <_vfiprintf_r+0x93c>
  405146:	9805      	ldr	r0, [sp, #20]
  405148:	9900      	ldr	r1, [sp, #0]
  40514a:	aa0d      	add	r2, sp, #52	; 0x34
  40514c:	f7ff fb26 	bl	40479c <__sprint_r.part.0>
  405150:	9b00      	ldr	r3, [sp, #0]
  405152:	899b      	ldrh	r3, [r3, #12]
  405154:	065a      	lsls	r2, r3, #25
  405156:	f100 818b 	bmi.w	405470 <_vfiprintf_r+0xc5c>
  40515a:	9802      	ldr	r0, [sp, #8]
  40515c:	b02b      	add	sp, #172	; 0xac
  40515e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405162:	aa0d      	add	r2, sp, #52	; 0x34
  405164:	9900      	ldr	r1, [sp, #0]
  405166:	4648      	mov	r0, r9
  405168:	f7ff fb18 	bl	40479c <__sprint_r.part.0>
  40516c:	2800      	cmp	r0, #0
  40516e:	d1ef      	bne.n	405150 <_vfiprintf_r+0x93c>
  405170:	990e      	ldr	r1, [sp, #56]	; 0x38
  405172:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405174:	1c48      	adds	r0, r1, #1
  405176:	46da      	mov	sl, fp
  405178:	e555      	b.n	404c26 <_vfiprintf_r+0x412>
  40517a:	2a00      	cmp	r2, #0
  40517c:	f040 80fb 	bne.w	405376 <_vfiprintf_r+0xb62>
  405180:	9a03      	ldr	r2, [sp, #12]
  405182:	921b      	str	r2, [sp, #108]	; 0x6c
  405184:	2301      	movs	r3, #1
  405186:	920f      	str	r2, [sp, #60]	; 0x3c
  405188:	971a      	str	r7, [sp, #104]	; 0x68
  40518a:	930e      	str	r3, [sp, #56]	; 0x38
  40518c:	46da      	mov	sl, fp
  40518e:	f10a 0a08 	add.w	sl, sl, #8
  405192:	0771      	lsls	r1, r6, #29
  405194:	d504      	bpl.n	4051a0 <_vfiprintf_r+0x98c>
  405196:	9b06      	ldr	r3, [sp, #24]
  405198:	1b5c      	subs	r4, r3, r5
  40519a:	2c00      	cmp	r4, #0
  40519c:	f73f ad34 	bgt.w	404c08 <_vfiprintf_r+0x3f4>
  4051a0:	9b02      	ldr	r3, [sp, #8]
  4051a2:	9906      	ldr	r1, [sp, #24]
  4051a4:	42a9      	cmp	r1, r5
  4051a6:	bfac      	ite	ge
  4051a8:	185b      	addge	r3, r3, r1
  4051aa:	195b      	addlt	r3, r3, r5
  4051ac:	9302      	str	r3, [sp, #8]
  4051ae:	2a00      	cmp	r2, #0
  4051b0:	f040 80b3 	bne.w	40531a <_vfiprintf_r+0xb06>
  4051b4:	2300      	movs	r3, #0
  4051b6:	930e      	str	r3, [sp, #56]	; 0x38
  4051b8:	46da      	mov	sl, fp
  4051ba:	f7ff bb5c 	b.w	404876 <_vfiprintf_r+0x62>
  4051be:	aa0d      	add	r2, sp, #52	; 0x34
  4051c0:	9900      	ldr	r1, [sp, #0]
  4051c2:	9307      	str	r3, [sp, #28]
  4051c4:	4648      	mov	r0, r9
  4051c6:	f7ff fae9 	bl	40479c <__sprint_r.part.0>
  4051ca:	2800      	cmp	r0, #0
  4051cc:	d1c0      	bne.n	405150 <_vfiprintf_r+0x93c>
  4051ce:	980e      	ldr	r0, [sp, #56]	; 0x38
  4051d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4051d2:	9b07      	ldr	r3, [sp, #28]
  4051d4:	f100 0c01 	add.w	ip, r0, #1
  4051d8:	46de      	mov	lr, fp
  4051da:	e4cb      	b.n	404b74 <_vfiprintf_r+0x360>
  4051dc:	00408630 	.word	0x00408630
  4051e0:	00408644 	.word	0x00408644
  4051e4:	00408620 	.word	0x00408620
  4051e8:	2a00      	cmp	r2, #0
  4051ea:	f040 8133 	bne.w	405454 <_vfiprintf_r+0xc40>
  4051ee:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  4051f2:	2b00      	cmp	r3, #0
  4051f4:	f000 80f5 	beq.w	4053e2 <_vfiprintf_r+0xbce>
  4051f8:	2301      	movs	r3, #1
  4051fa:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  4051fe:	461a      	mov	r2, r3
  405200:	931b      	str	r3, [sp, #108]	; 0x6c
  405202:	469e      	mov	lr, r3
  405204:	911a      	str	r1, [sp, #104]	; 0x68
  405206:	46da      	mov	sl, fp
  405208:	4670      	mov	r0, lr
  40520a:	f10a 0a08 	add.w	sl, sl, #8
  40520e:	f10e 0e01 	add.w	lr, lr, #1
  405212:	e47d      	b.n	404b10 <_vfiprintf_r+0x2fc>
  405214:	a90c      	add	r1, sp, #48	; 0x30
  405216:	2202      	movs	r2, #2
  405218:	469e      	mov	lr, r3
  40521a:	911a      	str	r1, [sp, #104]	; 0x68
  40521c:	921b      	str	r2, [sp, #108]	; 0x6c
  40521e:	46da      	mov	sl, fp
  405220:	4670      	mov	r0, lr
  405222:	f10a 0a08 	add.w	sl, sl, #8
  405226:	f10e 0e01 	add.w	lr, lr, #1
  40522a:	e738      	b.n	40509e <_vfiprintf_r+0x88a>
  40522c:	9b01      	ldr	r3, [sp, #4]
  40522e:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  405232:	2b00      	cmp	r3, #0
  405234:	f2c0 812a 	blt.w	40548c <_vfiprintf_r+0xc78>
  405238:	ea54 0305 	orrs.w	r3, r4, r5
  40523c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  405240:	f43f abff 	beq.w	404a42 <_vfiprintf_r+0x22e>
  405244:	465f      	mov	r7, fp
  405246:	0923      	lsrs	r3, r4, #4
  405248:	f004 010f 	and.w	r1, r4, #15
  40524c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  405250:	092a      	lsrs	r2, r5, #4
  405252:	461c      	mov	r4, r3
  405254:	4615      	mov	r5, r2
  405256:	5c43      	ldrb	r3, [r0, r1]
  405258:	f807 3d01 	strb.w	r3, [r7, #-1]!
  40525c:	ea54 0305 	orrs.w	r3, r4, r5
  405260:	d1f1      	bne.n	405246 <_vfiprintf_r+0xa32>
  405262:	ebc7 030b 	rsb	r3, r7, fp
  405266:	9303      	str	r3, [sp, #12]
  405268:	f7ff bbf4 	b.w	404a54 <_vfiprintf_r+0x240>
  40526c:	aa0d      	add	r2, sp, #52	; 0x34
  40526e:	9900      	ldr	r1, [sp, #0]
  405270:	9805      	ldr	r0, [sp, #20]
  405272:	f7ff fa93 	bl	40479c <__sprint_r.part.0>
  405276:	2800      	cmp	r0, #0
  405278:	f47f af6a 	bne.w	405150 <_vfiprintf_r+0x93c>
  40527c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40527e:	46da      	mov	sl, fp
  405280:	e787      	b.n	405192 <_vfiprintf_r+0x97e>
  405282:	f04f 0900 	mov.w	r9, #0
  405286:	2400      	movs	r4, #0
  405288:	2500      	movs	r5, #0
  40528a:	e7db      	b.n	405244 <_vfiprintf_r+0xa30>
  40528c:	f016 0210 	ands.w	r2, r6, #16
  405290:	f000 80b2 	beq.w	4053f8 <_vfiprintf_r+0xbe4>
  405294:	9904      	ldr	r1, [sp, #16]
  405296:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  40529a:	460a      	mov	r2, r1
  40529c:	680c      	ldr	r4, [r1, #0]
  40529e:	9901      	ldr	r1, [sp, #4]
  4052a0:	2900      	cmp	r1, #0
  4052a2:	f102 0204 	add.w	r2, r2, #4
  4052a6:	f04f 0500 	mov.w	r5, #0
  4052aa:	f2c0 8159 	blt.w	405560 <_vfiprintf_r+0xd4c>
  4052ae:	ea54 0105 	orrs.w	r1, r4, r5
  4052b2:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4052b6:	9204      	str	r2, [sp, #16]
  4052b8:	f43f ad51 	beq.w	404d5e <_vfiprintf_r+0x54a>
  4052bc:	4699      	mov	r9, r3
  4052be:	e556      	b.n	404d6e <_vfiprintf_r+0x55a>
  4052c0:	06f7      	lsls	r7, r6, #27
  4052c2:	d40a      	bmi.n	4052da <_vfiprintf_r+0xac6>
  4052c4:	0675      	lsls	r5, r6, #25
  4052c6:	d508      	bpl.n	4052da <_vfiprintf_r+0xac6>
  4052c8:	9904      	ldr	r1, [sp, #16]
  4052ca:	f9b1 4000 	ldrsh.w	r4, [r1]
  4052ce:	3104      	adds	r1, #4
  4052d0:	17e5      	asrs	r5, r4, #31
  4052d2:	4622      	mov	r2, r4
  4052d4:	462b      	mov	r3, r5
  4052d6:	9104      	str	r1, [sp, #16]
  4052d8:	e4ea      	b.n	404cb0 <_vfiprintf_r+0x49c>
  4052da:	9a04      	ldr	r2, [sp, #16]
  4052dc:	6814      	ldr	r4, [r2, #0]
  4052de:	4613      	mov	r3, r2
  4052e0:	3304      	adds	r3, #4
  4052e2:	17e5      	asrs	r5, r4, #31
  4052e4:	9304      	str	r3, [sp, #16]
  4052e6:	4622      	mov	r2, r4
  4052e8:	462b      	mov	r3, r5
  4052ea:	e4e1      	b.n	404cb0 <_vfiprintf_r+0x49c>
  4052ec:	6814      	ldr	r4, [r2, #0]
  4052ee:	3204      	adds	r2, #4
  4052f0:	9204      	str	r2, [sp, #16]
  4052f2:	2500      	movs	r5, #0
  4052f4:	e61f      	b.n	404f36 <_vfiprintf_r+0x722>
  4052f6:	f04f 0900 	mov.w	r9, #0
  4052fa:	ea54 0305 	orrs.w	r3, r4, r5
  4052fe:	f47f ace8 	bne.w	404cd2 <_vfiprintf_r+0x4be>
  405302:	e5d8      	b.n	404eb6 <_vfiprintf_r+0x6a2>
  405304:	aa0d      	add	r2, sp, #52	; 0x34
  405306:	9900      	ldr	r1, [sp, #0]
  405308:	9805      	ldr	r0, [sp, #20]
  40530a:	f7ff fa47 	bl	40479c <__sprint_r.part.0>
  40530e:	2800      	cmp	r0, #0
  405310:	f47f af1e 	bne.w	405150 <_vfiprintf_r+0x93c>
  405314:	46da      	mov	sl, fp
  405316:	f7ff bb48 	b.w	4049aa <_vfiprintf_r+0x196>
  40531a:	aa0d      	add	r2, sp, #52	; 0x34
  40531c:	9900      	ldr	r1, [sp, #0]
  40531e:	9805      	ldr	r0, [sp, #20]
  405320:	f7ff fa3c 	bl	40479c <__sprint_r.part.0>
  405324:	2800      	cmp	r0, #0
  405326:	f43f af45 	beq.w	4051b4 <_vfiprintf_r+0x9a0>
  40532a:	e711      	b.n	405150 <_vfiprintf_r+0x93c>
  40532c:	aa0d      	add	r2, sp, #52	; 0x34
  40532e:	9900      	ldr	r1, [sp, #0]
  405330:	9805      	ldr	r0, [sp, #20]
  405332:	f7ff fa33 	bl	40479c <__sprint_r.part.0>
  405336:	2800      	cmp	r0, #0
  405338:	f47f af0a 	bne.w	405150 <_vfiprintf_r+0x93c>
  40533c:	980e      	ldr	r0, [sp, #56]	; 0x38
  40533e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405340:	f100 0e01 	add.w	lr, r0, #1
  405344:	46da      	mov	sl, fp
  405346:	f7ff bbe3 	b.w	404b10 <_vfiprintf_r+0x2fc>
  40534a:	aa0d      	add	r2, sp, #52	; 0x34
  40534c:	9900      	ldr	r1, [sp, #0]
  40534e:	9805      	ldr	r0, [sp, #20]
  405350:	f7ff fa24 	bl	40479c <__sprint_r.part.0>
  405354:	2800      	cmp	r0, #0
  405356:	f47f aefb 	bne.w	405150 <_vfiprintf_r+0x93c>
  40535a:	980e      	ldr	r0, [sp, #56]	; 0x38
  40535c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40535e:	f100 0e01 	add.w	lr, r0, #1
  405362:	46da      	mov	sl, fp
  405364:	e69b      	b.n	40509e <_vfiprintf_r+0x88a>
  405366:	2a00      	cmp	r2, #0
  405368:	f040 80d8 	bne.w	40551c <_vfiprintf_r+0xd08>
  40536c:	f04f 0e01 	mov.w	lr, #1
  405370:	4610      	mov	r0, r2
  405372:	46da      	mov	sl, fp
  405374:	e697      	b.n	4050a6 <_vfiprintf_r+0x892>
  405376:	aa0d      	add	r2, sp, #52	; 0x34
  405378:	9900      	ldr	r1, [sp, #0]
  40537a:	9805      	ldr	r0, [sp, #20]
  40537c:	f7ff fa0e 	bl	40479c <__sprint_r.part.0>
  405380:	2800      	cmp	r0, #0
  405382:	f47f aee5 	bne.w	405150 <_vfiprintf_r+0x93c>
  405386:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405388:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40538a:	f103 0e01 	add.w	lr, r3, #1
  40538e:	46da      	mov	sl, fp
  405390:	e422      	b.n	404bd8 <_vfiprintf_r+0x3c4>
  405392:	2230      	movs	r2, #48	; 0x30
  405394:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
  405398:	9a01      	ldr	r2, [sp, #4]
  40539a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  40539e:	2a00      	cmp	r2, #0
  4053a0:	f04f 0300 	mov.w	r3, #0
  4053a4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  4053a8:	f046 0302 	orr.w	r3, r6, #2
  4053ac:	f2c0 80cb 	blt.w	405546 <_vfiprintf_r+0xd32>
  4053b0:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4053b4:	f046 0602 	orr.w	r6, r6, #2
  4053b8:	f04f 0900 	mov.w	r9, #0
  4053bc:	e742      	b.n	405244 <_vfiprintf_r+0xa30>
  4053be:	f04f 0900 	mov.w	r9, #0
  4053c2:	4890      	ldr	r0, [pc, #576]	; (405604 <_vfiprintf_r+0xdf0>)
  4053c4:	e73e      	b.n	405244 <_vfiprintf_r+0xa30>
  4053c6:	9b01      	ldr	r3, [sp, #4]
  4053c8:	4264      	negs	r4, r4
  4053ca:	f04f 092d 	mov.w	r9, #45	; 0x2d
  4053ce:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  4053d2:	2b00      	cmp	r3, #0
  4053d4:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  4053d8:	f6ff ac7b 	blt.w	404cd2 <_vfiprintf_r+0x4be>
  4053dc:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4053e0:	e477      	b.n	404cd2 <_vfiprintf_r+0x4be>
  4053e2:	9b07      	ldr	r3, [sp, #28]
  4053e4:	2b00      	cmp	r3, #0
  4053e6:	d072      	beq.n	4054ce <_vfiprintf_r+0xcba>
  4053e8:	ab0c      	add	r3, sp, #48	; 0x30
  4053ea:	2202      	movs	r2, #2
  4053ec:	931a      	str	r3, [sp, #104]	; 0x68
  4053ee:	921b      	str	r2, [sp, #108]	; 0x6c
  4053f0:	f04f 0e01 	mov.w	lr, #1
  4053f4:	46da      	mov	sl, fp
  4053f6:	e713      	b.n	405220 <_vfiprintf_r+0xa0c>
  4053f8:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  4053fc:	d048      	beq.n	405490 <_vfiprintf_r+0xc7c>
  4053fe:	9904      	ldr	r1, [sp, #16]
  405400:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  405404:	460b      	mov	r3, r1
  405406:	880c      	ldrh	r4, [r1, #0]
  405408:	9901      	ldr	r1, [sp, #4]
  40540a:	2900      	cmp	r1, #0
  40540c:	f103 0304 	add.w	r3, r3, #4
  405410:	f04f 0500 	mov.w	r5, #0
  405414:	f6ff ae10 	blt.w	405038 <_vfiprintf_r+0x824>
  405418:	ea54 0105 	orrs.w	r1, r4, r5
  40541c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  405420:	9304      	str	r3, [sp, #16]
  405422:	f43f ac9c 	beq.w	404d5e <_vfiprintf_r+0x54a>
  405426:	4691      	mov	r9, r2
  405428:	e4a1      	b.n	404d6e <_vfiprintf_r+0x55a>
  40542a:	06f0      	lsls	r0, r6, #27
  40542c:	d40a      	bmi.n	405444 <_vfiprintf_r+0xc30>
  40542e:	0671      	lsls	r1, r6, #25
  405430:	d508      	bpl.n	405444 <_vfiprintf_r+0xc30>
  405432:	9a04      	ldr	r2, [sp, #16]
  405434:	6813      	ldr	r3, [r2, #0]
  405436:	3204      	adds	r2, #4
  405438:	9204      	str	r2, [sp, #16]
  40543a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  40543e:	801a      	strh	r2, [r3, #0]
  405440:	f7ff ba19 	b.w	404876 <_vfiprintf_r+0x62>
  405444:	9a04      	ldr	r2, [sp, #16]
  405446:	6813      	ldr	r3, [r2, #0]
  405448:	3204      	adds	r2, #4
  40544a:	9204      	str	r2, [sp, #16]
  40544c:	9a02      	ldr	r2, [sp, #8]
  40544e:	601a      	str	r2, [r3, #0]
  405450:	f7ff ba11 	b.w	404876 <_vfiprintf_r+0x62>
  405454:	aa0d      	add	r2, sp, #52	; 0x34
  405456:	9900      	ldr	r1, [sp, #0]
  405458:	9805      	ldr	r0, [sp, #20]
  40545a:	f7ff f99f 	bl	40479c <__sprint_r.part.0>
  40545e:	2800      	cmp	r0, #0
  405460:	f47f ae76 	bne.w	405150 <_vfiprintf_r+0x93c>
  405464:	980e      	ldr	r0, [sp, #56]	; 0x38
  405466:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405468:	f100 0e01 	add.w	lr, r0, #1
  40546c:	46da      	mov	sl, fp
  40546e:	e5fa      	b.n	405066 <_vfiprintf_r+0x852>
  405470:	f04f 30ff 	mov.w	r0, #4294967295
  405474:	f7ff bab6 	b.w	4049e4 <_vfiprintf_r+0x1d0>
  405478:	4862      	ldr	r0, [pc, #392]	; (405604 <_vfiprintf_r+0xdf0>)
  40547a:	4616      	mov	r6, r2
  40547c:	ea54 0205 	orrs.w	r2, r4, r5
  405480:	9304      	str	r3, [sp, #16]
  405482:	f04f 0900 	mov.w	r9, #0
  405486:	f47f aedd 	bne.w	405244 <_vfiprintf_r+0xa30>
  40548a:	e6fc      	b.n	405286 <_vfiprintf_r+0xa72>
  40548c:	9b04      	ldr	r3, [sp, #16]
  40548e:	e7f5      	b.n	40547c <_vfiprintf_r+0xc68>
  405490:	9a04      	ldr	r2, [sp, #16]
  405492:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  405496:	4613      	mov	r3, r2
  405498:	6814      	ldr	r4, [r2, #0]
  40549a:	9a01      	ldr	r2, [sp, #4]
  40549c:	2a00      	cmp	r2, #0
  40549e:	f103 0304 	add.w	r3, r3, #4
  4054a2:	f04f 0500 	mov.w	r5, #0
  4054a6:	f6ff adc7 	blt.w	405038 <_vfiprintf_r+0x824>
  4054aa:	ea54 0205 	orrs.w	r2, r4, r5
  4054ae:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4054b2:	9304      	str	r3, [sp, #16]
  4054b4:	f47f ac5b 	bne.w	404d6e <_vfiprintf_r+0x55a>
  4054b8:	e451      	b.n	404d5e <_vfiprintf_r+0x54a>
  4054ba:	aa0d      	add	r2, sp, #52	; 0x34
  4054bc:	9900      	ldr	r1, [sp, #0]
  4054be:	9805      	ldr	r0, [sp, #20]
  4054c0:	f7ff f96c 	bl	40479c <__sprint_r.part.0>
  4054c4:	2800      	cmp	r0, #0
  4054c6:	f47f ae43 	bne.w	405150 <_vfiprintf_r+0x93c>
  4054ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4054cc:	e668      	b.n	4051a0 <_vfiprintf_r+0x98c>
  4054ce:	4610      	mov	r0, r2
  4054d0:	f04f 0e01 	mov.w	lr, #1
  4054d4:	46da      	mov	sl, fp
  4054d6:	e5e6      	b.n	4050a6 <_vfiprintf_r+0x892>
  4054d8:	9904      	ldr	r1, [sp, #16]
  4054da:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  4054de:	460a      	mov	r2, r1
  4054e0:	880c      	ldrh	r4, [r1, #0]
  4054e2:	9901      	ldr	r1, [sp, #4]
  4054e4:	2900      	cmp	r1, #0
  4054e6:	f102 0204 	add.w	r2, r2, #4
  4054ea:	f04f 0500 	mov.w	r5, #0
  4054ee:	db4e      	blt.n	40558e <_vfiprintf_r+0xd7a>
  4054f0:	ea54 0105 	orrs.w	r1, r4, r5
  4054f4:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4054f8:	9204      	str	r2, [sp, #16]
  4054fa:	4699      	mov	r9, r3
  4054fc:	f47f abe9 	bne.w	404cd2 <_vfiprintf_r+0x4be>
  405500:	e4d4      	b.n	404eac <_vfiprintf_r+0x698>
  405502:	9304      	str	r3, [sp, #16]
  405504:	e6f9      	b.n	4052fa <_vfiprintf_r+0xae6>
  405506:	4638      	mov	r0, r7
  405508:	9404      	str	r4, [sp, #16]
  40550a:	f7ff f8d9 	bl	4046c0 <strlen>
  40550e:	2300      	movs	r3, #0
  405510:	9003      	str	r0, [sp, #12]
  405512:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  405516:	9301      	str	r3, [sp, #4]
  405518:	f7ff ba9c 	b.w	404a54 <_vfiprintf_r+0x240>
  40551c:	aa0d      	add	r2, sp, #52	; 0x34
  40551e:	9900      	ldr	r1, [sp, #0]
  405520:	9805      	ldr	r0, [sp, #20]
  405522:	f7ff f93b 	bl	40479c <__sprint_r.part.0>
  405526:	2800      	cmp	r0, #0
  405528:	f47f ae12 	bne.w	405150 <_vfiprintf_r+0x93c>
  40552c:	980e      	ldr	r0, [sp, #56]	; 0x38
  40552e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405530:	f100 0e01 	add.w	lr, r0, #1
  405534:	46da      	mov	sl, fp
  405536:	e5b6      	b.n	4050a6 <_vfiprintf_r+0x892>
  405538:	980e      	ldr	r0, [sp, #56]	; 0x38
  40553a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40553c:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 40560c <_vfiprintf_r+0xdf8>
  405540:	3001      	adds	r0, #1
  405542:	f7ff bad2 	b.w	404aea <_vfiprintf_r+0x2d6>
  405546:	461e      	mov	r6, r3
  405548:	f04f 0900 	mov.w	r9, #0
  40554c:	e67a      	b.n	405244 <_vfiprintf_r+0xa30>
  40554e:	2b06      	cmp	r3, #6
  405550:	bf28      	it	cs
  405552:	2306      	movcs	r3, #6
  405554:	9303      	str	r3, [sp, #12]
  405556:	9404      	str	r4, [sp, #16]
  405558:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
  40555c:	4f2a      	ldr	r7, [pc, #168]	; (405608 <_vfiprintf_r+0xdf4>)
  40555e:	e50c      	b.n	404f7a <_vfiprintf_r+0x766>
  405560:	9204      	str	r2, [sp, #16]
  405562:	e56a      	b.n	40503a <_vfiprintf_r+0x826>
  405564:	980e      	ldr	r0, [sp, #56]	; 0x38
  405566:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 40560c <_vfiprintf_r+0xdf8>
  40556a:	3001      	adds	r0, #1
  40556c:	f7ff bb73 	b.w	404c56 <_vfiprintf_r+0x442>
  405570:	46f4      	mov	ip, lr
  405572:	f7ff bb1a 	b.w	404baa <_vfiprintf_r+0x396>
  405576:	9b01      	ldr	r3, [sp, #4]
  405578:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  40557c:	9303      	str	r3, [sp, #12]
  40557e:	9404      	str	r4, [sp, #16]
  405580:	9001      	str	r0, [sp, #4]
  405582:	f7ff ba67 	b.w	404a54 <_vfiprintf_r+0x240>
  405586:	2200      	movs	r2, #0
  405588:	9201      	str	r2, [sp, #4]
  40558a:	f7ff b9ac 	b.w	4048e6 <_vfiprintf_r+0xd2>
  40558e:	9204      	str	r2, [sp, #16]
  405590:	4699      	mov	r9, r3
  405592:	e6b2      	b.n	4052fa <_vfiprintf_r+0xae6>
  405594:	9a04      	ldr	r2, [sp, #16]
  405596:	6813      	ldr	r3, [r2, #0]
  405598:	9301      	str	r3, [sp, #4]
  40559a:	3204      	adds	r2, #4
  40559c:	2b00      	cmp	r3, #0
  40559e:	9204      	str	r2, [sp, #16]
  4055a0:	f898 3001 	ldrb.w	r3, [r8, #1]
  4055a4:	46a8      	mov	r8, r5
  4055a6:	f6bf a99c 	bge.w	4048e2 <_vfiprintf_r+0xce>
  4055aa:	f04f 32ff 	mov.w	r2, #4294967295
  4055ae:	9201      	str	r2, [sp, #4]
  4055b0:	f7ff b997 	b.w	4048e2 <_vfiprintf_r+0xce>
  4055b4:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4055b8:	e48e      	b.n	404ed8 <_vfiprintf_r+0x6c4>
  4055ba:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4055be:	e4f0      	b.n	404fa2 <_vfiprintf_r+0x78e>
  4055c0:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4055c4:	e4ab      	b.n	404f1e <_vfiprintf_r+0x70a>
  4055c6:	4699      	mov	r9, r3
  4055c8:	07f3      	lsls	r3, r6, #31
  4055ca:	d505      	bpl.n	4055d8 <_vfiprintf_r+0xdc4>
  4055cc:	af2a      	add	r7, sp, #168	; 0xa8
  4055ce:	2330      	movs	r3, #48	; 0x30
  4055d0:	f807 3d41 	strb.w	r3, [r7, #-65]!
  4055d4:	f7ff bb97 	b.w	404d06 <_vfiprintf_r+0x4f2>
  4055d8:	9b01      	ldr	r3, [sp, #4]
  4055da:	9303      	str	r3, [sp, #12]
  4055dc:	465f      	mov	r7, fp
  4055de:	f7ff ba39 	b.w	404a54 <_vfiprintf_r+0x240>
  4055e2:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4055e6:	e443      	b.n	404e70 <_vfiprintf_r+0x65c>
  4055e8:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4055ec:	f7ff bb9a 	b.w	404d24 <_vfiprintf_r+0x510>
  4055f0:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4055f4:	f7ff bb4d 	b.w	404c92 <_vfiprintf_r+0x47e>
  4055f8:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4055fc:	e50f      	b.n	40501e <_vfiprintf_r+0x80a>
  4055fe:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  405602:	e4f3      	b.n	404fec <_vfiprintf_r+0x7d8>
  405604:	00408644 	.word	0x00408644
  405608:	00408658 	.word	0x00408658
  40560c:	00408660 	.word	0x00408660

00405610 <__sbprintf>:
  405610:	b5f0      	push	{r4, r5, r6, r7, lr}
  405612:	460c      	mov	r4, r1
  405614:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
  405618:	8989      	ldrh	r1, [r1, #12]
  40561a:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40561c:	89e5      	ldrh	r5, [r4, #14]
  40561e:	9619      	str	r6, [sp, #100]	; 0x64
  405620:	f021 0102 	bic.w	r1, r1, #2
  405624:	6a66      	ldr	r6, [r4, #36]	; 0x24
  405626:	f8ad 500e 	strh.w	r5, [sp, #14]
  40562a:	2500      	movs	r5, #0
  40562c:	69e7      	ldr	r7, [r4, #28]
  40562e:	f8ad 100c 	strh.w	r1, [sp, #12]
  405632:	9609      	str	r6, [sp, #36]	; 0x24
  405634:	9506      	str	r5, [sp, #24]
  405636:	ae1a      	add	r6, sp, #104	; 0x68
  405638:	f44f 6580 	mov.w	r5, #1024	; 0x400
  40563c:	4669      	mov	r1, sp
  40563e:	9600      	str	r6, [sp, #0]
  405640:	9604      	str	r6, [sp, #16]
  405642:	9502      	str	r5, [sp, #8]
  405644:	9505      	str	r5, [sp, #20]
  405646:	9707      	str	r7, [sp, #28]
  405648:	4606      	mov	r6, r0
  40564a:	f7ff f8e3 	bl	404814 <_vfiprintf_r>
  40564e:	1e05      	subs	r5, r0, #0
  405650:	db07      	blt.n	405662 <__sbprintf+0x52>
  405652:	4630      	mov	r0, r6
  405654:	4669      	mov	r1, sp
  405656:	f000 f929 	bl	4058ac <_fflush_r>
  40565a:	2800      	cmp	r0, #0
  40565c:	bf18      	it	ne
  40565e:	f04f 35ff 	movne.w	r5, #4294967295
  405662:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  405666:	065b      	lsls	r3, r3, #25
  405668:	d503      	bpl.n	405672 <__sbprintf+0x62>
  40566a:	89a3      	ldrh	r3, [r4, #12]
  40566c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405670:	81a3      	strh	r3, [r4, #12]
  405672:	4628      	mov	r0, r5
  405674:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
  405678:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40567a:	bf00      	nop

0040567c <__swsetup_r>:
  40567c:	b538      	push	{r3, r4, r5, lr}
  40567e:	4b30      	ldr	r3, [pc, #192]	; (405740 <__swsetup_r+0xc4>)
  405680:	681b      	ldr	r3, [r3, #0]
  405682:	4605      	mov	r5, r0
  405684:	460c      	mov	r4, r1
  405686:	b113      	cbz	r3, 40568e <__swsetup_r+0x12>
  405688:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40568a:	2a00      	cmp	r2, #0
  40568c:	d038      	beq.n	405700 <__swsetup_r+0x84>
  40568e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405692:	b293      	uxth	r3, r2
  405694:	0718      	lsls	r0, r3, #28
  405696:	d50c      	bpl.n	4056b2 <__swsetup_r+0x36>
  405698:	6920      	ldr	r0, [r4, #16]
  40569a:	b1a8      	cbz	r0, 4056c8 <__swsetup_r+0x4c>
  40569c:	f013 0201 	ands.w	r2, r3, #1
  4056a0:	d01e      	beq.n	4056e0 <__swsetup_r+0x64>
  4056a2:	6963      	ldr	r3, [r4, #20]
  4056a4:	2200      	movs	r2, #0
  4056a6:	425b      	negs	r3, r3
  4056a8:	61a3      	str	r3, [r4, #24]
  4056aa:	60a2      	str	r2, [r4, #8]
  4056ac:	b1f0      	cbz	r0, 4056ec <__swsetup_r+0x70>
  4056ae:	2000      	movs	r0, #0
  4056b0:	bd38      	pop	{r3, r4, r5, pc}
  4056b2:	06d9      	lsls	r1, r3, #27
  4056b4:	d53c      	bpl.n	405730 <__swsetup_r+0xb4>
  4056b6:	0758      	lsls	r0, r3, #29
  4056b8:	d426      	bmi.n	405708 <__swsetup_r+0x8c>
  4056ba:	6920      	ldr	r0, [r4, #16]
  4056bc:	f042 0308 	orr.w	r3, r2, #8
  4056c0:	81a3      	strh	r3, [r4, #12]
  4056c2:	b29b      	uxth	r3, r3
  4056c4:	2800      	cmp	r0, #0
  4056c6:	d1e9      	bne.n	40569c <__swsetup_r+0x20>
  4056c8:	f403 7220 	and.w	r2, r3, #640	; 0x280
  4056cc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4056d0:	d0e4      	beq.n	40569c <__swsetup_r+0x20>
  4056d2:	4628      	mov	r0, r5
  4056d4:	4621      	mov	r1, r4
  4056d6:	f000 fd15 	bl	406104 <__smakebuf_r>
  4056da:	89a3      	ldrh	r3, [r4, #12]
  4056dc:	6920      	ldr	r0, [r4, #16]
  4056de:	e7dd      	b.n	40569c <__swsetup_r+0x20>
  4056e0:	0799      	lsls	r1, r3, #30
  4056e2:	bf58      	it	pl
  4056e4:	6962      	ldrpl	r2, [r4, #20]
  4056e6:	60a2      	str	r2, [r4, #8]
  4056e8:	2800      	cmp	r0, #0
  4056ea:	d1e0      	bne.n	4056ae <__swsetup_r+0x32>
  4056ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4056f0:	061a      	lsls	r2, r3, #24
  4056f2:	d5dd      	bpl.n	4056b0 <__swsetup_r+0x34>
  4056f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4056f8:	81a3      	strh	r3, [r4, #12]
  4056fa:	f04f 30ff 	mov.w	r0, #4294967295
  4056fe:	bd38      	pop	{r3, r4, r5, pc}
  405700:	4618      	mov	r0, r3
  405702:	f000 f967 	bl	4059d4 <__sinit>
  405706:	e7c2      	b.n	40568e <__swsetup_r+0x12>
  405708:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40570a:	b151      	cbz	r1, 405722 <__swsetup_r+0xa6>
  40570c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  405710:	4299      	cmp	r1, r3
  405712:	d004      	beq.n	40571e <__swsetup_r+0xa2>
  405714:	4628      	mov	r0, r5
  405716:	f000 fa27 	bl	405b68 <_free_r>
  40571a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40571e:	2300      	movs	r3, #0
  405720:	6323      	str	r3, [r4, #48]	; 0x30
  405722:	2300      	movs	r3, #0
  405724:	6920      	ldr	r0, [r4, #16]
  405726:	6063      	str	r3, [r4, #4]
  405728:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  40572c:	6020      	str	r0, [r4, #0]
  40572e:	e7c5      	b.n	4056bc <__swsetup_r+0x40>
  405730:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  405734:	2309      	movs	r3, #9
  405736:	602b      	str	r3, [r5, #0]
  405738:	f04f 30ff 	mov.w	r0, #4294967295
  40573c:	81a2      	strh	r2, [r4, #12]
  40573e:	bd38      	pop	{r3, r4, r5, pc}
  405740:	204004b8 	.word	0x204004b8

00405744 <register_fini>:
  405744:	4b02      	ldr	r3, [pc, #8]	; (405750 <register_fini+0xc>)
  405746:	b113      	cbz	r3, 40574e <register_fini+0xa>
  405748:	4802      	ldr	r0, [pc, #8]	; (405754 <register_fini+0x10>)
  40574a:	f000 b805 	b.w	405758 <atexit>
  40574e:	4770      	bx	lr
  405750:	00000000 	.word	0x00000000
  405754:	004059e9 	.word	0x004059e9

00405758 <atexit>:
  405758:	2300      	movs	r3, #0
  40575a:	4601      	mov	r1, r0
  40575c:	461a      	mov	r2, r3
  40575e:	4618      	mov	r0, r3
  405760:	f001 bc12 	b.w	406f88 <__register_exitproc>

00405764 <__sflush_r>:
  405764:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  405768:	b29a      	uxth	r2, r3
  40576a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40576e:	460d      	mov	r5, r1
  405770:	0711      	lsls	r1, r2, #28
  405772:	4680      	mov	r8, r0
  405774:	d43c      	bmi.n	4057f0 <__sflush_r+0x8c>
  405776:	686a      	ldr	r2, [r5, #4]
  405778:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40577c:	2a00      	cmp	r2, #0
  40577e:	81ab      	strh	r3, [r5, #12]
  405780:	dd73      	ble.n	40586a <__sflush_r+0x106>
  405782:	6aac      	ldr	r4, [r5, #40]	; 0x28
  405784:	2c00      	cmp	r4, #0
  405786:	d04b      	beq.n	405820 <__sflush_r+0xbc>
  405788:	b29b      	uxth	r3, r3
  40578a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  40578e:	2100      	movs	r1, #0
  405790:	b292      	uxth	r2, r2
  405792:	f8d8 6000 	ldr.w	r6, [r8]
  405796:	f8c8 1000 	str.w	r1, [r8]
  40579a:	2a00      	cmp	r2, #0
  40579c:	d069      	beq.n	405872 <__sflush_r+0x10e>
  40579e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4057a0:	075f      	lsls	r7, r3, #29
  4057a2:	d505      	bpl.n	4057b0 <__sflush_r+0x4c>
  4057a4:	6869      	ldr	r1, [r5, #4]
  4057a6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4057a8:	1a52      	subs	r2, r2, r1
  4057aa:	b10b      	cbz	r3, 4057b0 <__sflush_r+0x4c>
  4057ac:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4057ae:	1ad2      	subs	r2, r2, r3
  4057b0:	2300      	movs	r3, #0
  4057b2:	69e9      	ldr	r1, [r5, #28]
  4057b4:	4640      	mov	r0, r8
  4057b6:	47a0      	blx	r4
  4057b8:	1c44      	adds	r4, r0, #1
  4057ba:	d03c      	beq.n	405836 <__sflush_r+0xd2>
  4057bc:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4057c0:	692a      	ldr	r2, [r5, #16]
  4057c2:	602a      	str	r2, [r5, #0]
  4057c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4057c8:	2200      	movs	r2, #0
  4057ca:	81ab      	strh	r3, [r5, #12]
  4057cc:	04db      	lsls	r3, r3, #19
  4057ce:	606a      	str	r2, [r5, #4]
  4057d0:	d449      	bmi.n	405866 <__sflush_r+0x102>
  4057d2:	6b29      	ldr	r1, [r5, #48]	; 0x30
  4057d4:	f8c8 6000 	str.w	r6, [r8]
  4057d8:	b311      	cbz	r1, 405820 <__sflush_r+0xbc>
  4057da:	f105 0340 	add.w	r3, r5, #64	; 0x40
  4057de:	4299      	cmp	r1, r3
  4057e0:	d002      	beq.n	4057e8 <__sflush_r+0x84>
  4057e2:	4640      	mov	r0, r8
  4057e4:	f000 f9c0 	bl	405b68 <_free_r>
  4057e8:	2000      	movs	r0, #0
  4057ea:	6328      	str	r0, [r5, #48]	; 0x30
  4057ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4057f0:	692e      	ldr	r6, [r5, #16]
  4057f2:	b1ae      	cbz	r6, 405820 <__sflush_r+0xbc>
  4057f4:	682c      	ldr	r4, [r5, #0]
  4057f6:	602e      	str	r6, [r5, #0]
  4057f8:	0790      	lsls	r0, r2, #30
  4057fa:	bf0c      	ite	eq
  4057fc:	696b      	ldreq	r3, [r5, #20]
  4057fe:	2300      	movne	r3, #0
  405800:	1ba4      	subs	r4, r4, r6
  405802:	60ab      	str	r3, [r5, #8]
  405804:	e00a      	b.n	40581c <__sflush_r+0xb8>
  405806:	4623      	mov	r3, r4
  405808:	4632      	mov	r2, r6
  40580a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40580c:	69e9      	ldr	r1, [r5, #28]
  40580e:	4640      	mov	r0, r8
  405810:	47b8      	blx	r7
  405812:	2800      	cmp	r0, #0
  405814:	eba4 0400 	sub.w	r4, r4, r0
  405818:	4406      	add	r6, r0
  40581a:	dd04      	ble.n	405826 <__sflush_r+0xc2>
  40581c:	2c00      	cmp	r4, #0
  40581e:	dcf2      	bgt.n	405806 <__sflush_r+0xa2>
  405820:	2000      	movs	r0, #0
  405822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405826:	89ab      	ldrh	r3, [r5, #12]
  405828:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40582c:	81ab      	strh	r3, [r5, #12]
  40582e:	f04f 30ff 	mov.w	r0, #4294967295
  405832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405836:	f8d8 2000 	ldr.w	r2, [r8]
  40583a:	2a1d      	cmp	r2, #29
  40583c:	d8f3      	bhi.n	405826 <__sflush_r+0xc2>
  40583e:	4b1a      	ldr	r3, [pc, #104]	; (4058a8 <__sflush_r+0x144>)
  405840:	40d3      	lsrs	r3, r2
  405842:	f003 0301 	and.w	r3, r3, #1
  405846:	f083 0401 	eor.w	r4, r3, #1
  40584a:	2b00      	cmp	r3, #0
  40584c:	d0eb      	beq.n	405826 <__sflush_r+0xc2>
  40584e:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  405852:	6929      	ldr	r1, [r5, #16]
  405854:	6029      	str	r1, [r5, #0]
  405856:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40585a:	04d9      	lsls	r1, r3, #19
  40585c:	606c      	str	r4, [r5, #4]
  40585e:	81ab      	strh	r3, [r5, #12]
  405860:	d5b7      	bpl.n	4057d2 <__sflush_r+0x6e>
  405862:	2a00      	cmp	r2, #0
  405864:	d1b5      	bne.n	4057d2 <__sflush_r+0x6e>
  405866:	6528      	str	r0, [r5, #80]	; 0x50
  405868:	e7b3      	b.n	4057d2 <__sflush_r+0x6e>
  40586a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  40586c:	2a00      	cmp	r2, #0
  40586e:	dc88      	bgt.n	405782 <__sflush_r+0x1e>
  405870:	e7d6      	b.n	405820 <__sflush_r+0xbc>
  405872:	2301      	movs	r3, #1
  405874:	69e9      	ldr	r1, [r5, #28]
  405876:	4640      	mov	r0, r8
  405878:	47a0      	blx	r4
  40587a:	1c43      	adds	r3, r0, #1
  40587c:	4602      	mov	r2, r0
  40587e:	d002      	beq.n	405886 <__sflush_r+0x122>
  405880:	89ab      	ldrh	r3, [r5, #12]
  405882:	6aac      	ldr	r4, [r5, #40]	; 0x28
  405884:	e78c      	b.n	4057a0 <__sflush_r+0x3c>
  405886:	f8d8 3000 	ldr.w	r3, [r8]
  40588a:	2b00      	cmp	r3, #0
  40588c:	d0f8      	beq.n	405880 <__sflush_r+0x11c>
  40588e:	2b1d      	cmp	r3, #29
  405890:	d001      	beq.n	405896 <__sflush_r+0x132>
  405892:	2b16      	cmp	r3, #22
  405894:	d102      	bne.n	40589c <__sflush_r+0x138>
  405896:	f8c8 6000 	str.w	r6, [r8]
  40589a:	e7c1      	b.n	405820 <__sflush_r+0xbc>
  40589c:	89ab      	ldrh	r3, [r5, #12]
  40589e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4058a2:	81ab      	strh	r3, [r5, #12]
  4058a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4058a8:	20400001 	.word	0x20400001

004058ac <_fflush_r>:
  4058ac:	b510      	push	{r4, lr}
  4058ae:	4604      	mov	r4, r0
  4058b0:	b082      	sub	sp, #8
  4058b2:	b108      	cbz	r0, 4058b8 <_fflush_r+0xc>
  4058b4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4058b6:	b153      	cbz	r3, 4058ce <_fflush_r+0x22>
  4058b8:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  4058bc:	b908      	cbnz	r0, 4058c2 <_fflush_r+0x16>
  4058be:	b002      	add	sp, #8
  4058c0:	bd10      	pop	{r4, pc}
  4058c2:	4620      	mov	r0, r4
  4058c4:	b002      	add	sp, #8
  4058c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4058ca:	f7ff bf4b 	b.w	405764 <__sflush_r>
  4058ce:	9101      	str	r1, [sp, #4]
  4058d0:	f000 f880 	bl	4059d4 <__sinit>
  4058d4:	9901      	ldr	r1, [sp, #4]
  4058d6:	e7ef      	b.n	4058b8 <_fflush_r+0xc>

004058d8 <_cleanup_r>:
  4058d8:	4901      	ldr	r1, [pc, #4]	; (4058e0 <_cleanup_r+0x8>)
  4058da:	f000 bbaf 	b.w	40603c <_fwalk_reent>
  4058de:	bf00      	nop
  4058e0:	00407051 	.word	0x00407051

004058e4 <__sinit.part.1>:
  4058e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4058e8:	4b35      	ldr	r3, [pc, #212]	; (4059c0 <__sinit.part.1+0xdc>)
  4058ea:	6845      	ldr	r5, [r0, #4]
  4058ec:	63c3      	str	r3, [r0, #60]	; 0x3c
  4058ee:	2400      	movs	r4, #0
  4058f0:	4607      	mov	r7, r0
  4058f2:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  4058f6:	2304      	movs	r3, #4
  4058f8:	2103      	movs	r1, #3
  4058fa:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  4058fe:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  405902:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  405906:	b083      	sub	sp, #12
  405908:	602c      	str	r4, [r5, #0]
  40590a:	606c      	str	r4, [r5, #4]
  40590c:	60ac      	str	r4, [r5, #8]
  40590e:	666c      	str	r4, [r5, #100]	; 0x64
  405910:	81ec      	strh	r4, [r5, #14]
  405912:	612c      	str	r4, [r5, #16]
  405914:	616c      	str	r4, [r5, #20]
  405916:	61ac      	str	r4, [r5, #24]
  405918:	81ab      	strh	r3, [r5, #12]
  40591a:	4621      	mov	r1, r4
  40591c:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  405920:	2208      	movs	r2, #8
  405922:	f7fe fdbb 	bl	40449c <memset>
  405926:	68be      	ldr	r6, [r7, #8]
  405928:	f8df b098 	ldr.w	fp, [pc, #152]	; 4059c4 <__sinit.part.1+0xe0>
  40592c:	f8df a098 	ldr.w	sl, [pc, #152]	; 4059c8 <__sinit.part.1+0xe4>
  405930:	f8df 9098 	ldr.w	r9, [pc, #152]	; 4059cc <__sinit.part.1+0xe8>
  405934:	f8df 8098 	ldr.w	r8, [pc, #152]	; 4059d0 <__sinit.part.1+0xec>
  405938:	f8c5 b020 	str.w	fp, [r5, #32]
  40593c:	2301      	movs	r3, #1
  40593e:	2209      	movs	r2, #9
  405940:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  405944:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  405948:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  40594c:	61ed      	str	r5, [r5, #28]
  40594e:	4621      	mov	r1, r4
  405950:	81f3      	strh	r3, [r6, #14]
  405952:	81b2      	strh	r2, [r6, #12]
  405954:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  405958:	6034      	str	r4, [r6, #0]
  40595a:	6074      	str	r4, [r6, #4]
  40595c:	60b4      	str	r4, [r6, #8]
  40595e:	6674      	str	r4, [r6, #100]	; 0x64
  405960:	6134      	str	r4, [r6, #16]
  405962:	6174      	str	r4, [r6, #20]
  405964:	61b4      	str	r4, [r6, #24]
  405966:	2208      	movs	r2, #8
  405968:	9301      	str	r3, [sp, #4]
  40596a:	f7fe fd97 	bl	40449c <memset>
  40596e:	68fd      	ldr	r5, [r7, #12]
  405970:	61f6      	str	r6, [r6, #28]
  405972:	2012      	movs	r0, #18
  405974:	2202      	movs	r2, #2
  405976:	f8c6 b020 	str.w	fp, [r6, #32]
  40597a:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  40597e:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  405982:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  405986:	4621      	mov	r1, r4
  405988:	81a8      	strh	r0, [r5, #12]
  40598a:	81ea      	strh	r2, [r5, #14]
  40598c:	602c      	str	r4, [r5, #0]
  40598e:	606c      	str	r4, [r5, #4]
  405990:	60ac      	str	r4, [r5, #8]
  405992:	666c      	str	r4, [r5, #100]	; 0x64
  405994:	612c      	str	r4, [r5, #16]
  405996:	616c      	str	r4, [r5, #20]
  405998:	61ac      	str	r4, [r5, #24]
  40599a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  40599e:	2208      	movs	r2, #8
  4059a0:	f7fe fd7c 	bl	40449c <memset>
  4059a4:	9b01      	ldr	r3, [sp, #4]
  4059a6:	61ed      	str	r5, [r5, #28]
  4059a8:	f8c5 b020 	str.w	fp, [r5, #32]
  4059ac:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  4059b0:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  4059b4:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  4059b8:	63bb      	str	r3, [r7, #56]	; 0x38
  4059ba:	b003      	add	sp, #12
  4059bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4059c0:	004058d9 	.word	0x004058d9
  4059c4:	00406db9 	.word	0x00406db9
  4059c8:	00406ddd 	.word	0x00406ddd
  4059cc:	00406e19 	.word	0x00406e19
  4059d0:	00406e39 	.word	0x00406e39

004059d4 <__sinit>:
  4059d4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4059d6:	b103      	cbz	r3, 4059da <__sinit+0x6>
  4059d8:	4770      	bx	lr
  4059da:	f7ff bf83 	b.w	4058e4 <__sinit.part.1>
  4059de:	bf00      	nop

004059e0 <__sfp_lock_acquire>:
  4059e0:	4770      	bx	lr
  4059e2:	bf00      	nop

004059e4 <__sfp_lock_release>:
  4059e4:	4770      	bx	lr
  4059e6:	bf00      	nop

004059e8 <__libc_fini_array>:
  4059e8:	b538      	push	{r3, r4, r5, lr}
  4059ea:	4d07      	ldr	r5, [pc, #28]	; (405a08 <__libc_fini_array+0x20>)
  4059ec:	4c07      	ldr	r4, [pc, #28]	; (405a0c <__libc_fini_array+0x24>)
  4059ee:	1b2c      	subs	r4, r5, r4
  4059f0:	10a4      	asrs	r4, r4, #2
  4059f2:	d005      	beq.n	405a00 <__libc_fini_array+0x18>
  4059f4:	3c01      	subs	r4, #1
  4059f6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  4059fa:	4798      	blx	r3
  4059fc:	2c00      	cmp	r4, #0
  4059fe:	d1f9      	bne.n	4059f4 <__libc_fini_array+0xc>
  405a00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  405a04:	f002 be3e 	b.w	408684 <_fini>
  405a08:	00408694 	.word	0x00408694
  405a0c:	00408690 	.word	0x00408690

00405a10 <__fputwc>:
  405a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405a14:	b082      	sub	sp, #8
  405a16:	4680      	mov	r8, r0
  405a18:	4689      	mov	r9, r1
  405a1a:	4614      	mov	r4, r2
  405a1c:	f000 fb3c 	bl	406098 <__locale_mb_cur_max>
  405a20:	2801      	cmp	r0, #1
  405a22:	d033      	beq.n	405a8c <__fputwc+0x7c>
  405a24:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  405a28:	464a      	mov	r2, r9
  405a2a:	a901      	add	r1, sp, #4
  405a2c:	4640      	mov	r0, r8
  405a2e:	f001 fa5d 	bl	406eec <_wcrtomb_r>
  405a32:	f1b0 3fff 	cmp.w	r0, #4294967295
  405a36:	4682      	mov	sl, r0
  405a38:	d021      	beq.n	405a7e <__fputwc+0x6e>
  405a3a:	b388      	cbz	r0, 405aa0 <__fputwc+0x90>
  405a3c:	f89d 6004 	ldrb.w	r6, [sp, #4]
  405a40:	2500      	movs	r5, #0
  405a42:	e008      	b.n	405a56 <__fputwc+0x46>
  405a44:	6823      	ldr	r3, [r4, #0]
  405a46:	1c5a      	adds	r2, r3, #1
  405a48:	6022      	str	r2, [r4, #0]
  405a4a:	701e      	strb	r6, [r3, #0]
  405a4c:	3501      	adds	r5, #1
  405a4e:	4555      	cmp	r5, sl
  405a50:	d226      	bcs.n	405aa0 <__fputwc+0x90>
  405a52:	ab01      	add	r3, sp, #4
  405a54:	5d5e      	ldrb	r6, [r3, r5]
  405a56:	68a3      	ldr	r3, [r4, #8]
  405a58:	3b01      	subs	r3, #1
  405a5a:	2b00      	cmp	r3, #0
  405a5c:	60a3      	str	r3, [r4, #8]
  405a5e:	daf1      	bge.n	405a44 <__fputwc+0x34>
  405a60:	69a7      	ldr	r7, [r4, #24]
  405a62:	42bb      	cmp	r3, r7
  405a64:	4631      	mov	r1, r6
  405a66:	4622      	mov	r2, r4
  405a68:	4640      	mov	r0, r8
  405a6a:	db01      	blt.n	405a70 <__fputwc+0x60>
  405a6c:	2e0a      	cmp	r6, #10
  405a6e:	d1e9      	bne.n	405a44 <__fputwc+0x34>
  405a70:	f001 f9e6 	bl	406e40 <__swbuf_r>
  405a74:	1c43      	adds	r3, r0, #1
  405a76:	d1e9      	bne.n	405a4c <__fputwc+0x3c>
  405a78:	b002      	add	sp, #8
  405a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405a7e:	89a3      	ldrh	r3, [r4, #12]
  405a80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405a84:	81a3      	strh	r3, [r4, #12]
  405a86:	b002      	add	sp, #8
  405a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405a8c:	f109 33ff 	add.w	r3, r9, #4294967295
  405a90:	2bfe      	cmp	r3, #254	; 0xfe
  405a92:	d8c7      	bhi.n	405a24 <__fputwc+0x14>
  405a94:	fa5f f689 	uxtb.w	r6, r9
  405a98:	4682      	mov	sl, r0
  405a9a:	f88d 6004 	strb.w	r6, [sp, #4]
  405a9e:	e7cf      	b.n	405a40 <__fputwc+0x30>
  405aa0:	4648      	mov	r0, r9
  405aa2:	b002      	add	sp, #8
  405aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00405aa8 <_fputwc_r>:
  405aa8:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  405aac:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  405ab0:	d10a      	bne.n	405ac8 <_fputwc_r+0x20>
  405ab2:	b410      	push	{r4}
  405ab4:	6e54      	ldr	r4, [r2, #100]	; 0x64
  405ab6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  405aba:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  405abe:	6654      	str	r4, [r2, #100]	; 0x64
  405ac0:	8193      	strh	r3, [r2, #12]
  405ac2:	bc10      	pop	{r4}
  405ac4:	f7ff bfa4 	b.w	405a10 <__fputwc>
  405ac8:	f7ff bfa2 	b.w	405a10 <__fputwc>

00405acc <_malloc_trim_r>:
  405acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405ace:	4f23      	ldr	r7, [pc, #140]	; (405b5c <_malloc_trim_r+0x90>)
  405ad0:	460c      	mov	r4, r1
  405ad2:	4606      	mov	r6, r0
  405ad4:	f000 ff6a 	bl	4069ac <__malloc_lock>
  405ad8:	68bb      	ldr	r3, [r7, #8]
  405ada:	685d      	ldr	r5, [r3, #4]
  405adc:	f025 0503 	bic.w	r5, r5, #3
  405ae0:	1b29      	subs	r1, r5, r4
  405ae2:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  405ae6:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  405aea:	f021 010f 	bic.w	r1, r1, #15
  405aee:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  405af2:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  405af6:	db07      	blt.n	405b08 <_malloc_trim_r+0x3c>
  405af8:	2100      	movs	r1, #0
  405afa:	4630      	mov	r0, r6
  405afc:	f001 f94a 	bl	406d94 <_sbrk_r>
  405b00:	68bb      	ldr	r3, [r7, #8]
  405b02:	442b      	add	r3, r5
  405b04:	4298      	cmp	r0, r3
  405b06:	d004      	beq.n	405b12 <_malloc_trim_r+0x46>
  405b08:	4630      	mov	r0, r6
  405b0a:	f000 ff51 	bl	4069b0 <__malloc_unlock>
  405b0e:	2000      	movs	r0, #0
  405b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405b12:	4261      	negs	r1, r4
  405b14:	4630      	mov	r0, r6
  405b16:	f001 f93d 	bl	406d94 <_sbrk_r>
  405b1a:	3001      	adds	r0, #1
  405b1c:	d00d      	beq.n	405b3a <_malloc_trim_r+0x6e>
  405b1e:	4b10      	ldr	r3, [pc, #64]	; (405b60 <_malloc_trim_r+0x94>)
  405b20:	68ba      	ldr	r2, [r7, #8]
  405b22:	6819      	ldr	r1, [r3, #0]
  405b24:	1b2d      	subs	r5, r5, r4
  405b26:	f045 0501 	orr.w	r5, r5, #1
  405b2a:	4630      	mov	r0, r6
  405b2c:	1b09      	subs	r1, r1, r4
  405b2e:	6055      	str	r5, [r2, #4]
  405b30:	6019      	str	r1, [r3, #0]
  405b32:	f000 ff3d 	bl	4069b0 <__malloc_unlock>
  405b36:	2001      	movs	r0, #1
  405b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405b3a:	2100      	movs	r1, #0
  405b3c:	4630      	mov	r0, r6
  405b3e:	f001 f929 	bl	406d94 <_sbrk_r>
  405b42:	68ba      	ldr	r2, [r7, #8]
  405b44:	1a83      	subs	r3, r0, r2
  405b46:	2b0f      	cmp	r3, #15
  405b48:	ddde      	ble.n	405b08 <_malloc_trim_r+0x3c>
  405b4a:	4c06      	ldr	r4, [pc, #24]	; (405b64 <_malloc_trim_r+0x98>)
  405b4c:	4904      	ldr	r1, [pc, #16]	; (405b60 <_malloc_trim_r+0x94>)
  405b4e:	6824      	ldr	r4, [r4, #0]
  405b50:	f043 0301 	orr.w	r3, r3, #1
  405b54:	1b00      	subs	r0, r0, r4
  405b56:	6053      	str	r3, [r2, #4]
  405b58:	6008      	str	r0, [r1, #0]
  405b5a:	e7d5      	b.n	405b08 <_malloc_trim_r+0x3c>
  405b5c:	204004e0 	.word	0x204004e0
  405b60:	20400f58 	.word	0x20400f58
  405b64:	204008ec 	.word	0x204008ec

00405b68 <_free_r>:
  405b68:	2900      	cmp	r1, #0
  405b6a:	d045      	beq.n	405bf8 <_free_r+0x90>
  405b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405b70:	460d      	mov	r5, r1
  405b72:	4680      	mov	r8, r0
  405b74:	f000 ff1a 	bl	4069ac <__malloc_lock>
  405b78:	f855 7c04 	ldr.w	r7, [r5, #-4]
  405b7c:	496a      	ldr	r1, [pc, #424]	; (405d28 <_free_r+0x1c0>)
  405b7e:	f027 0301 	bic.w	r3, r7, #1
  405b82:	f1a5 0408 	sub.w	r4, r5, #8
  405b86:	18e2      	adds	r2, r4, r3
  405b88:	688e      	ldr	r6, [r1, #8]
  405b8a:	6850      	ldr	r0, [r2, #4]
  405b8c:	42b2      	cmp	r2, r6
  405b8e:	f020 0003 	bic.w	r0, r0, #3
  405b92:	d062      	beq.n	405c5a <_free_r+0xf2>
  405b94:	07fe      	lsls	r6, r7, #31
  405b96:	6050      	str	r0, [r2, #4]
  405b98:	d40b      	bmi.n	405bb2 <_free_r+0x4a>
  405b9a:	f855 7c08 	ldr.w	r7, [r5, #-8]
  405b9e:	1be4      	subs	r4, r4, r7
  405ba0:	f101 0e08 	add.w	lr, r1, #8
  405ba4:	68a5      	ldr	r5, [r4, #8]
  405ba6:	4575      	cmp	r5, lr
  405ba8:	443b      	add	r3, r7
  405baa:	d06f      	beq.n	405c8c <_free_r+0x124>
  405bac:	68e7      	ldr	r7, [r4, #12]
  405bae:	60ef      	str	r7, [r5, #12]
  405bb0:	60bd      	str	r5, [r7, #8]
  405bb2:	1815      	adds	r5, r2, r0
  405bb4:	686d      	ldr	r5, [r5, #4]
  405bb6:	07ed      	lsls	r5, r5, #31
  405bb8:	d542      	bpl.n	405c40 <_free_r+0xd8>
  405bba:	f043 0201 	orr.w	r2, r3, #1
  405bbe:	6062      	str	r2, [r4, #4]
  405bc0:	50e3      	str	r3, [r4, r3]
  405bc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405bc6:	d218      	bcs.n	405bfa <_free_r+0x92>
  405bc8:	08db      	lsrs	r3, r3, #3
  405bca:	1c5a      	adds	r2, r3, #1
  405bcc:	684d      	ldr	r5, [r1, #4]
  405bce:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
  405bd2:	60a7      	str	r7, [r4, #8]
  405bd4:	2001      	movs	r0, #1
  405bd6:	109b      	asrs	r3, r3, #2
  405bd8:	fa00 f303 	lsl.w	r3, r0, r3
  405bdc:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
  405be0:	431d      	orrs	r5, r3
  405be2:	3808      	subs	r0, #8
  405be4:	60e0      	str	r0, [r4, #12]
  405be6:	604d      	str	r5, [r1, #4]
  405be8:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
  405bec:	60fc      	str	r4, [r7, #12]
  405bee:	4640      	mov	r0, r8
  405bf0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405bf4:	f000 bedc 	b.w	4069b0 <__malloc_unlock>
  405bf8:	4770      	bx	lr
  405bfa:	0a5a      	lsrs	r2, r3, #9
  405bfc:	2a04      	cmp	r2, #4
  405bfe:	d853      	bhi.n	405ca8 <_free_r+0x140>
  405c00:	099a      	lsrs	r2, r3, #6
  405c02:	f102 0739 	add.w	r7, r2, #57	; 0x39
  405c06:	007f      	lsls	r7, r7, #1
  405c08:	f102 0538 	add.w	r5, r2, #56	; 0x38
  405c0c:	eb01 0087 	add.w	r0, r1, r7, lsl #2
  405c10:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
  405c14:	4944      	ldr	r1, [pc, #272]	; (405d28 <_free_r+0x1c0>)
  405c16:	3808      	subs	r0, #8
  405c18:	4290      	cmp	r0, r2
  405c1a:	d04d      	beq.n	405cb8 <_free_r+0x150>
  405c1c:	6851      	ldr	r1, [r2, #4]
  405c1e:	f021 0103 	bic.w	r1, r1, #3
  405c22:	428b      	cmp	r3, r1
  405c24:	d202      	bcs.n	405c2c <_free_r+0xc4>
  405c26:	6892      	ldr	r2, [r2, #8]
  405c28:	4290      	cmp	r0, r2
  405c2a:	d1f7      	bne.n	405c1c <_free_r+0xb4>
  405c2c:	68d0      	ldr	r0, [r2, #12]
  405c2e:	60e0      	str	r0, [r4, #12]
  405c30:	60a2      	str	r2, [r4, #8]
  405c32:	6084      	str	r4, [r0, #8]
  405c34:	60d4      	str	r4, [r2, #12]
  405c36:	4640      	mov	r0, r8
  405c38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405c3c:	f000 beb8 	b.w	4069b0 <__malloc_unlock>
  405c40:	6895      	ldr	r5, [r2, #8]
  405c42:	4f3a      	ldr	r7, [pc, #232]	; (405d2c <_free_r+0x1c4>)
  405c44:	42bd      	cmp	r5, r7
  405c46:	4403      	add	r3, r0
  405c48:	d03f      	beq.n	405cca <_free_r+0x162>
  405c4a:	68d0      	ldr	r0, [r2, #12]
  405c4c:	60e8      	str	r0, [r5, #12]
  405c4e:	f043 0201 	orr.w	r2, r3, #1
  405c52:	6085      	str	r5, [r0, #8]
  405c54:	6062      	str	r2, [r4, #4]
  405c56:	50e3      	str	r3, [r4, r3]
  405c58:	e7b3      	b.n	405bc2 <_free_r+0x5a>
  405c5a:	07ff      	lsls	r7, r7, #31
  405c5c:	4403      	add	r3, r0
  405c5e:	d407      	bmi.n	405c70 <_free_r+0x108>
  405c60:	f855 2c08 	ldr.w	r2, [r5, #-8]
  405c64:	1aa4      	subs	r4, r4, r2
  405c66:	4413      	add	r3, r2
  405c68:	68a0      	ldr	r0, [r4, #8]
  405c6a:	68e2      	ldr	r2, [r4, #12]
  405c6c:	60c2      	str	r2, [r0, #12]
  405c6e:	6090      	str	r0, [r2, #8]
  405c70:	4a2f      	ldr	r2, [pc, #188]	; (405d30 <_free_r+0x1c8>)
  405c72:	6812      	ldr	r2, [r2, #0]
  405c74:	f043 0001 	orr.w	r0, r3, #1
  405c78:	4293      	cmp	r3, r2
  405c7a:	6060      	str	r0, [r4, #4]
  405c7c:	608c      	str	r4, [r1, #8]
  405c7e:	d3b6      	bcc.n	405bee <_free_r+0x86>
  405c80:	4b2c      	ldr	r3, [pc, #176]	; (405d34 <_free_r+0x1cc>)
  405c82:	4640      	mov	r0, r8
  405c84:	6819      	ldr	r1, [r3, #0]
  405c86:	f7ff ff21 	bl	405acc <_malloc_trim_r>
  405c8a:	e7b0      	b.n	405bee <_free_r+0x86>
  405c8c:	1811      	adds	r1, r2, r0
  405c8e:	6849      	ldr	r1, [r1, #4]
  405c90:	07c9      	lsls	r1, r1, #31
  405c92:	d444      	bmi.n	405d1e <_free_r+0x1b6>
  405c94:	6891      	ldr	r1, [r2, #8]
  405c96:	68d2      	ldr	r2, [r2, #12]
  405c98:	60ca      	str	r2, [r1, #12]
  405c9a:	4403      	add	r3, r0
  405c9c:	f043 0001 	orr.w	r0, r3, #1
  405ca0:	6091      	str	r1, [r2, #8]
  405ca2:	6060      	str	r0, [r4, #4]
  405ca4:	50e3      	str	r3, [r4, r3]
  405ca6:	e7a2      	b.n	405bee <_free_r+0x86>
  405ca8:	2a14      	cmp	r2, #20
  405caa:	d817      	bhi.n	405cdc <_free_r+0x174>
  405cac:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  405cb0:	007f      	lsls	r7, r7, #1
  405cb2:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  405cb6:	e7a9      	b.n	405c0c <_free_r+0xa4>
  405cb8:	10aa      	asrs	r2, r5, #2
  405cba:	684b      	ldr	r3, [r1, #4]
  405cbc:	2501      	movs	r5, #1
  405cbe:	fa05 f202 	lsl.w	r2, r5, r2
  405cc2:	4313      	orrs	r3, r2
  405cc4:	604b      	str	r3, [r1, #4]
  405cc6:	4602      	mov	r2, r0
  405cc8:	e7b1      	b.n	405c2e <_free_r+0xc6>
  405cca:	f043 0201 	orr.w	r2, r3, #1
  405cce:	614c      	str	r4, [r1, #20]
  405cd0:	610c      	str	r4, [r1, #16]
  405cd2:	60e5      	str	r5, [r4, #12]
  405cd4:	60a5      	str	r5, [r4, #8]
  405cd6:	6062      	str	r2, [r4, #4]
  405cd8:	50e3      	str	r3, [r4, r3]
  405cda:	e788      	b.n	405bee <_free_r+0x86>
  405cdc:	2a54      	cmp	r2, #84	; 0x54
  405cde:	d806      	bhi.n	405cee <_free_r+0x186>
  405ce0:	0b1a      	lsrs	r2, r3, #12
  405ce2:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  405ce6:	007f      	lsls	r7, r7, #1
  405ce8:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  405cec:	e78e      	b.n	405c0c <_free_r+0xa4>
  405cee:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405cf2:	d806      	bhi.n	405d02 <_free_r+0x19a>
  405cf4:	0bda      	lsrs	r2, r3, #15
  405cf6:	f102 0778 	add.w	r7, r2, #120	; 0x78
  405cfa:	007f      	lsls	r7, r7, #1
  405cfc:	f102 0577 	add.w	r5, r2, #119	; 0x77
  405d00:	e784      	b.n	405c0c <_free_r+0xa4>
  405d02:	f240 5054 	movw	r0, #1364	; 0x554
  405d06:	4282      	cmp	r2, r0
  405d08:	d806      	bhi.n	405d18 <_free_r+0x1b0>
  405d0a:	0c9a      	lsrs	r2, r3, #18
  405d0c:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  405d10:	007f      	lsls	r7, r7, #1
  405d12:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  405d16:	e779      	b.n	405c0c <_free_r+0xa4>
  405d18:	27fe      	movs	r7, #254	; 0xfe
  405d1a:	257e      	movs	r5, #126	; 0x7e
  405d1c:	e776      	b.n	405c0c <_free_r+0xa4>
  405d1e:	f043 0201 	orr.w	r2, r3, #1
  405d22:	6062      	str	r2, [r4, #4]
  405d24:	50e3      	str	r3, [r4, r3]
  405d26:	e762      	b.n	405bee <_free_r+0x86>
  405d28:	204004e0 	.word	0x204004e0
  405d2c:	204004e8 	.word	0x204004e8
  405d30:	204008e8 	.word	0x204008e8
  405d34:	20400f54 	.word	0x20400f54

00405d38 <__sfvwrite_r>:
  405d38:	6893      	ldr	r3, [r2, #8]
  405d3a:	2b00      	cmp	r3, #0
  405d3c:	d076      	beq.n	405e2c <__sfvwrite_r+0xf4>
  405d3e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405d42:	898b      	ldrh	r3, [r1, #12]
  405d44:	b085      	sub	sp, #20
  405d46:	460c      	mov	r4, r1
  405d48:	0719      	lsls	r1, r3, #28
  405d4a:	9001      	str	r0, [sp, #4]
  405d4c:	4616      	mov	r6, r2
  405d4e:	d529      	bpl.n	405da4 <__sfvwrite_r+0x6c>
  405d50:	6922      	ldr	r2, [r4, #16]
  405d52:	b33a      	cbz	r2, 405da4 <__sfvwrite_r+0x6c>
  405d54:	f003 0802 	and.w	r8, r3, #2
  405d58:	fa1f f088 	uxth.w	r0, r8
  405d5c:	6835      	ldr	r5, [r6, #0]
  405d5e:	2800      	cmp	r0, #0
  405d60:	d02f      	beq.n	405dc2 <__sfvwrite_r+0x8a>
  405d62:	f04f 0900 	mov.w	r9, #0
  405d66:	4fb4      	ldr	r7, [pc, #720]	; (406038 <__sfvwrite_r+0x300>)
  405d68:	46c8      	mov	r8, r9
  405d6a:	46b2      	mov	sl, r6
  405d6c:	45b8      	cmp	r8, r7
  405d6e:	4643      	mov	r3, r8
  405d70:	464a      	mov	r2, r9
  405d72:	bf28      	it	cs
  405d74:	463b      	movcs	r3, r7
  405d76:	9801      	ldr	r0, [sp, #4]
  405d78:	f1b8 0f00 	cmp.w	r8, #0
  405d7c:	d050      	beq.n	405e20 <__sfvwrite_r+0xe8>
  405d7e:	69e1      	ldr	r1, [r4, #28]
  405d80:	6a66      	ldr	r6, [r4, #36]	; 0x24
  405d82:	47b0      	blx	r6
  405d84:	2800      	cmp	r0, #0
  405d86:	dd71      	ble.n	405e6c <__sfvwrite_r+0x134>
  405d88:	f8da 3008 	ldr.w	r3, [sl, #8]
  405d8c:	1a1b      	subs	r3, r3, r0
  405d8e:	4481      	add	r9, r0
  405d90:	ebc0 0808 	rsb	r8, r0, r8
  405d94:	f8ca 3008 	str.w	r3, [sl, #8]
  405d98:	2b00      	cmp	r3, #0
  405d9a:	d1e7      	bne.n	405d6c <__sfvwrite_r+0x34>
  405d9c:	2000      	movs	r0, #0
  405d9e:	b005      	add	sp, #20
  405da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405da4:	4621      	mov	r1, r4
  405da6:	9801      	ldr	r0, [sp, #4]
  405da8:	f7ff fc68 	bl	40567c <__swsetup_r>
  405dac:	2800      	cmp	r0, #0
  405dae:	f040 813a 	bne.w	406026 <__sfvwrite_r+0x2ee>
  405db2:	89a3      	ldrh	r3, [r4, #12]
  405db4:	6835      	ldr	r5, [r6, #0]
  405db6:	f003 0802 	and.w	r8, r3, #2
  405dba:	fa1f f088 	uxth.w	r0, r8
  405dbe:	2800      	cmp	r0, #0
  405dc0:	d1cf      	bne.n	405d62 <__sfvwrite_r+0x2a>
  405dc2:	f013 0901 	ands.w	r9, r3, #1
  405dc6:	d15b      	bne.n	405e80 <__sfvwrite_r+0x148>
  405dc8:	464f      	mov	r7, r9
  405dca:	9602      	str	r6, [sp, #8]
  405dcc:	b31f      	cbz	r7, 405e16 <__sfvwrite_r+0xde>
  405dce:	059a      	lsls	r2, r3, #22
  405dd0:	f8d4 8008 	ldr.w	r8, [r4, #8]
  405dd4:	d52c      	bpl.n	405e30 <__sfvwrite_r+0xf8>
  405dd6:	4547      	cmp	r7, r8
  405dd8:	46c2      	mov	sl, r8
  405dda:	f0c0 80a4 	bcc.w	405f26 <__sfvwrite_r+0x1ee>
  405dde:	f413 6f90 	tst.w	r3, #1152	; 0x480
  405de2:	f040 80b1 	bne.w	405f48 <__sfvwrite_r+0x210>
  405de6:	6820      	ldr	r0, [r4, #0]
  405de8:	4652      	mov	r2, sl
  405dea:	4649      	mov	r1, r9
  405dec:	f000 fd7a 	bl	4068e4 <memmove>
  405df0:	68a0      	ldr	r0, [r4, #8]
  405df2:	6823      	ldr	r3, [r4, #0]
  405df4:	ebc8 0000 	rsb	r0, r8, r0
  405df8:	4453      	add	r3, sl
  405dfa:	60a0      	str	r0, [r4, #8]
  405dfc:	6023      	str	r3, [r4, #0]
  405dfe:	4638      	mov	r0, r7
  405e00:	9a02      	ldr	r2, [sp, #8]
  405e02:	6893      	ldr	r3, [r2, #8]
  405e04:	1a1b      	subs	r3, r3, r0
  405e06:	4481      	add	r9, r0
  405e08:	1a3f      	subs	r7, r7, r0
  405e0a:	6093      	str	r3, [r2, #8]
  405e0c:	2b00      	cmp	r3, #0
  405e0e:	d0c5      	beq.n	405d9c <__sfvwrite_r+0x64>
  405e10:	89a3      	ldrh	r3, [r4, #12]
  405e12:	2f00      	cmp	r7, #0
  405e14:	d1db      	bne.n	405dce <__sfvwrite_r+0x96>
  405e16:	f8d5 9000 	ldr.w	r9, [r5]
  405e1a:	686f      	ldr	r7, [r5, #4]
  405e1c:	3508      	adds	r5, #8
  405e1e:	e7d5      	b.n	405dcc <__sfvwrite_r+0x94>
  405e20:	f8d5 9000 	ldr.w	r9, [r5]
  405e24:	f8d5 8004 	ldr.w	r8, [r5, #4]
  405e28:	3508      	adds	r5, #8
  405e2a:	e79f      	b.n	405d6c <__sfvwrite_r+0x34>
  405e2c:	2000      	movs	r0, #0
  405e2e:	4770      	bx	lr
  405e30:	6820      	ldr	r0, [r4, #0]
  405e32:	6923      	ldr	r3, [r4, #16]
  405e34:	4298      	cmp	r0, r3
  405e36:	d803      	bhi.n	405e40 <__sfvwrite_r+0x108>
  405e38:	6961      	ldr	r1, [r4, #20]
  405e3a:	428f      	cmp	r7, r1
  405e3c:	f080 80b7 	bcs.w	405fae <__sfvwrite_r+0x276>
  405e40:	45b8      	cmp	r8, r7
  405e42:	bf28      	it	cs
  405e44:	46b8      	movcs	r8, r7
  405e46:	4642      	mov	r2, r8
  405e48:	4649      	mov	r1, r9
  405e4a:	f000 fd4b 	bl	4068e4 <memmove>
  405e4e:	68a3      	ldr	r3, [r4, #8]
  405e50:	6822      	ldr	r2, [r4, #0]
  405e52:	ebc8 0303 	rsb	r3, r8, r3
  405e56:	4442      	add	r2, r8
  405e58:	60a3      	str	r3, [r4, #8]
  405e5a:	6022      	str	r2, [r4, #0]
  405e5c:	2b00      	cmp	r3, #0
  405e5e:	d149      	bne.n	405ef4 <__sfvwrite_r+0x1bc>
  405e60:	4621      	mov	r1, r4
  405e62:	9801      	ldr	r0, [sp, #4]
  405e64:	f7ff fd22 	bl	4058ac <_fflush_r>
  405e68:	2800      	cmp	r0, #0
  405e6a:	d043      	beq.n	405ef4 <__sfvwrite_r+0x1bc>
  405e6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405e70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405e74:	f04f 30ff 	mov.w	r0, #4294967295
  405e78:	81a3      	strh	r3, [r4, #12]
  405e7a:	b005      	add	sp, #20
  405e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405e80:	4680      	mov	r8, r0
  405e82:	9002      	str	r0, [sp, #8]
  405e84:	4682      	mov	sl, r0
  405e86:	4681      	mov	r9, r0
  405e88:	f1b9 0f00 	cmp.w	r9, #0
  405e8c:	d02a      	beq.n	405ee4 <__sfvwrite_r+0x1ac>
  405e8e:	9b02      	ldr	r3, [sp, #8]
  405e90:	2b00      	cmp	r3, #0
  405e92:	d04c      	beq.n	405f2e <__sfvwrite_r+0x1f6>
  405e94:	6820      	ldr	r0, [r4, #0]
  405e96:	6923      	ldr	r3, [r4, #16]
  405e98:	6962      	ldr	r2, [r4, #20]
  405e9a:	45c8      	cmp	r8, r9
  405e9c:	46c3      	mov	fp, r8
  405e9e:	bf28      	it	cs
  405ea0:	46cb      	movcs	fp, r9
  405ea2:	4298      	cmp	r0, r3
  405ea4:	465f      	mov	r7, fp
  405ea6:	d904      	bls.n	405eb2 <__sfvwrite_r+0x17a>
  405ea8:	68a3      	ldr	r3, [r4, #8]
  405eaa:	4413      	add	r3, r2
  405eac:	459b      	cmp	fp, r3
  405eae:	f300 8090 	bgt.w	405fd2 <__sfvwrite_r+0x29a>
  405eb2:	4593      	cmp	fp, r2
  405eb4:	db20      	blt.n	405ef8 <__sfvwrite_r+0x1c0>
  405eb6:	4613      	mov	r3, r2
  405eb8:	6a67      	ldr	r7, [r4, #36]	; 0x24
  405eba:	69e1      	ldr	r1, [r4, #28]
  405ebc:	9801      	ldr	r0, [sp, #4]
  405ebe:	4652      	mov	r2, sl
  405ec0:	47b8      	blx	r7
  405ec2:	1e07      	subs	r7, r0, #0
  405ec4:	ddd2      	ble.n	405e6c <__sfvwrite_r+0x134>
  405ec6:	ebb8 0807 	subs.w	r8, r8, r7
  405eca:	d023      	beq.n	405f14 <__sfvwrite_r+0x1dc>
  405ecc:	68b3      	ldr	r3, [r6, #8]
  405ece:	1bdb      	subs	r3, r3, r7
  405ed0:	44ba      	add	sl, r7
  405ed2:	ebc7 0909 	rsb	r9, r7, r9
  405ed6:	60b3      	str	r3, [r6, #8]
  405ed8:	2b00      	cmp	r3, #0
  405eda:	f43f af5f 	beq.w	405d9c <__sfvwrite_r+0x64>
  405ede:	f1b9 0f00 	cmp.w	r9, #0
  405ee2:	d1d4      	bne.n	405e8e <__sfvwrite_r+0x156>
  405ee4:	2300      	movs	r3, #0
  405ee6:	f8d5 a000 	ldr.w	sl, [r5]
  405eea:	f8d5 9004 	ldr.w	r9, [r5, #4]
  405eee:	9302      	str	r3, [sp, #8]
  405ef0:	3508      	adds	r5, #8
  405ef2:	e7c9      	b.n	405e88 <__sfvwrite_r+0x150>
  405ef4:	4640      	mov	r0, r8
  405ef6:	e783      	b.n	405e00 <__sfvwrite_r+0xc8>
  405ef8:	465a      	mov	r2, fp
  405efa:	4651      	mov	r1, sl
  405efc:	f000 fcf2 	bl	4068e4 <memmove>
  405f00:	68a2      	ldr	r2, [r4, #8]
  405f02:	6823      	ldr	r3, [r4, #0]
  405f04:	ebcb 0202 	rsb	r2, fp, r2
  405f08:	445b      	add	r3, fp
  405f0a:	ebb8 0807 	subs.w	r8, r8, r7
  405f0e:	60a2      	str	r2, [r4, #8]
  405f10:	6023      	str	r3, [r4, #0]
  405f12:	d1db      	bne.n	405ecc <__sfvwrite_r+0x194>
  405f14:	4621      	mov	r1, r4
  405f16:	9801      	ldr	r0, [sp, #4]
  405f18:	f7ff fcc8 	bl	4058ac <_fflush_r>
  405f1c:	2800      	cmp	r0, #0
  405f1e:	d1a5      	bne.n	405e6c <__sfvwrite_r+0x134>
  405f20:	f8cd 8008 	str.w	r8, [sp, #8]
  405f24:	e7d2      	b.n	405ecc <__sfvwrite_r+0x194>
  405f26:	6820      	ldr	r0, [r4, #0]
  405f28:	46b8      	mov	r8, r7
  405f2a:	46ba      	mov	sl, r7
  405f2c:	e75c      	b.n	405de8 <__sfvwrite_r+0xb0>
  405f2e:	464a      	mov	r2, r9
  405f30:	210a      	movs	r1, #10
  405f32:	4650      	mov	r0, sl
  405f34:	f000 fbec 	bl	406710 <memchr>
  405f38:	2800      	cmp	r0, #0
  405f3a:	d06f      	beq.n	40601c <__sfvwrite_r+0x2e4>
  405f3c:	3001      	adds	r0, #1
  405f3e:	2301      	movs	r3, #1
  405f40:	ebca 0800 	rsb	r8, sl, r0
  405f44:	9302      	str	r3, [sp, #8]
  405f46:	e7a5      	b.n	405e94 <__sfvwrite_r+0x15c>
  405f48:	6962      	ldr	r2, [r4, #20]
  405f4a:	6820      	ldr	r0, [r4, #0]
  405f4c:	6921      	ldr	r1, [r4, #16]
  405f4e:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  405f52:	ebc1 0a00 	rsb	sl, r1, r0
  405f56:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  405f5a:	f10a 0001 	add.w	r0, sl, #1
  405f5e:	ea4f 0868 	mov.w	r8, r8, asr #1
  405f62:	4438      	add	r0, r7
  405f64:	4540      	cmp	r0, r8
  405f66:	4642      	mov	r2, r8
  405f68:	bf84      	itt	hi
  405f6a:	4680      	movhi	r8, r0
  405f6c:	4642      	movhi	r2, r8
  405f6e:	055b      	lsls	r3, r3, #21
  405f70:	d542      	bpl.n	405ff8 <__sfvwrite_r+0x2c0>
  405f72:	4611      	mov	r1, r2
  405f74:	9801      	ldr	r0, [sp, #4]
  405f76:	f000 f911 	bl	40619c <_malloc_r>
  405f7a:	4683      	mov	fp, r0
  405f7c:	2800      	cmp	r0, #0
  405f7e:	d055      	beq.n	40602c <__sfvwrite_r+0x2f4>
  405f80:	4652      	mov	r2, sl
  405f82:	6921      	ldr	r1, [r4, #16]
  405f84:	f000 fc14 	bl	4067b0 <memcpy>
  405f88:	89a3      	ldrh	r3, [r4, #12]
  405f8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  405f8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405f92:	81a3      	strh	r3, [r4, #12]
  405f94:	ebca 0308 	rsb	r3, sl, r8
  405f98:	eb0b 000a 	add.w	r0, fp, sl
  405f9c:	f8c4 8014 	str.w	r8, [r4, #20]
  405fa0:	f8c4 b010 	str.w	fp, [r4, #16]
  405fa4:	6020      	str	r0, [r4, #0]
  405fa6:	60a3      	str	r3, [r4, #8]
  405fa8:	46b8      	mov	r8, r7
  405faa:	46ba      	mov	sl, r7
  405fac:	e71c      	b.n	405de8 <__sfvwrite_r+0xb0>
  405fae:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  405fb2:	42bb      	cmp	r3, r7
  405fb4:	bf28      	it	cs
  405fb6:	463b      	movcs	r3, r7
  405fb8:	464a      	mov	r2, r9
  405fba:	fb93 f3f1 	sdiv	r3, r3, r1
  405fbe:	9801      	ldr	r0, [sp, #4]
  405fc0:	6a66      	ldr	r6, [r4, #36]	; 0x24
  405fc2:	fb01 f303 	mul.w	r3, r1, r3
  405fc6:	69e1      	ldr	r1, [r4, #28]
  405fc8:	47b0      	blx	r6
  405fca:	2800      	cmp	r0, #0
  405fcc:	f73f af18 	bgt.w	405e00 <__sfvwrite_r+0xc8>
  405fd0:	e74c      	b.n	405e6c <__sfvwrite_r+0x134>
  405fd2:	461a      	mov	r2, r3
  405fd4:	4651      	mov	r1, sl
  405fd6:	9303      	str	r3, [sp, #12]
  405fd8:	f000 fc84 	bl	4068e4 <memmove>
  405fdc:	6822      	ldr	r2, [r4, #0]
  405fde:	9b03      	ldr	r3, [sp, #12]
  405fe0:	9801      	ldr	r0, [sp, #4]
  405fe2:	441a      	add	r2, r3
  405fe4:	6022      	str	r2, [r4, #0]
  405fe6:	4621      	mov	r1, r4
  405fe8:	f7ff fc60 	bl	4058ac <_fflush_r>
  405fec:	9b03      	ldr	r3, [sp, #12]
  405fee:	2800      	cmp	r0, #0
  405ff0:	f47f af3c 	bne.w	405e6c <__sfvwrite_r+0x134>
  405ff4:	461f      	mov	r7, r3
  405ff6:	e766      	b.n	405ec6 <__sfvwrite_r+0x18e>
  405ff8:	9801      	ldr	r0, [sp, #4]
  405ffa:	f000 fcdb 	bl	4069b4 <_realloc_r>
  405ffe:	4683      	mov	fp, r0
  406000:	2800      	cmp	r0, #0
  406002:	d1c7      	bne.n	405f94 <__sfvwrite_r+0x25c>
  406004:	9d01      	ldr	r5, [sp, #4]
  406006:	6921      	ldr	r1, [r4, #16]
  406008:	4628      	mov	r0, r5
  40600a:	f7ff fdad 	bl	405b68 <_free_r>
  40600e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406012:	220c      	movs	r2, #12
  406014:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  406018:	602a      	str	r2, [r5, #0]
  40601a:	e729      	b.n	405e70 <__sfvwrite_r+0x138>
  40601c:	2301      	movs	r3, #1
  40601e:	f109 0801 	add.w	r8, r9, #1
  406022:	9302      	str	r3, [sp, #8]
  406024:	e736      	b.n	405e94 <__sfvwrite_r+0x15c>
  406026:	f04f 30ff 	mov.w	r0, #4294967295
  40602a:	e6b8      	b.n	405d9e <__sfvwrite_r+0x66>
  40602c:	9a01      	ldr	r2, [sp, #4]
  40602e:	230c      	movs	r3, #12
  406030:	6013      	str	r3, [r2, #0]
  406032:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406036:	e71b      	b.n	405e70 <__sfvwrite_r+0x138>
  406038:	7ffffc00 	.word	0x7ffffc00

0040603c <_fwalk_reent>:
  40603c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406040:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  406044:	d01f      	beq.n	406086 <_fwalk_reent+0x4a>
  406046:	4688      	mov	r8, r1
  406048:	4606      	mov	r6, r0
  40604a:	f04f 0900 	mov.w	r9, #0
  40604e:	687d      	ldr	r5, [r7, #4]
  406050:	68bc      	ldr	r4, [r7, #8]
  406052:	3d01      	subs	r5, #1
  406054:	d411      	bmi.n	40607a <_fwalk_reent+0x3e>
  406056:	89a3      	ldrh	r3, [r4, #12]
  406058:	2b01      	cmp	r3, #1
  40605a:	f105 35ff 	add.w	r5, r5, #4294967295
  40605e:	d908      	bls.n	406072 <_fwalk_reent+0x36>
  406060:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  406064:	3301      	adds	r3, #1
  406066:	4621      	mov	r1, r4
  406068:	4630      	mov	r0, r6
  40606a:	d002      	beq.n	406072 <_fwalk_reent+0x36>
  40606c:	47c0      	blx	r8
  40606e:	ea49 0900 	orr.w	r9, r9, r0
  406072:	1c6b      	adds	r3, r5, #1
  406074:	f104 0468 	add.w	r4, r4, #104	; 0x68
  406078:	d1ed      	bne.n	406056 <_fwalk_reent+0x1a>
  40607a:	683f      	ldr	r7, [r7, #0]
  40607c:	2f00      	cmp	r7, #0
  40607e:	d1e6      	bne.n	40604e <_fwalk_reent+0x12>
  406080:	4648      	mov	r0, r9
  406082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406086:	46b9      	mov	r9, r7
  406088:	4648      	mov	r0, r9
  40608a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40608e:	bf00      	nop

00406090 <__locale_charset>:
  406090:	4800      	ldr	r0, [pc, #0]	; (406094 <__locale_charset+0x4>)
  406092:	4770      	bx	lr
  406094:	204004bc 	.word	0x204004bc

00406098 <__locale_mb_cur_max>:
  406098:	4b01      	ldr	r3, [pc, #4]	; (4060a0 <__locale_mb_cur_max+0x8>)
  40609a:	6818      	ldr	r0, [r3, #0]
  40609c:	4770      	bx	lr
  40609e:	bf00      	nop
  4060a0:	204004dc 	.word	0x204004dc

004060a4 <__swhatbuf_r>:
  4060a4:	b570      	push	{r4, r5, r6, lr}
  4060a6:	460d      	mov	r5, r1
  4060a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4060ac:	2900      	cmp	r1, #0
  4060ae:	b090      	sub	sp, #64	; 0x40
  4060b0:	4614      	mov	r4, r2
  4060b2:	461e      	mov	r6, r3
  4060b4:	db14      	blt.n	4060e0 <__swhatbuf_r+0x3c>
  4060b6:	aa01      	add	r2, sp, #4
  4060b8:	f001 f80c 	bl	4070d4 <_fstat_r>
  4060bc:	2800      	cmp	r0, #0
  4060be:	db0f      	blt.n	4060e0 <__swhatbuf_r+0x3c>
  4060c0:	9a02      	ldr	r2, [sp, #8]
  4060c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  4060c6:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  4060ca:	fab2 f282 	clz	r2, r2
  4060ce:	0952      	lsrs	r2, r2, #5
  4060d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4060d4:	f44f 6000 	mov.w	r0, #2048	; 0x800
  4060d8:	6032      	str	r2, [r6, #0]
  4060da:	6023      	str	r3, [r4, #0]
  4060dc:	b010      	add	sp, #64	; 0x40
  4060de:	bd70      	pop	{r4, r5, r6, pc}
  4060e0:	89a8      	ldrh	r0, [r5, #12]
  4060e2:	f000 0080 	and.w	r0, r0, #128	; 0x80
  4060e6:	b282      	uxth	r2, r0
  4060e8:	2000      	movs	r0, #0
  4060ea:	6030      	str	r0, [r6, #0]
  4060ec:	b11a      	cbz	r2, 4060f6 <__swhatbuf_r+0x52>
  4060ee:	2340      	movs	r3, #64	; 0x40
  4060f0:	6023      	str	r3, [r4, #0]
  4060f2:	b010      	add	sp, #64	; 0x40
  4060f4:	bd70      	pop	{r4, r5, r6, pc}
  4060f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4060fa:	4610      	mov	r0, r2
  4060fc:	6023      	str	r3, [r4, #0]
  4060fe:	b010      	add	sp, #64	; 0x40
  406100:	bd70      	pop	{r4, r5, r6, pc}
  406102:	bf00      	nop

00406104 <__smakebuf_r>:
  406104:	898a      	ldrh	r2, [r1, #12]
  406106:	0792      	lsls	r2, r2, #30
  406108:	460b      	mov	r3, r1
  40610a:	d506      	bpl.n	40611a <__smakebuf_r+0x16>
  40610c:	f101 0243 	add.w	r2, r1, #67	; 0x43
  406110:	2101      	movs	r1, #1
  406112:	601a      	str	r2, [r3, #0]
  406114:	611a      	str	r2, [r3, #16]
  406116:	6159      	str	r1, [r3, #20]
  406118:	4770      	bx	lr
  40611a:	b5f0      	push	{r4, r5, r6, r7, lr}
  40611c:	b083      	sub	sp, #12
  40611e:	ab01      	add	r3, sp, #4
  406120:	466a      	mov	r2, sp
  406122:	460c      	mov	r4, r1
  406124:	4605      	mov	r5, r0
  406126:	f7ff ffbd 	bl	4060a4 <__swhatbuf_r>
  40612a:	9900      	ldr	r1, [sp, #0]
  40612c:	4606      	mov	r6, r0
  40612e:	4628      	mov	r0, r5
  406130:	f000 f834 	bl	40619c <_malloc_r>
  406134:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406138:	b1d0      	cbz	r0, 406170 <__smakebuf_r+0x6c>
  40613a:	9a01      	ldr	r2, [sp, #4]
  40613c:	4f12      	ldr	r7, [pc, #72]	; (406188 <__smakebuf_r+0x84>)
  40613e:	9900      	ldr	r1, [sp, #0]
  406140:	63ef      	str	r7, [r5, #60]	; 0x3c
  406142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406146:	81a3      	strh	r3, [r4, #12]
  406148:	6020      	str	r0, [r4, #0]
  40614a:	6120      	str	r0, [r4, #16]
  40614c:	6161      	str	r1, [r4, #20]
  40614e:	b91a      	cbnz	r2, 406158 <__smakebuf_r+0x54>
  406150:	4333      	orrs	r3, r6
  406152:	81a3      	strh	r3, [r4, #12]
  406154:	b003      	add	sp, #12
  406156:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406158:	4628      	mov	r0, r5
  40615a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40615e:	f000 ffcd 	bl	4070fc <_isatty_r>
  406162:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406166:	2800      	cmp	r0, #0
  406168:	d0f2      	beq.n	406150 <__smakebuf_r+0x4c>
  40616a:	f043 0301 	orr.w	r3, r3, #1
  40616e:	e7ef      	b.n	406150 <__smakebuf_r+0x4c>
  406170:	059a      	lsls	r2, r3, #22
  406172:	d4ef      	bmi.n	406154 <__smakebuf_r+0x50>
  406174:	f104 0243 	add.w	r2, r4, #67	; 0x43
  406178:	f043 0302 	orr.w	r3, r3, #2
  40617c:	2101      	movs	r1, #1
  40617e:	81a3      	strh	r3, [r4, #12]
  406180:	6022      	str	r2, [r4, #0]
  406182:	6122      	str	r2, [r4, #16]
  406184:	6161      	str	r1, [r4, #20]
  406186:	e7e5      	b.n	406154 <__smakebuf_r+0x50>
  406188:	004058d9 	.word	0x004058d9

0040618c <malloc>:
  40618c:	4b02      	ldr	r3, [pc, #8]	; (406198 <malloc+0xc>)
  40618e:	4601      	mov	r1, r0
  406190:	6818      	ldr	r0, [r3, #0]
  406192:	f000 b803 	b.w	40619c <_malloc_r>
  406196:	bf00      	nop
  406198:	204004b8 	.word	0x204004b8

0040619c <_malloc_r>:
  40619c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4061a0:	f101 050b 	add.w	r5, r1, #11
  4061a4:	2d16      	cmp	r5, #22
  4061a6:	b083      	sub	sp, #12
  4061a8:	4606      	mov	r6, r0
  4061aa:	f240 809f 	bls.w	4062ec <_malloc_r+0x150>
  4061ae:	f035 0507 	bics.w	r5, r5, #7
  4061b2:	f100 80bf 	bmi.w	406334 <_malloc_r+0x198>
  4061b6:	42a9      	cmp	r1, r5
  4061b8:	f200 80bc 	bhi.w	406334 <_malloc_r+0x198>
  4061bc:	f000 fbf6 	bl	4069ac <__malloc_lock>
  4061c0:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  4061c4:	f0c0 829c 	bcc.w	406700 <_malloc_r+0x564>
  4061c8:	0a6b      	lsrs	r3, r5, #9
  4061ca:	f000 80ba 	beq.w	406342 <_malloc_r+0x1a6>
  4061ce:	2b04      	cmp	r3, #4
  4061d0:	f200 8183 	bhi.w	4064da <_malloc_r+0x33e>
  4061d4:	09a8      	lsrs	r0, r5, #6
  4061d6:	f100 0e39 	add.w	lr, r0, #57	; 0x39
  4061da:	ea4f 034e 	mov.w	r3, lr, lsl #1
  4061de:	3038      	adds	r0, #56	; 0x38
  4061e0:	4fc4      	ldr	r7, [pc, #784]	; (4064f4 <_malloc_r+0x358>)
  4061e2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  4061e6:	f1a3 0108 	sub.w	r1, r3, #8
  4061ea:	685c      	ldr	r4, [r3, #4]
  4061ec:	42a1      	cmp	r1, r4
  4061ee:	d107      	bne.n	406200 <_malloc_r+0x64>
  4061f0:	e0ac      	b.n	40634c <_malloc_r+0x1b0>
  4061f2:	2a00      	cmp	r2, #0
  4061f4:	f280 80ac 	bge.w	406350 <_malloc_r+0x1b4>
  4061f8:	68e4      	ldr	r4, [r4, #12]
  4061fa:	42a1      	cmp	r1, r4
  4061fc:	f000 80a6 	beq.w	40634c <_malloc_r+0x1b0>
  406200:	6863      	ldr	r3, [r4, #4]
  406202:	f023 0303 	bic.w	r3, r3, #3
  406206:	1b5a      	subs	r2, r3, r5
  406208:	2a0f      	cmp	r2, #15
  40620a:	ddf2      	ble.n	4061f2 <_malloc_r+0x56>
  40620c:	49b9      	ldr	r1, [pc, #740]	; (4064f4 <_malloc_r+0x358>)
  40620e:	693c      	ldr	r4, [r7, #16]
  406210:	f101 0e08 	add.w	lr, r1, #8
  406214:	4574      	cmp	r4, lr
  406216:	f000 81b3 	beq.w	406580 <_malloc_r+0x3e4>
  40621a:	6863      	ldr	r3, [r4, #4]
  40621c:	f023 0303 	bic.w	r3, r3, #3
  406220:	1b5a      	subs	r2, r3, r5
  406222:	2a0f      	cmp	r2, #15
  406224:	f300 8199 	bgt.w	40655a <_malloc_r+0x3be>
  406228:	2a00      	cmp	r2, #0
  40622a:	f8c1 e014 	str.w	lr, [r1, #20]
  40622e:	f8c1 e010 	str.w	lr, [r1, #16]
  406232:	f280 809e 	bge.w	406372 <_malloc_r+0x1d6>
  406236:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40623a:	f080 8167 	bcs.w	40650c <_malloc_r+0x370>
  40623e:	08db      	lsrs	r3, r3, #3
  406240:	f103 0c01 	add.w	ip, r3, #1
  406244:	2201      	movs	r2, #1
  406246:	109b      	asrs	r3, r3, #2
  406248:	fa02 f303 	lsl.w	r3, r2, r3
  40624c:	684a      	ldr	r2, [r1, #4]
  40624e:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
  406252:	f8c4 8008 	str.w	r8, [r4, #8]
  406256:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
  40625a:	431a      	orrs	r2, r3
  40625c:	f1a9 0308 	sub.w	r3, r9, #8
  406260:	60e3      	str	r3, [r4, #12]
  406262:	604a      	str	r2, [r1, #4]
  406264:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
  406268:	f8c8 400c 	str.w	r4, [r8, #12]
  40626c:	1083      	asrs	r3, r0, #2
  40626e:	2401      	movs	r4, #1
  406270:	409c      	lsls	r4, r3
  406272:	4294      	cmp	r4, r2
  406274:	f200 808a 	bhi.w	40638c <_malloc_r+0x1f0>
  406278:	4214      	tst	r4, r2
  40627a:	d106      	bne.n	40628a <_malloc_r+0xee>
  40627c:	f020 0003 	bic.w	r0, r0, #3
  406280:	0064      	lsls	r4, r4, #1
  406282:	4214      	tst	r4, r2
  406284:	f100 0004 	add.w	r0, r0, #4
  406288:	d0fa      	beq.n	406280 <_malloc_r+0xe4>
  40628a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40628e:	46cc      	mov	ip, r9
  406290:	4680      	mov	r8, r0
  406292:	f8dc 100c 	ldr.w	r1, [ip, #12]
  406296:	458c      	cmp	ip, r1
  406298:	d107      	bne.n	4062aa <_malloc_r+0x10e>
  40629a:	e173      	b.n	406584 <_malloc_r+0x3e8>
  40629c:	2a00      	cmp	r2, #0
  40629e:	f280 8181 	bge.w	4065a4 <_malloc_r+0x408>
  4062a2:	68c9      	ldr	r1, [r1, #12]
  4062a4:	458c      	cmp	ip, r1
  4062a6:	f000 816d 	beq.w	406584 <_malloc_r+0x3e8>
  4062aa:	684b      	ldr	r3, [r1, #4]
  4062ac:	f023 0303 	bic.w	r3, r3, #3
  4062b0:	1b5a      	subs	r2, r3, r5
  4062b2:	2a0f      	cmp	r2, #15
  4062b4:	ddf2      	ble.n	40629c <_malloc_r+0x100>
  4062b6:	460c      	mov	r4, r1
  4062b8:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  4062bc:	f854 8f08 	ldr.w	r8, [r4, #8]!
  4062c0:	194b      	adds	r3, r1, r5
  4062c2:	f045 0501 	orr.w	r5, r5, #1
  4062c6:	604d      	str	r5, [r1, #4]
  4062c8:	f042 0101 	orr.w	r1, r2, #1
  4062cc:	f8c8 c00c 	str.w	ip, [r8, #12]
  4062d0:	4630      	mov	r0, r6
  4062d2:	f8cc 8008 	str.w	r8, [ip, #8]
  4062d6:	617b      	str	r3, [r7, #20]
  4062d8:	613b      	str	r3, [r7, #16]
  4062da:	f8c3 e00c 	str.w	lr, [r3, #12]
  4062de:	f8c3 e008 	str.w	lr, [r3, #8]
  4062e2:	6059      	str	r1, [r3, #4]
  4062e4:	509a      	str	r2, [r3, r2]
  4062e6:	f000 fb63 	bl	4069b0 <__malloc_unlock>
  4062ea:	e01f      	b.n	40632c <_malloc_r+0x190>
  4062ec:	2910      	cmp	r1, #16
  4062ee:	d821      	bhi.n	406334 <_malloc_r+0x198>
  4062f0:	f000 fb5c 	bl	4069ac <__malloc_lock>
  4062f4:	2510      	movs	r5, #16
  4062f6:	2306      	movs	r3, #6
  4062f8:	2002      	movs	r0, #2
  4062fa:	4f7e      	ldr	r7, [pc, #504]	; (4064f4 <_malloc_r+0x358>)
  4062fc:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  406300:	f1a3 0208 	sub.w	r2, r3, #8
  406304:	685c      	ldr	r4, [r3, #4]
  406306:	4294      	cmp	r4, r2
  406308:	f000 8145 	beq.w	406596 <_malloc_r+0x3fa>
  40630c:	6863      	ldr	r3, [r4, #4]
  40630e:	68e1      	ldr	r1, [r4, #12]
  406310:	68a5      	ldr	r5, [r4, #8]
  406312:	f023 0303 	bic.w	r3, r3, #3
  406316:	4423      	add	r3, r4
  406318:	4630      	mov	r0, r6
  40631a:	685a      	ldr	r2, [r3, #4]
  40631c:	60e9      	str	r1, [r5, #12]
  40631e:	f042 0201 	orr.w	r2, r2, #1
  406322:	608d      	str	r5, [r1, #8]
  406324:	605a      	str	r2, [r3, #4]
  406326:	f000 fb43 	bl	4069b0 <__malloc_unlock>
  40632a:	3408      	adds	r4, #8
  40632c:	4620      	mov	r0, r4
  40632e:	b003      	add	sp, #12
  406330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406334:	2400      	movs	r4, #0
  406336:	230c      	movs	r3, #12
  406338:	4620      	mov	r0, r4
  40633a:	6033      	str	r3, [r6, #0]
  40633c:	b003      	add	sp, #12
  40633e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406342:	2380      	movs	r3, #128	; 0x80
  406344:	f04f 0e40 	mov.w	lr, #64	; 0x40
  406348:	203f      	movs	r0, #63	; 0x3f
  40634a:	e749      	b.n	4061e0 <_malloc_r+0x44>
  40634c:	4670      	mov	r0, lr
  40634e:	e75d      	b.n	40620c <_malloc_r+0x70>
  406350:	4423      	add	r3, r4
  406352:	68e1      	ldr	r1, [r4, #12]
  406354:	685a      	ldr	r2, [r3, #4]
  406356:	68a5      	ldr	r5, [r4, #8]
  406358:	f042 0201 	orr.w	r2, r2, #1
  40635c:	60e9      	str	r1, [r5, #12]
  40635e:	4630      	mov	r0, r6
  406360:	608d      	str	r5, [r1, #8]
  406362:	605a      	str	r2, [r3, #4]
  406364:	f000 fb24 	bl	4069b0 <__malloc_unlock>
  406368:	3408      	adds	r4, #8
  40636a:	4620      	mov	r0, r4
  40636c:	b003      	add	sp, #12
  40636e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406372:	4423      	add	r3, r4
  406374:	4630      	mov	r0, r6
  406376:	685a      	ldr	r2, [r3, #4]
  406378:	f042 0201 	orr.w	r2, r2, #1
  40637c:	605a      	str	r2, [r3, #4]
  40637e:	f000 fb17 	bl	4069b0 <__malloc_unlock>
  406382:	3408      	adds	r4, #8
  406384:	4620      	mov	r0, r4
  406386:	b003      	add	sp, #12
  406388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40638c:	68bc      	ldr	r4, [r7, #8]
  40638e:	6863      	ldr	r3, [r4, #4]
  406390:	f023 0803 	bic.w	r8, r3, #3
  406394:	45a8      	cmp	r8, r5
  406396:	d304      	bcc.n	4063a2 <_malloc_r+0x206>
  406398:	ebc5 0308 	rsb	r3, r5, r8
  40639c:	2b0f      	cmp	r3, #15
  40639e:	f300 808c 	bgt.w	4064ba <_malloc_r+0x31e>
  4063a2:	4b55      	ldr	r3, [pc, #340]	; (4064f8 <_malloc_r+0x35c>)
  4063a4:	f8df 9160 	ldr.w	r9, [pc, #352]	; 406508 <_malloc_r+0x36c>
  4063a8:	681a      	ldr	r2, [r3, #0]
  4063aa:	f8d9 3000 	ldr.w	r3, [r9]
  4063ae:	3301      	adds	r3, #1
  4063b0:	442a      	add	r2, r5
  4063b2:	eb04 0a08 	add.w	sl, r4, r8
  4063b6:	f000 8160 	beq.w	40667a <_malloc_r+0x4de>
  4063ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  4063be:	320f      	adds	r2, #15
  4063c0:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  4063c4:	f022 020f 	bic.w	r2, r2, #15
  4063c8:	4611      	mov	r1, r2
  4063ca:	4630      	mov	r0, r6
  4063cc:	9201      	str	r2, [sp, #4]
  4063ce:	f000 fce1 	bl	406d94 <_sbrk_r>
  4063d2:	f1b0 3fff 	cmp.w	r0, #4294967295
  4063d6:	4683      	mov	fp, r0
  4063d8:	9a01      	ldr	r2, [sp, #4]
  4063da:	f000 8158 	beq.w	40668e <_malloc_r+0x4f2>
  4063de:	4582      	cmp	sl, r0
  4063e0:	f200 80fc 	bhi.w	4065dc <_malloc_r+0x440>
  4063e4:	4b45      	ldr	r3, [pc, #276]	; (4064fc <_malloc_r+0x360>)
  4063e6:	6819      	ldr	r1, [r3, #0]
  4063e8:	45da      	cmp	sl, fp
  4063ea:	4411      	add	r1, r2
  4063ec:	6019      	str	r1, [r3, #0]
  4063ee:	f000 8153 	beq.w	406698 <_malloc_r+0x4fc>
  4063f2:	f8d9 0000 	ldr.w	r0, [r9]
  4063f6:	f8df e110 	ldr.w	lr, [pc, #272]	; 406508 <_malloc_r+0x36c>
  4063fa:	3001      	adds	r0, #1
  4063fc:	bf1b      	ittet	ne
  4063fe:	ebca 0a0b 	rsbne	sl, sl, fp
  406402:	4451      	addne	r1, sl
  406404:	f8ce b000 	streq.w	fp, [lr]
  406408:	6019      	strne	r1, [r3, #0]
  40640a:	f01b 0107 	ands.w	r1, fp, #7
  40640e:	f000 8117 	beq.w	406640 <_malloc_r+0x4a4>
  406412:	f1c1 0008 	rsb	r0, r1, #8
  406416:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  40641a:	4483      	add	fp, r0
  40641c:	3108      	adds	r1, #8
  40641e:	445a      	add	r2, fp
  406420:	f3c2 020b 	ubfx	r2, r2, #0, #12
  406424:	ebc2 0901 	rsb	r9, r2, r1
  406428:	4649      	mov	r1, r9
  40642a:	4630      	mov	r0, r6
  40642c:	9301      	str	r3, [sp, #4]
  40642e:	f000 fcb1 	bl	406d94 <_sbrk_r>
  406432:	1c43      	adds	r3, r0, #1
  406434:	9b01      	ldr	r3, [sp, #4]
  406436:	f000 813f 	beq.w	4066b8 <_malloc_r+0x51c>
  40643a:	ebcb 0200 	rsb	r2, fp, r0
  40643e:	444a      	add	r2, r9
  406440:	f042 0201 	orr.w	r2, r2, #1
  406444:	6819      	ldr	r1, [r3, #0]
  406446:	f8c7 b008 	str.w	fp, [r7, #8]
  40644a:	4449      	add	r1, r9
  40644c:	42bc      	cmp	r4, r7
  40644e:	f8cb 2004 	str.w	r2, [fp, #4]
  406452:	6019      	str	r1, [r3, #0]
  406454:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 4064fc <_malloc_r+0x360>
  406458:	d016      	beq.n	406488 <_malloc_r+0x2ec>
  40645a:	f1b8 0f0f 	cmp.w	r8, #15
  40645e:	f240 80fd 	bls.w	40665c <_malloc_r+0x4c0>
  406462:	6862      	ldr	r2, [r4, #4]
  406464:	f1a8 030c 	sub.w	r3, r8, #12
  406468:	f023 0307 	bic.w	r3, r3, #7
  40646c:	18e0      	adds	r0, r4, r3
  40646e:	f002 0201 	and.w	r2, r2, #1
  406472:	f04f 0e05 	mov.w	lr, #5
  406476:	431a      	orrs	r2, r3
  406478:	2b0f      	cmp	r3, #15
  40647a:	6062      	str	r2, [r4, #4]
  40647c:	f8c0 e004 	str.w	lr, [r0, #4]
  406480:	f8c0 e008 	str.w	lr, [r0, #8]
  406484:	f200 811c 	bhi.w	4066c0 <_malloc_r+0x524>
  406488:	4b1d      	ldr	r3, [pc, #116]	; (406500 <_malloc_r+0x364>)
  40648a:	68bc      	ldr	r4, [r7, #8]
  40648c:	681a      	ldr	r2, [r3, #0]
  40648e:	4291      	cmp	r1, r2
  406490:	bf88      	it	hi
  406492:	6019      	strhi	r1, [r3, #0]
  406494:	4b1b      	ldr	r3, [pc, #108]	; (406504 <_malloc_r+0x368>)
  406496:	681a      	ldr	r2, [r3, #0]
  406498:	4291      	cmp	r1, r2
  40649a:	6862      	ldr	r2, [r4, #4]
  40649c:	bf88      	it	hi
  40649e:	6019      	strhi	r1, [r3, #0]
  4064a0:	f022 0203 	bic.w	r2, r2, #3
  4064a4:	4295      	cmp	r5, r2
  4064a6:	eba2 0305 	sub.w	r3, r2, r5
  4064aa:	d801      	bhi.n	4064b0 <_malloc_r+0x314>
  4064ac:	2b0f      	cmp	r3, #15
  4064ae:	dc04      	bgt.n	4064ba <_malloc_r+0x31e>
  4064b0:	4630      	mov	r0, r6
  4064b2:	f000 fa7d 	bl	4069b0 <__malloc_unlock>
  4064b6:	2400      	movs	r4, #0
  4064b8:	e738      	b.n	40632c <_malloc_r+0x190>
  4064ba:	1962      	adds	r2, r4, r5
  4064bc:	f043 0301 	orr.w	r3, r3, #1
  4064c0:	f045 0501 	orr.w	r5, r5, #1
  4064c4:	6065      	str	r5, [r4, #4]
  4064c6:	4630      	mov	r0, r6
  4064c8:	60ba      	str	r2, [r7, #8]
  4064ca:	6053      	str	r3, [r2, #4]
  4064cc:	f000 fa70 	bl	4069b0 <__malloc_unlock>
  4064d0:	3408      	adds	r4, #8
  4064d2:	4620      	mov	r0, r4
  4064d4:	b003      	add	sp, #12
  4064d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4064da:	2b14      	cmp	r3, #20
  4064dc:	d971      	bls.n	4065c2 <_malloc_r+0x426>
  4064de:	2b54      	cmp	r3, #84	; 0x54
  4064e0:	f200 80a4 	bhi.w	40662c <_malloc_r+0x490>
  4064e4:	0b28      	lsrs	r0, r5, #12
  4064e6:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
  4064ea:	ea4f 034e 	mov.w	r3, lr, lsl #1
  4064ee:	306e      	adds	r0, #110	; 0x6e
  4064f0:	e676      	b.n	4061e0 <_malloc_r+0x44>
  4064f2:	bf00      	nop
  4064f4:	204004e0 	.word	0x204004e0
  4064f8:	20400f54 	.word	0x20400f54
  4064fc:	20400f58 	.word	0x20400f58
  406500:	20400f50 	.word	0x20400f50
  406504:	20400f4c 	.word	0x20400f4c
  406508:	204008ec 	.word	0x204008ec
  40650c:	0a5a      	lsrs	r2, r3, #9
  40650e:	2a04      	cmp	r2, #4
  406510:	d95e      	bls.n	4065d0 <_malloc_r+0x434>
  406512:	2a14      	cmp	r2, #20
  406514:	f200 80b3 	bhi.w	40667e <_malloc_r+0x4e2>
  406518:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40651c:	0049      	lsls	r1, r1, #1
  40651e:	325b      	adds	r2, #91	; 0x5b
  406520:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
  406524:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
  406528:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 406708 <_malloc_r+0x56c>
  40652c:	f1ac 0c08 	sub.w	ip, ip, #8
  406530:	458c      	cmp	ip, r1
  406532:	f000 8088 	beq.w	406646 <_malloc_r+0x4aa>
  406536:	684a      	ldr	r2, [r1, #4]
  406538:	f022 0203 	bic.w	r2, r2, #3
  40653c:	4293      	cmp	r3, r2
  40653e:	d202      	bcs.n	406546 <_malloc_r+0x3aa>
  406540:	6889      	ldr	r1, [r1, #8]
  406542:	458c      	cmp	ip, r1
  406544:	d1f7      	bne.n	406536 <_malloc_r+0x39a>
  406546:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  40654a:	687a      	ldr	r2, [r7, #4]
  40654c:	f8c4 c00c 	str.w	ip, [r4, #12]
  406550:	60a1      	str	r1, [r4, #8]
  406552:	f8cc 4008 	str.w	r4, [ip, #8]
  406556:	60cc      	str	r4, [r1, #12]
  406558:	e688      	b.n	40626c <_malloc_r+0xd0>
  40655a:	1963      	adds	r3, r4, r5
  40655c:	f042 0701 	orr.w	r7, r2, #1
  406560:	f045 0501 	orr.w	r5, r5, #1
  406564:	6065      	str	r5, [r4, #4]
  406566:	4630      	mov	r0, r6
  406568:	614b      	str	r3, [r1, #20]
  40656a:	610b      	str	r3, [r1, #16]
  40656c:	f8c3 e00c 	str.w	lr, [r3, #12]
  406570:	f8c3 e008 	str.w	lr, [r3, #8]
  406574:	605f      	str	r7, [r3, #4]
  406576:	509a      	str	r2, [r3, r2]
  406578:	3408      	adds	r4, #8
  40657a:	f000 fa19 	bl	4069b0 <__malloc_unlock>
  40657e:	e6d5      	b.n	40632c <_malloc_r+0x190>
  406580:	684a      	ldr	r2, [r1, #4]
  406582:	e673      	b.n	40626c <_malloc_r+0xd0>
  406584:	f108 0801 	add.w	r8, r8, #1
  406588:	f018 0f03 	tst.w	r8, #3
  40658c:	f10c 0c08 	add.w	ip, ip, #8
  406590:	f47f ae7f 	bne.w	406292 <_malloc_r+0xf6>
  406594:	e030      	b.n	4065f8 <_malloc_r+0x45c>
  406596:	68dc      	ldr	r4, [r3, #12]
  406598:	42a3      	cmp	r3, r4
  40659a:	bf08      	it	eq
  40659c:	3002      	addeq	r0, #2
  40659e:	f43f ae35 	beq.w	40620c <_malloc_r+0x70>
  4065a2:	e6b3      	b.n	40630c <_malloc_r+0x170>
  4065a4:	440b      	add	r3, r1
  4065a6:	460c      	mov	r4, r1
  4065a8:	685a      	ldr	r2, [r3, #4]
  4065aa:	68c9      	ldr	r1, [r1, #12]
  4065ac:	f854 5f08 	ldr.w	r5, [r4, #8]!
  4065b0:	f042 0201 	orr.w	r2, r2, #1
  4065b4:	605a      	str	r2, [r3, #4]
  4065b6:	4630      	mov	r0, r6
  4065b8:	60e9      	str	r1, [r5, #12]
  4065ba:	608d      	str	r5, [r1, #8]
  4065bc:	f000 f9f8 	bl	4069b0 <__malloc_unlock>
  4065c0:	e6b4      	b.n	40632c <_malloc_r+0x190>
  4065c2:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
  4065c6:	f103 005b 	add.w	r0, r3, #91	; 0x5b
  4065ca:	ea4f 034e 	mov.w	r3, lr, lsl #1
  4065ce:	e607      	b.n	4061e0 <_malloc_r+0x44>
  4065d0:	099a      	lsrs	r2, r3, #6
  4065d2:	f102 0139 	add.w	r1, r2, #57	; 0x39
  4065d6:	0049      	lsls	r1, r1, #1
  4065d8:	3238      	adds	r2, #56	; 0x38
  4065da:	e7a1      	b.n	406520 <_malloc_r+0x384>
  4065dc:	42bc      	cmp	r4, r7
  4065de:	4b4a      	ldr	r3, [pc, #296]	; (406708 <_malloc_r+0x56c>)
  4065e0:	f43f af00 	beq.w	4063e4 <_malloc_r+0x248>
  4065e4:	689c      	ldr	r4, [r3, #8]
  4065e6:	6862      	ldr	r2, [r4, #4]
  4065e8:	f022 0203 	bic.w	r2, r2, #3
  4065ec:	e75a      	b.n	4064a4 <_malloc_r+0x308>
  4065ee:	f859 3908 	ldr.w	r3, [r9], #-8
  4065f2:	4599      	cmp	r9, r3
  4065f4:	f040 8082 	bne.w	4066fc <_malloc_r+0x560>
  4065f8:	f010 0f03 	tst.w	r0, #3
  4065fc:	f100 30ff 	add.w	r0, r0, #4294967295
  406600:	d1f5      	bne.n	4065ee <_malloc_r+0x452>
  406602:	687b      	ldr	r3, [r7, #4]
  406604:	ea23 0304 	bic.w	r3, r3, r4
  406608:	607b      	str	r3, [r7, #4]
  40660a:	0064      	lsls	r4, r4, #1
  40660c:	429c      	cmp	r4, r3
  40660e:	f63f aebd 	bhi.w	40638c <_malloc_r+0x1f0>
  406612:	2c00      	cmp	r4, #0
  406614:	f43f aeba 	beq.w	40638c <_malloc_r+0x1f0>
  406618:	421c      	tst	r4, r3
  40661a:	4640      	mov	r0, r8
  40661c:	f47f ae35 	bne.w	40628a <_malloc_r+0xee>
  406620:	0064      	lsls	r4, r4, #1
  406622:	421c      	tst	r4, r3
  406624:	f100 0004 	add.w	r0, r0, #4
  406628:	d0fa      	beq.n	406620 <_malloc_r+0x484>
  40662a:	e62e      	b.n	40628a <_malloc_r+0xee>
  40662c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  406630:	d818      	bhi.n	406664 <_malloc_r+0x4c8>
  406632:	0be8      	lsrs	r0, r5, #15
  406634:	f100 0e78 	add.w	lr, r0, #120	; 0x78
  406638:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40663c:	3077      	adds	r0, #119	; 0x77
  40663e:	e5cf      	b.n	4061e0 <_malloc_r+0x44>
  406640:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  406644:	e6eb      	b.n	40641e <_malloc_r+0x282>
  406646:	2101      	movs	r1, #1
  406648:	f8d8 3004 	ldr.w	r3, [r8, #4]
  40664c:	1092      	asrs	r2, r2, #2
  40664e:	fa01 f202 	lsl.w	r2, r1, r2
  406652:	431a      	orrs	r2, r3
  406654:	f8c8 2004 	str.w	r2, [r8, #4]
  406658:	4661      	mov	r1, ip
  40665a:	e777      	b.n	40654c <_malloc_r+0x3b0>
  40665c:	2301      	movs	r3, #1
  40665e:	f8cb 3004 	str.w	r3, [fp, #4]
  406662:	e725      	b.n	4064b0 <_malloc_r+0x314>
  406664:	f240 5254 	movw	r2, #1364	; 0x554
  406668:	4293      	cmp	r3, r2
  40666a:	d820      	bhi.n	4066ae <_malloc_r+0x512>
  40666c:	0ca8      	lsrs	r0, r5, #18
  40666e:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
  406672:	ea4f 034e 	mov.w	r3, lr, lsl #1
  406676:	307c      	adds	r0, #124	; 0x7c
  406678:	e5b2      	b.n	4061e0 <_malloc_r+0x44>
  40667a:	3210      	adds	r2, #16
  40667c:	e6a4      	b.n	4063c8 <_malloc_r+0x22c>
  40667e:	2a54      	cmp	r2, #84	; 0x54
  406680:	d826      	bhi.n	4066d0 <_malloc_r+0x534>
  406682:	0b1a      	lsrs	r2, r3, #12
  406684:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  406688:	0049      	lsls	r1, r1, #1
  40668a:	326e      	adds	r2, #110	; 0x6e
  40668c:	e748      	b.n	406520 <_malloc_r+0x384>
  40668e:	68bc      	ldr	r4, [r7, #8]
  406690:	6862      	ldr	r2, [r4, #4]
  406692:	f022 0203 	bic.w	r2, r2, #3
  406696:	e705      	b.n	4064a4 <_malloc_r+0x308>
  406698:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40669c:	2800      	cmp	r0, #0
  40669e:	f47f aea8 	bne.w	4063f2 <_malloc_r+0x256>
  4066a2:	4442      	add	r2, r8
  4066a4:	68bb      	ldr	r3, [r7, #8]
  4066a6:	f042 0201 	orr.w	r2, r2, #1
  4066aa:	605a      	str	r2, [r3, #4]
  4066ac:	e6ec      	b.n	406488 <_malloc_r+0x2ec>
  4066ae:	23fe      	movs	r3, #254	; 0xfe
  4066b0:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
  4066b4:	207e      	movs	r0, #126	; 0x7e
  4066b6:	e593      	b.n	4061e0 <_malloc_r+0x44>
  4066b8:	2201      	movs	r2, #1
  4066ba:	f04f 0900 	mov.w	r9, #0
  4066be:	e6c1      	b.n	406444 <_malloc_r+0x2a8>
  4066c0:	f104 0108 	add.w	r1, r4, #8
  4066c4:	4630      	mov	r0, r6
  4066c6:	f7ff fa4f 	bl	405b68 <_free_r>
  4066ca:	f8d9 1000 	ldr.w	r1, [r9]
  4066ce:	e6db      	b.n	406488 <_malloc_r+0x2ec>
  4066d0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4066d4:	d805      	bhi.n	4066e2 <_malloc_r+0x546>
  4066d6:	0bda      	lsrs	r2, r3, #15
  4066d8:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4066dc:	0049      	lsls	r1, r1, #1
  4066de:	3277      	adds	r2, #119	; 0x77
  4066e0:	e71e      	b.n	406520 <_malloc_r+0x384>
  4066e2:	f240 5154 	movw	r1, #1364	; 0x554
  4066e6:	428a      	cmp	r2, r1
  4066e8:	d805      	bhi.n	4066f6 <_malloc_r+0x55a>
  4066ea:	0c9a      	lsrs	r2, r3, #18
  4066ec:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4066f0:	0049      	lsls	r1, r1, #1
  4066f2:	327c      	adds	r2, #124	; 0x7c
  4066f4:	e714      	b.n	406520 <_malloc_r+0x384>
  4066f6:	21fe      	movs	r1, #254	; 0xfe
  4066f8:	227e      	movs	r2, #126	; 0x7e
  4066fa:	e711      	b.n	406520 <_malloc_r+0x384>
  4066fc:	687b      	ldr	r3, [r7, #4]
  4066fe:	e784      	b.n	40660a <_malloc_r+0x46e>
  406700:	08e8      	lsrs	r0, r5, #3
  406702:	1c43      	adds	r3, r0, #1
  406704:	005b      	lsls	r3, r3, #1
  406706:	e5f8      	b.n	4062fa <_malloc_r+0x15e>
  406708:	204004e0 	.word	0x204004e0
  40670c:	00000000 	.word	0x00000000

00406710 <memchr>:
  406710:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  406714:	2a10      	cmp	r2, #16
  406716:	db2b      	blt.n	406770 <memchr+0x60>
  406718:	f010 0f07 	tst.w	r0, #7
  40671c:	d008      	beq.n	406730 <memchr+0x20>
  40671e:	f810 3b01 	ldrb.w	r3, [r0], #1
  406722:	3a01      	subs	r2, #1
  406724:	428b      	cmp	r3, r1
  406726:	d02d      	beq.n	406784 <memchr+0x74>
  406728:	f010 0f07 	tst.w	r0, #7
  40672c:	b342      	cbz	r2, 406780 <memchr+0x70>
  40672e:	d1f6      	bne.n	40671e <memchr+0xe>
  406730:	b4f0      	push	{r4, r5, r6, r7}
  406732:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  406736:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40673a:	f022 0407 	bic.w	r4, r2, #7
  40673e:	f07f 0700 	mvns.w	r7, #0
  406742:	2300      	movs	r3, #0
  406744:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  406748:	3c08      	subs	r4, #8
  40674a:	ea85 0501 	eor.w	r5, r5, r1
  40674e:	ea86 0601 	eor.w	r6, r6, r1
  406752:	fa85 f547 	uadd8	r5, r5, r7
  406756:	faa3 f587 	sel	r5, r3, r7
  40675a:	fa86 f647 	uadd8	r6, r6, r7
  40675e:	faa5 f687 	sel	r6, r5, r7
  406762:	b98e      	cbnz	r6, 406788 <memchr+0x78>
  406764:	d1ee      	bne.n	406744 <memchr+0x34>
  406766:	bcf0      	pop	{r4, r5, r6, r7}
  406768:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40676c:	f002 0207 	and.w	r2, r2, #7
  406770:	b132      	cbz	r2, 406780 <memchr+0x70>
  406772:	f810 3b01 	ldrb.w	r3, [r0], #1
  406776:	3a01      	subs	r2, #1
  406778:	ea83 0301 	eor.w	r3, r3, r1
  40677c:	b113      	cbz	r3, 406784 <memchr+0x74>
  40677e:	d1f8      	bne.n	406772 <memchr+0x62>
  406780:	2000      	movs	r0, #0
  406782:	4770      	bx	lr
  406784:	3801      	subs	r0, #1
  406786:	4770      	bx	lr
  406788:	2d00      	cmp	r5, #0
  40678a:	bf06      	itte	eq
  40678c:	4635      	moveq	r5, r6
  40678e:	3803      	subeq	r0, #3
  406790:	3807      	subne	r0, #7
  406792:	f015 0f01 	tst.w	r5, #1
  406796:	d107      	bne.n	4067a8 <memchr+0x98>
  406798:	3001      	adds	r0, #1
  40679a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40679e:	bf02      	ittt	eq
  4067a0:	3001      	addeq	r0, #1
  4067a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4067a6:	3001      	addeq	r0, #1
  4067a8:	bcf0      	pop	{r4, r5, r6, r7}
  4067aa:	3801      	subs	r0, #1
  4067ac:	4770      	bx	lr
  4067ae:	bf00      	nop

004067b0 <memcpy>:
  4067b0:	4684      	mov	ip, r0
  4067b2:	ea41 0300 	orr.w	r3, r1, r0
  4067b6:	f013 0303 	ands.w	r3, r3, #3
  4067ba:	d16d      	bne.n	406898 <memcpy+0xe8>
  4067bc:	3a40      	subs	r2, #64	; 0x40
  4067be:	d341      	bcc.n	406844 <memcpy+0x94>
  4067c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4067c4:	f840 3b04 	str.w	r3, [r0], #4
  4067c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4067cc:	f840 3b04 	str.w	r3, [r0], #4
  4067d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4067d4:	f840 3b04 	str.w	r3, [r0], #4
  4067d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4067dc:	f840 3b04 	str.w	r3, [r0], #4
  4067e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4067e4:	f840 3b04 	str.w	r3, [r0], #4
  4067e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4067ec:	f840 3b04 	str.w	r3, [r0], #4
  4067f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4067f4:	f840 3b04 	str.w	r3, [r0], #4
  4067f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4067fc:	f840 3b04 	str.w	r3, [r0], #4
  406800:	f851 3b04 	ldr.w	r3, [r1], #4
  406804:	f840 3b04 	str.w	r3, [r0], #4
  406808:	f851 3b04 	ldr.w	r3, [r1], #4
  40680c:	f840 3b04 	str.w	r3, [r0], #4
  406810:	f851 3b04 	ldr.w	r3, [r1], #4
  406814:	f840 3b04 	str.w	r3, [r0], #4
  406818:	f851 3b04 	ldr.w	r3, [r1], #4
  40681c:	f840 3b04 	str.w	r3, [r0], #4
  406820:	f851 3b04 	ldr.w	r3, [r1], #4
  406824:	f840 3b04 	str.w	r3, [r0], #4
  406828:	f851 3b04 	ldr.w	r3, [r1], #4
  40682c:	f840 3b04 	str.w	r3, [r0], #4
  406830:	f851 3b04 	ldr.w	r3, [r1], #4
  406834:	f840 3b04 	str.w	r3, [r0], #4
  406838:	f851 3b04 	ldr.w	r3, [r1], #4
  40683c:	f840 3b04 	str.w	r3, [r0], #4
  406840:	3a40      	subs	r2, #64	; 0x40
  406842:	d2bd      	bcs.n	4067c0 <memcpy+0x10>
  406844:	3230      	adds	r2, #48	; 0x30
  406846:	d311      	bcc.n	40686c <memcpy+0xbc>
  406848:	f851 3b04 	ldr.w	r3, [r1], #4
  40684c:	f840 3b04 	str.w	r3, [r0], #4
  406850:	f851 3b04 	ldr.w	r3, [r1], #4
  406854:	f840 3b04 	str.w	r3, [r0], #4
  406858:	f851 3b04 	ldr.w	r3, [r1], #4
  40685c:	f840 3b04 	str.w	r3, [r0], #4
  406860:	f851 3b04 	ldr.w	r3, [r1], #4
  406864:	f840 3b04 	str.w	r3, [r0], #4
  406868:	3a10      	subs	r2, #16
  40686a:	d2ed      	bcs.n	406848 <memcpy+0x98>
  40686c:	320c      	adds	r2, #12
  40686e:	d305      	bcc.n	40687c <memcpy+0xcc>
  406870:	f851 3b04 	ldr.w	r3, [r1], #4
  406874:	f840 3b04 	str.w	r3, [r0], #4
  406878:	3a04      	subs	r2, #4
  40687a:	d2f9      	bcs.n	406870 <memcpy+0xc0>
  40687c:	3204      	adds	r2, #4
  40687e:	d008      	beq.n	406892 <memcpy+0xe2>
  406880:	07d2      	lsls	r2, r2, #31
  406882:	bf1c      	itt	ne
  406884:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406888:	f800 3b01 	strbne.w	r3, [r0], #1
  40688c:	d301      	bcc.n	406892 <memcpy+0xe2>
  40688e:	880b      	ldrh	r3, [r1, #0]
  406890:	8003      	strh	r3, [r0, #0]
  406892:	4660      	mov	r0, ip
  406894:	4770      	bx	lr
  406896:	bf00      	nop
  406898:	2a08      	cmp	r2, #8
  40689a:	d313      	bcc.n	4068c4 <memcpy+0x114>
  40689c:	078b      	lsls	r3, r1, #30
  40689e:	d08d      	beq.n	4067bc <memcpy+0xc>
  4068a0:	f010 0303 	ands.w	r3, r0, #3
  4068a4:	d08a      	beq.n	4067bc <memcpy+0xc>
  4068a6:	f1c3 0304 	rsb	r3, r3, #4
  4068aa:	1ad2      	subs	r2, r2, r3
  4068ac:	07db      	lsls	r3, r3, #31
  4068ae:	bf1c      	itt	ne
  4068b0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4068b4:	f800 3b01 	strbne.w	r3, [r0], #1
  4068b8:	d380      	bcc.n	4067bc <memcpy+0xc>
  4068ba:	f831 3b02 	ldrh.w	r3, [r1], #2
  4068be:	f820 3b02 	strh.w	r3, [r0], #2
  4068c2:	e77b      	b.n	4067bc <memcpy+0xc>
  4068c4:	3a04      	subs	r2, #4
  4068c6:	d3d9      	bcc.n	40687c <memcpy+0xcc>
  4068c8:	3a01      	subs	r2, #1
  4068ca:	f811 3b01 	ldrb.w	r3, [r1], #1
  4068ce:	f800 3b01 	strb.w	r3, [r0], #1
  4068d2:	d2f9      	bcs.n	4068c8 <memcpy+0x118>
  4068d4:	780b      	ldrb	r3, [r1, #0]
  4068d6:	7003      	strb	r3, [r0, #0]
  4068d8:	784b      	ldrb	r3, [r1, #1]
  4068da:	7043      	strb	r3, [r0, #1]
  4068dc:	788b      	ldrb	r3, [r1, #2]
  4068de:	7083      	strb	r3, [r0, #2]
  4068e0:	4660      	mov	r0, ip
  4068e2:	4770      	bx	lr

004068e4 <memmove>:
  4068e4:	4288      	cmp	r0, r1
  4068e6:	b5f0      	push	{r4, r5, r6, r7, lr}
  4068e8:	d90d      	bls.n	406906 <memmove+0x22>
  4068ea:	188b      	adds	r3, r1, r2
  4068ec:	4298      	cmp	r0, r3
  4068ee:	d20a      	bcs.n	406906 <memmove+0x22>
  4068f0:	1881      	adds	r1, r0, r2
  4068f2:	2a00      	cmp	r2, #0
  4068f4:	d051      	beq.n	40699a <memmove+0xb6>
  4068f6:	1a9a      	subs	r2, r3, r2
  4068f8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4068fc:	f801 4d01 	strb.w	r4, [r1, #-1]!
  406900:	4293      	cmp	r3, r2
  406902:	d1f9      	bne.n	4068f8 <memmove+0x14>
  406904:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406906:	2a0f      	cmp	r2, #15
  406908:	d948      	bls.n	40699c <memmove+0xb8>
  40690a:	ea41 0300 	orr.w	r3, r1, r0
  40690e:	079b      	lsls	r3, r3, #30
  406910:	d146      	bne.n	4069a0 <memmove+0xbc>
  406912:	f100 0410 	add.w	r4, r0, #16
  406916:	f101 0310 	add.w	r3, r1, #16
  40691a:	4615      	mov	r5, r2
  40691c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  406920:	f844 6c10 	str.w	r6, [r4, #-16]
  406924:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  406928:	f844 6c0c 	str.w	r6, [r4, #-12]
  40692c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  406930:	f844 6c08 	str.w	r6, [r4, #-8]
  406934:	3d10      	subs	r5, #16
  406936:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40693a:	f844 6c04 	str.w	r6, [r4, #-4]
  40693e:	2d0f      	cmp	r5, #15
  406940:	f103 0310 	add.w	r3, r3, #16
  406944:	f104 0410 	add.w	r4, r4, #16
  406948:	d8e8      	bhi.n	40691c <memmove+0x38>
  40694a:	f1a2 0310 	sub.w	r3, r2, #16
  40694e:	f023 030f 	bic.w	r3, r3, #15
  406952:	f002 0e0f 	and.w	lr, r2, #15
  406956:	3310      	adds	r3, #16
  406958:	f1be 0f03 	cmp.w	lr, #3
  40695c:	4419      	add	r1, r3
  40695e:	4403      	add	r3, r0
  406960:	d921      	bls.n	4069a6 <memmove+0xc2>
  406962:	1f1e      	subs	r6, r3, #4
  406964:	460d      	mov	r5, r1
  406966:	4674      	mov	r4, lr
  406968:	3c04      	subs	r4, #4
  40696a:	f855 7b04 	ldr.w	r7, [r5], #4
  40696e:	f846 7f04 	str.w	r7, [r6, #4]!
  406972:	2c03      	cmp	r4, #3
  406974:	d8f8      	bhi.n	406968 <memmove+0x84>
  406976:	f1ae 0404 	sub.w	r4, lr, #4
  40697a:	f024 0403 	bic.w	r4, r4, #3
  40697e:	3404      	adds	r4, #4
  406980:	4423      	add	r3, r4
  406982:	4421      	add	r1, r4
  406984:	f002 0203 	and.w	r2, r2, #3
  406988:	b162      	cbz	r2, 4069a4 <memmove+0xc0>
  40698a:	3b01      	subs	r3, #1
  40698c:	440a      	add	r2, r1
  40698e:	f811 4b01 	ldrb.w	r4, [r1], #1
  406992:	f803 4f01 	strb.w	r4, [r3, #1]!
  406996:	428a      	cmp	r2, r1
  406998:	d1f9      	bne.n	40698e <memmove+0xaa>
  40699a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40699c:	4603      	mov	r3, r0
  40699e:	e7f3      	b.n	406988 <memmove+0xa4>
  4069a0:	4603      	mov	r3, r0
  4069a2:	e7f2      	b.n	40698a <memmove+0xa6>
  4069a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4069a6:	4672      	mov	r2, lr
  4069a8:	e7ee      	b.n	406988 <memmove+0xa4>
  4069aa:	bf00      	nop

004069ac <__malloc_lock>:
  4069ac:	4770      	bx	lr
  4069ae:	bf00      	nop

004069b0 <__malloc_unlock>:
  4069b0:	4770      	bx	lr
  4069b2:	bf00      	nop

004069b4 <_realloc_r>:
  4069b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4069b8:	4617      	mov	r7, r2
  4069ba:	b083      	sub	sp, #12
  4069bc:	2900      	cmp	r1, #0
  4069be:	f000 80c1 	beq.w	406b44 <_realloc_r+0x190>
  4069c2:	460e      	mov	r6, r1
  4069c4:	4681      	mov	r9, r0
  4069c6:	f107 050b 	add.w	r5, r7, #11
  4069ca:	f7ff ffef 	bl	4069ac <__malloc_lock>
  4069ce:	f856 ec04 	ldr.w	lr, [r6, #-4]
  4069d2:	2d16      	cmp	r5, #22
  4069d4:	f02e 0403 	bic.w	r4, lr, #3
  4069d8:	f1a6 0808 	sub.w	r8, r6, #8
  4069dc:	d840      	bhi.n	406a60 <_realloc_r+0xac>
  4069de:	2210      	movs	r2, #16
  4069e0:	4615      	mov	r5, r2
  4069e2:	42af      	cmp	r7, r5
  4069e4:	d841      	bhi.n	406a6a <_realloc_r+0xb6>
  4069e6:	4294      	cmp	r4, r2
  4069e8:	da75      	bge.n	406ad6 <_realloc_r+0x122>
  4069ea:	4bc9      	ldr	r3, [pc, #804]	; (406d10 <_realloc_r+0x35c>)
  4069ec:	6899      	ldr	r1, [r3, #8]
  4069ee:	eb08 0004 	add.w	r0, r8, r4
  4069f2:	4288      	cmp	r0, r1
  4069f4:	6841      	ldr	r1, [r0, #4]
  4069f6:	f000 80d9 	beq.w	406bac <_realloc_r+0x1f8>
  4069fa:	f021 0301 	bic.w	r3, r1, #1
  4069fe:	4403      	add	r3, r0
  406a00:	685b      	ldr	r3, [r3, #4]
  406a02:	07db      	lsls	r3, r3, #31
  406a04:	d57d      	bpl.n	406b02 <_realloc_r+0x14e>
  406a06:	f01e 0f01 	tst.w	lr, #1
  406a0a:	d035      	beq.n	406a78 <_realloc_r+0xc4>
  406a0c:	4639      	mov	r1, r7
  406a0e:	4648      	mov	r0, r9
  406a10:	f7ff fbc4 	bl	40619c <_malloc_r>
  406a14:	4607      	mov	r7, r0
  406a16:	b1e0      	cbz	r0, 406a52 <_realloc_r+0x9e>
  406a18:	f856 3c04 	ldr.w	r3, [r6, #-4]
  406a1c:	f023 0301 	bic.w	r3, r3, #1
  406a20:	4443      	add	r3, r8
  406a22:	f1a0 0208 	sub.w	r2, r0, #8
  406a26:	429a      	cmp	r2, r3
  406a28:	f000 8144 	beq.w	406cb4 <_realloc_r+0x300>
  406a2c:	1f22      	subs	r2, r4, #4
  406a2e:	2a24      	cmp	r2, #36	; 0x24
  406a30:	f200 8131 	bhi.w	406c96 <_realloc_r+0x2e2>
  406a34:	2a13      	cmp	r2, #19
  406a36:	f200 8104 	bhi.w	406c42 <_realloc_r+0x28e>
  406a3a:	4603      	mov	r3, r0
  406a3c:	4632      	mov	r2, r6
  406a3e:	6811      	ldr	r1, [r2, #0]
  406a40:	6019      	str	r1, [r3, #0]
  406a42:	6851      	ldr	r1, [r2, #4]
  406a44:	6059      	str	r1, [r3, #4]
  406a46:	6892      	ldr	r2, [r2, #8]
  406a48:	609a      	str	r2, [r3, #8]
  406a4a:	4631      	mov	r1, r6
  406a4c:	4648      	mov	r0, r9
  406a4e:	f7ff f88b 	bl	405b68 <_free_r>
  406a52:	4648      	mov	r0, r9
  406a54:	f7ff ffac 	bl	4069b0 <__malloc_unlock>
  406a58:	4638      	mov	r0, r7
  406a5a:	b003      	add	sp, #12
  406a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406a60:	f025 0507 	bic.w	r5, r5, #7
  406a64:	2d00      	cmp	r5, #0
  406a66:	462a      	mov	r2, r5
  406a68:	dabb      	bge.n	4069e2 <_realloc_r+0x2e>
  406a6a:	230c      	movs	r3, #12
  406a6c:	2000      	movs	r0, #0
  406a6e:	f8c9 3000 	str.w	r3, [r9]
  406a72:	b003      	add	sp, #12
  406a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406a78:	f856 3c08 	ldr.w	r3, [r6, #-8]
  406a7c:	ebc3 0a08 	rsb	sl, r3, r8
  406a80:	f8da 3004 	ldr.w	r3, [sl, #4]
  406a84:	f023 0c03 	bic.w	ip, r3, #3
  406a88:	eb04 030c 	add.w	r3, r4, ip
  406a8c:	4293      	cmp	r3, r2
  406a8e:	dbbd      	blt.n	406a0c <_realloc_r+0x58>
  406a90:	4657      	mov	r7, sl
  406a92:	f8da 100c 	ldr.w	r1, [sl, #12]
  406a96:	f857 0f08 	ldr.w	r0, [r7, #8]!
  406a9a:	1f22      	subs	r2, r4, #4
  406a9c:	2a24      	cmp	r2, #36	; 0x24
  406a9e:	60c1      	str	r1, [r0, #12]
  406aa0:	6088      	str	r0, [r1, #8]
  406aa2:	f200 8117 	bhi.w	406cd4 <_realloc_r+0x320>
  406aa6:	2a13      	cmp	r2, #19
  406aa8:	f240 8112 	bls.w	406cd0 <_realloc_r+0x31c>
  406aac:	6831      	ldr	r1, [r6, #0]
  406aae:	f8ca 1008 	str.w	r1, [sl, #8]
  406ab2:	6871      	ldr	r1, [r6, #4]
  406ab4:	f8ca 100c 	str.w	r1, [sl, #12]
  406ab8:	2a1b      	cmp	r2, #27
  406aba:	f200 812b 	bhi.w	406d14 <_realloc_r+0x360>
  406abe:	3608      	adds	r6, #8
  406ac0:	f10a 0210 	add.w	r2, sl, #16
  406ac4:	6831      	ldr	r1, [r6, #0]
  406ac6:	6011      	str	r1, [r2, #0]
  406ac8:	6871      	ldr	r1, [r6, #4]
  406aca:	6051      	str	r1, [r2, #4]
  406acc:	68b1      	ldr	r1, [r6, #8]
  406ace:	6091      	str	r1, [r2, #8]
  406ad0:	463e      	mov	r6, r7
  406ad2:	461c      	mov	r4, r3
  406ad4:	46d0      	mov	r8, sl
  406ad6:	1b63      	subs	r3, r4, r5
  406ad8:	2b0f      	cmp	r3, #15
  406ada:	d81d      	bhi.n	406b18 <_realloc_r+0x164>
  406adc:	f8d8 3004 	ldr.w	r3, [r8, #4]
  406ae0:	f003 0301 	and.w	r3, r3, #1
  406ae4:	4323      	orrs	r3, r4
  406ae6:	4444      	add	r4, r8
  406ae8:	f8c8 3004 	str.w	r3, [r8, #4]
  406aec:	6863      	ldr	r3, [r4, #4]
  406aee:	f043 0301 	orr.w	r3, r3, #1
  406af2:	6063      	str	r3, [r4, #4]
  406af4:	4648      	mov	r0, r9
  406af6:	f7ff ff5b 	bl	4069b0 <__malloc_unlock>
  406afa:	4630      	mov	r0, r6
  406afc:	b003      	add	sp, #12
  406afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406b02:	f021 0103 	bic.w	r1, r1, #3
  406b06:	4421      	add	r1, r4
  406b08:	4291      	cmp	r1, r2
  406b0a:	db21      	blt.n	406b50 <_realloc_r+0x19c>
  406b0c:	68c3      	ldr	r3, [r0, #12]
  406b0e:	6882      	ldr	r2, [r0, #8]
  406b10:	460c      	mov	r4, r1
  406b12:	60d3      	str	r3, [r2, #12]
  406b14:	609a      	str	r2, [r3, #8]
  406b16:	e7de      	b.n	406ad6 <_realloc_r+0x122>
  406b18:	f8d8 2004 	ldr.w	r2, [r8, #4]
  406b1c:	eb08 0105 	add.w	r1, r8, r5
  406b20:	f002 0201 	and.w	r2, r2, #1
  406b24:	4315      	orrs	r5, r2
  406b26:	f043 0201 	orr.w	r2, r3, #1
  406b2a:	440b      	add	r3, r1
  406b2c:	f8c8 5004 	str.w	r5, [r8, #4]
  406b30:	604a      	str	r2, [r1, #4]
  406b32:	685a      	ldr	r2, [r3, #4]
  406b34:	f042 0201 	orr.w	r2, r2, #1
  406b38:	3108      	adds	r1, #8
  406b3a:	605a      	str	r2, [r3, #4]
  406b3c:	4648      	mov	r0, r9
  406b3e:	f7ff f813 	bl	405b68 <_free_r>
  406b42:	e7d7      	b.n	406af4 <_realloc_r+0x140>
  406b44:	4611      	mov	r1, r2
  406b46:	b003      	add	sp, #12
  406b48:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406b4c:	f7ff bb26 	b.w	40619c <_malloc_r>
  406b50:	f01e 0f01 	tst.w	lr, #1
  406b54:	f47f af5a 	bne.w	406a0c <_realloc_r+0x58>
  406b58:	f856 3c08 	ldr.w	r3, [r6, #-8]
  406b5c:	ebc3 0a08 	rsb	sl, r3, r8
  406b60:	f8da 3004 	ldr.w	r3, [sl, #4]
  406b64:	f023 0c03 	bic.w	ip, r3, #3
  406b68:	eb01 0e0c 	add.w	lr, r1, ip
  406b6c:	4596      	cmp	lr, r2
  406b6e:	db8b      	blt.n	406a88 <_realloc_r+0xd4>
  406b70:	68c3      	ldr	r3, [r0, #12]
  406b72:	6882      	ldr	r2, [r0, #8]
  406b74:	4657      	mov	r7, sl
  406b76:	60d3      	str	r3, [r2, #12]
  406b78:	609a      	str	r2, [r3, #8]
  406b7a:	f857 1f08 	ldr.w	r1, [r7, #8]!
  406b7e:	f8da 300c 	ldr.w	r3, [sl, #12]
  406b82:	60cb      	str	r3, [r1, #12]
  406b84:	1f22      	subs	r2, r4, #4
  406b86:	2a24      	cmp	r2, #36	; 0x24
  406b88:	6099      	str	r1, [r3, #8]
  406b8a:	f200 8099 	bhi.w	406cc0 <_realloc_r+0x30c>
  406b8e:	2a13      	cmp	r2, #19
  406b90:	d962      	bls.n	406c58 <_realloc_r+0x2a4>
  406b92:	6833      	ldr	r3, [r6, #0]
  406b94:	f8ca 3008 	str.w	r3, [sl, #8]
  406b98:	6873      	ldr	r3, [r6, #4]
  406b9a:	f8ca 300c 	str.w	r3, [sl, #12]
  406b9e:	2a1b      	cmp	r2, #27
  406ba0:	f200 80a0 	bhi.w	406ce4 <_realloc_r+0x330>
  406ba4:	3608      	adds	r6, #8
  406ba6:	f10a 0310 	add.w	r3, sl, #16
  406baa:	e056      	b.n	406c5a <_realloc_r+0x2a6>
  406bac:	f021 0b03 	bic.w	fp, r1, #3
  406bb0:	44a3      	add	fp, r4
  406bb2:	f105 0010 	add.w	r0, r5, #16
  406bb6:	4583      	cmp	fp, r0
  406bb8:	da59      	bge.n	406c6e <_realloc_r+0x2ba>
  406bba:	f01e 0f01 	tst.w	lr, #1
  406bbe:	f47f af25 	bne.w	406a0c <_realloc_r+0x58>
  406bc2:	f856 1c08 	ldr.w	r1, [r6, #-8]
  406bc6:	ebc1 0a08 	rsb	sl, r1, r8
  406bca:	f8da 1004 	ldr.w	r1, [sl, #4]
  406bce:	f021 0c03 	bic.w	ip, r1, #3
  406bd2:	44e3      	add	fp, ip
  406bd4:	4558      	cmp	r0, fp
  406bd6:	f73f af57 	bgt.w	406a88 <_realloc_r+0xd4>
  406bda:	4657      	mov	r7, sl
  406bdc:	f8da 100c 	ldr.w	r1, [sl, #12]
  406be0:	f857 0f08 	ldr.w	r0, [r7, #8]!
  406be4:	1f22      	subs	r2, r4, #4
  406be6:	2a24      	cmp	r2, #36	; 0x24
  406be8:	60c1      	str	r1, [r0, #12]
  406bea:	6088      	str	r0, [r1, #8]
  406bec:	f200 80b4 	bhi.w	406d58 <_realloc_r+0x3a4>
  406bf0:	2a13      	cmp	r2, #19
  406bf2:	f240 80a5 	bls.w	406d40 <_realloc_r+0x38c>
  406bf6:	6831      	ldr	r1, [r6, #0]
  406bf8:	f8ca 1008 	str.w	r1, [sl, #8]
  406bfc:	6871      	ldr	r1, [r6, #4]
  406bfe:	f8ca 100c 	str.w	r1, [sl, #12]
  406c02:	2a1b      	cmp	r2, #27
  406c04:	f200 80af 	bhi.w	406d66 <_realloc_r+0x3b2>
  406c08:	3608      	adds	r6, #8
  406c0a:	f10a 0210 	add.w	r2, sl, #16
  406c0e:	6831      	ldr	r1, [r6, #0]
  406c10:	6011      	str	r1, [r2, #0]
  406c12:	6871      	ldr	r1, [r6, #4]
  406c14:	6051      	str	r1, [r2, #4]
  406c16:	68b1      	ldr	r1, [r6, #8]
  406c18:	6091      	str	r1, [r2, #8]
  406c1a:	eb0a 0105 	add.w	r1, sl, r5
  406c1e:	ebc5 020b 	rsb	r2, r5, fp
  406c22:	f042 0201 	orr.w	r2, r2, #1
  406c26:	6099      	str	r1, [r3, #8]
  406c28:	604a      	str	r2, [r1, #4]
  406c2a:	f8da 3004 	ldr.w	r3, [sl, #4]
  406c2e:	f003 0301 	and.w	r3, r3, #1
  406c32:	431d      	orrs	r5, r3
  406c34:	4648      	mov	r0, r9
  406c36:	f8ca 5004 	str.w	r5, [sl, #4]
  406c3a:	f7ff feb9 	bl	4069b0 <__malloc_unlock>
  406c3e:	4638      	mov	r0, r7
  406c40:	e75c      	b.n	406afc <_realloc_r+0x148>
  406c42:	6833      	ldr	r3, [r6, #0]
  406c44:	6003      	str	r3, [r0, #0]
  406c46:	6873      	ldr	r3, [r6, #4]
  406c48:	6043      	str	r3, [r0, #4]
  406c4a:	2a1b      	cmp	r2, #27
  406c4c:	d827      	bhi.n	406c9e <_realloc_r+0x2ea>
  406c4e:	f100 0308 	add.w	r3, r0, #8
  406c52:	f106 0208 	add.w	r2, r6, #8
  406c56:	e6f2      	b.n	406a3e <_realloc_r+0x8a>
  406c58:	463b      	mov	r3, r7
  406c5a:	6832      	ldr	r2, [r6, #0]
  406c5c:	601a      	str	r2, [r3, #0]
  406c5e:	6872      	ldr	r2, [r6, #4]
  406c60:	605a      	str	r2, [r3, #4]
  406c62:	68b2      	ldr	r2, [r6, #8]
  406c64:	609a      	str	r2, [r3, #8]
  406c66:	463e      	mov	r6, r7
  406c68:	4674      	mov	r4, lr
  406c6a:	46d0      	mov	r8, sl
  406c6c:	e733      	b.n	406ad6 <_realloc_r+0x122>
  406c6e:	eb08 0105 	add.w	r1, r8, r5
  406c72:	ebc5 0b0b 	rsb	fp, r5, fp
  406c76:	f04b 0201 	orr.w	r2, fp, #1
  406c7a:	6099      	str	r1, [r3, #8]
  406c7c:	604a      	str	r2, [r1, #4]
  406c7e:	f856 3c04 	ldr.w	r3, [r6, #-4]
  406c82:	f003 0301 	and.w	r3, r3, #1
  406c86:	431d      	orrs	r5, r3
  406c88:	4648      	mov	r0, r9
  406c8a:	f846 5c04 	str.w	r5, [r6, #-4]
  406c8e:	f7ff fe8f 	bl	4069b0 <__malloc_unlock>
  406c92:	4630      	mov	r0, r6
  406c94:	e732      	b.n	406afc <_realloc_r+0x148>
  406c96:	4631      	mov	r1, r6
  406c98:	f7ff fe24 	bl	4068e4 <memmove>
  406c9c:	e6d5      	b.n	406a4a <_realloc_r+0x96>
  406c9e:	68b3      	ldr	r3, [r6, #8]
  406ca0:	6083      	str	r3, [r0, #8]
  406ca2:	68f3      	ldr	r3, [r6, #12]
  406ca4:	60c3      	str	r3, [r0, #12]
  406ca6:	2a24      	cmp	r2, #36	; 0x24
  406ca8:	d028      	beq.n	406cfc <_realloc_r+0x348>
  406caa:	f100 0310 	add.w	r3, r0, #16
  406cae:	f106 0210 	add.w	r2, r6, #16
  406cb2:	e6c4      	b.n	406a3e <_realloc_r+0x8a>
  406cb4:	f850 3c04 	ldr.w	r3, [r0, #-4]
  406cb8:	f023 0303 	bic.w	r3, r3, #3
  406cbc:	441c      	add	r4, r3
  406cbe:	e70a      	b.n	406ad6 <_realloc_r+0x122>
  406cc0:	4631      	mov	r1, r6
  406cc2:	4638      	mov	r0, r7
  406cc4:	4674      	mov	r4, lr
  406cc6:	46d0      	mov	r8, sl
  406cc8:	f7ff fe0c 	bl	4068e4 <memmove>
  406ccc:	463e      	mov	r6, r7
  406cce:	e702      	b.n	406ad6 <_realloc_r+0x122>
  406cd0:	463a      	mov	r2, r7
  406cd2:	e6f7      	b.n	406ac4 <_realloc_r+0x110>
  406cd4:	4631      	mov	r1, r6
  406cd6:	4638      	mov	r0, r7
  406cd8:	461c      	mov	r4, r3
  406cda:	46d0      	mov	r8, sl
  406cdc:	f7ff fe02 	bl	4068e4 <memmove>
  406ce0:	463e      	mov	r6, r7
  406ce2:	e6f8      	b.n	406ad6 <_realloc_r+0x122>
  406ce4:	68b3      	ldr	r3, [r6, #8]
  406ce6:	f8ca 3010 	str.w	r3, [sl, #16]
  406cea:	68f3      	ldr	r3, [r6, #12]
  406cec:	f8ca 3014 	str.w	r3, [sl, #20]
  406cf0:	2a24      	cmp	r2, #36	; 0x24
  406cf2:	d01b      	beq.n	406d2c <_realloc_r+0x378>
  406cf4:	3610      	adds	r6, #16
  406cf6:	f10a 0318 	add.w	r3, sl, #24
  406cfa:	e7ae      	b.n	406c5a <_realloc_r+0x2a6>
  406cfc:	6933      	ldr	r3, [r6, #16]
  406cfe:	6103      	str	r3, [r0, #16]
  406d00:	6973      	ldr	r3, [r6, #20]
  406d02:	6143      	str	r3, [r0, #20]
  406d04:	f106 0218 	add.w	r2, r6, #24
  406d08:	f100 0318 	add.w	r3, r0, #24
  406d0c:	e697      	b.n	406a3e <_realloc_r+0x8a>
  406d0e:	bf00      	nop
  406d10:	204004e0 	.word	0x204004e0
  406d14:	68b1      	ldr	r1, [r6, #8]
  406d16:	f8ca 1010 	str.w	r1, [sl, #16]
  406d1a:	68f1      	ldr	r1, [r6, #12]
  406d1c:	f8ca 1014 	str.w	r1, [sl, #20]
  406d20:	2a24      	cmp	r2, #36	; 0x24
  406d22:	d00f      	beq.n	406d44 <_realloc_r+0x390>
  406d24:	3610      	adds	r6, #16
  406d26:	f10a 0218 	add.w	r2, sl, #24
  406d2a:	e6cb      	b.n	406ac4 <_realloc_r+0x110>
  406d2c:	6933      	ldr	r3, [r6, #16]
  406d2e:	f8ca 3018 	str.w	r3, [sl, #24]
  406d32:	6973      	ldr	r3, [r6, #20]
  406d34:	f8ca 301c 	str.w	r3, [sl, #28]
  406d38:	3618      	adds	r6, #24
  406d3a:	f10a 0320 	add.w	r3, sl, #32
  406d3e:	e78c      	b.n	406c5a <_realloc_r+0x2a6>
  406d40:	463a      	mov	r2, r7
  406d42:	e764      	b.n	406c0e <_realloc_r+0x25a>
  406d44:	6932      	ldr	r2, [r6, #16]
  406d46:	f8ca 2018 	str.w	r2, [sl, #24]
  406d4a:	6972      	ldr	r2, [r6, #20]
  406d4c:	f8ca 201c 	str.w	r2, [sl, #28]
  406d50:	3618      	adds	r6, #24
  406d52:	f10a 0220 	add.w	r2, sl, #32
  406d56:	e6b5      	b.n	406ac4 <_realloc_r+0x110>
  406d58:	4631      	mov	r1, r6
  406d5a:	4638      	mov	r0, r7
  406d5c:	9301      	str	r3, [sp, #4]
  406d5e:	f7ff fdc1 	bl	4068e4 <memmove>
  406d62:	9b01      	ldr	r3, [sp, #4]
  406d64:	e759      	b.n	406c1a <_realloc_r+0x266>
  406d66:	68b1      	ldr	r1, [r6, #8]
  406d68:	f8ca 1010 	str.w	r1, [sl, #16]
  406d6c:	68f1      	ldr	r1, [r6, #12]
  406d6e:	f8ca 1014 	str.w	r1, [sl, #20]
  406d72:	2a24      	cmp	r2, #36	; 0x24
  406d74:	d003      	beq.n	406d7e <_realloc_r+0x3ca>
  406d76:	3610      	adds	r6, #16
  406d78:	f10a 0218 	add.w	r2, sl, #24
  406d7c:	e747      	b.n	406c0e <_realloc_r+0x25a>
  406d7e:	6932      	ldr	r2, [r6, #16]
  406d80:	f8ca 2018 	str.w	r2, [sl, #24]
  406d84:	6972      	ldr	r2, [r6, #20]
  406d86:	f8ca 201c 	str.w	r2, [sl, #28]
  406d8a:	3618      	adds	r6, #24
  406d8c:	f10a 0220 	add.w	r2, sl, #32
  406d90:	e73d      	b.n	406c0e <_realloc_r+0x25a>
  406d92:	bf00      	nop

00406d94 <_sbrk_r>:
  406d94:	b538      	push	{r3, r4, r5, lr}
  406d96:	4c07      	ldr	r4, [pc, #28]	; (406db4 <_sbrk_r+0x20>)
  406d98:	2300      	movs	r3, #0
  406d9a:	4605      	mov	r5, r0
  406d9c:	4608      	mov	r0, r1
  406d9e:	6023      	str	r3, [r4, #0]
  406da0:	f7fc fff0 	bl	403d84 <_sbrk>
  406da4:	1c43      	adds	r3, r0, #1
  406da6:	d000      	beq.n	406daa <_sbrk_r+0x16>
  406da8:	bd38      	pop	{r3, r4, r5, pc}
  406daa:	6823      	ldr	r3, [r4, #0]
  406dac:	2b00      	cmp	r3, #0
  406dae:	d0fb      	beq.n	406da8 <_sbrk_r+0x14>
  406db0:	602b      	str	r3, [r5, #0]
  406db2:	bd38      	pop	{r3, r4, r5, pc}
  406db4:	2040104c 	.word	0x2040104c

00406db8 <__sread>:
  406db8:	b510      	push	{r4, lr}
  406dba:	460c      	mov	r4, r1
  406dbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406dc0:	f000 f9c4 	bl	40714c <_read_r>
  406dc4:	2800      	cmp	r0, #0
  406dc6:	db03      	blt.n	406dd0 <__sread+0x18>
  406dc8:	6d23      	ldr	r3, [r4, #80]	; 0x50
  406dca:	4403      	add	r3, r0
  406dcc:	6523      	str	r3, [r4, #80]	; 0x50
  406dce:	bd10      	pop	{r4, pc}
  406dd0:	89a3      	ldrh	r3, [r4, #12]
  406dd2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  406dd6:	81a3      	strh	r3, [r4, #12]
  406dd8:	bd10      	pop	{r4, pc}
  406dda:	bf00      	nop

00406ddc <__swrite>:
  406ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406de0:	4616      	mov	r6, r2
  406de2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  406de6:	461f      	mov	r7, r3
  406de8:	05d3      	lsls	r3, r2, #23
  406dea:	460c      	mov	r4, r1
  406dec:	4605      	mov	r5, r0
  406dee:	d507      	bpl.n	406e00 <__swrite+0x24>
  406df0:	2200      	movs	r2, #0
  406df2:	2302      	movs	r3, #2
  406df4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406df8:	f000 f992 	bl	407120 <_lseek_r>
  406dfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406e00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406e04:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  406e08:	81a2      	strh	r2, [r4, #12]
  406e0a:	463b      	mov	r3, r7
  406e0c:	4632      	mov	r2, r6
  406e0e:	4628      	mov	r0, r5
  406e10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406e14:	f000 b8a2 	b.w	406f5c <_write_r>

00406e18 <__sseek>:
  406e18:	b510      	push	{r4, lr}
  406e1a:	460c      	mov	r4, r1
  406e1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406e20:	f000 f97e 	bl	407120 <_lseek_r>
  406e24:	89a3      	ldrh	r3, [r4, #12]
  406e26:	1c42      	adds	r2, r0, #1
  406e28:	bf0e      	itee	eq
  406e2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  406e2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  406e32:	6520      	strne	r0, [r4, #80]	; 0x50
  406e34:	81a3      	strh	r3, [r4, #12]
  406e36:	bd10      	pop	{r4, pc}

00406e38 <__sclose>:
  406e38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406e3c:	f000 b8f6 	b.w	40702c <_close_r>

00406e40 <__swbuf_r>:
  406e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406e42:	460e      	mov	r6, r1
  406e44:	4614      	mov	r4, r2
  406e46:	4607      	mov	r7, r0
  406e48:	b110      	cbz	r0, 406e50 <__swbuf_r+0x10>
  406e4a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406e4c:	2b00      	cmp	r3, #0
  406e4e:	d04a      	beq.n	406ee6 <__swbuf_r+0xa6>
  406e50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406e54:	69a3      	ldr	r3, [r4, #24]
  406e56:	60a3      	str	r3, [r4, #8]
  406e58:	b291      	uxth	r1, r2
  406e5a:	0708      	lsls	r0, r1, #28
  406e5c:	d538      	bpl.n	406ed0 <__swbuf_r+0x90>
  406e5e:	6923      	ldr	r3, [r4, #16]
  406e60:	2b00      	cmp	r3, #0
  406e62:	d035      	beq.n	406ed0 <__swbuf_r+0x90>
  406e64:	0489      	lsls	r1, r1, #18
  406e66:	b2f5      	uxtb	r5, r6
  406e68:	d515      	bpl.n	406e96 <__swbuf_r+0x56>
  406e6a:	6822      	ldr	r2, [r4, #0]
  406e6c:	6961      	ldr	r1, [r4, #20]
  406e6e:	1ad3      	subs	r3, r2, r3
  406e70:	428b      	cmp	r3, r1
  406e72:	da1c      	bge.n	406eae <__swbuf_r+0x6e>
  406e74:	3301      	adds	r3, #1
  406e76:	68a1      	ldr	r1, [r4, #8]
  406e78:	1c50      	adds	r0, r2, #1
  406e7a:	3901      	subs	r1, #1
  406e7c:	60a1      	str	r1, [r4, #8]
  406e7e:	6020      	str	r0, [r4, #0]
  406e80:	7016      	strb	r6, [r2, #0]
  406e82:	6962      	ldr	r2, [r4, #20]
  406e84:	429a      	cmp	r2, r3
  406e86:	d01a      	beq.n	406ebe <__swbuf_r+0x7e>
  406e88:	89a3      	ldrh	r3, [r4, #12]
  406e8a:	07db      	lsls	r3, r3, #31
  406e8c:	d501      	bpl.n	406e92 <__swbuf_r+0x52>
  406e8e:	2d0a      	cmp	r5, #10
  406e90:	d015      	beq.n	406ebe <__swbuf_r+0x7e>
  406e92:	4628      	mov	r0, r5
  406e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406e96:	6e61      	ldr	r1, [r4, #100]	; 0x64
  406e98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  406e9c:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  406ea0:	81a2      	strh	r2, [r4, #12]
  406ea2:	6822      	ldr	r2, [r4, #0]
  406ea4:	6661      	str	r1, [r4, #100]	; 0x64
  406ea6:	6961      	ldr	r1, [r4, #20]
  406ea8:	1ad3      	subs	r3, r2, r3
  406eaa:	428b      	cmp	r3, r1
  406eac:	dbe2      	blt.n	406e74 <__swbuf_r+0x34>
  406eae:	4621      	mov	r1, r4
  406eb0:	4638      	mov	r0, r7
  406eb2:	f7fe fcfb 	bl	4058ac <_fflush_r>
  406eb6:	b940      	cbnz	r0, 406eca <__swbuf_r+0x8a>
  406eb8:	6822      	ldr	r2, [r4, #0]
  406eba:	2301      	movs	r3, #1
  406ebc:	e7db      	b.n	406e76 <__swbuf_r+0x36>
  406ebe:	4621      	mov	r1, r4
  406ec0:	4638      	mov	r0, r7
  406ec2:	f7fe fcf3 	bl	4058ac <_fflush_r>
  406ec6:	2800      	cmp	r0, #0
  406ec8:	d0e3      	beq.n	406e92 <__swbuf_r+0x52>
  406eca:	f04f 30ff 	mov.w	r0, #4294967295
  406ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406ed0:	4621      	mov	r1, r4
  406ed2:	4638      	mov	r0, r7
  406ed4:	f7fe fbd2 	bl	40567c <__swsetup_r>
  406ed8:	2800      	cmp	r0, #0
  406eda:	d1f6      	bne.n	406eca <__swbuf_r+0x8a>
  406edc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406ee0:	6923      	ldr	r3, [r4, #16]
  406ee2:	b291      	uxth	r1, r2
  406ee4:	e7be      	b.n	406e64 <__swbuf_r+0x24>
  406ee6:	f7fe fd75 	bl	4059d4 <__sinit>
  406eea:	e7b1      	b.n	406e50 <__swbuf_r+0x10>

00406eec <_wcrtomb_r>:
  406eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406ef0:	4605      	mov	r5, r0
  406ef2:	b086      	sub	sp, #24
  406ef4:	461e      	mov	r6, r3
  406ef6:	460c      	mov	r4, r1
  406ef8:	b1a1      	cbz	r1, 406f24 <_wcrtomb_r+0x38>
  406efa:	4b10      	ldr	r3, [pc, #64]	; (406f3c <_wcrtomb_r+0x50>)
  406efc:	4617      	mov	r7, r2
  406efe:	f8d3 8000 	ldr.w	r8, [r3]
  406f02:	f7ff f8c5 	bl	406090 <__locale_charset>
  406f06:	9600      	str	r6, [sp, #0]
  406f08:	4603      	mov	r3, r0
  406f0a:	463a      	mov	r2, r7
  406f0c:	4621      	mov	r1, r4
  406f0e:	4628      	mov	r0, r5
  406f10:	47c0      	blx	r8
  406f12:	1c43      	adds	r3, r0, #1
  406f14:	d103      	bne.n	406f1e <_wcrtomb_r+0x32>
  406f16:	2200      	movs	r2, #0
  406f18:	238a      	movs	r3, #138	; 0x8a
  406f1a:	6032      	str	r2, [r6, #0]
  406f1c:	602b      	str	r3, [r5, #0]
  406f1e:	b006      	add	sp, #24
  406f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406f24:	4b05      	ldr	r3, [pc, #20]	; (406f3c <_wcrtomb_r+0x50>)
  406f26:	681f      	ldr	r7, [r3, #0]
  406f28:	f7ff f8b2 	bl	406090 <__locale_charset>
  406f2c:	9600      	str	r6, [sp, #0]
  406f2e:	4603      	mov	r3, r0
  406f30:	4622      	mov	r2, r4
  406f32:	a903      	add	r1, sp, #12
  406f34:	4628      	mov	r0, r5
  406f36:	47b8      	blx	r7
  406f38:	e7eb      	b.n	406f12 <_wcrtomb_r+0x26>
  406f3a:	bf00      	nop
  406f3c:	204008f0 	.word	0x204008f0

00406f40 <__ascii_wctomb>:
  406f40:	b121      	cbz	r1, 406f4c <__ascii_wctomb+0xc>
  406f42:	2aff      	cmp	r2, #255	; 0xff
  406f44:	d804      	bhi.n	406f50 <__ascii_wctomb+0x10>
  406f46:	700a      	strb	r2, [r1, #0]
  406f48:	2001      	movs	r0, #1
  406f4a:	4770      	bx	lr
  406f4c:	4608      	mov	r0, r1
  406f4e:	4770      	bx	lr
  406f50:	238a      	movs	r3, #138	; 0x8a
  406f52:	6003      	str	r3, [r0, #0]
  406f54:	f04f 30ff 	mov.w	r0, #4294967295
  406f58:	4770      	bx	lr
  406f5a:	bf00      	nop

00406f5c <_write_r>:
  406f5c:	b570      	push	{r4, r5, r6, lr}
  406f5e:	460d      	mov	r5, r1
  406f60:	4c08      	ldr	r4, [pc, #32]	; (406f84 <_write_r+0x28>)
  406f62:	4611      	mov	r1, r2
  406f64:	4606      	mov	r6, r0
  406f66:	461a      	mov	r2, r3
  406f68:	4628      	mov	r0, r5
  406f6a:	2300      	movs	r3, #0
  406f6c:	6023      	str	r3, [r4, #0]
  406f6e:	f7fc f8cb 	bl	403108 <_write>
  406f72:	1c43      	adds	r3, r0, #1
  406f74:	d000      	beq.n	406f78 <_write_r+0x1c>
  406f76:	bd70      	pop	{r4, r5, r6, pc}
  406f78:	6823      	ldr	r3, [r4, #0]
  406f7a:	2b00      	cmp	r3, #0
  406f7c:	d0fb      	beq.n	406f76 <_write_r+0x1a>
  406f7e:	6033      	str	r3, [r6, #0]
  406f80:	bd70      	pop	{r4, r5, r6, pc}
  406f82:	bf00      	nop
  406f84:	2040104c 	.word	0x2040104c

00406f88 <__register_exitproc>:
  406f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  406f8c:	4c25      	ldr	r4, [pc, #148]	; (407024 <__register_exitproc+0x9c>)
  406f8e:	6825      	ldr	r5, [r4, #0]
  406f90:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  406f94:	4606      	mov	r6, r0
  406f96:	4688      	mov	r8, r1
  406f98:	4692      	mov	sl, r2
  406f9a:	4699      	mov	r9, r3
  406f9c:	b3c4      	cbz	r4, 407010 <__register_exitproc+0x88>
  406f9e:	6860      	ldr	r0, [r4, #4]
  406fa0:	281f      	cmp	r0, #31
  406fa2:	dc17      	bgt.n	406fd4 <__register_exitproc+0x4c>
  406fa4:	1c43      	adds	r3, r0, #1
  406fa6:	b176      	cbz	r6, 406fc6 <__register_exitproc+0x3e>
  406fa8:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  406fac:	2201      	movs	r2, #1
  406fae:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  406fb2:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  406fb6:	4082      	lsls	r2, r0
  406fb8:	4311      	orrs	r1, r2
  406fba:	2e02      	cmp	r6, #2
  406fbc:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  406fc0:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  406fc4:	d01e      	beq.n	407004 <__register_exitproc+0x7c>
  406fc6:	3002      	adds	r0, #2
  406fc8:	6063      	str	r3, [r4, #4]
  406fca:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  406fce:	2000      	movs	r0, #0
  406fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406fd4:	4b14      	ldr	r3, [pc, #80]	; (407028 <__register_exitproc+0xa0>)
  406fd6:	b303      	cbz	r3, 40701a <__register_exitproc+0x92>
  406fd8:	f44f 70c8 	mov.w	r0, #400	; 0x190
  406fdc:	f7ff f8d6 	bl	40618c <malloc>
  406fe0:	4604      	mov	r4, r0
  406fe2:	b1d0      	cbz	r0, 40701a <__register_exitproc+0x92>
  406fe4:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  406fe8:	2700      	movs	r7, #0
  406fea:	e880 0088 	stmia.w	r0, {r3, r7}
  406fee:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  406ff2:	4638      	mov	r0, r7
  406ff4:	2301      	movs	r3, #1
  406ff6:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  406ffa:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  406ffe:	2e00      	cmp	r6, #0
  407000:	d0e1      	beq.n	406fc6 <__register_exitproc+0x3e>
  407002:	e7d1      	b.n	406fa8 <__register_exitproc+0x20>
  407004:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  407008:	430a      	orrs	r2, r1
  40700a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  40700e:	e7da      	b.n	406fc6 <__register_exitproc+0x3e>
  407010:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  407014:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  407018:	e7c1      	b.n	406f9e <__register_exitproc+0x16>
  40701a:	f04f 30ff 	mov.w	r0, #4294967295
  40701e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407022:	bf00      	nop
  407024:	0040861c 	.word	0x0040861c
  407028:	0040618d 	.word	0x0040618d

0040702c <_close_r>:
  40702c:	b538      	push	{r3, r4, r5, lr}
  40702e:	4c07      	ldr	r4, [pc, #28]	; (40704c <_close_r+0x20>)
  407030:	2300      	movs	r3, #0
  407032:	4605      	mov	r5, r0
  407034:	4608      	mov	r0, r1
  407036:	6023      	str	r3, [r4, #0]
  407038:	f7fc febe 	bl	403db8 <_close>
  40703c:	1c43      	adds	r3, r0, #1
  40703e:	d000      	beq.n	407042 <_close_r+0x16>
  407040:	bd38      	pop	{r3, r4, r5, pc}
  407042:	6823      	ldr	r3, [r4, #0]
  407044:	2b00      	cmp	r3, #0
  407046:	d0fb      	beq.n	407040 <_close_r+0x14>
  407048:	602b      	str	r3, [r5, #0]
  40704a:	bd38      	pop	{r3, r4, r5, pc}
  40704c:	2040104c 	.word	0x2040104c

00407050 <_fclose_r>:
  407050:	2900      	cmp	r1, #0
  407052:	d03d      	beq.n	4070d0 <_fclose_r+0x80>
  407054:	b570      	push	{r4, r5, r6, lr}
  407056:	4605      	mov	r5, r0
  407058:	460c      	mov	r4, r1
  40705a:	b108      	cbz	r0, 407060 <_fclose_r+0x10>
  40705c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40705e:	b37b      	cbz	r3, 4070c0 <_fclose_r+0x70>
  407060:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407064:	b90b      	cbnz	r3, 40706a <_fclose_r+0x1a>
  407066:	2000      	movs	r0, #0
  407068:	bd70      	pop	{r4, r5, r6, pc}
  40706a:	4621      	mov	r1, r4
  40706c:	4628      	mov	r0, r5
  40706e:	f7fe fb79 	bl	405764 <__sflush_r>
  407072:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  407074:	4606      	mov	r6, r0
  407076:	b133      	cbz	r3, 407086 <_fclose_r+0x36>
  407078:	69e1      	ldr	r1, [r4, #28]
  40707a:	4628      	mov	r0, r5
  40707c:	4798      	blx	r3
  40707e:	2800      	cmp	r0, #0
  407080:	bfb8      	it	lt
  407082:	f04f 36ff 	movlt.w	r6, #4294967295
  407086:	89a3      	ldrh	r3, [r4, #12]
  407088:	061b      	lsls	r3, r3, #24
  40708a:	d41c      	bmi.n	4070c6 <_fclose_r+0x76>
  40708c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40708e:	b141      	cbz	r1, 4070a2 <_fclose_r+0x52>
  407090:	f104 0340 	add.w	r3, r4, #64	; 0x40
  407094:	4299      	cmp	r1, r3
  407096:	d002      	beq.n	40709e <_fclose_r+0x4e>
  407098:	4628      	mov	r0, r5
  40709a:	f7fe fd65 	bl	405b68 <_free_r>
  40709e:	2300      	movs	r3, #0
  4070a0:	6323      	str	r3, [r4, #48]	; 0x30
  4070a2:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4070a4:	b121      	cbz	r1, 4070b0 <_fclose_r+0x60>
  4070a6:	4628      	mov	r0, r5
  4070a8:	f7fe fd5e 	bl	405b68 <_free_r>
  4070ac:	2300      	movs	r3, #0
  4070ae:	6463      	str	r3, [r4, #68]	; 0x44
  4070b0:	f7fe fc96 	bl	4059e0 <__sfp_lock_acquire>
  4070b4:	2300      	movs	r3, #0
  4070b6:	81a3      	strh	r3, [r4, #12]
  4070b8:	f7fe fc94 	bl	4059e4 <__sfp_lock_release>
  4070bc:	4630      	mov	r0, r6
  4070be:	bd70      	pop	{r4, r5, r6, pc}
  4070c0:	f7fe fc88 	bl	4059d4 <__sinit>
  4070c4:	e7cc      	b.n	407060 <_fclose_r+0x10>
  4070c6:	6921      	ldr	r1, [r4, #16]
  4070c8:	4628      	mov	r0, r5
  4070ca:	f7fe fd4d 	bl	405b68 <_free_r>
  4070ce:	e7dd      	b.n	40708c <_fclose_r+0x3c>
  4070d0:	2000      	movs	r0, #0
  4070d2:	4770      	bx	lr

004070d4 <_fstat_r>:
  4070d4:	b538      	push	{r3, r4, r5, lr}
  4070d6:	460b      	mov	r3, r1
  4070d8:	4c07      	ldr	r4, [pc, #28]	; (4070f8 <_fstat_r+0x24>)
  4070da:	4605      	mov	r5, r0
  4070dc:	4611      	mov	r1, r2
  4070de:	4618      	mov	r0, r3
  4070e0:	2300      	movs	r3, #0
  4070e2:	6023      	str	r3, [r4, #0]
  4070e4:	f7fc fe6c 	bl	403dc0 <_fstat>
  4070e8:	1c43      	adds	r3, r0, #1
  4070ea:	d000      	beq.n	4070ee <_fstat_r+0x1a>
  4070ec:	bd38      	pop	{r3, r4, r5, pc}
  4070ee:	6823      	ldr	r3, [r4, #0]
  4070f0:	2b00      	cmp	r3, #0
  4070f2:	d0fb      	beq.n	4070ec <_fstat_r+0x18>
  4070f4:	602b      	str	r3, [r5, #0]
  4070f6:	bd38      	pop	{r3, r4, r5, pc}
  4070f8:	2040104c 	.word	0x2040104c

004070fc <_isatty_r>:
  4070fc:	b538      	push	{r3, r4, r5, lr}
  4070fe:	4c07      	ldr	r4, [pc, #28]	; (40711c <_isatty_r+0x20>)
  407100:	2300      	movs	r3, #0
  407102:	4605      	mov	r5, r0
  407104:	4608      	mov	r0, r1
  407106:	6023      	str	r3, [r4, #0]
  407108:	f7fc fe60 	bl	403dcc <_isatty>
  40710c:	1c43      	adds	r3, r0, #1
  40710e:	d000      	beq.n	407112 <_isatty_r+0x16>
  407110:	bd38      	pop	{r3, r4, r5, pc}
  407112:	6823      	ldr	r3, [r4, #0]
  407114:	2b00      	cmp	r3, #0
  407116:	d0fb      	beq.n	407110 <_isatty_r+0x14>
  407118:	602b      	str	r3, [r5, #0]
  40711a:	bd38      	pop	{r3, r4, r5, pc}
  40711c:	2040104c 	.word	0x2040104c

00407120 <_lseek_r>:
  407120:	b570      	push	{r4, r5, r6, lr}
  407122:	460d      	mov	r5, r1
  407124:	4c08      	ldr	r4, [pc, #32]	; (407148 <_lseek_r+0x28>)
  407126:	4611      	mov	r1, r2
  407128:	4606      	mov	r6, r0
  40712a:	461a      	mov	r2, r3
  40712c:	4628      	mov	r0, r5
  40712e:	2300      	movs	r3, #0
  407130:	6023      	str	r3, [r4, #0]
  407132:	f7fc fe4d 	bl	403dd0 <_lseek>
  407136:	1c43      	adds	r3, r0, #1
  407138:	d000      	beq.n	40713c <_lseek_r+0x1c>
  40713a:	bd70      	pop	{r4, r5, r6, pc}
  40713c:	6823      	ldr	r3, [r4, #0]
  40713e:	2b00      	cmp	r3, #0
  407140:	d0fb      	beq.n	40713a <_lseek_r+0x1a>
  407142:	6033      	str	r3, [r6, #0]
  407144:	bd70      	pop	{r4, r5, r6, pc}
  407146:	bf00      	nop
  407148:	2040104c 	.word	0x2040104c

0040714c <_read_r>:
  40714c:	b570      	push	{r4, r5, r6, lr}
  40714e:	460d      	mov	r5, r1
  407150:	4c08      	ldr	r4, [pc, #32]	; (407174 <_read_r+0x28>)
  407152:	4611      	mov	r1, r2
  407154:	4606      	mov	r6, r0
  407156:	461a      	mov	r2, r3
  407158:	4628      	mov	r0, r5
  40715a:	2300      	movs	r3, #0
  40715c:	6023      	str	r3, [r4, #0]
  40715e:	f7fb ffb5 	bl	4030cc <_read>
  407162:	1c43      	adds	r3, r0, #1
  407164:	d000      	beq.n	407168 <_read_r+0x1c>
  407166:	bd70      	pop	{r4, r5, r6, pc}
  407168:	6823      	ldr	r3, [r4, #0]
  40716a:	2b00      	cmp	r3, #0
  40716c:	d0fb      	beq.n	407166 <_read_r+0x1a>
  40716e:	6033      	str	r3, [r6, #0]
  407170:	bd70      	pop	{r4, r5, r6, pc}
  407172:	bf00      	nop
  407174:	2040104c 	.word	0x2040104c

00407178 <__aeabi_uldivmod>:
  407178:	b953      	cbnz	r3, 407190 <__aeabi_uldivmod+0x18>
  40717a:	b94a      	cbnz	r2, 407190 <__aeabi_uldivmod+0x18>
  40717c:	2900      	cmp	r1, #0
  40717e:	bf08      	it	eq
  407180:	2800      	cmpeq	r0, #0
  407182:	bf1c      	itt	ne
  407184:	f04f 31ff 	movne.w	r1, #4294967295
  407188:	f04f 30ff 	movne.w	r0, #4294967295
  40718c:	f000 b97e 	b.w	40748c <__aeabi_idiv0>
  407190:	f1ad 0c08 	sub.w	ip, sp, #8
  407194:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  407198:	f000 f806 	bl	4071a8 <__udivmoddi4>
  40719c:	f8dd e004 	ldr.w	lr, [sp, #4]
  4071a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4071a4:	b004      	add	sp, #16
  4071a6:	4770      	bx	lr

004071a8 <__udivmoddi4>:
  4071a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4071ac:	468c      	mov	ip, r1
  4071ae:	460e      	mov	r6, r1
  4071b0:	4604      	mov	r4, r0
  4071b2:	9d08      	ldr	r5, [sp, #32]
  4071b4:	2b00      	cmp	r3, #0
  4071b6:	d150      	bne.n	40725a <__udivmoddi4+0xb2>
  4071b8:	428a      	cmp	r2, r1
  4071ba:	4617      	mov	r7, r2
  4071bc:	d96c      	bls.n	407298 <__udivmoddi4+0xf0>
  4071be:	fab2 fe82 	clz	lr, r2
  4071c2:	f1be 0f00 	cmp.w	lr, #0
  4071c6:	d00b      	beq.n	4071e0 <__udivmoddi4+0x38>
  4071c8:	f1ce 0420 	rsb	r4, lr, #32
  4071cc:	fa20 f404 	lsr.w	r4, r0, r4
  4071d0:	fa01 f60e 	lsl.w	r6, r1, lr
  4071d4:	ea44 0c06 	orr.w	ip, r4, r6
  4071d8:	fa02 f70e 	lsl.w	r7, r2, lr
  4071dc:	fa00 f40e 	lsl.w	r4, r0, lr
  4071e0:	ea4f 4917 	mov.w	r9, r7, lsr #16
  4071e4:	0c22      	lsrs	r2, r4, #16
  4071e6:	fbbc f0f9 	udiv	r0, ip, r9
  4071ea:	fa1f f887 	uxth.w	r8, r7
  4071ee:	fb09 c610 	mls	r6, r9, r0, ip
  4071f2:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  4071f6:	fb00 f308 	mul.w	r3, r0, r8
  4071fa:	42b3      	cmp	r3, r6
  4071fc:	d909      	bls.n	407212 <__udivmoddi4+0x6a>
  4071fe:	19f6      	adds	r6, r6, r7
  407200:	f100 32ff 	add.w	r2, r0, #4294967295
  407204:	f080 8122 	bcs.w	40744c <__udivmoddi4+0x2a4>
  407208:	42b3      	cmp	r3, r6
  40720a:	f240 811f 	bls.w	40744c <__udivmoddi4+0x2a4>
  40720e:	3802      	subs	r0, #2
  407210:	443e      	add	r6, r7
  407212:	1af6      	subs	r6, r6, r3
  407214:	b2a2      	uxth	r2, r4
  407216:	fbb6 f3f9 	udiv	r3, r6, r9
  40721a:	fb09 6613 	mls	r6, r9, r3, r6
  40721e:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  407222:	fb03 f808 	mul.w	r8, r3, r8
  407226:	45a0      	cmp	r8, r4
  407228:	d909      	bls.n	40723e <__udivmoddi4+0x96>
  40722a:	19e4      	adds	r4, r4, r7
  40722c:	f103 32ff 	add.w	r2, r3, #4294967295
  407230:	f080 810a 	bcs.w	407448 <__udivmoddi4+0x2a0>
  407234:	45a0      	cmp	r8, r4
  407236:	f240 8107 	bls.w	407448 <__udivmoddi4+0x2a0>
  40723a:	3b02      	subs	r3, #2
  40723c:	443c      	add	r4, r7
  40723e:	ebc8 0404 	rsb	r4, r8, r4
  407242:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  407246:	2100      	movs	r1, #0
  407248:	2d00      	cmp	r5, #0
  40724a:	d062      	beq.n	407312 <__udivmoddi4+0x16a>
  40724c:	fa24 f40e 	lsr.w	r4, r4, lr
  407250:	2300      	movs	r3, #0
  407252:	602c      	str	r4, [r5, #0]
  407254:	606b      	str	r3, [r5, #4]
  407256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40725a:	428b      	cmp	r3, r1
  40725c:	d907      	bls.n	40726e <__udivmoddi4+0xc6>
  40725e:	2d00      	cmp	r5, #0
  407260:	d055      	beq.n	40730e <__udivmoddi4+0x166>
  407262:	2100      	movs	r1, #0
  407264:	e885 0041 	stmia.w	r5, {r0, r6}
  407268:	4608      	mov	r0, r1
  40726a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40726e:	fab3 f183 	clz	r1, r3
  407272:	2900      	cmp	r1, #0
  407274:	f040 8090 	bne.w	407398 <__udivmoddi4+0x1f0>
  407278:	42b3      	cmp	r3, r6
  40727a:	d302      	bcc.n	407282 <__udivmoddi4+0xda>
  40727c:	4282      	cmp	r2, r0
  40727e:	f200 80f8 	bhi.w	407472 <__udivmoddi4+0x2ca>
  407282:	1a84      	subs	r4, r0, r2
  407284:	eb66 0603 	sbc.w	r6, r6, r3
  407288:	2001      	movs	r0, #1
  40728a:	46b4      	mov	ip, r6
  40728c:	2d00      	cmp	r5, #0
  40728e:	d040      	beq.n	407312 <__udivmoddi4+0x16a>
  407290:	e885 1010 	stmia.w	r5, {r4, ip}
  407294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407298:	b912      	cbnz	r2, 4072a0 <__udivmoddi4+0xf8>
  40729a:	2701      	movs	r7, #1
  40729c:	fbb7 f7f2 	udiv	r7, r7, r2
  4072a0:	fab7 fe87 	clz	lr, r7
  4072a4:	f1be 0f00 	cmp.w	lr, #0
  4072a8:	d135      	bne.n	407316 <__udivmoddi4+0x16e>
  4072aa:	1bf3      	subs	r3, r6, r7
  4072ac:	ea4f 4817 	mov.w	r8, r7, lsr #16
  4072b0:	fa1f fc87 	uxth.w	ip, r7
  4072b4:	2101      	movs	r1, #1
  4072b6:	fbb3 f0f8 	udiv	r0, r3, r8
  4072ba:	0c22      	lsrs	r2, r4, #16
  4072bc:	fb08 3610 	mls	r6, r8, r0, r3
  4072c0:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  4072c4:	fb0c f300 	mul.w	r3, ip, r0
  4072c8:	42b3      	cmp	r3, r6
  4072ca:	d907      	bls.n	4072dc <__udivmoddi4+0x134>
  4072cc:	19f6      	adds	r6, r6, r7
  4072ce:	f100 32ff 	add.w	r2, r0, #4294967295
  4072d2:	d202      	bcs.n	4072da <__udivmoddi4+0x132>
  4072d4:	42b3      	cmp	r3, r6
  4072d6:	f200 80ce 	bhi.w	407476 <__udivmoddi4+0x2ce>
  4072da:	4610      	mov	r0, r2
  4072dc:	1af6      	subs	r6, r6, r3
  4072de:	b2a2      	uxth	r2, r4
  4072e0:	fbb6 f3f8 	udiv	r3, r6, r8
  4072e4:	fb08 6613 	mls	r6, r8, r3, r6
  4072e8:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  4072ec:	fb0c fc03 	mul.w	ip, ip, r3
  4072f0:	45a4      	cmp	ip, r4
  4072f2:	d907      	bls.n	407304 <__udivmoddi4+0x15c>
  4072f4:	19e4      	adds	r4, r4, r7
  4072f6:	f103 32ff 	add.w	r2, r3, #4294967295
  4072fa:	d202      	bcs.n	407302 <__udivmoddi4+0x15a>
  4072fc:	45a4      	cmp	ip, r4
  4072fe:	f200 80b5 	bhi.w	40746c <__udivmoddi4+0x2c4>
  407302:	4613      	mov	r3, r2
  407304:	ebcc 0404 	rsb	r4, ip, r4
  407308:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  40730c:	e79c      	b.n	407248 <__udivmoddi4+0xa0>
  40730e:	4629      	mov	r1, r5
  407310:	4628      	mov	r0, r5
  407312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407316:	f1ce 0120 	rsb	r1, lr, #32
  40731a:	fa06 f30e 	lsl.w	r3, r6, lr
  40731e:	fa07 f70e 	lsl.w	r7, r7, lr
  407322:	fa20 f901 	lsr.w	r9, r0, r1
  407326:	ea4f 4817 	mov.w	r8, r7, lsr #16
  40732a:	40ce      	lsrs	r6, r1
  40732c:	ea49 0903 	orr.w	r9, r9, r3
  407330:	fbb6 faf8 	udiv	sl, r6, r8
  407334:	ea4f 4419 	mov.w	r4, r9, lsr #16
  407338:	fb08 661a 	mls	r6, r8, sl, r6
  40733c:	fa1f fc87 	uxth.w	ip, r7
  407340:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
  407344:	fb0a f20c 	mul.w	r2, sl, ip
  407348:	429a      	cmp	r2, r3
  40734a:	fa00 f40e 	lsl.w	r4, r0, lr
  40734e:	d90a      	bls.n	407366 <__udivmoddi4+0x1be>
  407350:	19db      	adds	r3, r3, r7
  407352:	f10a 31ff 	add.w	r1, sl, #4294967295
  407356:	f080 8087 	bcs.w	407468 <__udivmoddi4+0x2c0>
  40735a:	429a      	cmp	r2, r3
  40735c:	f240 8084 	bls.w	407468 <__udivmoddi4+0x2c0>
  407360:	f1aa 0a02 	sub.w	sl, sl, #2
  407364:	443b      	add	r3, r7
  407366:	1a9b      	subs	r3, r3, r2
  407368:	fa1f f989 	uxth.w	r9, r9
  40736c:	fbb3 f1f8 	udiv	r1, r3, r8
  407370:	fb08 3311 	mls	r3, r8, r1, r3
  407374:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
  407378:	fb01 f60c 	mul.w	r6, r1, ip
  40737c:	429e      	cmp	r6, r3
  40737e:	d907      	bls.n	407390 <__udivmoddi4+0x1e8>
  407380:	19db      	adds	r3, r3, r7
  407382:	f101 32ff 	add.w	r2, r1, #4294967295
  407386:	d26b      	bcs.n	407460 <__udivmoddi4+0x2b8>
  407388:	429e      	cmp	r6, r3
  40738a:	d969      	bls.n	407460 <__udivmoddi4+0x2b8>
  40738c:	3902      	subs	r1, #2
  40738e:	443b      	add	r3, r7
  407390:	1b9b      	subs	r3, r3, r6
  407392:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  407396:	e78e      	b.n	4072b6 <__udivmoddi4+0x10e>
  407398:	f1c1 0e20 	rsb	lr, r1, #32
  40739c:	fa22 f40e 	lsr.w	r4, r2, lr
  4073a0:	408b      	lsls	r3, r1
  4073a2:	4323      	orrs	r3, r4
  4073a4:	fa20 f70e 	lsr.w	r7, r0, lr
  4073a8:	fa06 f401 	lsl.w	r4, r6, r1
  4073ac:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  4073b0:	fa26 f60e 	lsr.w	r6, r6, lr
  4073b4:	433c      	orrs	r4, r7
  4073b6:	fbb6 f9fc 	udiv	r9, r6, ip
  4073ba:	0c27      	lsrs	r7, r4, #16
  4073bc:	fb0c 6619 	mls	r6, ip, r9, r6
  4073c0:	fa1f f883 	uxth.w	r8, r3
  4073c4:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  4073c8:	fb09 f708 	mul.w	r7, r9, r8
  4073cc:	42b7      	cmp	r7, r6
  4073ce:	fa02 f201 	lsl.w	r2, r2, r1
  4073d2:	fa00 fa01 	lsl.w	sl, r0, r1
  4073d6:	d908      	bls.n	4073ea <__udivmoddi4+0x242>
  4073d8:	18f6      	adds	r6, r6, r3
  4073da:	f109 30ff 	add.w	r0, r9, #4294967295
  4073de:	d241      	bcs.n	407464 <__udivmoddi4+0x2bc>
  4073e0:	42b7      	cmp	r7, r6
  4073e2:	d93f      	bls.n	407464 <__udivmoddi4+0x2bc>
  4073e4:	f1a9 0902 	sub.w	r9, r9, #2
  4073e8:	441e      	add	r6, r3
  4073ea:	1bf6      	subs	r6, r6, r7
  4073ec:	b2a0      	uxth	r0, r4
  4073ee:	fbb6 f4fc 	udiv	r4, r6, ip
  4073f2:	fb0c 6614 	mls	r6, ip, r4, r6
  4073f6:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
  4073fa:	fb04 f808 	mul.w	r8, r4, r8
  4073fe:	45b8      	cmp	r8, r7
  407400:	d907      	bls.n	407412 <__udivmoddi4+0x26a>
  407402:	18ff      	adds	r7, r7, r3
  407404:	f104 30ff 	add.w	r0, r4, #4294967295
  407408:	d228      	bcs.n	40745c <__udivmoddi4+0x2b4>
  40740a:	45b8      	cmp	r8, r7
  40740c:	d926      	bls.n	40745c <__udivmoddi4+0x2b4>
  40740e:	3c02      	subs	r4, #2
  407410:	441f      	add	r7, r3
  407412:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
  407416:	ebc8 0707 	rsb	r7, r8, r7
  40741a:	fba0 8902 	umull	r8, r9, r0, r2
  40741e:	454f      	cmp	r7, r9
  407420:	4644      	mov	r4, r8
  407422:	464e      	mov	r6, r9
  407424:	d314      	bcc.n	407450 <__udivmoddi4+0x2a8>
  407426:	d029      	beq.n	40747c <__udivmoddi4+0x2d4>
  407428:	b365      	cbz	r5, 407484 <__udivmoddi4+0x2dc>
  40742a:	ebba 0304 	subs.w	r3, sl, r4
  40742e:	eb67 0706 	sbc.w	r7, r7, r6
  407432:	fa07 fe0e 	lsl.w	lr, r7, lr
  407436:	40cb      	lsrs	r3, r1
  407438:	40cf      	lsrs	r7, r1
  40743a:	ea4e 0303 	orr.w	r3, lr, r3
  40743e:	e885 0088 	stmia.w	r5, {r3, r7}
  407442:	2100      	movs	r1, #0
  407444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407448:	4613      	mov	r3, r2
  40744a:	e6f8      	b.n	40723e <__udivmoddi4+0x96>
  40744c:	4610      	mov	r0, r2
  40744e:	e6e0      	b.n	407212 <__udivmoddi4+0x6a>
  407450:	ebb8 0402 	subs.w	r4, r8, r2
  407454:	eb69 0603 	sbc.w	r6, r9, r3
  407458:	3801      	subs	r0, #1
  40745a:	e7e5      	b.n	407428 <__udivmoddi4+0x280>
  40745c:	4604      	mov	r4, r0
  40745e:	e7d8      	b.n	407412 <__udivmoddi4+0x26a>
  407460:	4611      	mov	r1, r2
  407462:	e795      	b.n	407390 <__udivmoddi4+0x1e8>
  407464:	4681      	mov	r9, r0
  407466:	e7c0      	b.n	4073ea <__udivmoddi4+0x242>
  407468:	468a      	mov	sl, r1
  40746a:	e77c      	b.n	407366 <__udivmoddi4+0x1be>
  40746c:	3b02      	subs	r3, #2
  40746e:	443c      	add	r4, r7
  407470:	e748      	b.n	407304 <__udivmoddi4+0x15c>
  407472:	4608      	mov	r0, r1
  407474:	e70a      	b.n	40728c <__udivmoddi4+0xe4>
  407476:	3802      	subs	r0, #2
  407478:	443e      	add	r6, r7
  40747a:	e72f      	b.n	4072dc <__udivmoddi4+0x134>
  40747c:	45c2      	cmp	sl, r8
  40747e:	d3e7      	bcc.n	407450 <__udivmoddi4+0x2a8>
  407480:	463e      	mov	r6, r7
  407482:	e7d1      	b.n	407428 <__udivmoddi4+0x280>
  407484:	4629      	mov	r1, r5
  407486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40748a:	bf00      	nop

0040748c <__aeabi_idiv0>:
  40748c:	4770      	bx	lr
  40748e:	bf00      	nop
  407490:	50504128 	.word	0x50504128
  407494:	52452829 	.word	0x52452829
  407498:	255b2952 	.word	0x255b2952
  40749c:	255b5d73 	.word	0x255b5d73
  4074a0:	00005d64 	.word	0x00005d64
  4074a4:	61766e49 	.word	0x61766e49
  4074a8:	2064696c 	.word	0x2064696c
  4074ac:	54434f49 	.word	0x54434f49
  4074b0:	6f63204c 	.word	0x6f63204c
  4074b4:	6e616d6d 	.word	0x6e616d6d
  4074b8:	000a2164 	.word	0x000a2164
  4074bc:	0000000d 	.word	0x0000000d

004074c0 <__FUNCTION__.9672>:
  4074c0:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....

004074d0 <__FUNCTION__.8784>:
  4074d0:	5f666968 00727369                       hif_isr.

004074d8 <__FUNCTION__.8805>:
  4074d8:	5f666968 65636572 00657669 46494828     hif_receive.(HIF
  4074e8:	69614629 6f74206c 6b617720 74207075     )Fail to wakup t
  4074f8:	63206568 0a706968 00000000 66696828     he chip.....(hif
  407508:	49572029 485f4946 5f54534f 5f564352     ) WIFI_HOST_RCV_
  407518:	4c525443 6220315f 66207375 0a6c6961     CTRL_1 bus fail.
  407528:	00000000 66696828 64612029 73657264     ....(hif) addres
  407538:	75622073 61662073 000a6c69 66696828     s bus fail..(hif
  407548:	6f432029 70757272 20646574 6b636170     ) Corrupted pack
  407558:	53207465 20657a69 7525203d 204c3c20     et Size = %u <L 
  407568:	7525203d 2047202c 7525203d 504f202c     = %u, G = %u, OP
  407578:	25203d20 3e583230 0000000a 66696828      = %02X>....(hif
  407588:	6e692029 696c6176 72672064 2070756f     ) invalid group 
  407598:	000a4449 66696828 6f682029 61207473     ID..(hif) host a
  4075a8:	64207070 276e6469 65732074 58522074     pp didn't set RX
  4075b8:	6e6f4420 00000a65 66696828 72572029      Done...(hif) Wr
  4075c8:	20676e6f 657a6953 0000000a 66696828     ong Size....(hif
  4075d8:	61462029 2065736c 65746e69 70757272     ) False interrup
  4075e8:	6c252074 00000078 66696828 61462029     t %lx...(hif) Fa
  4075f8:	74206c69 6552206f 69206461 7265746e     il to Read inter
  407608:	74707572 67657220 0000000a 66696828     rupt reg....(hif
  407618:	41462029 74204c49 6177206f 7075656b     ) FAIL to wakeup
  407628:	65687420 69686320 00000a70 46494828      the chip...(HIF
  407638:	61462029 74206c69 6168206f 656c646e     ) Fail to handle
  407648:	746e6920 75727265 25207470 72742064      interrupt %d tr
  407658:	67412079 2e6e6961 00000a2e 66696820     y Again..... hif
  407668:	6365725f 65766965 6e49203a 696c6176     _receive: Invali
  407678:	72612064 656d7567 000a746e 20505041     d argument..APP 
  407688:	75716552 65747365 69532064 6920657a     Requested Size i
  407698:	616c2073 72656772 61687420 6874206e     s larger than th
  4076a8:	65722065 65766963 75622064 72656666     e recived buffer
  4076b8:	7a697320 253c2065 253c3e64 000a3e64      size <%d><%d>..
  4076c8:	20505041 75716552 65747365 64412064     APP Requested Ad
  4076d8:	73657264 65622073 646e6f79 65687420     dress beyond the
  4076e8:	63657220 64657669 66756220 20726566      recived buffer 
  4076f8:	72646461 20737365 20646e61 676e656c     address and leng
  407708:	000a6874 20705247 6425203f 0000000a     th..GRp ? %d....

00407718 <__FUNCTION__.8820>:
  407718:	5f666968 69676572 72657473 0062635f     hif_register_cb.

00407728 <__FUNCTION__.8774>:
  407728:	5f666968 646e6573 00000000              hif_send....

00407734 <__FUNCTION__.8790>:
  407734:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

00407744 <__FUNCTION__.8799>:
  407744:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
  407754:	0063735f                                _sc.

00407758 <__FUNCTION__.8747>:
  407758:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

00407764 <__FUNCTION__.8756>:
  407764:	5f6d326d 696c6176 65746164 5f70615f     m2m_validate_ap_
  407774:	61726170 6574656d 00007372 50504128     parameters..(APP
  407784:	4e492829 00294f46 666e6f43 7463696c     )(INFO).Conflict
  407794:	49206465 20222050 252e7525 75252e75     ed IP " %u.%u.%u
  4077a4:	2075252e 000a2022 20514552 20746f4e     .%u " ..REQ Not 
  4077b4:	69666564 2064656e 000a6425 41564e49     defined %d..INVA
  4077c4:	2044494c 4e494f50 0a524554 00000000     LID POINTER.....
  4077d4:	41564e49 2044494c 44495353 0000000a     INVALID SSID....
  4077e4:	41564e49 2044494c 000a4843 41564e49     INVALID CH..INVA
  4077f4:	2044494c 50434844 52455320 20524556     LID DHCP SERVER 
  407804:	000a5049 41564e49 2044494c 2059454b     IP..INVALID KEY 
  407814:	45444e49 00000a58 41564e49 2044494c     INDEX...INVALID 
  407824:	2059454b 455a4953 0000000a 41564e49     KEY SIZE....INVA
  407834:	2044494c 20504557 0a59454b 00000000     LID WEP KEY.....
  407844:	41564e49 2044494c 48545541 49544e45     INVALID AUTHENTI
  407854:	49544143 4d204e4f 0a45444f 00000000     CATION MODE.....
  407864:	6d726946 65726177 72657620 3a202020     Firmware ver   :
  407874:	2e752520 252e7525 00000a75 206e694d      %u.%u.%u...Min 
  407884:	76697264 76207265 3a207265 2e752520     driver ver : %u.
  407894:	252e7525 00000a75 72727543 69726420     %u.%u...Curr dri
  4078a4:	20726576 3a726576 2e752520 252e7525     ver ver: %u.%u.%
  4078b4:	00000a75 6d73694d 68637461 72694620     u...Mismatch Fir
  4078c4:	7277616d 65562065 6f697372 00000a6e     mawre Version...
  4078d4:	2079654b 6e207369 7620746f 64696c61     Key is not valid
  4078e4:	0000000a 61766e49 2064696c 0a79654b     ....Invalid Key.
  4078f4:	00000000 44495353 4e454c20 564e4920     ....SSID LEN INV
  407904:	44494c41 0000000a 49204843 4c41564e     ALID....CH INVAL
  407914:	000a4449 61766e49 2064696c 20706557     ID..Invalid Wep 
  407924:	2079656b 65646e69 64252078 0000000a     key index %d....
  407934:	61766e49 2064696c 20706557 2079656b     Invalid Wep key 
  407944:	676e656c 25206874 00000a64 6f636e49     length %d...Inco
  407954:	63657272 53502074 656b204b 656c2079     rrect PSK key le
  407964:	6874676e 0000000a 65646e75 656e6966     ngth....undefine
  407974:	65732064 79742063 000a6570 41564e49     d sec type..INVA
  407984:	2044494c 6f206f4e 63732066 73206e61     LID No of scan s
  407994:	73746f6c 00000a21 41564e49 2044494c     lots!...INVALID 
  4079a4:	6e616373 6f6c7320 69742074 0a21656d     scan slot time!.
  4079b4:	00000000 41564e49 2044494c 6f206f4e     ....INVALID No o
  4079c4:	72702066 2065626f 75716572 73747365     f probe requests
  4079d4:	72657020 61637320 6c73206e 000a746f      per scan slot..
  4079e4:	41564e49 2044494c 49535352 72687420     INVALID RSSI thr
  4079f4:	6f687365 2520646c 000a2064 5f53505f     eshold %d .._PS_
  407a04:	56524553 205f5245 6e207369 6420746f     SERVER_ is not d
  407a14:	6e696665 000a6465 7473694c 63206e65     efined..Listen c
  407a24:	6e6e6168 73206c65 6c756f68 6e6f2064     hannel should on
  407a34:	6220796c 2c312065 6f203620 31312072     ly be 1, 6 or 11
  407a44:	0000000a 45574f50 41532052 25204556     ....POWER SAVE %
  407a54:	00000a64 41564e49 2044494c 414d4f44     d...INVALID DOMA
  407a64:	4e204e49 0a454d41 00000000 474e5250     IN NAME.....PRNG
  407a74:	66754220 20726566 65637865 64656465      Buffer exceeded
  407a84:	78616d20 6d756d69 7a697320 64252065      maximum size %d
  407a94:	20726f20 4c4c554e 66754220 0a726566      or NULL Buffer.
  407aa4:	00000000                                ....

00407aa8 <__FUNCTION__.8771>:
  407aa8:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

00407ab8 <__FUNCTION__.8945>:
  407ab8:	5f6d326d 69666977 6174735f 705f7472     m2m_wifi_start_p
  407ac8:	69766f72 6e6f6973 646f6d5f 00000065     rovision_mode...

00407ad8 <__FUNCTION__.8678>:
  407ad8:	70696863 6965645f 0074696e              chip_deinit.

00407ae4 <__FUNCTION__.8584>:
  407ae4:	635f6d6e 656c6b6c 775f7373 00656b61     nm_clkless_wake.
  407af4:	20737542 6f727265 31282072 57202e29     Bus error (1). W
  407b04:	20656b61 66207075 656c6961 00000a64     ake up failed...
  407b14:	20737542 6f727265 32282072 57202e29     Bus error (2). W
  407b24:	20656b61 66207075 656c6961 00000a64     ake up failed...
  407b34:	636f6c63 7320736b 6c6c6974 46464f20     clocks still OFF
  407b44:	6157202e 7520656b 61662070 64656c69     . Wake up failed
  407b54:	0000000a 696d6e5b 61747320 3a5d7472     ....[nmi start]:
  407b64:	69616620 6572206c 72206461 30206765      fail read reg 0
  407b74:	31313178 2e2e2038 00000a2e 3a676572     x1118 ......reg:
  407b84:	2f207825 20782520 0000000a 6c696166     %x / %x ....fail
  407b94:	74206465 6564206f 696e692d 6c616974     ed to de-initial
  407ba4:	0a657a69 00000000 6f727245 68772072     ize.....Error wh
  407bb4:	20656c69 74697277 20676e69 0a676572     ile writing reg.
  407bc4:	00000000 6f727245 68772072 20656c69     ....Error while 
  407bd4:	64616572 20676e69 0a676572 00000000     reading reg.....
  407be4:	6c75705b 5f70756c 6c727463 66203a5d     [pullup_ctrl]: f
  407bf4:	656c6961 6f742064 61657220 00000a64     ailed to read...
  407c04:	6c75705b 5f70756c 6c727463 66203a5d     [pullup_ctrl]: f
  407c14:	656c6961 6f742064 69727720 000a6574     ailed to write..
  407c24:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
  407c34:	6e69206c 62207469 000a7375 70696843     l init bus..Chip
  407c44:	20444920 0a786c25 00000000 6c696166      ID %lx.....fail
  407c54:	74206465 6e65206f 656c6261 746e6920     ed to enable int
  407c64:	75727265 2e737470 00000a2e 696d6e5b     errupts.....[nmi
  407c74:	6f747320 203a5d70 70696863 6965645f      stop]: chip_dei
  407c84:	2074696e 6c696166 0000000a 696d6e5b     nit fail....[nmi
  407c94:	6f747320 203a5d70 20495053 73616c66      stop]: SPI flas
  407ca4:	69642068 6c626173 61662065 000a6c69     h disable fail..
  407cb4:	696d6e5b 6f747320 203a5d70 6c696166     [nmi stop]: fail
  407cc4:	696e6920 75622074 00000a73               init bus...

00407cd0 <__FUNCTION__.8665>:
  407cd0:	645f6d6e 695f7672 0074696e              nm_drv_init.

00407cdc <__FUNCTION__.8672>:
  407cdc:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...

00407cec <__FUNCTION__.8073>:
  407cec:	5f697073 61746164 6165725f 00000064     spi_data_read...

00407cfc <crc7_syndrome_table>:
  407cfc:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
  407d0c:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
  407d1c:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
  407d2c:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
  407d3c:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
  407d4c:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
  407d5c:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
  407d6c:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
  407d7c:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
  407d8c:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
  407d9c:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
  407dac:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
  407dbc:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
  407dcc:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
  407ddc:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
  407dec:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy

00407dfc <__FUNCTION__.8140>:
  407dfc:	735f6d6e 695f6970 0074696e              nm_spi_init.

00407e08 <__FUNCTION__.8088>:
  407e08:	5f697073 61746164 6972775f 00006574     spi_data_write..

00407e18 <__FUNCTION__.8123>:
  407e18:	735f6d6e 725f6970 00646165 696d6e5b     nm_spi_read.[nmi
  407e28:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  407e38:	65722064 6e6f7073 72206573 2c646165     d response read,
  407e48:	73756220 72726520 2e2e726f 00000a2e      bus error......
  407e58:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  407e68:	61642064 72206174 6f707365 2065736e     d data response 
  407e78:	64616572 7562202c 72652073 2e726f72     read, bus error.
  407e88:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  407e98:	656c6961 61642064 72206174 6f707365     ailed data respo
  407ea8:	2065736e 64616572 282e2e2e 78323025     nse read...(%02x
  407eb8:	00000a29 696d6e5b 69707320 46203a5d     )...[nmi spi]: F
  407ec8:	656c6961 61642064 62206174 6b636f6c     ailed data block
  407ed8:	61657220 62202c64 65207375 726f7272      read, bus error
  407ee8:	0a2e2e2e 00000000 696d6e5b 69707320     ........[nmi spi
  407ef8:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
  407f08:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
  407f18:	65207375 726f7272 0a2e2e2e 00000000     us error........
  407f28:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  407f38:	6d632064 72772064 2c657469 73756220     d cmd write, bus
  407f48:	72726520 2e2e726f 00000a2e 696d6e5b      error......[nmi
  407f58:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  407f68:	77202c64 65746972 67657220 30252820     d, write reg (%0
  407f78:	2e297838 000a2e2e 696d6e5b 69707320     8x).....[nmi spi
  407f88:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
  407f98:	6e6f7073 202c6573 74697277 65722065     sponse, write re
  407fa8:	25282067 29783830 0a2e2e2e 00000000     g (%08x)........
  407fb8:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  407fc8:	6d632064 72202c64 20646165 20676572     d cmd, read reg 
  407fd8:	38302528 2e2e2978 00000a2e 696d6e5b     (%08x)......[nmi
  407fe8:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  407ff8:	65722064 6e6f7073 202c6573 64616572     d response, read
  408008:	67657220 30252820 2e297838 000a2e2e      reg (%08x).....
  408018:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  408028:	61642064 72206174 2e646165 000a2e2e     d data read.....
  408038:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  408048:	6e692064 6e726574 72206c61 20646165     d internal read 
  408058:	746f7270 6c6f636f 74697720 52432068     protocol with CR
  408068:	6e6f2043 6572202c 69727974 7720676e     C on, retyring w
  408078:	20687469 20435243 2e66666f 000a2e2e     ith CRC off.....
  408088:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  408098:	6e692064 6e726574 72206c61 20646165     d internal read 
  4080a8:	746f7270 6c6f636f 0a2e2e2e 00000000     protocol........
  4080b8:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  4080c8:	6e692064 6e726574 77206c61 65746972     d internal write
  4080d8:	6f727020 6f636f74 6572206c 2e2e2e67      protocol reg...
  4080e8:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  4080f8:	206c6961 20646d63 64616572 69686320     ail cmd read chi
  408108:	64692070 0a2e2e2e 00000000 696d6e5b     p id........[nmi
  408118:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  408128:	72202c64 20646165 636f6c62 2528206b     d, read block (%
  408138:	29783830 0a2e2e2e 00000000 696d6e5b     08x)........[nmi
  408148:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  408158:	65722064 6e6f7073 202c6573 64616572     d response, read
  408168:	6f6c6220 28206b63 78383025 2e2e2e29      block (%08x)...
  408178:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  408188:	656c6961 6c622064 206b636f 61746164     ailed block data
  408198:	61657220 2e2e2e64 0000000a 696d6e5b      read.......[nmi
  4081a8:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  4081b8:	77202c64 65746972 6f6c6220 28206b63     d, write block (
  4081c8:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
  4081d8:	69707320 203a5d20 6c696146 63206465      spi ]: Failed c
  4081e8:	7220646d 6f707365 2c65736e 69727720     md response, wri
  4081f8:	62206574 6b636f6c 30252820 2e297838     te block (%08x).
  408208:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  408218:	656c6961 61642064 62206174 6b636f6c     ailed data block
  408228:	646d6320 69727720 202c6574 20737562      cmd write, bus 
  408238:	6f727265 2e2e2e72 0000000a 696d6e5b     error.......[nmi
  408248:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
  408258:	62206174 6b636f6c 69727720 202c6574     ta block write, 
  408268:	20737562 6f727265 2e2e2e72 0000000a     bus error.......
  408278:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  408288:	61642064 62206174 6b636f6c 63726320     d data block crc
  408298:	69727720 202c6574 20737562 6f727265      write, bus erro
  4082a8:	2e2e2e72 0000000a 696d6e5b 69707320     r.......[nmi spi
  4082b8:	46203a5d 656c6961 6c622064 206b636f     ]: Failed block 
  4082c8:	61746164 69727720 2e2e6574 00000a2e     data write......

004082d8 <__FUNCTION__.8098>:
  4082d8:	5f697073 74697277 65725f65 00000067     spi_write_reg...

004082e8 <__FUNCTION__.8049>:
  4082e8:	5f697073 00646d63                       spi_cmd.

004082f0 <__FUNCTION__.8106>:
  4082f0:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

00408300 <__FUNCTION__.8057>:
  408300:	5f697073 5f646d63 00707372              spi_cmd_rsp.

0040830c <__FUNCTION__.8115>:
  40830c:	5f697073 64616572 6765725f 00000000     spi_read_reg....
  40831c:	52524528 75432952 6e657272 253c2074     (ERRR)Current <%
  40832c:	000a3e64 20494e53 65637845 20736465     d>..SNI Exceeds 
  40833c:	2078614d 676e654c 000a6874 6e6b6e55     Max Length..Unkn
  40834c:	206e776f 204c5353 6b636f53 4f207465     own SSL Socket O
  40835c:	6f697470 6425206e 0000000a 20746f4e     ption %d....Not 
  40836c:	204c5353 6b636f53 000a7465              SSL Socket..

00408378 <gacHttpProvDomainName>:
  408378:	69666977 666e6f43 632e6769 00006d6f     wifiConfig.com..
  408388:	54534f48 20504920 7830203a 00005825     HOST IP : 0x%X..
  408398:	6f736572 5f65766c 203a6263 49207325     resolve_cb: %s I
  4083a8:	64612050 73657264 73692073 2e642520     P address is %d.
  4083b8:	252e6425 64252e64 0a0d0a0d 00000000     %d.%d.%d........
  4083c8:	20544547 6174732f 2f636974 74786574     GET /static/text
  4083d8:	7365742f 742e6574 00007478 6b636f73     /teste.txt..sock
  4083e8:	635f7465 63203a62 656e6e6f 65207463     et_cb: connect e
  4083f8:	726f7272 000a0d21 6b636f73 635f7465     rror!...socket_c
  408408:	72203a62 20766365 6f727265 0a0d2172     b: recv error!..
  408418:	00000000 69666977 3a62635f 4d324d20     ....wifi_cb: M2M
  408428:	4649575f 4f435f49 43454e4e 0d444554     _WIFI_CONNECTED.
  408438:	0000000a 69666977 3a62635f 4d324d20     ....wifi_cb: M2M
  408448:	4649575f 49445f49 4e4f4353 5443454e     _WIFI_DISCONNECT
  408458:	0a0d4445 00000000 69666977 3a62635f     ED......wifi_cb:
  408468:	20504920 72646461 20737365 25207369      IP address is %
  408478:	75252e75 2e75252e 0a0d7525 00000000     u.%u.%u.%u......
  408488:	69666977 3a62635f 4d324d20 4649575f     wifi_cb: M2M_WIF
  408498:	45525f49 505f5053 49564f52 4e4f4953     I_RESP_PROVISION
  4084a8:	464e495f 000a0d4f 69666977 3a62635f     _INFO...wifi_cb:
  4084b8:	6f727020 69736976 66206e6f 656c6961      provision faile
  4084c8:	0a0d2164 00000000 57202d2d 31434e49     d!......-- WINC1
  4084d8:	20303035 74616577 20726568 65696c63     500 weather clie
  4084e8:	6520746e 706d6178 2d20656c 2d0a0d2d     nt example --..-
  4084f8:	4153202d 3037454d 4c50582d 2d2d2044     - SAME70-XPLD --
  408508:	2d2d0a0d 6d6f4320 656c6970 4d203a64     ..-- Compiled: M
  408518:	20207961 30322033 32203731 31343a30     ay  3 2017 20:41
  408528:	2030303a 0a0d2d2d 00000000 6e69616d     :00 --......main
  408538:	326d203a 69775f6d 695f6966 2074696e     : m2m_wifi_init 
  408548:	6c6c6163 72726520 2821726f 0d296425     call error!(%d).
  408558:	0000000a 69666977 666e6f43 632e6769     ....wifiConfig.c
  408568:	00006d6f 72500a0d 7369766f 206e6f69     om....Provision 
  408578:	65646f4d 61747320 64657472 430a0d2e     Mode started...C
  408588:	656e6e6f 74207463 255b206f 76205d73     onnect to [%s] v
  408598:	41206169 73255b50 6e61205d 69662064     ia AP[%s] and fi
  4085a8:	75206c6c 68742070 61702065 0d2e6567     ll up the page..
  4085b8:	000a0d0a 6e69616d 6166203a 64656c69     ....main: failed
  4085c8:	206f7420 61657263 54206574 63205043      to create TCP c
  4085d8:	6e65696c 6f732074 74656b63 72726520     lient socket err
  4085e8:	0d21726f 0000000a 6e69616d 6166203a     or!.....main: fa
  4085f8:	64656c69 206f7420 6e6e6f63 20746365     iled to connect 
  408608:	6b636f73 65207465 726f7272 000a0d21     socket error!...
  408618:	00000043                                C...

0040861c <_global_impure_ptr>:
  40861c:	20400090                                ..@ 

00408620 <zeroes.6993>:
  408620:	30303030 30303030 30303030 30303030     0000000000000000
  408630:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  408640:	00000000 33323130 37363534 62613938     ....0123456789ab
  408650:	66656463 00000000 6c756e28 0000296c     cdef....(null)..

00408660 <blanks.6992>:
  408660:	20202020 20202020 20202020 20202020                     

00408670 <_init>:
  408670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408672:	bf00      	nop
  408674:	bcf8      	pop	{r3, r4, r5, r6, r7}
  408676:	bc08      	pop	{r3}
  408678:	469e      	mov	lr, r3
  40867a:	4770      	bx	lr

0040867c <__init_array_start>:
  40867c:	00405745 	.word	0x00405745

00408680 <__frame_dummy_init_array_entry>:
  408680:	00400165                                e.@.

00408684 <_fini>:
  408684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408686:	bf00      	nop
  408688:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40868a:	bc08      	pop	{r3}
  40868c:	469e      	mov	lr, r3
  40868e:	4770      	bx	lr

00408690 <__fini_array_start>:
  408690:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
2040000a:	bf00      	nop

2040000c <egstrNmBusCapabilities>:
2040000c:	1000 0000                                   ....

20400010 <clk_status_reg_adr>:
20400010:	000f 0000                                   ....

20400014 <g_interrupt_enabled>:
20400014:	0001 0000                                   ....

20400018 <SystemCoreClock>:
20400018:	0900 003d                                   ..=.

2040001c <tcp_client_socket>:
2040001c:	00ff 0000                                   ....

20400020 <gacDeviceName>:
20400020:	6f43 706d 7475 6361 6f61 6d45 6162 6372     ComputacaoEmbarc
20400030:	6461 0061                                   ada.

20400034 <gstrM2MAPConfig>:
20400034:	6f43 706d 7475 6361 6f61 6d45 6162 6372     ComputacaoEmbarc
20400044:	6461 0061 0000 0000 0000 0000 0000 0000     ada.............
20400054:	0100 0a00 3231 3433 3635 3837 3039 0000     ....1234567890..
	...
20400070:	0000 0100 0000 0000 0000 0000               ............

2040007c <server_host_name>:
2040007c:	3731 2e32 3032 312e 2e30 0037               172.20.10.7.

20400088 <gau8MacAddr>:
20400088:	f0f8 4505 84d4 0000                         ...E....

20400090 <impure_data>:
20400090:	0000 0000 037c 2040 03e4 2040 044c 2040     ....|.@ ..@ L.@ 
	...
204000c4:	8618 0040 0000 0000 0000 0000 0000 0000     ..@.............
	...
20400138:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20400148:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

204004b8 <_impure_ptr>:
204004b8:	0090 2040                                   ..@ 

204004bc <lc_ctype_charset>:
204004bc:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

204004dc <__mb_cur_max>:
204004dc:	0001 0000                                   ....

204004e0 <__malloc_av_>:
	...
204004e8:	04e0 2040 04e0 2040 04e8 2040 04e8 2040     ..@ ..@ ..@ ..@ 
204004f8:	04f0 2040 04f0 2040 04f8 2040 04f8 2040     ..@ ..@ ..@ ..@ 
20400508:	0500 2040 0500 2040 0508 2040 0508 2040     ..@ ..@ ..@ ..@ 
20400518:	0510 2040 0510 2040 0518 2040 0518 2040     ..@ ..@ ..@ ..@ 
20400528:	0520 2040 0520 2040 0528 2040 0528 2040      .@  .@ (.@ (.@ 
20400538:	0530 2040 0530 2040 0538 2040 0538 2040     0.@ 0.@ 8.@ 8.@ 
20400548:	0540 2040 0540 2040 0548 2040 0548 2040     @.@ @.@ H.@ H.@ 
20400558:	0550 2040 0550 2040 0558 2040 0558 2040     P.@ P.@ X.@ X.@ 
20400568:	0560 2040 0560 2040 0568 2040 0568 2040     `.@ `.@ h.@ h.@ 
20400578:	0570 2040 0570 2040 0578 2040 0578 2040     p.@ p.@ x.@ x.@ 
20400588:	0580 2040 0580 2040 0588 2040 0588 2040     ..@ ..@ ..@ ..@ 
20400598:	0590 2040 0590 2040 0598 2040 0598 2040     ..@ ..@ ..@ ..@ 
204005a8:	05a0 2040 05a0 2040 05a8 2040 05a8 2040     ..@ ..@ ..@ ..@ 
204005b8:	05b0 2040 05b0 2040 05b8 2040 05b8 2040     ..@ ..@ ..@ ..@ 
204005c8:	05c0 2040 05c0 2040 05c8 2040 05c8 2040     ..@ ..@ ..@ ..@ 
204005d8:	05d0 2040 05d0 2040 05d8 2040 05d8 2040     ..@ ..@ ..@ ..@ 
204005e8:	05e0 2040 05e0 2040 05e8 2040 05e8 2040     ..@ ..@ ..@ ..@ 
204005f8:	05f0 2040 05f0 2040 05f8 2040 05f8 2040     ..@ ..@ ..@ ..@ 
20400608:	0600 2040 0600 2040 0608 2040 0608 2040     ..@ ..@ ..@ ..@ 
20400618:	0610 2040 0610 2040 0618 2040 0618 2040     ..@ ..@ ..@ ..@ 
20400628:	0620 2040 0620 2040 0628 2040 0628 2040      .@  .@ (.@ (.@ 
20400638:	0630 2040 0630 2040 0638 2040 0638 2040     0.@ 0.@ 8.@ 8.@ 
20400648:	0640 2040 0640 2040 0648 2040 0648 2040     @.@ @.@ H.@ H.@ 
20400658:	0650 2040 0650 2040 0658 2040 0658 2040     P.@ P.@ X.@ X.@ 
20400668:	0660 2040 0660 2040 0668 2040 0668 2040     `.@ `.@ h.@ h.@ 
20400678:	0670 2040 0670 2040 0678 2040 0678 2040     p.@ p.@ x.@ x.@ 
20400688:	0680 2040 0680 2040 0688 2040 0688 2040     ..@ ..@ ..@ ..@ 
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 
20400848:	0840 2040 0840 2040 0848 2040 0848 2040     @.@ @.@ H.@ H.@ 
20400858:	0850 2040 0850 2040 0858 2040 0858 2040     P.@ P.@ X.@ X.@ 
20400868:	0860 2040 0860 2040 0868 2040 0868 2040     `.@ `.@ h.@ h.@ 
20400878:	0870 2040 0870 2040 0878 2040 0878 2040     p.@ p.@ x.@ x.@ 
20400888:	0880 2040 0880 2040 0888 2040 0888 2040     ..@ ..@ ..@ ..@ 
20400898:	0890 2040 0890 2040 0898 2040 0898 2040     ..@ ..@ ..@ ..@ 
204008a8:	08a0 2040 08a0 2040 08a8 2040 08a8 2040     ..@ ..@ ..@ ..@ 
204008b8:	08b0 2040 08b0 2040 08b8 2040 08b8 2040     ..@ ..@ ..@ ..@ 
204008c8:	08c0 2040 08c0 2040 08c8 2040 08c8 2040     ..@ ..@ ..@ ..@ 
204008d8:	08d0 2040 08d0 2040 08d8 2040 08d8 2040     ..@ ..@ ..@ ..@ 

204008e8 <__malloc_trim_threshold>:
204008e8:	0000 0002                                   ....

204008ec <__malloc_sbrk_base>:
204008ec:	ffff ffff                                   ....

204008f0 <__wctomb>:
204008f0:	6f41 0040                                   Ao@.
